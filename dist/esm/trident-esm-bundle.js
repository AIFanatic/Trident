var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module) => {
  return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
};

// node_modules/trident-physx-js-webidl/dist/trident-physx-js-webidl.wasm.js
var require_trident_physx_js_webidl_wasm = __commonJS({
  "node_modules/trident-physx-js-webidl/dist/trident-physx-js-webidl.wasm.js"(exports, module) {
    var PhysX9 = function() {
      var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
      return function(PhysXInstance) {
        PhysXInstance = PhysX9 || {};
        var Module = typeof PhysX9 !== "undefined" ? PhysX9 : {};
        var readyPromiseResolve, readyPromiseReject;
        Module["ready"] = new Promise(function(resolve, reject) {
          readyPromiseResolve = resolve;
          readyPromiseReject = reject;
        });
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_main")) {
          Object.defineProperty(Module["ready"], "_main", { configurable: true, get: function() {
            abort("You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_main", { configurable: true, set: function() {
            abort("You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_stackSave")) {
          Object.defineProperty(Module["ready"], "_stackSave", { configurable: true, get: function() {
            abort("You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_stackSave", { configurable: true, set: function() {
            abort("You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_stackRestore")) {
          Object.defineProperty(Module["ready"], "_stackRestore", { configurable: true, get: function() {
            abort("You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_stackRestore", { configurable: true, set: function() {
            abort("You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_stackAlloc")) {
          Object.defineProperty(Module["ready"], "_stackAlloc", { configurable: true, get: function() {
            abort("You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_stackAlloc", { configurable: true, set: function() {
            abort("You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___data_end")) {
          Object.defineProperty(Module["ready"], "___data_end", { configurable: true, get: function() {
            abort("You are getting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___data_end", { configurable: true, set: function() {
            abort("You are setting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___wasm_call_ctors")) {
          Object.defineProperty(Module["ready"], "___wasm_call_ctors", { configurable: true, get: function() {
            abort("You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___wasm_call_ctors", { configurable: true, set: function() {
            abort("You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "___errno_location")) {
          Object.defineProperty(Module["ready"], "___errno_location", { configurable: true, get: function() {
            abort("You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "___errno_location", { configurable: true, set: function() {
            abort("You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_malloc")) {
          Object.defineProperty(Module["ready"], "_malloc", { configurable: true, get: function() {
            abort("You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_malloc", { configurable: true, set: function() {
            abort("You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_free")) {
          Object.defineProperty(Module["ready"], "_free", { configurable: true, get: function() {
            abort("You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_free", { configurable: true, set: function() {
            abort("You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_setThrew")) {
          Object.defineProperty(Module["ready"], "_setThrew", { configurable: true, get: function() {
            abort("You are getting _setThrew on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_setThrew", { configurable: true, set: function() {
            abort("You are setting _setThrew on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_htons")) {
          Object.defineProperty(Module["ready"], "_htons", { configurable: true, get: function() {
            abort("You are getting _htons on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_htons", { configurable: true, set: function() {
            abort("You are setting _htons on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_ntohs")) {
          Object.defineProperty(Module["ready"], "_ntohs", { configurable: true, get: function() {
            abort("You are getting _ntohs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_ntohs", { configurable: true, set: function() {
            abort("You are setting _ntohs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_memcpy")) {
          Object.defineProperty(Module["ready"], "_memcpy", { configurable: true, get: function() {
            abort("You are getting _memcpy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_memcpy", { configurable: true, set: function() {
            abort("You are setting _memcpy on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_htonl")) {
          Object.defineProperty(Module["ready"], "_htonl", { configurable: true, get: function() {
            abort("You are getting _htonl on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_htonl", { configurable: true, set: function() {
            abort("You are setting _htonl on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "_emscripten_main_thread_process_queued_calls")) {
          Object.defineProperty(Module["ready"], "_emscripten_main_thread_process_queued_calls", { configurable: true, get: function() {
            abort("You are getting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "_emscripten_main_thread_process_queued_calls", { configurable: true, set: function() {
            abort("You are setting _emscripten_main_thread_process_queued_calls on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        if (!Object.getOwnPropertyDescriptor(Module["ready"], "onRuntimeInitialized")) {
          Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, get: function() {
            abort("You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
          Object.defineProperty(Module["ready"], "onRuntimeInitialized", { configurable: true, set: function() {
            abort("You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
          } });
        }
        var moduleOverrides = {};
        var key;
        for (key in Module) {
          if (Module.hasOwnProperty(key)) {
            moduleOverrides[key] = Module[key];
          }
        }
        var arguments_ = [];
        var thisProgram = "./this.program";
        var quit_ = function(status, toThrow) {
          throw toThrow;
        };
        var ENVIRONMENT_IS_WEB = true;
        var ENVIRONMENT_IS_WORKER = false;
        var ENVIRONMENT_IS_NODE = false;
        var ENVIRONMENT_IS_SHELL = false;
        if (Module["ENVIRONMENT"]) {
          throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
        }
        var scriptDirectory = "";
        function locateFile(path) {
          if (Module["locateFile"]) {
            return Module["locateFile"](path, scriptDirectory);
          }
          return scriptDirectory + path;
        }
        var read_, readAsync, readBinary, setWindowTitle;
        if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
          if (ENVIRONMENT_IS_WORKER) {
            scriptDirectory = self.location.href;
          } else if (document.currentScript) {
            scriptDirectory = document.currentScript.src;
          }
          if (_scriptDir) {
            scriptDirectory = _scriptDir;
          }
          if (scriptDirectory.indexOf("blob:") !== 0) {
            scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
          } else {
            scriptDirectory = "";
          }
          if (!(typeof window === "object" || typeof importScripts === "function"))
            throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
          {
            read_ = function shell_read(url) {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", url, false);
              xhr.send(null);
              return xhr.responseText;
            };
            if (ENVIRONMENT_IS_WORKER) {
              readBinary = function readBinary2(url) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                xhr.responseType = "arraybuffer";
                xhr.send(null);
                return new Uint8Array(xhr.response);
              };
            }
            readAsync = function readAsync2(url, onload, onerror) {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", url, true);
              xhr.responseType = "arraybuffer";
              xhr.onload = function xhr_onload() {
                if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                  onload(xhr.response);
                  return;
                }
                onerror();
              };
              xhr.onerror = onerror;
              xhr.send(null);
            };
          }
          setWindowTitle = function(title) {
            document.title = title;
          };
        } else {
          throw new Error("environment detection error");
        }
        var out = Module["print"] || console.log.bind(console);
        var err = Module["printErr"] || console.warn.bind(console);
        for (key in moduleOverrides) {
          if (moduleOverrides.hasOwnProperty(key)) {
            Module[key] = moduleOverrides[key];
          }
        }
        moduleOverrides = null;
        if (Module["thisProgram"])
          thisProgram = Module["thisProgram"];
        if (!Object.getOwnPropertyDescriptor(Module, "thisProgram"))
          Object.defineProperty(Module, "thisProgram", { configurable: true, get: function() {
            abort("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (Module["quit"])
          quit_ = Module["quit"];
        if (!Object.getOwnPropertyDescriptor(Module, "quit"))
          Object.defineProperty(Module, "quit", { configurable: true, get: function() {
            abort("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        assert(typeof Module["memoryInitializerPrefixURL"] === "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["pthreadMainPrefixURL"] === "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["cdInitializerPrefixURL"] === "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["filePackagePrefixURL"] === "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["read"] === "undefined", "Module.read option was removed (modify read_ in JS)");
        assert(typeof Module["readAsync"] === "undefined", "Module.readAsync option was removed (modify readAsync in JS)");
        assert(typeof Module["readBinary"] === "undefined", "Module.readBinary option was removed (modify readBinary in JS)");
        assert(typeof Module["setWindowTitle"] === "undefined", "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");
        assert(typeof Module["TOTAL_MEMORY"] === "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
        if (!Object.getOwnPropertyDescriptor(Module, "read"))
          Object.defineProperty(Module, "read", { configurable: true, get: function() {
            abort("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "readAsync"))
          Object.defineProperty(Module, "readAsync", { configurable: true, get: function() {
            abort("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "readBinary"))
          Object.defineProperty(Module, "readBinary", { configurable: true, get: function() {
            abort("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "setWindowTitle"))
          Object.defineProperty(Module, "setWindowTitle", { configurable: true, get: function() {
            abort("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        var IDBFS = "IDBFS is no longer included by default; build with -lidbfs.js";
        var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";
        var WORKERFS = "WORKERFS is no longer included by default; build with -lworkerfs.js";
        var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";
        var STACK_ALIGN = 16;
        function alignMemory(size, factor) {
          if (!factor)
            factor = STACK_ALIGN;
          return Math.ceil(size / factor) * factor;
        }
        function getNativeTypeSize(type) {
          switch (type) {
            case "i1":
            case "i8":
              return 1;
            case "i16":
              return 2;
            case "i32":
              return 4;
            case "i64":
              return 8;
            case "float":
              return 4;
            case "double":
              return 8;
            default: {
              if (type[type.length - 1] === "*") {
                return 4;
              } else if (type[0] === "i") {
                var bits = Number(type.substr(1));
                assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
                return bits / 8;
              } else {
                return 0;
              }
            }
          }
        }
        function warnOnce(text) {
          if (!warnOnce.shown)
            warnOnce.shown = {};
          if (!warnOnce.shown[text]) {
            warnOnce.shown[text] = 1;
            err(text);
          }
        }
        function convertJsFunctionToWasm(func, sig) {
          if (typeof WebAssembly.Function === "function") {
            var typeNames = {
              "i": "i32",
              "j": "i64",
              "f": "f32",
              "d": "f64"
            };
            var type = {
              parameters: [],
              results: sig[0] == "v" ? [] : [typeNames[sig[0]]]
            };
            for (var i = 1; i < sig.length; ++i) {
              type.parameters.push(typeNames[sig[i]]);
            }
            return new WebAssembly.Function(type, func);
          }
          var typeSection = [
            1,
            0,
            1,
            96
          ];
          var sigRet = sig.slice(0, 1);
          var sigParam = sig.slice(1);
          var typeCodes = {
            "i": 127,
            "j": 126,
            "f": 125,
            "d": 124
          };
          typeSection.push(sigParam.length);
          for (var i = 0; i < sigParam.length; ++i) {
            typeSection.push(typeCodes[sigParam[i]]);
          }
          if (sigRet == "v") {
            typeSection.push(0);
          } else {
            typeSection = typeSection.concat([1, typeCodes[sigRet]]);
          }
          typeSection[1] = typeSection.length - 2;
          var bytes = new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0
          ].concat(typeSection, [
            2,
            7,
            1,
            1,
            101,
            1,
            102,
            0,
            0,
            7,
            5,
            1,
            1,
            102,
            0,
            0
          ]));
          var module2 = new WebAssembly.Module(bytes);
          var instance = new WebAssembly.Instance(module2, {
            "e": {
              "f": func
            }
          });
          var wrappedFunc = instance.exports["f"];
          return wrappedFunc;
        }
        var freeTableIndexes = [];
        var functionsInTableMap;
        function addFunctionWasm(func, sig) {
          var table = wasmTable;
          if (!functionsInTableMap) {
            functionsInTableMap = new WeakMap();
            for (var i = 0; i < table.length; i++) {
              var item = table.get(i);
              if (item) {
                functionsInTableMap.set(item, i);
              }
            }
          }
          if (functionsInTableMap.has(func)) {
            return functionsInTableMap.get(func);
          }
          var ret;
          if (freeTableIndexes.length) {
            ret = freeTableIndexes.pop();
          } else {
            ret = table.length;
            try {
              table.grow(1);
            } catch (err2) {
              if (!(err2 instanceof RangeError)) {
                throw err2;
              }
              throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
            }
          }
          try {
            table.set(ret, func);
          } catch (err2) {
            if (!(err2 instanceof TypeError)) {
              throw err2;
            }
            assert(typeof sig !== "undefined", "Missing signature argument to addFunction");
            var wrapped = convertJsFunctionToWasm(func, sig);
            table.set(ret, wrapped);
          }
          functionsInTableMap.set(func, ret);
          return ret;
        }
        function removeFunctionWasm(index) {
          functionsInTableMap.delete(wasmTable.get(index));
          freeTableIndexes.push(index);
        }
        function addFunction(func, sig) {
          assert(typeof func !== "undefined");
          return addFunctionWasm(func, sig);
        }
        function removeFunction(index) {
          removeFunctionWasm(index);
        }
        function makeBigInt(low, high, unsigned) {
          return unsigned ? +(low >>> 0) + +(high >>> 0) * 4294967296 : +(low >>> 0) + +(high | 0) * 4294967296;
        }
        var tempRet0 = 0;
        var setTempRet0 = function(value) {
          tempRet0 = value;
        };
        var getTempRet0 = function() {
          return tempRet0;
        };
        function getCompilerSetting(name) {
          throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work";
        }
        var wasmBinary;
        if (Module["wasmBinary"])
          wasmBinary = Module["wasmBinary"];
        if (!Object.getOwnPropertyDescriptor(Module, "wasmBinary"))
          Object.defineProperty(Module, "wasmBinary", { configurable: true, get: function() {
            abort("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        var noExitRuntime;
        if (Module["noExitRuntime"])
          noExitRuntime = Module["noExitRuntime"];
        if (!Object.getOwnPropertyDescriptor(Module, "noExitRuntime"))
          Object.defineProperty(Module, "noExitRuntime", { configurable: true, get: function() {
            abort("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        if (typeof WebAssembly !== "object") {
          abort("no native wasm support detected");
        }
        function setValue(ptr, value, type, noSafe) {
          type = type || "i8";
          if (type.charAt(type.length - 1) === "*")
            type = "i32";
          switch (type) {
            case "i1":
              HEAP8[ptr >> 0] = value;
              break;
            case "i8":
              HEAP8[ptr >> 0] = value;
              break;
            case "i16":
              HEAP16[ptr >> 1] = value;
              break;
            case "i32":
              HEAP32[ptr >> 2] = value;
              break;
            case "i64":
              tempI64 = [value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
              break;
            case "float":
              HEAPF32[ptr >> 2] = value;
              break;
            case "double":
              HEAPF64[ptr >> 3] = value;
              break;
            default:
              abort("invalid type for setValue: " + type);
          }
        }
        function getValue(ptr, type, noSafe) {
          type = type || "i8";
          if (type.charAt(type.length - 1) === "*")
            type = "i32";
          switch (type) {
            case "i1":
              return HEAP8[ptr >> 0];
            case "i8":
              return HEAP8[ptr >> 0];
            case "i16":
              return HEAP16[ptr >> 1];
            case "i32":
              return HEAP32[ptr >> 2];
            case "i64":
              return HEAP32[ptr >> 2];
            case "float":
              return HEAPF32[ptr >> 2];
            case "double":
              return HEAPF64[ptr >> 3];
            default:
              abort("invalid type for getValue: " + type);
          }
          return null;
        }
        var wasmMemory;
        var wasmTable;
        var ABORT = false;
        var EXITSTATUS = 0;
        function assert(condition, text) {
          if (!condition) {
            abort("Assertion failed: " + text);
          }
        }
        function getCFunc(ident) {
          var func = Module["_" + ident];
          assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
          return func;
        }
        function ccall(ident, returnType, argTypes, args, opts) {
          var toC = {
            "string": function(str) {
              var ret2 = 0;
              if (str !== null && str !== void 0 && str !== 0) {
                var len = (str.length << 2) + 1;
                ret2 = stackAlloc(len);
                stringToUTF8(str, ret2, len);
              }
              return ret2;
            },
            "array": function(arr) {
              var ret2 = stackAlloc(arr.length);
              writeArrayToMemory(arr, ret2);
              return ret2;
            }
          };
          function convertReturnValue(ret2) {
            if (returnType === "string")
              return UTF8ToString(ret2);
            if (returnType === "boolean")
              return Boolean(ret2);
            return ret2;
          }
          var func = getCFunc(ident);
          var cArgs = [];
          var stack = 0;
          assert(returnType !== "array", 'Return type should not be "array".');
          if (args) {
            for (var i = 0; i < args.length; i++) {
              var converter = toC[argTypes[i]];
              if (converter) {
                if (stack === 0)
                  stack = stackSave();
                cArgs[i] = converter(args[i]);
              } else {
                cArgs[i] = args[i];
              }
            }
          }
          var ret = func.apply(null, cArgs);
          ret = convertReturnValue(ret);
          if (stack !== 0)
            stackRestore(stack);
          return ret;
        }
        function cwrap(ident, returnType, argTypes, opts) {
          return function() {
            return ccall(ident, returnType, argTypes, arguments, opts);
          };
        }
        var ALLOC_NORMAL = 0;
        var ALLOC_STACK = 1;
        function allocate(slab, allocator) {
          var ret;
          assert(typeof allocator === "number", "allocate no longer takes a type argument");
          assert(typeof slab !== "number", "allocate no longer takes a number as arg0");
          if (allocator == ALLOC_STACK) {
            ret = stackAlloc(slab.length);
          } else {
            ret = _malloc(slab.length);
          }
          if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret);
          } else {
            HEAPU8.set(new Uint8Array(slab), ret);
          }
          return ret;
        }
        var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
        function UTF8ArrayToString(heap, idx, maxBytesToRead) {
          var endIdx = idx + maxBytesToRead;
          var endPtr = idx;
          while (heap[endPtr] && !(endPtr >= endIdx))
            ++endPtr;
          if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
            return UTF8Decoder.decode(heap.subarray(idx, endPtr));
          } else {
            var str = "";
            while (idx < endPtr) {
              var u0 = heap[idx++];
              if (!(u0 & 128)) {
                str += String.fromCharCode(u0);
                continue;
              }
              var u1 = heap[idx++] & 63;
              if ((u0 & 224) == 192) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue;
              }
              var u2 = heap[idx++] & 63;
              if ((u0 & 240) == 224) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
              } else {
                if ((u0 & 248) != 240)
                  warnOnce("Invalid UTF-8 leading byte 0x" + u0.toString(16) + " encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!");
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
              }
              if (u0 < 65536) {
                str += String.fromCharCode(u0);
              } else {
                var ch = u0 - 65536;
                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
              }
            }
          }
          return str;
        }
        function UTF8ToString(ptr, maxBytesToRead) {
          return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
        }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
          if (!(maxBytesToWrite > 0))
            return 0;
          var startIdx = outIdx;
          var endIdx = outIdx + maxBytesToWrite - 1;
          for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343) {
              var u1 = str.charCodeAt(++i);
              u = 65536 + ((u & 1023) << 10) | u1 & 1023;
            }
            if (u <= 127) {
              if (outIdx >= endIdx)
                break;
              heap[outIdx++] = u;
            } else if (u <= 2047) {
              if (outIdx + 1 >= endIdx)
                break;
              heap[outIdx++] = 192 | u >> 6;
              heap[outIdx++] = 128 | u & 63;
            } else if (u <= 65535) {
              if (outIdx + 2 >= endIdx)
                break;
              heap[outIdx++] = 224 | u >> 12;
              heap[outIdx++] = 128 | u >> 6 & 63;
              heap[outIdx++] = 128 | u & 63;
            } else {
              if (outIdx + 3 >= endIdx)
                break;
              if (u >= 2097152)
                warnOnce("Invalid Unicode code point 0x" + u.toString(16) + " encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).");
              heap[outIdx++] = 240 | u >> 18;
              heap[outIdx++] = 128 | u >> 12 & 63;
              heap[outIdx++] = 128 | u >> 6 & 63;
              heap[outIdx++] = 128 | u & 63;
            }
          }
          heap[outIdx] = 0;
          return outIdx - startIdx;
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
          assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
          return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
        }
        function lengthBytesUTF8(str) {
          var len = 0;
          for (var i = 0; i < str.length; ++i) {
            var u = str.charCodeAt(i);
            if (u >= 55296 && u <= 57343)
              u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
            if (u <= 127)
              ++len;
            else if (u <= 2047)
              len += 2;
            else if (u <= 65535)
              len += 3;
            else
              len += 4;
          }
          return len;
        }
        function AsciiToString(ptr) {
          var str = "";
          while (1) {
            var ch = HEAPU8[ptr++ >> 0];
            if (!ch)
              return str;
            str += String.fromCharCode(ch);
          }
        }
        function stringToAscii(str, outPtr) {
          return writeAsciiToMemory(str, outPtr, false);
        }
        var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
        function UTF16ToString(ptr, maxBytesToRead) {
          assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
          var endPtr = ptr;
          var idx = endPtr >> 1;
          var maxIdx = idx + maxBytesToRead / 2;
          while (!(idx >= maxIdx) && HEAPU16[idx])
            ++idx;
          endPtr = idx << 1;
          if (endPtr - ptr > 32 && UTF16Decoder) {
            return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
          } else {
            var i = 0;
            var str = "";
            while (1) {
              var codeUnit = HEAP16[ptr + i * 2 >> 1];
              if (codeUnit == 0 || i == maxBytesToRead / 2)
                return str;
              ++i;
              str += String.fromCharCode(codeUnit);
            }
          }
        }
        function stringToUTF16(str, outPtr, maxBytesToWrite) {
          assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
          assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
          if (maxBytesToWrite === void 0) {
            maxBytesToWrite = 2147483647;
          }
          if (maxBytesToWrite < 2)
            return 0;
          maxBytesToWrite -= 2;
          var startPtr = outPtr;
          var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
          for (var i = 0; i < numCharsToWrite; ++i) {
            var codeUnit = str.charCodeAt(i);
            HEAP16[outPtr >> 1] = codeUnit;
            outPtr += 2;
          }
          HEAP16[outPtr >> 1] = 0;
          return outPtr - startPtr;
        }
        function lengthBytesUTF16(str) {
          return str.length * 2;
        }
        function UTF32ToString(ptr, maxBytesToRead) {
          assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
          var i = 0;
          var str = "";
          while (!(i >= maxBytesToRead / 4)) {
            var utf32 = HEAP32[ptr + i * 4 >> 2];
            if (utf32 == 0)
              break;
            ++i;
            if (utf32 >= 65536) {
              var ch = utf32 - 65536;
              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            } else {
              str += String.fromCharCode(utf32);
            }
          }
          return str;
        }
        function stringToUTF32(str, outPtr, maxBytesToWrite) {
          assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
          assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
          if (maxBytesToWrite === void 0) {
            maxBytesToWrite = 2147483647;
          }
          if (maxBytesToWrite < 4)
            return 0;
          var startPtr = outPtr;
          var endPtr = startPtr + maxBytesToWrite - 4;
          for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343) {
              var trailSurrogate = str.charCodeAt(++i);
              codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
            }
            HEAP32[outPtr >> 2] = codeUnit;
            outPtr += 4;
            if (outPtr + 4 > endPtr)
              break;
          }
          HEAP32[outPtr >> 2] = 0;
          return outPtr - startPtr;
        }
        function lengthBytesUTF32(str) {
          var len = 0;
          for (var i = 0; i < str.length; ++i) {
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 55296 && codeUnit <= 57343)
              ++i;
            len += 4;
          }
          return len;
        }
        function allocateUTF8(str) {
          var size = lengthBytesUTF8(str) + 1;
          var ret = _malloc(size);
          if (ret)
            stringToUTF8Array(str, HEAP8, ret, size);
          return ret;
        }
        function allocateUTF8OnStack(str) {
          var size = lengthBytesUTF8(str) + 1;
          var ret = stackAlloc(size);
          stringToUTF8Array(str, HEAP8, ret, size);
          return ret;
        }
        function writeStringToMemory(string, buffer2, dontAddNull) {
          warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
          var lastChar, end;
          if (dontAddNull) {
            end = buffer2 + lengthBytesUTF8(string);
            lastChar = HEAP8[end];
          }
          stringToUTF8(string, buffer2, Infinity);
          if (dontAddNull)
            HEAP8[end] = lastChar;
        }
        function writeArrayToMemory(array, buffer2) {
          assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
          HEAP8.set(array, buffer2);
        }
        function writeAsciiToMemory(str, buffer2, dontAddNull) {
          for (var i = 0; i < str.length; ++i) {
            assert(str.charCodeAt(i) === str.charCodeAt(i) & 255);
            HEAP8[buffer2++ >> 0] = str.charCodeAt(i);
          }
          if (!dontAddNull)
            HEAP8[buffer2 >> 0] = 0;
        }
        var PAGE_SIZE = 16384;
        var WASM_PAGE_SIZE = 65536;
        function alignUp(x, multiple) {
          if (x % multiple > 0) {
            x += multiple - x % multiple;
          }
          return x;
        }
        var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
        function updateGlobalBufferAndViews(buf) {
          buffer = buf;
          Module["HEAP8"] = HEAP8 = new Int8Array(buf);
          Module["HEAP16"] = HEAP16 = new Int16Array(buf);
          Module["HEAP32"] = HEAP32 = new Int32Array(buf);
          Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
          Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
          Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
          Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
          Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
        }
        var STACK_BASE = 5539072, STACKTOP = STACK_BASE, STACK_MAX = 296192;
        assert(STACK_BASE % 16 === 0, "stack must start aligned");
        var TOTAL_STACK = 5242880;
        if (Module["TOTAL_STACK"])
          assert(TOTAL_STACK === Module["TOTAL_STACK"], "the stack size can no longer be determined at runtime");
        var INITIAL_INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 268435456;
        if (!Object.getOwnPropertyDescriptor(Module, "INITIAL_MEMORY"))
          Object.defineProperty(Module, "INITIAL_MEMORY", { configurable: true, get: function() {
            abort("Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
          } });
        assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, "INITIAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_INITIAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
        assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray !== void 0 && Int32Array.prototype.set !== void 0, "JS engine does not provide full typed array support");
        if (Module["wasmMemory"]) {
          wasmMemory = Module["wasmMemory"];
        } else {
          wasmMemory = new WebAssembly.Memory({
            "initial": INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE,
            "maximum": INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
          });
        }
        if (wasmMemory) {
          buffer = wasmMemory.buffer;
        }
        INITIAL_INITIAL_MEMORY = buffer.byteLength;
        assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
        updateGlobalBufferAndViews(buffer);
        function writeStackCookie() {
          assert((STACK_MAX & 3) == 0);
          HEAPU32[(STACK_MAX >> 2) + 1] = 34821223;
          HEAPU32[(STACK_MAX >> 2) + 2] = 2310721022;
          HEAP32[0] = 1668509029;
        }
        function checkStackCookie() {
          if (ABORT)
            return;
          var cookie1 = HEAPU32[(STACK_MAX >> 2) + 1];
          var cookie2 = HEAPU32[(STACK_MAX >> 2) + 2];
          if (cookie1 != 34821223 || cookie2 != 2310721022) {
            abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" + cookie2.toString(16) + " " + cookie1.toString(16));
          }
          if (HEAP32[0] !== 1668509029)
            abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
        }
        (function() {
          var h16 = new Int16Array(1);
          var h8 = new Int8Array(h16.buffer);
          h16[0] = 25459;
          if (h8[0] !== 115 || h8[1] !== 99)
            throw "Runtime error: expected the system to be little-endian!";
        })();
        function abortFnPtrError(ptr, sig) {
          abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
        }
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATMAIN__ = [];
        var __ATEXIT__ = [];
        var __ATPOSTRUN__ = [];
        var runtimeInitialized = false;
        var runtimeExited = false;
        function preRun() {
          if (Module["preRun"]) {
            if (typeof Module["preRun"] == "function")
              Module["preRun"] = [Module["preRun"]];
            while (Module["preRun"].length) {
              addOnPreRun(Module["preRun"].shift());
            }
          }
          callRuntimeCallbacks(__ATPRERUN__);
        }
        function initRuntime() {
          checkStackCookie();
          assert(!runtimeInitialized);
          runtimeInitialized = true;
          callRuntimeCallbacks(__ATINIT__);
        }
        function preMain() {
          checkStackCookie();
          callRuntimeCallbacks(__ATMAIN__);
        }
        function exitRuntime() {
          checkStackCookie();
          runtimeExited = true;
        }
        function postRun() {
          checkStackCookie();
          if (Module["postRun"]) {
            if (typeof Module["postRun"] == "function")
              Module["postRun"] = [Module["postRun"]];
            while (Module["postRun"].length) {
              addOnPostRun(Module["postRun"].shift());
            }
          }
          callRuntimeCallbacks(__ATPOSTRUN__);
        }
        function addOnPreRun(cb) {
          __ATPRERUN__.unshift(cb);
        }
        function addOnInit(cb) {
          __ATINIT__.unshift(cb);
        }
        function addOnPreMain(cb) {
          __ATMAIN__.unshift(cb);
        }
        function addOnExit(cb) {
        }
        function addOnPostRun(cb) {
          __ATPOSTRUN__.unshift(cb);
        }
        assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        var runDependencies = 0;
        var runDependencyWatcher = null;
        var dependenciesFulfilled = null;
        var runDependencyTracking = {};
        function getUniqueRunDependency(id) {
          var orig = id;
          while (1) {
            if (!runDependencyTracking[id])
              return id;
            id = orig + Math.random();
          }
        }
        function addRunDependency(id) {
          runDependencies++;
          if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies);
          }
          if (id) {
            assert(!runDependencyTracking[id]);
            runDependencyTracking[id] = 1;
            if (runDependencyWatcher === null && typeof setInterval !== "undefined") {
              runDependencyWatcher = setInterval(function() {
                if (ABORT) {
                  clearInterval(runDependencyWatcher);
                  runDependencyWatcher = null;
                  return;
                }
                var shown = false;
                for (var dep in runDependencyTracking) {
                  if (!shown) {
                    shown = true;
                    err("still waiting on run dependencies:");
                  }
                  err("dependency: " + dep);
                }
                if (shown) {
                  err("(end of list)");
                }
              }, 1e4);
            }
          } else {
            err("warning: run dependency added without ID");
          }
        }
        function removeRunDependency(id) {
          runDependencies--;
          if (Module["monitorRunDependencies"]) {
            Module["monitorRunDependencies"](runDependencies);
          }
          if (id) {
            assert(runDependencyTracking[id]);
            delete runDependencyTracking[id];
          } else {
            err("warning: run dependency removed without ID");
          }
          if (runDependencies == 0) {
            if (runDependencyWatcher !== null) {
              clearInterval(runDependencyWatcher);
              runDependencyWatcher = null;
            }
            if (dependenciesFulfilled) {
              var callback = dependenciesFulfilled;
              dependenciesFulfilled = null;
              callback();
            }
          }
        }
        Module["preloadedImages"] = {};
        Module["preloadedAudios"] = {};
        function abort(what) {
          if (Module["onAbort"]) {
            Module["onAbort"](what);
          }
          what += "";
          err(what);
          ABORT = true;
          EXITSTATUS = 1;
          var output = "abort(" + what + ") at " + stackTrace();
          what = output;
          var e = new WebAssembly.RuntimeError(what);
          readyPromiseReject(e);
          throw e;
        }
        var FS = {
          error: function() {
            abort("Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1");
          },
          init: function() {
            FS.error();
          },
          createDataFile: function() {
            FS.error();
          },
          createPreloadedFile: function() {
            FS.error();
          },
          createLazyFile: function() {
            FS.error();
          },
          open: function() {
            FS.error();
          },
          mkdev: function() {
            FS.error();
          },
          registerDevice: function() {
            FS.error();
          },
          analyzePath: function() {
            FS.error();
          },
          loadFilesFromDB: function() {
            FS.error();
          },
          ErrnoError: function ErrnoError() {
            FS.error();
          }
        };
        Module["FS_createDataFile"] = FS.createDataFile;
        Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
        function hasPrefix(str, prefix) {
          return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
        }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
          return hasPrefix(filename, dataURIPrefix);
        }
        var fileURIPrefix = "file://";
        function isFileURI(filename) {
          return hasPrefix(filename, fileURIPrefix);
        }
        function createExportWrapper(name, fixedasm) {
          return function() {
            var displayName = name;
            var asm2 = fixedasm;
            if (!fixedasm) {
              asm2 = Module["asm"];
            }
            assert(runtimeInitialized, "native function `" + displayName + "` called before runtime initialization");
            assert(!runtimeExited, "native function `" + displayName + "` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
            if (!asm2[name]) {
              assert(asm2[name], "exported native function `" + displayName + "` not found");
            }
            return asm2[name].apply(null, arguments);
          };
        }
        var wasmBinaryFile = "physx-js-webidl.wasm.wasm";
        if (!isDataURI(wasmBinaryFile)) {
          wasmBinaryFile = locateFile(wasmBinaryFile);
        }
        function getBinary() {
          try {
            if (wasmBinary) {
              return new Uint8Array(wasmBinary);
            }
            if (readBinary) {
              return readBinary(wasmBinaryFile);
            } else {
              throw "both async and sync fetching of the wasm failed";
            }
          } catch (err2) {
            abort(err2);
          }
        }
        function getBinaryPromise() {
          if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function") {
            return fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
              if (!response["ok"]) {
                throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
              }
              return response["arrayBuffer"]();
            }).catch(function() {
              return getBinary();
            });
          }
          return Promise.resolve().then(getBinary);
        }
        function createWasm() {
          var info = {
            "env": asmLibraryArg,
            "wasi_snapshot_preview1": asmLibraryArg
          };
          function receiveInstance(instance, module2) {
            var exports3 = instance.exports;
            Module["asm"] = exports3;
            wasmTable = Module["asm"]["__indirect_function_table"];
            assert(wasmTable, "table not found in wasm exports");
            removeRunDependency("wasm-instantiate");
          }
          addRunDependency("wasm-instantiate");
          var trueModule = Module;
          function receiveInstantiatedSource(output) {
            assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
            trueModule = null;
            receiveInstance(output["instance"]);
          }
          function instantiateArrayBuffer(receiver) {
            return getBinaryPromise().then(function(binary) {
              return WebAssembly.instantiate(binary, info);
            }).then(receiver, function(reason) {
              err("failed to asynchronously prepare wasm: " + reason);
              abort(reason);
            });
          }
          function instantiateAsync() {
            if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && typeof fetch === "function") {
              fetch(wasmBinaryFile, { credentials: "same-origin" }).then(function(response) {
                var result = WebAssembly.instantiateStreaming(response, info);
                return result.then(receiveInstantiatedSource, function(reason) {
                  err("wasm streaming compile failed: " + reason);
                  err("falling back to ArrayBuffer instantiation");
                  return instantiateArrayBuffer(receiveInstantiatedSource);
                });
              });
            } else {
              return instantiateArrayBuffer(receiveInstantiatedSource);
            }
          }
          if (Module["instantiateWasm"]) {
            try {
              var exports2 = Module["instantiateWasm"](info, receiveInstance);
              return exports2;
            } catch (e) {
              err("Module.instantiateWasm callback failed with error: " + e);
              return false;
            }
          }
          instantiateAsync();
          return {};
        }
        var tempDouble;
        var tempI64;
        var ASM_CONSTS = {
          1620: function($0, $1, $2) {
            var self2 = Module["getCache"](Module["JavaSimulationEventCallback"])[$0];
            if (!self2.hasOwnProperty("onConstraintBreak"))
              throw "a JSImplementation must implement all functions, you forgot JavaSimulationEventCallback::onConstraintBreak.";
            self2["onConstraintBreak"]($1, $2);
          },
          1900: function($0, $1, $2) {
            var self2 = Module["getCache"](Module["JavaSimulationEventCallback"])[$0];
            if (!self2.hasOwnProperty("onWake"))
              throw "a JSImplementation must implement all functions, you forgot JavaSimulationEventCallback::onWake.";
            self2["onWake"]($1, $2);
          },
          2143: function($0, $1, $2) {
            var self2 = Module["getCache"](Module["JavaSimulationEventCallback"])[$0];
            if (!self2.hasOwnProperty("onSleep"))
              throw "a JSImplementation must implement all functions, you forgot JavaSimulationEventCallback::onSleep.";
            self2["onSleep"]($1, $2);
          },
          2389: function($0, $1, $2, $3) {
            var self2 = Module["getCache"](Module["JavaSimulationEventCallback"])[$0];
            if (!self2.hasOwnProperty("onContact"))
              throw "a JSImplementation must implement all functions, you forgot JavaSimulationEventCallback::onContact.";
            self2["onContact"]($1, $2, $3);
          },
          2649: function($0, $1, $2) {
            var self2 = Module["getCache"](Module["JavaSimulationEventCallback"])[$0];
            if (!self2.hasOwnProperty("onTrigger"))
              throw "a JSImplementation must implement all functions, you forgot JavaSimulationEventCallback::onTrigger.";
            self2["onTrigger"]($1, $2);
          },
          3016: function($0, $1, $2, $3, $4) {
            var self2 = Module["getCache"](Module["JavaErrorCallback"])[$0];
            if (!self2.hasOwnProperty("reportError"))
              throw "a JSImplementation must implement all functions, you forgot JavaErrorCallback::reportError.";
            self2["reportError"]($1, $2, $3, $4);
          },
          4324: function($0, $1) {
            var self2 = Module["getCache"](Module["JavaUserControllerHitReport"])[$0];
            if (!self2.hasOwnProperty("onShapeHit"))
              throw "a JSImplementation must implement all functions, you forgot JavaUserControllerHitReport::onShapeHit.";
            self2["onShapeHit"]($1);
          },
          4579: function($0, $1) {
            var self2 = Module["getCache"](Module["JavaUserControllerHitReport"])[$0];
            if (!self2.hasOwnProperty("onControllerHit"))
              throw "a JSImplementation must implement all functions, you forgot JavaUserControllerHitReport::onControllerHit.";
            self2["onControllerHit"]($1);
          },
          4849: function($0, $1) {
            var self2 = Module["getCache"](Module["JavaUserControllerHitReport"])[$0];
            if (!self2.hasOwnProperty("onObstacleHit"))
              throw "a JSImplementation must implement all functions, you forgot JavaUserControllerHitReport::onObstacleHit.";
            self2["onObstacleHit"]($1);
          },
          5388: function($0) {
            var self2 = Module["getCache"](Module["JSPvdTransport"])[$0];
            if (!self2.hasOwnProperty("connect"))
              throw "a JSImplementation must implement all functions, you forgot JSPvdTransport::connect.";
            return self2["connect"]();
          },
          5612: function($0, $1, $2) {
            var self2 = Module["getCache"](Module["JSPvdTransport"])[$0];
            if (!self2.hasOwnProperty("send"))
              throw "a JSImplementation must implement all functions, you forgot JSPvdTransport::send.";
            self2["send"]($1, $2);
          }
        };
        function array_bounds_check_error(idx, size) {
          throw "Array index " + idx + " out of bounds: [0," + size + ")";
        }
        function abortStackOverflow(allocSize) {
          abort("Stack overflow! Attempted to allocate " + allocSize + " bytes on the stack, but stack has only " + (STACK_MAX - stackSave() + allocSize) + " bytes available!");
        }
        function callRuntimeCallbacks(callbacks) {
          while (callbacks.length > 0) {
            var callback = callbacks.shift();
            if (typeof callback == "function") {
              callback(Module);
              continue;
            }
            var func = callback.func;
            if (typeof func === "number") {
              if (callback.arg === void 0) {
                wasmTable.get(func)();
              } else {
                wasmTable.get(func)(callback.arg);
              }
            } else {
              func(callback.arg === void 0 ? null : callback.arg);
            }
          }
        }
        function demangle(func) {
          warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
          return func;
        }
        function demangleAll(text) {
          var regex = /\b_Z[\w\d_]+/g;
          return text.replace(regex, function(x) {
            var y = demangle(x);
            return x === y ? x : y + " [" + x + "]";
          });
        }
        function dynCallLegacy(sig, ptr, args) {
          assert("dynCall_" + sig in Module, "bad function pointer type - no table for sig '" + sig + "'");
          if (args && args.length) {
            assert(args.length === sig.substring(1).replace(/j/g, "--").length);
          } else {
            assert(sig.length == 1);
          }
          if (args && args.length) {
            return Module["dynCall_" + sig].apply(null, [ptr].concat(args));
          }
          return Module["dynCall_" + sig].call(null, ptr);
        }
        function dynCall(sig, ptr, args) {
          if (sig.indexOf("j") != -1) {
            return dynCallLegacy(sig, ptr, args);
          }
          return wasmTable.get(ptr).apply(null, args);
        }
        function jsStackTrace() {
          var error = new Error();
          if (!error.stack) {
            try {
              throw new Error();
            } catch (e) {
              error = e;
            }
            if (!error.stack) {
              return "(no stack trace available)";
            }
          }
          return error.stack.toString();
        }
        function stackTrace() {
          var js = jsStackTrace();
          if (Module["extraStackTrace"])
            js += "\n" + Module["extraStackTrace"]();
          return demangleAll(js);
        }
        var ExceptionInfoAttrs = { DESTRUCTOR_OFFSET: 0, REFCOUNT_OFFSET: 4, TYPE_OFFSET: 8, CAUGHT_OFFSET: 12, RETHROWN_OFFSET: 13, SIZE: 16 };
        function ___cxa_allocate_exception(size) {
          return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
        }
        function _atexit(func, arg) {
        }
        function ___cxa_atexit(a0, a1) {
          return _atexit(a0, a1);
        }
        function ExceptionInfo(excPtr) {
          this.excPtr = excPtr;
          this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
          this.set_type = function(type) {
            HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2] = type;
          };
          this.get_type = function() {
            return HEAP32[this.ptr + ExceptionInfoAttrs.TYPE_OFFSET >> 2];
          };
          this.set_destructor = function(destructor) {
            HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2] = destructor;
          };
          this.get_destructor = function() {
            return HEAP32[this.ptr + ExceptionInfoAttrs.DESTRUCTOR_OFFSET >> 2];
          };
          this.set_refcount = function(refcount) {
            HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = refcount;
          };
          this.set_caught = function(caught) {
            caught = caught ? 1 : 0;
            HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] = caught;
          };
          this.get_caught = function() {
            return HEAP8[this.ptr + ExceptionInfoAttrs.CAUGHT_OFFSET >> 0] != 0;
          };
          this.set_rethrown = function(rethrown) {
            rethrown = rethrown ? 1 : 0;
            HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] = rethrown;
          };
          this.get_rethrown = function() {
            return HEAP8[this.ptr + ExceptionInfoAttrs.RETHROWN_OFFSET >> 0] != 0;
          };
          this.init = function(type, destructor) {
            this.set_type(type);
            this.set_destructor(destructor);
            this.set_refcount(0);
            this.set_caught(false);
            this.set_rethrown(false);
          };
          this.add_ref = function() {
            var value = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2];
            HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = value + 1;
          };
          this.release_ref = function() {
            var prev = HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2];
            HEAP32[this.ptr + ExceptionInfoAttrs.REFCOUNT_OFFSET >> 2] = prev - 1;
            assert(prev > 0);
            return prev === 1;
          };
        }
        var exceptionLast = 0;
        function __ZSt18uncaught_exceptionv() {
          return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
        }
        function ___cxa_throw(ptr, type, destructor) {
          var info = new ExceptionInfo(ptr);
          info.init(type, destructor);
          exceptionLast = ptr;
          if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
            __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
          } else {
            __ZSt18uncaught_exceptionv.uncaught_exceptions++;
          }
          throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
        }
        function _abort() {
          abort();
        }
        var _emscripten_get_now;
        _emscripten_get_now = function() {
          return performance.now();
        };
        var _emscripten_get_now_is_monotonic = true;
        ;
        function setErrNo(value) {
          HEAP32[___errno_location() >> 2] = value;
          return value;
        }
        function _clock_gettime(clk_id, tp) {
          var now2;
          if (clk_id === 0) {
            now2 = Date.now();
          } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
            now2 = _emscripten_get_now();
          } else {
            setErrNo(28);
            return -1;
          }
          HEAP32[tp >> 2] = now2 / 1e3 | 0;
          HEAP32[tp + 4 >> 2] = now2 % 1e3 * 1e3 * 1e3 | 0;
          return 0;
        }
        function _emscripten_asm_const_int(code, sigPtr, argbuf) {
          var args = readAsmConstArgs(sigPtr, argbuf);
          return ASM_CONSTS[code].apply(null, args);
        }
        function _emscripten_memcpy_big(dest, src, num) {
          HEAPU8.copyWithin(dest, src, src + num);
        }
        function _emscripten_get_heap_size() {
          return HEAPU8.length;
        }
        function abortOnCannotGrowMemory(requestedSize) {
          abort("Cannot enlarge memory arrays to size " + requestedSize + " bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value " + HEAP8.length + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
        }
        function _emscripten_resize_heap(requestedSize) {
          requestedSize = requestedSize >>> 0;
          abortOnCannotGrowMemory(requestedSize);
        }
        function flush_NO_FILESYSTEM() {
          if (typeof _fflush !== "undefined")
            _fflush(0);
          var buffers = SYSCALLS.buffers;
          if (buffers[1].length)
            SYSCALLS.printChar(1, 10);
          if (buffers[2].length)
            SYSCALLS.printChar(2, 10);
        }
        var SYSCALLS = { mappings: {}, buffers: [null, [], []], printChar: function(stream, curr) {
          var buffer2 = SYSCALLS.buffers[stream];
          assert(buffer2);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? out : err)(UTF8ArrayToString(buffer2, 0));
            buffer2.length = 0;
          } else {
            buffer2.push(curr);
          }
        }, varargs: void 0, get: function() {
          assert(SYSCALLS.varargs != void 0);
          SYSCALLS.varargs += 4;
          var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
          return ret;
        }, getStr: function(ptr) {
          var ret = UTF8ToString(ptr);
          return ret;
        }, get64: function(low, high) {
          if (low >= 0)
            assert(high === 0);
          else
            assert(high === -1);
          return low;
        } };
        function _fd_write(fd, iov, iovcnt, pnum) {
          var num = 0;
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            for (var j = 0; j < len; j++) {
              SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
            }
            num += len;
          }
          HEAP32[pnum >> 2] = num;
          return 0;
        }
        function _gettimeofday(ptr) {
          var now2 = Date.now();
          HEAP32[ptr >> 2] = now2 / 1e3 | 0;
          HEAP32[ptr + 4 >> 2] = now2 % 1e3 * 1e3 | 0;
          return 0;
        }
        function _usleep(useconds) {
          var start = _emscripten_get_now();
          while (_emscripten_get_now() - start < useconds / 1e3) {
          }
        }
        function _nanosleep(rqtp, rmtp) {
          if (rqtp === 0) {
            setErrNo(28);
            return -1;
          }
          var seconds = HEAP32[rqtp >> 2];
          var nanoseconds = HEAP32[rqtp + 4 >> 2];
          if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
            setErrNo(28);
            return -1;
          }
          if (rmtp !== 0) {
            HEAP32[rmtp >> 2] = 0;
            HEAP32[rmtp + 4 >> 2] = 0;
          }
          return _usleep(seconds * 1e6 + nanoseconds / 1e3);
        }
        function _pthread_attr_destroy(attr) {
          return 0;
        }
        function _pthread_attr_init(attr) {
          return 0;
        }
        function _pthread_attr_setstacksize() {
        }
        function _pthread_cancel() {
        }
        function _pthread_create() {
          return 6;
        }
        function _exit(status) {
          exit(status);
        }
        function _pthread_exit(status) {
          _exit(status);
        }
        function _pthread_join() {
        }
        function _pthread_mutexattr_destroy() {
        }
        function _pthread_mutexattr_init() {
        }
        function _pthread_mutexattr_setprotocol() {
        }
        function _pthread_mutexattr_settype() {
        }
        function _setTempRet0($i) {
          setTempRet0($i | 0);
        }
        var readAsmConstArgsArray = [];
        function readAsmConstArgs(sigPtr, buf) {
          assert(Array.isArray(readAsmConstArgsArray));
          assert(buf % 16 == 0);
          readAsmConstArgsArray.length = 0;
          var ch;
          buf >>= 2;
          while (ch = HEAPU8[sigPtr++]) {
            assert(ch === 100 || ch === 102 || ch === 105);
            var double = ch < 105;
            if (double && buf & 1)
              buf++;
            readAsmConstArgsArray.push(double ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
            ++buf;
          }
          return readAsmConstArgsArray;
        }
        var ASSERTIONS = true;
        function intArrayFromString(stringy, dontAddNull, length) {
          var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
          var u8array = new Array(len);
          var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
          if (dontAddNull)
            u8array.length = numBytesWritten;
          return u8array;
        }
        function intArrayToString(array) {
          var ret = [];
          for (var i = 0; i < array.length; i++) {
            var chr = array[i];
            if (chr > 255) {
              if (ASSERTIONS) {
                assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
              }
              chr &= 255;
            }
            ret.push(String.fromCharCode(chr));
          }
          return ret.join("");
        }
        __ATINIT__.push({ func: function() {
          ___wasm_call_ctors();
        } });
        var asmLibraryArg = {
          "__cxa_allocate_exception": ___cxa_allocate_exception,
          "__cxa_atexit": ___cxa_atexit,
          "__cxa_throw": ___cxa_throw,
          "abort": _abort,
          "array_bounds_check_error": array_bounds_check_error,
          "clock_gettime": _clock_gettime,
          "emscripten_asm_const_int": _emscripten_asm_const_int,
          "emscripten_memcpy_big": _emscripten_memcpy_big,
          "emscripten_resize_heap": _emscripten_resize_heap,
          "fd_write": _fd_write,
          "gettimeofday": _gettimeofday,
          "memory": wasmMemory,
          "nanosleep": _nanosleep,
          "pthread_attr_destroy": _pthread_attr_destroy,
          "pthread_attr_init": _pthread_attr_init,
          "pthread_attr_setstacksize": _pthread_attr_setstacksize,
          "pthread_cancel": _pthread_cancel,
          "pthread_create": _pthread_create,
          "pthread_exit": _pthread_exit,
          "pthread_join": _pthread_join,
          "pthread_mutexattr_destroy": _pthread_mutexattr_destroy,
          "pthread_mutexattr_init": _pthread_mutexattr_init,
          "pthread_mutexattr_setprotocol": _pthread_mutexattr_setprotocol,
          "pthread_mutexattr_settype": _pthread_mutexattr_settype,
          "setTempRet0": _setTempRet0
        };
        var asm = createWasm();
        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");
        var ___em_js__array_bounds_check_error = Module["___em_js__array_bounds_check_error"] = createExportWrapper("__em_js__array_bounds_check_error");
        var _emscripten_bind_PxBase_release_0 = Module["_emscripten_bind_PxBase_release_0"] = createExportWrapper("emscripten_bind_PxBase_release_0");
        var _emscripten_bind_PxBase_getConcreteTypeName_0 = Module["_emscripten_bind_PxBase_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxBase_getConcreteTypeName_0");
        var _emscripten_bind_PxBase_getConcreteType_0 = Module["_emscripten_bind_PxBase_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxBase_getConcreteType_0");
        var _emscripten_bind_PxBase_setBaseFlag_2 = Module["_emscripten_bind_PxBase_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxBase_setBaseFlag_2");
        var _emscripten_bind_PxBase_setBaseFlags_1 = Module["_emscripten_bind_PxBase_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxBase_setBaseFlags_1");
        var _emscripten_bind_PxBase_getBaseFlags_0 = Module["_emscripten_bind_PxBase_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxBase_getBaseFlags_0");
        var _emscripten_bind_PxBase_isReleasable_0 = Module["_emscripten_bind_PxBase_isReleasable_0"] = createExportWrapper("emscripten_bind_PxBase_isReleasable_0");
        var _emscripten_bind_PxActor_getType_0 = Module["_emscripten_bind_PxActor_getType_0"] = createExportWrapper("emscripten_bind_PxActor_getType_0");
        var _emscripten_bind_PxActor_getScene_0 = Module["_emscripten_bind_PxActor_getScene_0"] = createExportWrapper("emscripten_bind_PxActor_getScene_0");
        var _emscripten_bind_PxActor_setName_1 = Module["_emscripten_bind_PxActor_setName_1"] = createExportWrapper("emscripten_bind_PxActor_setName_1");
        var _emscripten_bind_PxActor_getName_0 = Module["_emscripten_bind_PxActor_getName_0"] = createExportWrapper("emscripten_bind_PxActor_getName_0");
        var _emscripten_bind_PxActor_getWorldBounds_0 = Module["_emscripten_bind_PxActor_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxActor_getWorldBounds_0");
        var _emscripten_bind_PxActor_getWorldBounds_1 = Module["_emscripten_bind_PxActor_getWorldBounds_1"] = createExportWrapper("emscripten_bind_PxActor_getWorldBounds_1");
        var _emscripten_bind_PxActor_setActorFlags_1 = Module["_emscripten_bind_PxActor_setActorFlags_1"] = createExportWrapper("emscripten_bind_PxActor_setActorFlags_1");
        var _emscripten_bind_PxActor_getActorFlags_0 = Module["_emscripten_bind_PxActor_getActorFlags_0"] = createExportWrapper("emscripten_bind_PxActor_getActorFlags_0");
        var _emscripten_bind_PxActor_setDominanceGroup_1 = Module["_emscripten_bind_PxActor_setDominanceGroup_1"] = createExportWrapper("emscripten_bind_PxActor_setDominanceGroup_1");
        var _emscripten_bind_PxActor_getDominanceGroup_0 = Module["_emscripten_bind_PxActor_getDominanceGroup_0"] = createExportWrapper("emscripten_bind_PxActor_getDominanceGroup_0");
        var _emscripten_bind_PxActor_setOwnerClient_1 = Module["_emscripten_bind_PxActor_setOwnerClient_1"] = createExportWrapper("emscripten_bind_PxActor_setOwnerClient_1");
        var _emscripten_bind_PxActor_getOwnerClient_0 = Module["_emscripten_bind_PxActor_getOwnerClient_0"] = createExportWrapper("emscripten_bind_PxActor_getOwnerClient_0");
        var _emscripten_bind_PxActor_release_0 = Module["_emscripten_bind_PxActor_release_0"] = createExportWrapper("emscripten_bind_PxActor_release_0");
        var _emscripten_bind_PxActor_getConcreteTypeName_0 = Module["_emscripten_bind_PxActor_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxActor_getConcreteTypeName_0");
        var _emscripten_bind_PxActor_getConcreteType_0 = Module["_emscripten_bind_PxActor_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxActor_getConcreteType_0");
        var _emscripten_bind_PxActor_setBaseFlag_2 = Module["_emscripten_bind_PxActor_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxActor_setBaseFlag_2");
        var _emscripten_bind_PxActor_setBaseFlags_1 = Module["_emscripten_bind_PxActor_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxActor_setBaseFlags_1");
        var _emscripten_bind_PxActor_getBaseFlags_0 = Module["_emscripten_bind_PxActor_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxActor_getBaseFlags_0");
        var _emscripten_bind_PxActor_isReleasable_0 = Module["_emscripten_bind_PxActor_isReleasable_0"] = createExportWrapper("emscripten_bind_PxActor_isReleasable_0");
        var _emscripten_bind_PxActor_get_userData_0 = Module["_emscripten_bind_PxActor_get_userData_0"] = createExportWrapper("emscripten_bind_PxActor_get_userData_0");
        var _emscripten_bind_PxActor_set_userData_1 = Module["_emscripten_bind_PxActor_set_userData_1"] = createExportWrapper("emscripten_bind_PxActor_set_userData_1");
        var _emscripten_bind_PxActorShape_get_actor_0 = Module["_emscripten_bind_PxActorShape_get_actor_0"] = createExportWrapper("emscripten_bind_PxActorShape_get_actor_0");
        var _emscripten_bind_PxActorShape_set_actor_1 = Module["_emscripten_bind_PxActorShape_set_actor_1"] = createExportWrapper("emscripten_bind_PxActorShape_set_actor_1");
        var _emscripten_bind_PxActorShape_get_shape_0 = Module["_emscripten_bind_PxActorShape_get_shape_0"] = createExportWrapper("emscripten_bind_PxActorShape_get_shape_0");
        var _emscripten_bind_PxActorShape_set_shape_1 = Module["_emscripten_bind_PxActorShape_set_shape_1"] = createExportWrapper("emscripten_bind_PxActorShape_set_shape_1");
        var _emscripten_bind_PxActorShape___destroy___0 = Module["_emscripten_bind_PxActorShape___destroy___0"] = createExportWrapper("emscripten_bind_PxActorShape___destroy___0");
        var _emscripten_bind_PxQueryHit_get_faceIndex_0 = Module["_emscripten_bind_PxQueryHit_get_faceIndex_0"] = createExportWrapper("emscripten_bind_PxQueryHit_get_faceIndex_0");
        var _emscripten_bind_PxQueryHit_set_faceIndex_1 = Module["_emscripten_bind_PxQueryHit_set_faceIndex_1"] = createExportWrapper("emscripten_bind_PxQueryHit_set_faceIndex_1");
        var _emscripten_bind_PxQueryHit_get_actor_0 = Module["_emscripten_bind_PxQueryHit_get_actor_0"] = createExportWrapper("emscripten_bind_PxQueryHit_get_actor_0");
        var _emscripten_bind_PxQueryHit_set_actor_1 = Module["_emscripten_bind_PxQueryHit_set_actor_1"] = createExportWrapper("emscripten_bind_PxQueryHit_set_actor_1");
        var _emscripten_bind_PxQueryHit_get_shape_0 = Module["_emscripten_bind_PxQueryHit_get_shape_0"] = createExportWrapper("emscripten_bind_PxQueryHit_get_shape_0");
        var _emscripten_bind_PxQueryHit_set_shape_1 = Module["_emscripten_bind_PxQueryHit_set_shape_1"] = createExportWrapper("emscripten_bind_PxQueryHit_set_shape_1");
        var _emscripten_bind_PxQueryHit___destroy___0 = Module["_emscripten_bind_PxQueryHit___destroy___0"] = createExportWrapper("emscripten_bind_PxQueryHit___destroy___0");
        var _emscripten_bind_PxRigidActor_getGlobalPose_0 = Module["_emscripten_bind_PxRigidActor_getGlobalPose_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getGlobalPose_0");
        var _emscripten_bind_PxRigidActor_setGlobalPose_1 = Module["_emscripten_bind_PxRigidActor_setGlobalPose_1"] = createExportWrapper("emscripten_bind_PxRigidActor_setGlobalPose_1");
        var _emscripten_bind_PxRigidActor_setGlobalPose_2 = Module["_emscripten_bind_PxRigidActor_setGlobalPose_2"] = createExportWrapper("emscripten_bind_PxRigidActor_setGlobalPose_2");
        var _emscripten_bind_PxRigidActor_attachShape_1 = Module["_emscripten_bind_PxRigidActor_attachShape_1"] = createExportWrapper("emscripten_bind_PxRigidActor_attachShape_1");
        var _emscripten_bind_PxRigidActor_detachShape_1 = Module["_emscripten_bind_PxRigidActor_detachShape_1"] = createExportWrapper("emscripten_bind_PxRigidActor_detachShape_1");
        var _emscripten_bind_PxRigidActor_detachShape_2 = Module["_emscripten_bind_PxRigidActor_detachShape_2"] = createExportWrapper("emscripten_bind_PxRigidActor_detachShape_2");
        var _emscripten_bind_PxRigidActor_getNbShapes_0 = Module["_emscripten_bind_PxRigidActor_getNbShapes_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getNbShapes_0");
        var _emscripten_bind_PxRigidActor_getType_0 = Module["_emscripten_bind_PxRigidActor_getType_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getType_0");
        var _emscripten_bind_PxRigidActor_getScene_0 = Module["_emscripten_bind_PxRigidActor_getScene_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getScene_0");
        var _emscripten_bind_PxRigidActor_setName_1 = Module["_emscripten_bind_PxRigidActor_setName_1"] = createExportWrapper("emscripten_bind_PxRigidActor_setName_1");
        var _emscripten_bind_PxRigidActor_getName_0 = Module["_emscripten_bind_PxRigidActor_getName_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getName_0");
        var _emscripten_bind_PxRigidActor_getWorldBounds_0 = Module["_emscripten_bind_PxRigidActor_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getWorldBounds_0");
        var _emscripten_bind_PxRigidActor_getWorldBounds_1 = Module["_emscripten_bind_PxRigidActor_getWorldBounds_1"] = createExportWrapper("emscripten_bind_PxRigidActor_getWorldBounds_1");
        var _emscripten_bind_PxRigidActor_setActorFlags_1 = Module["_emscripten_bind_PxRigidActor_setActorFlags_1"] = createExportWrapper("emscripten_bind_PxRigidActor_setActorFlags_1");
        var _emscripten_bind_PxRigidActor_getActorFlags_0 = Module["_emscripten_bind_PxRigidActor_getActorFlags_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getActorFlags_0");
        var _emscripten_bind_PxRigidActor_setDominanceGroup_1 = Module["_emscripten_bind_PxRigidActor_setDominanceGroup_1"] = createExportWrapper("emscripten_bind_PxRigidActor_setDominanceGroup_1");
        var _emscripten_bind_PxRigidActor_getDominanceGroup_0 = Module["_emscripten_bind_PxRigidActor_getDominanceGroup_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getDominanceGroup_0");
        var _emscripten_bind_PxRigidActor_setOwnerClient_1 = Module["_emscripten_bind_PxRigidActor_setOwnerClient_1"] = createExportWrapper("emscripten_bind_PxRigidActor_setOwnerClient_1");
        var _emscripten_bind_PxRigidActor_getOwnerClient_0 = Module["_emscripten_bind_PxRigidActor_getOwnerClient_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getOwnerClient_0");
        var _emscripten_bind_PxRigidActor_release_0 = Module["_emscripten_bind_PxRigidActor_release_0"] = createExportWrapper("emscripten_bind_PxRigidActor_release_0");
        var _emscripten_bind_PxRigidActor_getConcreteTypeName_0 = Module["_emscripten_bind_PxRigidActor_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getConcreteTypeName_0");
        var _emscripten_bind_PxRigidActor_getConcreteType_0 = Module["_emscripten_bind_PxRigidActor_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getConcreteType_0");
        var _emscripten_bind_PxRigidActor_setBaseFlag_2 = Module["_emscripten_bind_PxRigidActor_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxRigidActor_setBaseFlag_2");
        var _emscripten_bind_PxRigidActor_setBaseFlags_1 = Module["_emscripten_bind_PxRigidActor_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxRigidActor_setBaseFlags_1");
        var _emscripten_bind_PxRigidActor_getBaseFlags_0 = Module["_emscripten_bind_PxRigidActor_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxRigidActor_getBaseFlags_0");
        var _emscripten_bind_PxRigidActor_isReleasable_0 = Module["_emscripten_bind_PxRigidActor_isReleasable_0"] = createExportWrapper("emscripten_bind_PxRigidActor_isReleasable_0");
        var _emscripten_bind_PxRigidActor_get_userData_0 = Module["_emscripten_bind_PxRigidActor_get_userData_0"] = createExportWrapper("emscripten_bind_PxRigidActor_get_userData_0");
        var _emscripten_bind_PxRigidActor_set_userData_1 = Module["_emscripten_bind_PxRigidActor_set_userData_1"] = createExportWrapper("emscripten_bind_PxRigidActor_set_userData_1");
        var _emscripten_bind_PxSimulationEventCallback___destroy___0 = Module["_emscripten_bind_PxSimulationEventCallback___destroy___0"] = createExportWrapper("emscripten_bind_PxSimulationEventCallback___destroy___0");
        var _emscripten_bind_PxVehicleWheels_getVehicleType_0 = Module["_emscripten_bind_PxVehicleWheels_getVehicleType_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_getVehicleType_0");
        var _emscripten_bind_PxVehicleWheels_getRigidDynamicActor_0 = Module["_emscripten_bind_PxVehicleWheels_getRigidDynamicActor_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_getRigidDynamicActor_0");
        var _emscripten_bind_PxVehicleWheels_computeForwardSpeed_0 = Module["_emscripten_bind_PxVehicleWheels_computeForwardSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_computeForwardSpeed_0");
        var _emscripten_bind_PxVehicleWheels_computeSidewaysSpeed_0 = Module["_emscripten_bind_PxVehicleWheels_computeSidewaysSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_computeSidewaysSpeed_0");
        var _emscripten_bind_PxVehicleWheels_getNbNonDrivenWheels_0 = Module["_emscripten_bind_PxVehicleWheels_getNbNonDrivenWheels_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_getNbNonDrivenWheels_0");
        var _emscripten_bind_PxVehicleWheels_getConcreteTypeName_0 = Module["_emscripten_bind_PxVehicleWheels_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_getConcreteTypeName_0");
        var _emscripten_bind_PxVehicleWheels_getConcreteType_0 = Module["_emscripten_bind_PxVehicleWheels_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_getConcreteType_0");
        var _emscripten_bind_PxVehicleWheels_setBaseFlag_2 = Module["_emscripten_bind_PxVehicleWheels_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxVehicleWheels_setBaseFlag_2");
        var _emscripten_bind_PxVehicleWheels_setBaseFlags_1 = Module["_emscripten_bind_PxVehicleWheels_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleWheels_setBaseFlags_1");
        var _emscripten_bind_PxVehicleWheels_getBaseFlags_0 = Module["_emscripten_bind_PxVehicleWheels_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_getBaseFlags_0");
        var _emscripten_bind_PxVehicleWheels_isReleasable_0 = Module["_emscripten_bind_PxVehicleWheels_isReleasable_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_isReleasable_0");
        var _emscripten_bind_PxVehicleWheels_get_mWheelsSimData_0 = Module["_emscripten_bind_PxVehicleWheels_get_mWheelsSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_get_mWheelsSimData_0");
        var _emscripten_bind_PxVehicleWheels_set_mWheelsSimData_1 = Module["_emscripten_bind_PxVehicleWheels_set_mWheelsSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheels_set_mWheelsSimData_1");
        var _emscripten_bind_PxVehicleWheels_get_mWheelsDynData_0 = Module["_emscripten_bind_PxVehicleWheels_get_mWheelsDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheels_get_mWheelsDynData_0");
        var _emscripten_bind_PxVehicleWheels_set_mWheelsDynData_1 = Module["_emscripten_bind_PxVehicleWheels_set_mWheelsDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheels_set_mWheelsDynData_1");
        var _emscripten_bind_PxPvdTransport_connect_0 = Module["_emscripten_bind_PxPvdTransport_connect_0"] = createExportWrapper("emscripten_bind_PxPvdTransport_connect_0");
        var _emscripten_bind_PxPvdTransport_disconnect_0 = Module["_emscripten_bind_PxPvdTransport_disconnect_0"] = createExportWrapper("emscripten_bind_PxPvdTransport_disconnect_0");
        var _emscripten_bind_PxPvdTransport_isConnected_0 = Module["_emscripten_bind_PxPvdTransport_isConnected_0"] = createExportWrapper("emscripten_bind_PxPvdTransport_isConnected_0");
        var _emscripten_bind_PxArticulationBase_getScene_0 = Module["_emscripten_bind_PxArticulationBase_getScene_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getScene_0");
        var _emscripten_bind_PxArticulationBase_setSolverIterationCounts_2 = Module["_emscripten_bind_PxArticulationBase_setSolverIterationCounts_2"] = createExportWrapper("emscripten_bind_PxArticulationBase_setSolverIterationCounts_2");
        var _emscripten_bind_PxArticulationBase_isSleeping_0 = Module["_emscripten_bind_PxArticulationBase_isSleeping_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_isSleeping_0");
        var _emscripten_bind_PxArticulationBase_setSleepThreshold_1 = Module["_emscripten_bind_PxArticulationBase_setSleepThreshold_1"] = createExportWrapper("emscripten_bind_PxArticulationBase_setSleepThreshold_1");
        var _emscripten_bind_PxArticulationBase_getSleepThreshold_0 = Module["_emscripten_bind_PxArticulationBase_getSleepThreshold_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getSleepThreshold_0");
        var _emscripten_bind_PxArticulationBase_setStabilizationThreshold_1 = Module["_emscripten_bind_PxArticulationBase_setStabilizationThreshold_1"] = createExportWrapper("emscripten_bind_PxArticulationBase_setStabilizationThreshold_1");
        var _emscripten_bind_PxArticulationBase_getStabilizationThreshold_0 = Module["_emscripten_bind_PxArticulationBase_getStabilizationThreshold_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getStabilizationThreshold_0");
        var _emscripten_bind_PxArticulationBase_setWakeCounter_1 = Module["_emscripten_bind_PxArticulationBase_setWakeCounter_1"] = createExportWrapper("emscripten_bind_PxArticulationBase_setWakeCounter_1");
        var _emscripten_bind_PxArticulationBase_getWakeCounter_0 = Module["_emscripten_bind_PxArticulationBase_getWakeCounter_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getWakeCounter_0");
        var _emscripten_bind_PxArticulationBase_wakeUp_0 = Module["_emscripten_bind_PxArticulationBase_wakeUp_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_wakeUp_0");
        var _emscripten_bind_PxArticulationBase_putToSleep_0 = Module["_emscripten_bind_PxArticulationBase_putToSleep_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_putToSleep_0");
        var _emscripten_bind_PxArticulationBase_createLink_2 = Module["_emscripten_bind_PxArticulationBase_createLink_2"] = createExportWrapper("emscripten_bind_PxArticulationBase_createLink_2");
        var _emscripten_bind_PxArticulationBase_getNbLinks_0 = Module["_emscripten_bind_PxArticulationBase_getNbLinks_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getNbLinks_0");
        var _emscripten_bind_PxArticulationBase_setName_1 = Module["_emscripten_bind_PxArticulationBase_setName_1"] = createExportWrapper("emscripten_bind_PxArticulationBase_setName_1");
        var _emscripten_bind_PxArticulationBase_getName_0 = Module["_emscripten_bind_PxArticulationBase_getName_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getName_0");
        var _emscripten_bind_PxArticulationBase_getWorldBounds_0 = Module["_emscripten_bind_PxArticulationBase_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getWorldBounds_0");
        var _emscripten_bind_PxArticulationBase_getAggregate_0 = Module["_emscripten_bind_PxArticulationBase_getAggregate_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getAggregate_0");
        var _emscripten_bind_PxArticulationBase_release_0 = Module["_emscripten_bind_PxArticulationBase_release_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_release_0");
        var _emscripten_bind_PxArticulationBase_getConcreteTypeName_0 = Module["_emscripten_bind_PxArticulationBase_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getConcreteTypeName_0");
        var _emscripten_bind_PxArticulationBase_getConcreteType_0 = Module["_emscripten_bind_PxArticulationBase_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getConcreteType_0");
        var _emscripten_bind_PxArticulationBase_setBaseFlag_2 = Module["_emscripten_bind_PxArticulationBase_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationBase_setBaseFlag_2");
        var _emscripten_bind_PxArticulationBase_setBaseFlags_1 = Module["_emscripten_bind_PxArticulationBase_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationBase_setBaseFlags_1");
        var _emscripten_bind_PxArticulationBase_getBaseFlags_0 = Module["_emscripten_bind_PxArticulationBase_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_getBaseFlags_0");
        var _emscripten_bind_PxArticulationBase_isReleasable_0 = Module["_emscripten_bind_PxArticulationBase_isReleasable_0"] = createExportWrapper("emscripten_bind_PxArticulationBase_isReleasable_0");
        var _emscripten_bind_PxArticulationJointBase_getParentArticulationLink_0 = Module["_emscripten_bind_PxArticulationJointBase_getParentArticulationLink_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_getParentArticulationLink_0");
        var _emscripten_bind_PxArticulationJointBase_setParentPose_1 = Module["_emscripten_bind_PxArticulationJointBase_setParentPose_1"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_setParentPose_1");
        var _emscripten_bind_PxArticulationJointBase_getParentPose_0 = Module["_emscripten_bind_PxArticulationJointBase_getParentPose_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_getParentPose_0");
        var _emscripten_bind_PxArticulationJointBase_getChildArticulationLink_0 = Module["_emscripten_bind_PxArticulationJointBase_getChildArticulationLink_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_getChildArticulationLink_0");
        var _emscripten_bind_PxArticulationJointBase_setChildPose_1 = Module["_emscripten_bind_PxArticulationJointBase_setChildPose_1"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_setChildPose_1");
        var _emscripten_bind_PxArticulationJointBase_getChildPose_0 = Module["_emscripten_bind_PxArticulationJointBase_getChildPose_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_getChildPose_0");
        var _emscripten_bind_PxArticulationJointBase_release_0 = Module["_emscripten_bind_PxArticulationJointBase_release_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_release_0");
        var _emscripten_bind_PxArticulationJointBase_getConcreteTypeName_0 = Module["_emscripten_bind_PxArticulationJointBase_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_getConcreteTypeName_0");
        var _emscripten_bind_PxArticulationJointBase_getConcreteType_0 = Module["_emscripten_bind_PxArticulationJointBase_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_getConcreteType_0");
        var _emscripten_bind_PxArticulationJointBase_setBaseFlag_2 = Module["_emscripten_bind_PxArticulationJointBase_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_setBaseFlag_2");
        var _emscripten_bind_PxArticulationJointBase_setBaseFlags_1 = Module["_emscripten_bind_PxArticulationJointBase_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_setBaseFlags_1");
        var _emscripten_bind_PxArticulationJointBase_getBaseFlags_0 = Module["_emscripten_bind_PxArticulationJointBase_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_getBaseFlags_0");
        var _emscripten_bind_PxArticulationJointBase_isReleasable_0 = Module["_emscripten_bind_PxArticulationJointBase_isReleasable_0"] = createExportWrapper("emscripten_bind_PxArticulationJointBase_isReleasable_0");
        var _emscripten_bind_PxLocationHit_get_flags_0 = Module["_emscripten_bind_PxLocationHit_get_flags_0"] = createExportWrapper("emscripten_bind_PxLocationHit_get_flags_0");
        var _emscripten_bind_PxLocationHit_set_flags_1 = Module["_emscripten_bind_PxLocationHit_set_flags_1"] = createExportWrapper("emscripten_bind_PxLocationHit_set_flags_1");
        var _emscripten_bind_PxLocationHit_get_position_0 = Module["_emscripten_bind_PxLocationHit_get_position_0"] = createExportWrapper("emscripten_bind_PxLocationHit_get_position_0");
        var _emscripten_bind_PxLocationHit_set_position_1 = Module["_emscripten_bind_PxLocationHit_set_position_1"] = createExportWrapper("emscripten_bind_PxLocationHit_set_position_1");
        var _emscripten_bind_PxLocationHit_get_normal_0 = Module["_emscripten_bind_PxLocationHit_get_normal_0"] = createExportWrapper("emscripten_bind_PxLocationHit_get_normal_0");
        var _emscripten_bind_PxLocationHit_set_normal_1 = Module["_emscripten_bind_PxLocationHit_set_normal_1"] = createExportWrapper("emscripten_bind_PxLocationHit_set_normal_1");
        var _emscripten_bind_PxLocationHit_get_distance_0 = Module["_emscripten_bind_PxLocationHit_get_distance_0"] = createExportWrapper("emscripten_bind_PxLocationHit_get_distance_0");
        var _emscripten_bind_PxLocationHit_set_distance_1 = Module["_emscripten_bind_PxLocationHit_set_distance_1"] = createExportWrapper("emscripten_bind_PxLocationHit_set_distance_1");
        var _emscripten_bind_PxLocationHit_get_actor_0 = Module["_emscripten_bind_PxLocationHit_get_actor_0"] = createExportWrapper("emscripten_bind_PxLocationHit_get_actor_0");
        var _emscripten_bind_PxLocationHit_set_actor_1 = Module["_emscripten_bind_PxLocationHit_set_actor_1"] = createExportWrapper("emscripten_bind_PxLocationHit_set_actor_1");
        var _emscripten_bind_PxLocationHit_get_shape_0 = Module["_emscripten_bind_PxLocationHit_get_shape_0"] = createExportWrapper("emscripten_bind_PxLocationHit_get_shape_0");
        var _emscripten_bind_PxLocationHit_set_shape_1 = Module["_emscripten_bind_PxLocationHit_set_shape_1"] = createExportWrapper("emscripten_bind_PxLocationHit_set_shape_1");
        var _emscripten_bind_PxLocationHit_get_faceIndex_0 = Module["_emscripten_bind_PxLocationHit_get_faceIndex_0"] = createExportWrapper("emscripten_bind_PxLocationHit_get_faceIndex_0");
        var _emscripten_bind_PxLocationHit_set_faceIndex_1 = Module["_emscripten_bind_PxLocationHit_set_faceIndex_1"] = createExportWrapper("emscripten_bind_PxLocationHit_set_faceIndex_1");
        var _emscripten_bind_PxLocationHit___destroy___0 = Module["_emscripten_bind_PxLocationHit___destroy___0"] = createExportWrapper("emscripten_bind_PxLocationHit___destroy___0");
        var _emscripten_bind_PxOverlapCallback_hasAnyHits_0 = Module["_emscripten_bind_PxOverlapCallback_hasAnyHits_0"] = createExportWrapper("emscripten_bind_PxOverlapCallback_hasAnyHits_0");
        var _emscripten_bind_PxOverlapCallback___destroy___0 = Module["_emscripten_bind_PxOverlapCallback___destroy___0"] = createExportWrapper("emscripten_bind_PxOverlapCallback___destroy___0");
        var _emscripten_bind_PxRaycastCallback_hasAnyHits_0 = Module["_emscripten_bind_PxRaycastCallback_hasAnyHits_0"] = createExportWrapper("emscripten_bind_PxRaycastCallback_hasAnyHits_0");
        var _emscripten_bind_PxRaycastCallback___destroy___0 = Module["_emscripten_bind_PxRaycastCallback___destroy___0"] = createExportWrapper("emscripten_bind_PxRaycastCallback___destroy___0");
        var _emscripten_bind_PxRigidBody_setCMassLocalPose_1 = Module["_emscripten_bind_PxRigidBody_setCMassLocalPose_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setCMassLocalPose_1");
        var _emscripten_bind_PxRigidBody_getCMassLocalPose_0 = Module["_emscripten_bind_PxRigidBody_getCMassLocalPose_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getCMassLocalPose_0");
        var _emscripten_bind_PxRigidBody_setMass_1 = Module["_emscripten_bind_PxRigidBody_setMass_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setMass_1");
        var _emscripten_bind_PxRigidBody_getMass_0 = Module["_emscripten_bind_PxRigidBody_getMass_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMass_0");
        var _emscripten_bind_PxRigidBody_getInvMass_0 = Module["_emscripten_bind_PxRigidBody_getInvMass_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getInvMass_0");
        var _emscripten_bind_PxRigidBody_setMassSpaceInertiaTensor_1 = Module["_emscripten_bind_PxRigidBody_setMassSpaceInertiaTensor_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setMassSpaceInertiaTensor_1");
        var _emscripten_bind_PxRigidBody_getMassSpaceInertiaTensor_0 = Module["_emscripten_bind_PxRigidBody_getMassSpaceInertiaTensor_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMassSpaceInertiaTensor_0");
        var _emscripten_bind_PxRigidBody_getMassSpaceInvInertiaTensor_0 = Module["_emscripten_bind_PxRigidBody_getMassSpaceInvInertiaTensor_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMassSpaceInvInertiaTensor_0");
        var _emscripten_bind_PxRigidBody_setLinearDamping_1 = Module["_emscripten_bind_PxRigidBody_setLinearDamping_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setLinearDamping_1");
        var _emscripten_bind_PxRigidBody_getLinearDamping_0 = Module["_emscripten_bind_PxRigidBody_getLinearDamping_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getLinearDamping_0");
        var _emscripten_bind_PxRigidBody_setAngularDamping_1 = Module["_emscripten_bind_PxRigidBody_setAngularDamping_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setAngularDamping_1");
        var _emscripten_bind_PxRigidBody_getAngularDamping_0 = Module["_emscripten_bind_PxRigidBody_getAngularDamping_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getAngularDamping_0");
        var _emscripten_bind_PxRigidBody_getLinearVelocity_0 = Module["_emscripten_bind_PxRigidBody_getLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getLinearVelocity_0");
        var _emscripten_bind_PxRigidBody_setLinearVelocity_1 = Module["_emscripten_bind_PxRigidBody_setLinearVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setLinearVelocity_1");
        var _emscripten_bind_PxRigidBody_setLinearVelocity_2 = Module["_emscripten_bind_PxRigidBody_setLinearVelocity_2"] = createExportWrapper("emscripten_bind_PxRigidBody_setLinearVelocity_2");
        var _emscripten_bind_PxRigidBody_getAngularVelocity_0 = Module["_emscripten_bind_PxRigidBody_getAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getAngularVelocity_0");
        var _emscripten_bind_PxRigidBody_setAngularVelocity_1 = Module["_emscripten_bind_PxRigidBody_setAngularVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setAngularVelocity_1");
        var _emscripten_bind_PxRigidBody_setAngularVelocity_2 = Module["_emscripten_bind_PxRigidBody_setAngularVelocity_2"] = createExportWrapper("emscripten_bind_PxRigidBody_setAngularVelocity_2");
        var _emscripten_bind_PxRigidBody_getMaxLinearVelocity_0 = Module["_emscripten_bind_PxRigidBody_getMaxLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMaxLinearVelocity_0");
        var _emscripten_bind_PxRigidBody_setMaxLinearVelocity_1 = Module["_emscripten_bind_PxRigidBody_setMaxLinearVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setMaxLinearVelocity_1");
        var _emscripten_bind_PxRigidBody_getMaxAngularVelocity_0 = Module["_emscripten_bind_PxRigidBody_getMaxAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMaxAngularVelocity_0");
        var _emscripten_bind_PxRigidBody_setMaxAngularVelocity_1 = Module["_emscripten_bind_PxRigidBody_setMaxAngularVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setMaxAngularVelocity_1");
        var _emscripten_bind_PxRigidBody_addForce_1 = Module["_emscripten_bind_PxRigidBody_addForce_1"] = createExportWrapper("emscripten_bind_PxRigidBody_addForce_1");
        var _emscripten_bind_PxRigidBody_addForce_2 = Module["_emscripten_bind_PxRigidBody_addForce_2"] = createExportWrapper("emscripten_bind_PxRigidBody_addForce_2");
        var _emscripten_bind_PxRigidBody_addForce_3 = Module["_emscripten_bind_PxRigidBody_addForce_3"] = createExportWrapper("emscripten_bind_PxRigidBody_addForce_3");
        var _emscripten_bind_PxRigidBody_addTorque_1 = Module["_emscripten_bind_PxRigidBody_addTorque_1"] = createExportWrapper("emscripten_bind_PxRigidBody_addTorque_1");
        var _emscripten_bind_PxRigidBody_addTorque_2 = Module["_emscripten_bind_PxRigidBody_addTorque_2"] = createExportWrapper("emscripten_bind_PxRigidBody_addTorque_2");
        var _emscripten_bind_PxRigidBody_addTorque_3 = Module["_emscripten_bind_PxRigidBody_addTorque_3"] = createExportWrapper("emscripten_bind_PxRigidBody_addTorque_3");
        var _emscripten_bind_PxRigidBody_clearForce_1 = Module["_emscripten_bind_PxRigidBody_clearForce_1"] = createExportWrapper("emscripten_bind_PxRigidBody_clearForce_1");
        var _emscripten_bind_PxRigidBody_clearTorque_1 = Module["_emscripten_bind_PxRigidBody_clearTorque_1"] = createExportWrapper("emscripten_bind_PxRigidBody_clearTorque_1");
        var _emscripten_bind_PxRigidBody_setForceAndTorque_2 = Module["_emscripten_bind_PxRigidBody_setForceAndTorque_2"] = createExportWrapper("emscripten_bind_PxRigidBody_setForceAndTorque_2");
        var _emscripten_bind_PxRigidBody_setForceAndTorque_3 = Module["_emscripten_bind_PxRigidBody_setForceAndTorque_3"] = createExportWrapper("emscripten_bind_PxRigidBody_setForceAndTorque_3");
        var _emscripten_bind_PxRigidBody_setRigidBodyFlag_2 = Module["_emscripten_bind_PxRigidBody_setRigidBodyFlag_2"] = createExportWrapper("emscripten_bind_PxRigidBody_setRigidBodyFlag_2");
        var _emscripten_bind_PxRigidBody_setRigidBodyFlags_1 = Module["_emscripten_bind_PxRigidBody_setRigidBodyFlags_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setRigidBodyFlags_1");
        var _emscripten_bind_PxRigidBody_getRigidBodyFlags_0 = Module["_emscripten_bind_PxRigidBody_getRigidBodyFlags_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getRigidBodyFlags_0");
        var _emscripten_bind_PxRigidBody_setMinCCDAdvanceCoefficient_1 = Module["_emscripten_bind_PxRigidBody_setMinCCDAdvanceCoefficient_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setMinCCDAdvanceCoefficient_1");
        var _emscripten_bind_PxRigidBody_getMinCCDAdvanceCoefficient_0 = Module["_emscripten_bind_PxRigidBody_getMinCCDAdvanceCoefficient_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMinCCDAdvanceCoefficient_0");
        var _emscripten_bind_PxRigidBody_setMaxDepenetrationVelocity_1 = Module["_emscripten_bind_PxRigidBody_setMaxDepenetrationVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setMaxDepenetrationVelocity_1");
        var _emscripten_bind_PxRigidBody_getMaxDepenetrationVelocity_0 = Module["_emscripten_bind_PxRigidBody_getMaxDepenetrationVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMaxDepenetrationVelocity_0");
        var _emscripten_bind_PxRigidBody_setMaxContactImpulse_1 = Module["_emscripten_bind_PxRigidBody_setMaxContactImpulse_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setMaxContactImpulse_1");
        var _emscripten_bind_PxRigidBody_getMaxContactImpulse_0 = Module["_emscripten_bind_PxRigidBody_getMaxContactImpulse_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getMaxContactImpulse_0");
        var _emscripten_bind_PxRigidBody_getInternalIslandNodeIndex_0 = Module["_emscripten_bind_PxRigidBody_getInternalIslandNodeIndex_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getInternalIslandNodeIndex_0");
        var _emscripten_bind_PxRigidBody_getType_0 = Module["_emscripten_bind_PxRigidBody_getType_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getType_0");
        var _emscripten_bind_PxRigidBody_getScene_0 = Module["_emscripten_bind_PxRigidBody_getScene_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getScene_0");
        var _emscripten_bind_PxRigidBody_setName_1 = Module["_emscripten_bind_PxRigidBody_setName_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setName_1");
        var _emscripten_bind_PxRigidBody_getName_0 = Module["_emscripten_bind_PxRigidBody_getName_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getName_0");
        var _emscripten_bind_PxRigidBody_getWorldBounds_0 = Module["_emscripten_bind_PxRigidBody_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getWorldBounds_0");
        var _emscripten_bind_PxRigidBody_getWorldBounds_1 = Module["_emscripten_bind_PxRigidBody_getWorldBounds_1"] = createExportWrapper("emscripten_bind_PxRigidBody_getWorldBounds_1");
        var _emscripten_bind_PxRigidBody_setActorFlags_1 = Module["_emscripten_bind_PxRigidBody_setActorFlags_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setActorFlags_1");
        var _emscripten_bind_PxRigidBody_getActorFlags_0 = Module["_emscripten_bind_PxRigidBody_getActorFlags_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getActorFlags_0");
        var _emscripten_bind_PxRigidBody_setDominanceGroup_1 = Module["_emscripten_bind_PxRigidBody_setDominanceGroup_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setDominanceGroup_1");
        var _emscripten_bind_PxRigidBody_getDominanceGroup_0 = Module["_emscripten_bind_PxRigidBody_getDominanceGroup_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getDominanceGroup_0");
        var _emscripten_bind_PxRigidBody_setOwnerClient_1 = Module["_emscripten_bind_PxRigidBody_setOwnerClient_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setOwnerClient_1");
        var _emscripten_bind_PxRigidBody_getOwnerClient_0 = Module["_emscripten_bind_PxRigidBody_getOwnerClient_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getOwnerClient_0");
        var _emscripten_bind_PxRigidBody_release_0 = Module["_emscripten_bind_PxRigidBody_release_0"] = createExportWrapper("emscripten_bind_PxRigidBody_release_0");
        var _emscripten_bind_PxRigidBody_getConcreteTypeName_0 = Module["_emscripten_bind_PxRigidBody_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getConcreteTypeName_0");
        var _emscripten_bind_PxRigidBody_getConcreteType_0 = Module["_emscripten_bind_PxRigidBody_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getConcreteType_0");
        var _emscripten_bind_PxRigidBody_setBaseFlag_2 = Module["_emscripten_bind_PxRigidBody_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxRigidBody_setBaseFlag_2");
        var _emscripten_bind_PxRigidBody_setBaseFlags_1 = Module["_emscripten_bind_PxRigidBody_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setBaseFlags_1");
        var _emscripten_bind_PxRigidBody_getBaseFlags_0 = Module["_emscripten_bind_PxRigidBody_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getBaseFlags_0");
        var _emscripten_bind_PxRigidBody_isReleasable_0 = Module["_emscripten_bind_PxRigidBody_isReleasable_0"] = createExportWrapper("emscripten_bind_PxRigidBody_isReleasable_0");
        var _emscripten_bind_PxRigidBody_getGlobalPose_0 = Module["_emscripten_bind_PxRigidBody_getGlobalPose_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getGlobalPose_0");
        var _emscripten_bind_PxRigidBody_setGlobalPose_1 = Module["_emscripten_bind_PxRigidBody_setGlobalPose_1"] = createExportWrapper("emscripten_bind_PxRigidBody_setGlobalPose_1");
        var _emscripten_bind_PxRigidBody_setGlobalPose_2 = Module["_emscripten_bind_PxRigidBody_setGlobalPose_2"] = createExportWrapper("emscripten_bind_PxRigidBody_setGlobalPose_2");
        var _emscripten_bind_PxRigidBody_attachShape_1 = Module["_emscripten_bind_PxRigidBody_attachShape_1"] = createExportWrapper("emscripten_bind_PxRigidBody_attachShape_1");
        var _emscripten_bind_PxRigidBody_detachShape_1 = Module["_emscripten_bind_PxRigidBody_detachShape_1"] = createExportWrapper("emscripten_bind_PxRigidBody_detachShape_1");
        var _emscripten_bind_PxRigidBody_detachShape_2 = Module["_emscripten_bind_PxRigidBody_detachShape_2"] = createExportWrapper("emscripten_bind_PxRigidBody_detachShape_2");
        var _emscripten_bind_PxRigidBody_getNbShapes_0 = Module["_emscripten_bind_PxRigidBody_getNbShapes_0"] = createExportWrapper("emscripten_bind_PxRigidBody_getNbShapes_0");
        var _emscripten_bind_PxRigidBody_get_userData_0 = Module["_emscripten_bind_PxRigidBody_get_userData_0"] = createExportWrapper("emscripten_bind_PxRigidBody_get_userData_0");
        var _emscripten_bind_PxRigidBody_set_userData_1 = Module["_emscripten_bind_PxRigidBody_set_userData_1"] = createExportWrapper("emscripten_bind_PxRigidBody_set_userData_1");
        var _emscripten_bind_SimpleSimulationEventCallback_onConstraintBreak_2 = Module["_emscripten_bind_SimpleSimulationEventCallback_onConstraintBreak_2"] = createExportWrapper("emscripten_bind_SimpleSimulationEventCallback_onConstraintBreak_2");
        var _emscripten_bind_SimpleSimulationEventCallback_onWake_2 = Module["_emscripten_bind_SimpleSimulationEventCallback_onWake_2"] = createExportWrapper("emscripten_bind_SimpleSimulationEventCallback_onWake_2");
        var _emscripten_bind_SimpleSimulationEventCallback_onSleep_2 = Module["_emscripten_bind_SimpleSimulationEventCallback_onSleep_2"] = createExportWrapper("emscripten_bind_SimpleSimulationEventCallback_onSleep_2");
        var _emscripten_bind_SimpleSimulationEventCallback_onContact_3 = Module["_emscripten_bind_SimpleSimulationEventCallback_onContact_3"] = createExportWrapper("emscripten_bind_SimpleSimulationEventCallback_onContact_3");
        var _emscripten_bind_SimpleSimulationEventCallback_onTrigger_2 = Module["_emscripten_bind_SimpleSimulationEventCallback_onTrigger_2"] = createExportWrapper("emscripten_bind_SimpleSimulationEventCallback_onTrigger_2");
        var _emscripten_bind_SimpleSimulationEventCallback___destroy___0 = Module["_emscripten_bind_SimpleSimulationEventCallback___destroy___0"] = createExportWrapper("emscripten_bind_SimpleSimulationEventCallback___destroy___0");
        var _emscripten_bind_PxSweepCallback_hasAnyHits_0 = Module["_emscripten_bind_PxSweepCallback_hasAnyHits_0"] = createExportWrapper("emscripten_bind_PxSweepCallback_hasAnyHits_0");
        var _emscripten_bind_PxSweepCallback___destroy___0 = Module["_emscripten_bind_PxSweepCallback___destroy___0"] = createExportWrapper("emscripten_bind_PxSweepCallback___destroy___0");
        var _emscripten_bind_PxVehicleDrive_getConcreteTypeName_0 = Module["_emscripten_bind_PxVehicleDrive_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_getConcreteTypeName_0");
        var _emscripten_bind_PxVehicleDrive_getConcreteType_0 = Module["_emscripten_bind_PxVehicleDrive_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_getConcreteType_0");
        var _emscripten_bind_PxVehicleDrive_setBaseFlag_2 = Module["_emscripten_bind_PxVehicleDrive_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxVehicleDrive_setBaseFlag_2");
        var _emscripten_bind_PxVehicleDrive_setBaseFlags_1 = Module["_emscripten_bind_PxVehicleDrive_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive_setBaseFlags_1");
        var _emscripten_bind_PxVehicleDrive_getBaseFlags_0 = Module["_emscripten_bind_PxVehicleDrive_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_getBaseFlags_0");
        var _emscripten_bind_PxVehicleDrive_isReleasable_0 = Module["_emscripten_bind_PxVehicleDrive_isReleasable_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_isReleasable_0");
        var _emscripten_bind_PxVehicleDrive_getVehicleType_0 = Module["_emscripten_bind_PxVehicleDrive_getVehicleType_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_getVehicleType_0");
        var _emscripten_bind_PxVehicleDrive_getRigidDynamicActor_0 = Module["_emscripten_bind_PxVehicleDrive_getRigidDynamicActor_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_getRigidDynamicActor_0");
        var _emscripten_bind_PxVehicleDrive_computeForwardSpeed_0 = Module["_emscripten_bind_PxVehicleDrive_computeForwardSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_computeForwardSpeed_0");
        var _emscripten_bind_PxVehicleDrive_computeSidewaysSpeed_0 = Module["_emscripten_bind_PxVehicleDrive_computeSidewaysSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_computeSidewaysSpeed_0");
        var _emscripten_bind_PxVehicleDrive_getNbNonDrivenWheels_0 = Module["_emscripten_bind_PxVehicleDrive_getNbNonDrivenWheels_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_getNbNonDrivenWheels_0");
        var _emscripten_bind_PxVehicleDrive_get_mDriveDynData_0 = Module["_emscripten_bind_PxVehicleDrive_get_mDriveDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_get_mDriveDynData_0");
        var _emscripten_bind_PxVehicleDrive_set_mDriveDynData_1 = Module["_emscripten_bind_PxVehicleDrive_set_mDriveDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive_set_mDriveDynData_1");
        var _memcpy = Module["_memcpy"] = createExportWrapper("memcpy");
        var _emscripten_bind_PxVehicleDrive_get_mWheelsSimData_0 = Module["_emscripten_bind_PxVehicleDrive_get_mWheelsSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_get_mWheelsSimData_0");
        var _emscripten_bind_PxVehicleDrive_set_mWheelsSimData_1 = Module["_emscripten_bind_PxVehicleDrive_set_mWheelsSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive_set_mWheelsSimData_1");
        var _emscripten_bind_PxVehicleDrive_get_mWheelsDynData_0 = Module["_emscripten_bind_PxVehicleDrive_get_mWheelsDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive_get_mWheelsDynData_0");
        var _emscripten_bind_PxVehicleDrive_set_mWheelsDynData_1 = Module["_emscripten_bind_PxVehicleDrive_set_mWheelsDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive_set_mWheelsDynData_1");
        var _emscripten_bind_PxVehicleDriveSimData_PxVehicleDriveSimData_0 = Module["_emscripten_bind_PxVehicleDriveSimData_PxVehicleDriveSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_PxVehicleDriveSimData_0");
        var _emscripten_bind_PxVehicleDriveSimData_getEngineData_0 = Module["_emscripten_bind_PxVehicleDriveSimData_getEngineData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_getEngineData_0");
        var _emscripten_bind_PxVehicleDriveSimData_setEngineData_1 = Module["_emscripten_bind_PxVehicleDriveSimData_setEngineData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_setEngineData_1");
        var _emscripten_bind_PxVehicleDriveSimData_getGearsData_0 = Module["_emscripten_bind_PxVehicleDriveSimData_getGearsData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_getGearsData_0");
        var _emscripten_bind_PxVehicleDriveSimData_setGearsData_1 = Module["_emscripten_bind_PxVehicleDriveSimData_setGearsData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_setGearsData_1");
        var _emscripten_bind_PxVehicleDriveSimData_getClutchData_0 = Module["_emscripten_bind_PxVehicleDriveSimData_getClutchData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_getClutchData_0");
        var _emscripten_bind_PxVehicleDriveSimData_setClutchData_1 = Module["_emscripten_bind_PxVehicleDriveSimData_setClutchData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_setClutchData_1");
        var _emscripten_bind_PxVehicleDriveSimData_getAutoBoxData_0 = Module["_emscripten_bind_PxVehicleDriveSimData_getAutoBoxData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_getAutoBoxData_0");
        var _emscripten_bind_PxVehicleDriveSimData_setAutoBoxData_1 = Module["_emscripten_bind_PxVehicleDriveSimData_setAutoBoxData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData_setAutoBoxData_1");
        var _emscripten_bind_PxVehicleDriveSimData___destroy___0 = Module["_emscripten_bind_PxVehicleDriveSimData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData___destroy___0");
        var _emscripten_bind_PxGeometry_getType_0 = Module["_emscripten_bind_PxGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxGeometry_getType_0");
        var _emscripten_bind_PxGeometry___destroy___0 = Module["_emscripten_bind_PxGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxGeometry___destroy___0");
        var _emscripten_bind_PxSimpleTriangleMesh_PxSimpleTriangleMesh_0 = Module["_emscripten_bind_PxSimpleTriangleMesh_PxSimpleTriangleMesh_0"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_PxSimpleTriangleMesh_0");
        var _emscripten_bind_PxSimpleTriangleMesh_setToDefault_0 = Module["_emscripten_bind_PxSimpleTriangleMesh_setToDefault_0"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_setToDefault_0");
        var _emscripten_bind_PxSimpleTriangleMesh_isValid_0 = Module["_emscripten_bind_PxSimpleTriangleMesh_isValid_0"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_isValid_0");
        var _emscripten_bind_PxSimpleTriangleMesh_get_points_0 = Module["_emscripten_bind_PxSimpleTriangleMesh_get_points_0"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_get_points_0");
        var _emscripten_bind_PxSimpleTriangleMesh_set_points_1 = Module["_emscripten_bind_PxSimpleTriangleMesh_set_points_1"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_set_points_1");
        var _emscripten_bind_PxSimpleTriangleMesh_get_triangles_0 = Module["_emscripten_bind_PxSimpleTriangleMesh_get_triangles_0"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_get_triangles_0");
        var _emscripten_bind_PxSimpleTriangleMesh_set_triangles_1 = Module["_emscripten_bind_PxSimpleTriangleMesh_set_triangles_1"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_set_triangles_1");
        var _emscripten_bind_PxSimpleTriangleMesh_get_flags_0 = Module["_emscripten_bind_PxSimpleTriangleMesh_get_flags_0"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_get_flags_0");
        var _emscripten_bind_PxSimpleTriangleMesh_set_flags_1 = Module["_emscripten_bind_PxSimpleTriangleMesh_set_flags_1"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh_set_flags_1");
        var _emscripten_bind_PxSimpleTriangleMesh___destroy___0 = Module["_emscripten_bind_PxSimpleTriangleMesh___destroy___0"] = createExportWrapper("emscripten_bind_PxSimpleTriangleMesh___destroy___0");
        var _emscripten_bind_PxCpuDispatcher___destroy___0 = Module["_emscripten_bind_PxCpuDispatcher___destroy___0"] = createExportWrapper("emscripten_bind_PxCpuDispatcher___destroy___0");
        var _emscripten_bind_PxErrorCallback_reportError_4 = Module["_emscripten_bind_PxErrorCallback_reportError_4"] = createExportWrapper("emscripten_bind_PxErrorCallback_reportError_4");
        var _emscripten_bind_PxErrorCallback___destroy___0 = Module["_emscripten_bind_PxErrorCallback___destroy___0"] = createExportWrapper("emscripten_bind_PxErrorCallback___destroy___0");
        var _emscripten_bind_PxInputData___destroy___0 = Module["_emscripten_bind_PxInputData___destroy___0"] = createExportWrapper("emscripten_bind_PxInputData___destroy___0");
        var _emscripten_bind_PxOutputStream___destroy___0 = Module["_emscripten_bind_PxOutputStream___destroy___0"] = createExportWrapper("emscripten_bind_PxOutputStream___destroy___0");
        var _emscripten_bind_PxJoint_setActors_2 = Module["_emscripten_bind_PxJoint_setActors_2"] = createExportWrapper("emscripten_bind_PxJoint_setActors_2");
        var _emscripten_bind_PxJoint_setLocalPose_2 = Module["_emscripten_bind_PxJoint_setLocalPose_2"] = createExportWrapper("emscripten_bind_PxJoint_setLocalPose_2");
        var _emscripten_bind_PxJoint_getLocalPose_1 = Module["_emscripten_bind_PxJoint_getLocalPose_1"] = createExportWrapper("emscripten_bind_PxJoint_getLocalPose_1");
        var _emscripten_bind_PxJoint_getRelativeTransform_0 = Module["_emscripten_bind_PxJoint_getRelativeTransform_0"] = createExportWrapper("emscripten_bind_PxJoint_getRelativeTransform_0");
        var _emscripten_bind_PxJoint_getRelativeLinearVelocity_0 = Module["_emscripten_bind_PxJoint_getRelativeLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxJoint_getRelativeLinearVelocity_0");
        var _emscripten_bind_PxJoint_getRelativeAngularVelocity_0 = Module["_emscripten_bind_PxJoint_getRelativeAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxJoint_getRelativeAngularVelocity_0");
        var _emscripten_bind_PxJoint_setBreakForce_2 = Module["_emscripten_bind_PxJoint_setBreakForce_2"] = createExportWrapper("emscripten_bind_PxJoint_setBreakForce_2");
        var _emscripten_bind_PxJoint_setConstraintFlags_1 = Module["_emscripten_bind_PxJoint_setConstraintFlags_1"] = createExportWrapper("emscripten_bind_PxJoint_setConstraintFlags_1");
        var _emscripten_bind_PxJoint_setConstraintFlag_2 = Module["_emscripten_bind_PxJoint_setConstraintFlag_2"] = createExportWrapper("emscripten_bind_PxJoint_setConstraintFlag_2");
        var _emscripten_bind_PxJoint_getConstraintFlags_0 = Module["_emscripten_bind_PxJoint_getConstraintFlags_0"] = createExportWrapper("emscripten_bind_PxJoint_getConstraintFlags_0");
        var _emscripten_bind_PxJoint_setInvMassScale0_1 = Module["_emscripten_bind_PxJoint_setInvMassScale0_1"] = createExportWrapper("emscripten_bind_PxJoint_setInvMassScale0_1");
        var _emscripten_bind_PxJoint_getInvMassScale0_0 = Module["_emscripten_bind_PxJoint_getInvMassScale0_0"] = createExportWrapper("emscripten_bind_PxJoint_getInvMassScale0_0");
        var _emscripten_bind_PxJoint_setInvMassScale1_1 = Module["_emscripten_bind_PxJoint_setInvMassScale1_1"] = createExportWrapper("emscripten_bind_PxJoint_setInvMassScale1_1");
        var _emscripten_bind_PxJoint_getInvMassScale1_0 = Module["_emscripten_bind_PxJoint_getInvMassScale1_0"] = createExportWrapper("emscripten_bind_PxJoint_getInvMassScale1_0");
        var _emscripten_bind_PxJoint_getConstraint_0 = Module["_emscripten_bind_PxJoint_getConstraint_0"] = createExportWrapper("emscripten_bind_PxJoint_getConstraint_0");
        var _emscripten_bind_PxJoint_setName_1 = Module["_emscripten_bind_PxJoint_setName_1"] = createExportWrapper("emscripten_bind_PxJoint_setName_1");
        var _emscripten_bind_PxJoint_getName_0 = Module["_emscripten_bind_PxJoint_getName_0"] = createExportWrapper("emscripten_bind_PxJoint_getName_0");
        var _emscripten_bind_PxJoint_release_0 = Module["_emscripten_bind_PxJoint_release_0"] = createExportWrapper("emscripten_bind_PxJoint_release_0");
        var _emscripten_bind_PxJoint_getScene_0 = Module["_emscripten_bind_PxJoint_getScene_0"] = createExportWrapper("emscripten_bind_PxJoint_getScene_0");
        var _emscripten_bind_PxJoint_getConcreteTypeName_0 = Module["_emscripten_bind_PxJoint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxJoint_getConcreteTypeName_0");
        var _emscripten_bind_PxJoint_getConcreteType_0 = Module["_emscripten_bind_PxJoint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxJoint_getConcreteType_0");
        var _emscripten_bind_PxJoint_setBaseFlag_2 = Module["_emscripten_bind_PxJoint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxJoint_setBaseFlag_2");
        var _emscripten_bind_PxJoint_setBaseFlags_1 = Module["_emscripten_bind_PxJoint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxJoint_setBaseFlags_1");
        var _emscripten_bind_PxJoint_getBaseFlags_0 = Module["_emscripten_bind_PxJoint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxJoint_getBaseFlags_0");
        var _emscripten_bind_PxJoint_isReleasable_0 = Module["_emscripten_bind_PxJoint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxJoint_isReleasable_0");
        var _emscripten_bind_PxJointLimitParameters_isValid_0 = Module["_emscripten_bind_PxJointLimitParameters_isValid_0"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_isValid_0");
        var _emscripten_bind_PxJointLimitParameters_isSoft_0 = Module["_emscripten_bind_PxJointLimitParameters_isSoft_0"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_isSoft_0");
        var _emscripten_bind_PxJointLimitParameters_get_restitution_0 = Module["_emscripten_bind_PxJointLimitParameters_get_restitution_0"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_get_restitution_0");
        var _emscripten_bind_PxJointLimitParameters_set_restitution_1 = Module["_emscripten_bind_PxJointLimitParameters_set_restitution_1"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_set_restitution_1");
        var _emscripten_bind_PxJointLimitParameters_get_bounceThreshold_0 = Module["_emscripten_bind_PxJointLimitParameters_get_bounceThreshold_0"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_get_bounceThreshold_0");
        var _emscripten_bind_PxJointLimitParameters_set_bounceThreshold_1 = Module["_emscripten_bind_PxJointLimitParameters_set_bounceThreshold_1"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_set_bounceThreshold_1");
        var _emscripten_bind_PxJointLimitParameters_get_stiffness_0 = Module["_emscripten_bind_PxJointLimitParameters_get_stiffness_0"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_get_stiffness_0");
        var _emscripten_bind_PxJointLimitParameters_set_stiffness_1 = Module["_emscripten_bind_PxJointLimitParameters_set_stiffness_1"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_set_stiffness_1");
        var _emscripten_bind_PxJointLimitParameters_get_damping_0 = Module["_emscripten_bind_PxJointLimitParameters_get_damping_0"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_get_damping_0");
        var _emscripten_bind_PxJointLimitParameters_set_damping_1 = Module["_emscripten_bind_PxJointLimitParameters_set_damping_1"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_set_damping_1");
        var _emscripten_bind_PxJointLimitParameters_get_contactDistance_0 = Module["_emscripten_bind_PxJointLimitParameters_get_contactDistance_0"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_get_contactDistance_0");
        var _emscripten_bind_PxJointLimitParameters_set_contactDistance_1 = Module["_emscripten_bind_PxJointLimitParameters_set_contactDistance_1"] = createExportWrapper("emscripten_bind_PxJointLimitParameters_set_contactDistance_1");
        var _emscripten_bind_PxSpring_PxSpring_2 = Module["_emscripten_bind_PxSpring_PxSpring_2"] = createExportWrapper("emscripten_bind_PxSpring_PxSpring_2");
        var _emscripten_bind_PxSpring_get_stiffness_0 = Module["_emscripten_bind_PxSpring_get_stiffness_0"] = createExportWrapper("emscripten_bind_PxSpring_get_stiffness_0");
        var _emscripten_bind_PxSpring_set_stiffness_1 = Module["_emscripten_bind_PxSpring_set_stiffness_1"] = createExportWrapper("emscripten_bind_PxSpring_set_stiffness_1");
        var _emscripten_bind_PxSpring_get_damping_0 = Module["_emscripten_bind_PxSpring_get_damping_0"] = createExportWrapper("emscripten_bind_PxSpring_get_damping_0");
        var _emscripten_bind_PxSpring_set_damping_1 = Module["_emscripten_bind_PxSpring_set_damping_1"] = createExportWrapper("emscripten_bind_PxSpring_set_damping_1");
        var _emscripten_bind_PxSpring___destroy___0 = Module["_emscripten_bind_PxSpring___destroy___0"] = createExportWrapper("emscripten_bind_PxSpring___destroy___0");
        var _emscripten_bind_PxController_getType_0 = Module["_emscripten_bind_PxController_getType_0"] = createExportWrapper("emscripten_bind_PxController_getType_0");
        var _emscripten_bind_PxController_release_0 = Module["_emscripten_bind_PxController_release_0"] = createExportWrapper("emscripten_bind_PxController_release_0");
        var _emscripten_bind_PxController_move_4 = Module["_emscripten_bind_PxController_move_4"] = createExportWrapper("emscripten_bind_PxController_move_4");
        var _emscripten_bind_PxController_move_5 = Module["_emscripten_bind_PxController_move_5"] = createExportWrapper("emscripten_bind_PxController_move_5");
        var _emscripten_bind_PxController_setPosition_1 = Module["_emscripten_bind_PxController_setPosition_1"] = createExportWrapper("emscripten_bind_PxController_setPosition_1");
        var _emscripten_bind_PxController_getPosition_0 = Module["_emscripten_bind_PxController_getPosition_0"] = createExportWrapper("emscripten_bind_PxController_getPosition_0");
        var _emscripten_bind_PxController_setFootPosition_1 = Module["_emscripten_bind_PxController_setFootPosition_1"] = createExportWrapper("emscripten_bind_PxController_setFootPosition_1");
        var _emscripten_bind_PxController_getFootPosition_0 = Module["_emscripten_bind_PxController_getFootPosition_0"] = createExportWrapper("emscripten_bind_PxController_getFootPosition_0");
        var _emscripten_bind_PxController_getActor_0 = Module["_emscripten_bind_PxController_getActor_0"] = createExportWrapper("emscripten_bind_PxController_getActor_0");
        var _emscripten_bind_PxController_setStepOffset_1 = Module["_emscripten_bind_PxController_setStepOffset_1"] = createExportWrapper("emscripten_bind_PxController_setStepOffset_1");
        var _emscripten_bind_PxController_getStepOffset_0 = Module["_emscripten_bind_PxController_getStepOffset_0"] = createExportWrapper("emscripten_bind_PxController_getStepOffset_0");
        var _emscripten_bind_PxController_setNonWalkableMode_1 = Module["_emscripten_bind_PxController_setNonWalkableMode_1"] = createExportWrapper("emscripten_bind_PxController_setNonWalkableMode_1");
        var _emscripten_bind_PxController_getNonWalkableMode_0 = Module["_emscripten_bind_PxController_getNonWalkableMode_0"] = createExportWrapper("emscripten_bind_PxController_getNonWalkableMode_0");
        var _emscripten_bind_PxController_getContactOffset_0 = Module["_emscripten_bind_PxController_getContactOffset_0"] = createExportWrapper("emscripten_bind_PxController_getContactOffset_0");
        var _emscripten_bind_PxController_setContactOffset_1 = Module["_emscripten_bind_PxController_setContactOffset_1"] = createExportWrapper("emscripten_bind_PxController_setContactOffset_1");
        var _emscripten_bind_PxController_getUpDirection_0 = Module["_emscripten_bind_PxController_getUpDirection_0"] = createExportWrapper("emscripten_bind_PxController_getUpDirection_0");
        var _emscripten_bind_PxController_setUpDirection_1 = Module["_emscripten_bind_PxController_setUpDirection_1"] = createExportWrapper("emscripten_bind_PxController_setUpDirection_1");
        var _emscripten_bind_PxController_getSlopeLimit_0 = Module["_emscripten_bind_PxController_getSlopeLimit_0"] = createExportWrapper("emscripten_bind_PxController_getSlopeLimit_0");
        var _emscripten_bind_PxController_setSlopeLimit_1 = Module["_emscripten_bind_PxController_setSlopeLimit_1"] = createExportWrapper("emscripten_bind_PxController_setSlopeLimit_1");
        var _emscripten_bind_PxController_invalidateCache_0 = Module["_emscripten_bind_PxController_invalidateCache_0"] = createExportWrapper("emscripten_bind_PxController_invalidateCache_0");
        var _emscripten_bind_PxController_getScene_0 = Module["_emscripten_bind_PxController_getScene_0"] = createExportWrapper("emscripten_bind_PxController_getScene_0");
        var _emscripten_bind_PxController_getUserData_0 = Module["_emscripten_bind_PxController_getUserData_0"] = createExportWrapper("emscripten_bind_PxController_getUserData_0");
        var _emscripten_bind_PxController_setUserData_1 = Module["_emscripten_bind_PxController_setUserData_1"] = createExportWrapper("emscripten_bind_PxController_setUserData_1");
        var _emscripten_bind_PxController_getState_1 = Module["_emscripten_bind_PxController_getState_1"] = createExportWrapper("emscripten_bind_PxController_getState_1");
        var _emscripten_bind_PxController_getStats_1 = Module["_emscripten_bind_PxController_getStats_1"] = createExportWrapper("emscripten_bind_PxController_getStats_1");
        var _emscripten_bind_PxController_resize_1 = Module["_emscripten_bind_PxController_resize_1"] = createExportWrapper("emscripten_bind_PxController_resize_1");
        var _emscripten_bind_PxControllerDesc_isValid_0 = Module["_emscripten_bind_PxControllerDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_isValid_0");
        var _emscripten_bind_PxControllerDesc_getType_0 = Module["_emscripten_bind_PxControllerDesc_getType_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_getType_0");
        var _emscripten_bind_PxControllerDesc_get_position_0 = Module["_emscripten_bind_PxControllerDesc_get_position_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_position_0");
        var _emscripten_bind_PxControllerDesc_set_position_1 = Module["_emscripten_bind_PxControllerDesc_set_position_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_position_1");
        var _emscripten_bind_PxControllerDesc_get_upDirection_0 = Module["_emscripten_bind_PxControllerDesc_get_upDirection_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_upDirection_0");
        var _emscripten_bind_PxControllerDesc_set_upDirection_1 = Module["_emscripten_bind_PxControllerDesc_set_upDirection_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_upDirection_1");
        var _emscripten_bind_PxControllerDesc_get_slopeLimit_0 = Module["_emscripten_bind_PxControllerDesc_get_slopeLimit_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_slopeLimit_0");
        var _emscripten_bind_PxControllerDesc_set_slopeLimit_1 = Module["_emscripten_bind_PxControllerDesc_set_slopeLimit_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_slopeLimit_1");
        var _emscripten_bind_PxControllerDesc_get_invisibleWallHeight_0 = Module["_emscripten_bind_PxControllerDesc_get_invisibleWallHeight_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_invisibleWallHeight_0");
        var _emscripten_bind_PxControllerDesc_set_invisibleWallHeight_1 = Module["_emscripten_bind_PxControllerDesc_set_invisibleWallHeight_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_invisibleWallHeight_1");
        var _emscripten_bind_PxControllerDesc_get_maxJumpHeight_0 = Module["_emscripten_bind_PxControllerDesc_get_maxJumpHeight_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_maxJumpHeight_0");
        var _emscripten_bind_PxControllerDesc_set_maxJumpHeight_1 = Module["_emscripten_bind_PxControllerDesc_set_maxJumpHeight_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_maxJumpHeight_1");
        var _emscripten_bind_PxControllerDesc_get_contactOffset_0 = Module["_emscripten_bind_PxControllerDesc_get_contactOffset_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_contactOffset_0");
        var _emscripten_bind_PxControllerDesc_set_contactOffset_1 = Module["_emscripten_bind_PxControllerDesc_set_contactOffset_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_contactOffset_1");
        var _emscripten_bind_PxControllerDesc_get_stepOffset_0 = Module["_emscripten_bind_PxControllerDesc_get_stepOffset_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_stepOffset_0");
        var _emscripten_bind_PxControllerDesc_set_stepOffset_1 = Module["_emscripten_bind_PxControllerDesc_set_stepOffset_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_stepOffset_1");
        var _emscripten_bind_PxControllerDesc_get_density_0 = Module["_emscripten_bind_PxControllerDesc_get_density_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_density_0");
        var _emscripten_bind_PxControllerDesc_set_density_1 = Module["_emscripten_bind_PxControllerDesc_set_density_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_density_1");
        var _emscripten_bind_PxControllerDesc_get_scaleCoeff_0 = Module["_emscripten_bind_PxControllerDesc_get_scaleCoeff_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_scaleCoeff_0");
        var _emscripten_bind_PxControllerDesc_set_scaleCoeff_1 = Module["_emscripten_bind_PxControllerDesc_set_scaleCoeff_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_scaleCoeff_1");
        var _emscripten_bind_PxControllerDesc_get_volumeGrowth_0 = Module["_emscripten_bind_PxControllerDesc_get_volumeGrowth_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_volumeGrowth_0");
        var _emscripten_bind_PxControllerDesc_set_volumeGrowth_1 = Module["_emscripten_bind_PxControllerDesc_set_volumeGrowth_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_volumeGrowth_1");
        var _emscripten_bind_PxControllerDesc_get_reportCallback_0 = Module["_emscripten_bind_PxControllerDesc_get_reportCallback_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_reportCallback_0");
        var _emscripten_bind_PxControllerDesc_set_reportCallback_1 = Module["_emscripten_bind_PxControllerDesc_set_reportCallback_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_reportCallback_1");
        var _emscripten_bind_PxControllerDesc_get_nonWalkableMode_0 = Module["_emscripten_bind_PxControllerDesc_get_nonWalkableMode_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_nonWalkableMode_0");
        var _emscripten_bind_PxControllerDesc_set_nonWalkableMode_1 = Module["_emscripten_bind_PxControllerDesc_set_nonWalkableMode_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_nonWalkableMode_1");
        var _emscripten_bind_PxControllerDesc_get_material_0 = Module["_emscripten_bind_PxControllerDesc_get_material_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_material_0");
        var _emscripten_bind_PxControllerDesc_set_material_1 = Module["_emscripten_bind_PxControllerDesc_set_material_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_material_1");
        var _emscripten_bind_PxControllerDesc_get_registerDeletionListener_0 = Module["_emscripten_bind_PxControllerDesc_get_registerDeletionListener_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_registerDeletionListener_0");
        var _emscripten_bind_PxControllerDesc_set_registerDeletionListener_1 = Module["_emscripten_bind_PxControllerDesc_set_registerDeletionListener_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_registerDeletionListener_1");
        var _emscripten_bind_PxControllerDesc_get_userData_0 = Module["_emscripten_bind_PxControllerDesc_get_userData_0"] = createExportWrapper("emscripten_bind_PxControllerDesc_get_userData_0");
        var _emscripten_bind_PxControllerDesc_set_userData_1 = Module["_emscripten_bind_PxControllerDesc_set_userData_1"] = createExportWrapper("emscripten_bind_PxControllerDesc_set_userData_1");
        var _emscripten_bind_PxControllerHit_get_controller_0 = Module["_emscripten_bind_PxControllerHit_get_controller_0"] = createExportWrapper("emscripten_bind_PxControllerHit_get_controller_0");
        var _emscripten_bind_PxControllerHit_set_controller_1 = Module["_emscripten_bind_PxControllerHit_set_controller_1"] = createExportWrapper("emscripten_bind_PxControllerHit_set_controller_1");
        var _emscripten_bind_PxControllerHit_get_worldPos_0 = Module["_emscripten_bind_PxControllerHit_get_worldPos_0"] = createExportWrapper("emscripten_bind_PxControllerHit_get_worldPos_0");
        var _emscripten_bind_PxControllerHit_set_worldPos_1 = Module["_emscripten_bind_PxControllerHit_set_worldPos_1"] = createExportWrapper("emscripten_bind_PxControllerHit_set_worldPos_1");
        var _emscripten_bind_PxControllerHit_get_worldNormal_0 = Module["_emscripten_bind_PxControllerHit_get_worldNormal_0"] = createExportWrapper("emscripten_bind_PxControllerHit_get_worldNormal_0");
        var _emscripten_bind_PxControllerHit_set_worldNormal_1 = Module["_emscripten_bind_PxControllerHit_set_worldNormal_1"] = createExportWrapper("emscripten_bind_PxControllerHit_set_worldNormal_1");
        var _emscripten_bind_PxControllerHit_get_dir_0 = Module["_emscripten_bind_PxControllerHit_get_dir_0"] = createExportWrapper("emscripten_bind_PxControllerHit_get_dir_0");
        var _emscripten_bind_PxControllerHit_set_dir_1 = Module["_emscripten_bind_PxControllerHit_set_dir_1"] = createExportWrapper("emscripten_bind_PxControllerHit_set_dir_1");
        var _emscripten_bind_PxControllerHit_get_length_0 = Module["_emscripten_bind_PxControllerHit_get_length_0"] = createExportWrapper("emscripten_bind_PxControllerHit_get_length_0");
        var _emscripten_bind_PxControllerHit_set_length_1 = Module["_emscripten_bind_PxControllerHit_set_length_1"] = createExportWrapper("emscripten_bind_PxControllerHit_set_length_1");
        var _emscripten_bind_PxControllerHit___destroy___0 = Module["_emscripten_bind_PxControllerHit___destroy___0"] = createExportWrapper("emscripten_bind_PxControllerHit___destroy___0");
        var _emscripten_bind_PxObstacle_getType_0 = Module["_emscripten_bind_PxObstacle_getType_0"] = createExportWrapper("emscripten_bind_PxObstacle_getType_0");
        var _emscripten_bind_PxObstacle_get_mUserData_0 = Module["_emscripten_bind_PxObstacle_get_mUserData_0"] = createExportWrapper("emscripten_bind_PxObstacle_get_mUserData_0");
        var _emscripten_bind_PxObstacle_set_mUserData_1 = Module["_emscripten_bind_PxObstacle_set_mUserData_1"] = createExportWrapper("emscripten_bind_PxObstacle_set_mUserData_1");
        var _emscripten_bind_PxObstacle_get_mPos_0 = Module["_emscripten_bind_PxObstacle_get_mPos_0"] = createExportWrapper("emscripten_bind_PxObstacle_get_mPos_0");
        var _emscripten_bind_PxObstacle_set_mPos_1 = Module["_emscripten_bind_PxObstacle_set_mPos_1"] = createExportWrapper("emscripten_bind_PxObstacle_set_mPos_1");
        var _emscripten_bind_PxObstacle_get_mRot_0 = Module["_emscripten_bind_PxObstacle_get_mRot_0"] = createExportWrapper("emscripten_bind_PxObstacle_get_mRot_0");
        var _emscripten_bind_PxObstacle_set_mRot_1 = Module["_emscripten_bind_PxObstacle_set_mRot_1"] = createExportWrapper("emscripten_bind_PxObstacle_set_mRot_1");
        var _emscripten_bind_PxObstacle___destroy___0 = Module["_emscripten_bind_PxObstacle___destroy___0"] = createExportWrapper("emscripten_bind_PxObstacle___destroy___0");
        var _emscripten_bind_PxUserControllerHitReport_onShapeHit_1 = Module["_emscripten_bind_PxUserControllerHitReport_onShapeHit_1"] = createExportWrapper("emscripten_bind_PxUserControllerHitReport_onShapeHit_1");
        var _emscripten_bind_PxUserControllerHitReport_onControllerHit_1 = Module["_emscripten_bind_PxUserControllerHitReport_onControllerHit_1"] = createExportWrapper("emscripten_bind_PxUserControllerHitReport_onControllerHit_1");
        var _emscripten_bind_PxUserControllerHitReport_onObstacleHit_1 = Module["_emscripten_bind_PxUserControllerHitReport_onObstacleHit_1"] = createExportWrapper("emscripten_bind_PxUserControllerHitReport_onObstacleHit_1");
        var _emscripten_bind_PxU8ConstPtr___destroy___0 = Module["_emscripten_bind_PxU8ConstPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxU8ConstPtr___destroy___0");
        var _emscripten_bind_PxU16ConstPtr___destroy___0 = Module["_emscripten_bind_PxU16ConstPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxU16ConstPtr___destroy___0");
        var _emscripten_bind_PxU32ConstPtr___destroy___0 = Module["_emscripten_bind_PxU32ConstPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxU32ConstPtr___destroy___0");
        var _emscripten_bind_SimplePvdTransport_connect_0 = Module["_emscripten_bind_SimplePvdTransport_connect_0"] = createExportWrapper("emscripten_bind_SimplePvdTransport_connect_0");
        var _emscripten_bind_SimplePvdTransport_send_2 = Module["_emscripten_bind_SimplePvdTransport_send_2"] = createExportWrapper("emscripten_bind_SimplePvdTransport_send_2");
        var _emscripten_bind_SimplePvdTransport_disconnect_0 = Module["_emscripten_bind_SimplePvdTransport_disconnect_0"] = createExportWrapper("emscripten_bind_SimplePvdTransport_disconnect_0");
        var _emscripten_bind_SimplePvdTransport_isConnected_0 = Module["_emscripten_bind_SimplePvdTransport_isConnected_0"] = createExportWrapper("emscripten_bind_SimplePvdTransport_isConnected_0");
        var _emscripten_bind_SimplePvdTransport___destroy___0 = Module["_emscripten_bind_SimplePvdTransport___destroy___0"] = createExportWrapper("emscripten_bind_SimplePvdTransport___destroy___0");
        var _emscripten_bind_VoidPtr___destroy___0 = Module["_emscripten_bind_VoidPtr___destroy___0"] = createExportWrapper("emscripten_bind_VoidPtr___destroy___0");
        var _emscripten_bind_PxTopLevelFunctions_DefaultFilterShader_0 = Module["_emscripten_bind_PxTopLevelFunctions_DefaultFilterShader_0"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_DefaultFilterShader_0");
        var _emscripten_bind_PxTopLevelFunctions_CreateControllerManager_1 = Module["_emscripten_bind_PxTopLevelFunctions_CreateControllerManager_1"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreateControllerManager_1");
        var _emscripten_bind_PxTopLevelFunctions_CreateControllerManager_2 = Module["_emscripten_bind_PxTopLevelFunctions_CreateControllerManager_2"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreateControllerManager_2");
        var _emscripten_bind_PxTopLevelFunctions_CreateCooking_3 = Module["_emscripten_bind_PxTopLevelFunctions_CreateCooking_3"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreateCooking_3");
        var _emscripten_bind_PxTopLevelFunctions_CreateFoundation_3 = Module["_emscripten_bind_PxTopLevelFunctions_CreateFoundation_3"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreateFoundation_3");
        var _emscripten_bind_PxTopLevelFunctions_CreatePhysics_3 = Module["_emscripten_bind_PxTopLevelFunctions_CreatePhysics_3"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreatePhysics_3");
        var _emscripten_bind_PxTopLevelFunctions_CreatePhysics_4 = Module["_emscripten_bind_PxTopLevelFunctions_CreatePhysics_4"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreatePhysics_4");
        var _emscripten_bind_PxTopLevelFunctions_DefaultCpuDispatcherCreate_1 = Module["_emscripten_bind_PxTopLevelFunctions_DefaultCpuDispatcherCreate_1"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_DefaultCpuDispatcherCreate_1");
        var _emscripten_bind_PxTopLevelFunctions_InitExtensions_1 = Module["_emscripten_bind_PxTopLevelFunctions_InitExtensions_1"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_InitExtensions_1");
        var _emscripten_bind_PxTopLevelFunctions_CreateCudaContextManager_2 = Module["_emscripten_bind_PxTopLevelFunctions_CreateCudaContextManager_2"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreateCudaContextManager_2");
        var _emscripten_bind_PxTopLevelFunctions_CreatePvd_1 = Module["_emscripten_bind_PxTopLevelFunctions_CreatePvd_1"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_CreatePvd_1");
        var _emscripten_bind_PxTopLevelFunctions_D6JointCreate_5 = Module["_emscripten_bind_PxTopLevelFunctions_D6JointCreate_5"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_D6JointCreate_5");
        var _emscripten_bind_PxTopLevelFunctions_DistanceJointCreate_5 = Module["_emscripten_bind_PxTopLevelFunctions_DistanceJointCreate_5"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_DistanceJointCreate_5");
        var _emscripten_bind_PxTopLevelFunctions_FixedJointCreate_5 = Module["_emscripten_bind_PxTopLevelFunctions_FixedJointCreate_5"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_FixedJointCreate_5");
        var _emscripten_bind_PxTopLevelFunctions_PrismaticJointCreate_5 = Module["_emscripten_bind_PxTopLevelFunctions_PrismaticJointCreate_5"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_PrismaticJointCreate_5");
        var _emscripten_bind_PxTopLevelFunctions_RevoluteJointCreate_5 = Module["_emscripten_bind_PxTopLevelFunctions_RevoluteJointCreate_5"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_RevoluteJointCreate_5");
        var _emscripten_bind_PxTopLevelFunctions_SphericalJointCreate_5 = Module["_emscripten_bind_PxTopLevelFunctions_SphericalJointCreate_5"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_SphericalJointCreate_5");
        var _emscripten_bind_PxTopLevelFunctions_get_PHYSICS_VERSION_0 = Module["_emscripten_bind_PxTopLevelFunctions_get_PHYSICS_VERSION_0"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions_get_PHYSICS_VERSION_0");
        var _emscripten_bind_PxTopLevelFunctions___destroy___0 = Module["_emscripten_bind_PxTopLevelFunctions___destroy___0"] = createExportWrapper("emscripten_bind_PxTopLevelFunctions___destroy___0");
        var _emscripten_bind_PxActorFlags_PxActorFlags_1 = Module["_emscripten_bind_PxActorFlags_PxActorFlags_1"] = createExportWrapper("emscripten_bind_PxActorFlags_PxActorFlags_1");
        var _emscripten_bind_PxActorFlags_isSet_1 = Module["_emscripten_bind_PxActorFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxActorFlags_isSet_1");
        var _emscripten_bind_PxActorFlags_set_1 = Module["_emscripten_bind_PxActorFlags_set_1"] = createExportWrapper("emscripten_bind_PxActorFlags_set_1");
        var _emscripten_bind_PxActorFlags_clear_1 = Module["_emscripten_bind_PxActorFlags_clear_1"] = createExportWrapper("emscripten_bind_PxActorFlags_clear_1");
        var _emscripten_bind_PxActorFlags___destroy___0 = Module["_emscripten_bind_PxActorFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxActorFlags___destroy___0");
        var _emscripten_bind_PxActorTypeFlags_PxActorTypeFlags_1 = Module["_emscripten_bind_PxActorTypeFlags_PxActorTypeFlags_1"] = createExportWrapper("emscripten_bind_PxActorTypeFlags_PxActorTypeFlags_1");
        var _emscripten_bind_PxActorTypeFlags_isSet_1 = Module["_emscripten_bind_PxActorTypeFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxActorTypeFlags_isSet_1");
        var _emscripten_bind_PxActorTypeFlags_set_1 = Module["_emscripten_bind_PxActorTypeFlags_set_1"] = createExportWrapper("emscripten_bind_PxActorTypeFlags_set_1");
        var _emscripten_bind_PxActorTypeFlags_clear_1 = Module["_emscripten_bind_PxActorTypeFlags_clear_1"] = createExportWrapper("emscripten_bind_PxActorTypeFlags_clear_1");
        var _emscripten_bind_PxActorTypeFlags___destroy___0 = Module["_emscripten_bind_PxActorTypeFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxActorTypeFlags___destroy___0");
        var _emscripten_bind_PxAggregate_addActor_1 = Module["_emscripten_bind_PxAggregate_addActor_1"] = createExportWrapper("emscripten_bind_PxAggregate_addActor_1");
        var _emscripten_bind_PxAggregate_addActor_2 = Module["_emscripten_bind_PxAggregate_addActor_2"] = createExportWrapper("emscripten_bind_PxAggregate_addActor_2");
        var _emscripten_bind_PxAggregate_removeActor_1 = Module["_emscripten_bind_PxAggregate_removeActor_1"] = createExportWrapper("emscripten_bind_PxAggregate_removeActor_1");
        var _emscripten_bind_PxAggregate_addArticulation_1 = Module["_emscripten_bind_PxAggregate_addArticulation_1"] = createExportWrapper("emscripten_bind_PxAggregate_addArticulation_1");
        var _emscripten_bind_PxAggregate_removeArticulation_1 = Module["_emscripten_bind_PxAggregate_removeArticulation_1"] = createExportWrapper("emscripten_bind_PxAggregate_removeArticulation_1");
        var _emscripten_bind_PxAggregate_getNbActors_0 = Module["_emscripten_bind_PxAggregate_getNbActors_0"] = createExportWrapper("emscripten_bind_PxAggregate_getNbActors_0");
        var _emscripten_bind_PxAggregate_getMaxNbActors_0 = Module["_emscripten_bind_PxAggregate_getMaxNbActors_0"] = createExportWrapper("emscripten_bind_PxAggregate_getMaxNbActors_0");
        var _emscripten_bind_PxAggregate_getScene_0 = Module["_emscripten_bind_PxAggregate_getScene_0"] = createExportWrapper("emscripten_bind_PxAggregate_getScene_0");
        var _emscripten_bind_PxAggregate_getSelfCollision_0 = Module["_emscripten_bind_PxAggregate_getSelfCollision_0"] = createExportWrapper("emscripten_bind_PxAggregate_getSelfCollision_0");
        var _emscripten_bind_PxAggregate_release_0 = Module["_emscripten_bind_PxAggregate_release_0"] = createExportWrapper("emscripten_bind_PxAggregate_release_0");
        var _emscripten_bind_PxAggregate_getConcreteTypeName_0 = Module["_emscripten_bind_PxAggregate_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxAggregate_getConcreteTypeName_0");
        var _emscripten_bind_PxAggregate_getConcreteType_0 = Module["_emscripten_bind_PxAggregate_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxAggregate_getConcreteType_0");
        var _emscripten_bind_PxAggregate_setBaseFlag_2 = Module["_emscripten_bind_PxAggregate_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxAggregate_setBaseFlag_2");
        var _emscripten_bind_PxAggregate_setBaseFlags_1 = Module["_emscripten_bind_PxAggregate_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxAggregate_setBaseFlags_1");
        var _emscripten_bind_PxAggregate_getBaseFlags_0 = Module["_emscripten_bind_PxAggregate_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxAggregate_getBaseFlags_0");
        var _emscripten_bind_PxAggregate_isReleasable_0 = Module["_emscripten_bind_PxAggregate_isReleasable_0"] = createExportWrapper("emscripten_bind_PxAggregate_isReleasable_0");
        var _emscripten_bind_PxArticulation_setMaxProjectionIterations_1 = Module["_emscripten_bind_PxArticulation_setMaxProjectionIterations_1"] = createExportWrapper("emscripten_bind_PxArticulation_setMaxProjectionIterations_1");
        var _emscripten_bind_PxArticulation_getMaxProjectionIterations_0 = Module["_emscripten_bind_PxArticulation_getMaxProjectionIterations_0"] = createExportWrapper("emscripten_bind_PxArticulation_getMaxProjectionIterations_0");
        var _emscripten_bind_PxArticulation_setSeparationTolerance_1 = Module["_emscripten_bind_PxArticulation_setSeparationTolerance_1"] = createExportWrapper("emscripten_bind_PxArticulation_setSeparationTolerance_1");
        var _emscripten_bind_PxArticulation_getSeparationTolerance_0 = Module["_emscripten_bind_PxArticulation_getSeparationTolerance_0"] = createExportWrapper("emscripten_bind_PxArticulation_getSeparationTolerance_0");
        var _emscripten_bind_PxArticulation_setInternalDriveIterations_1 = Module["_emscripten_bind_PxArticulation_setInternalDriveIterations_1"] = createExportWrapper("emscripten_bind_PxArticulation_setInternalDriveIterations_1");
        var _emscripten_bind_PxArticulation_getInternalDriveIterations_0 = Module["_emscripten_bind_PxArticulation_getInternalDriveIterations_0"] = createExportWrapper("emscripten_bind_PxArticulation_getInternalDriveIterations_0");
        var _emscripten_bind_PxArticulation_setExternalDriveIterations_1 = Module["_emscripten_bind_PxArticulation_setExternalDriveIterations_1"] = createExportWrapper("emscripten_bind_PxArticulation_setExternalDriveIterations_1");
        var _emscripten_bind_PxArticulation_getExternalDriveIterations_0 = Module["_emscripten_bind_PxArticulation_getExternalDriveIterations_0"] = createExportWrapper("emscripten_bind_PxArticulation_getExternalDriveIterations_0");
        var _emscripten_bind_PxArticulation_createDriveCache_2 = Module["_emscripten_bind_PxArticulation_createDriveCache_2"] = createExportWrapper("emscripten_bind_PxArticulation_createDriveCache_2");
        var _emscripten_bind_PxArticulation_updateDriveCache_3 = Module["_emscripten_bind_PxArticulation_updateDriveCache_3"] = createExportWrapper("emscripten_bind_PxArticulation_updateDriveCache_3");
        var _emscripten_bind_PxArticulation_releaseDriveCache_1 = Module["_emscripten_bind_PxArticulation_releaseDriveCache_1"] = createExportWrapper("emscripten_bind_PxArticulation_releaseDriveCache_1");
        var _emscripten_bind_PxArticulation_applyImpulse_4 = Module["_emscripten_bind_PxArticulation_applyImpulse_4"] = createExportWrapper("emscripten_bind_PxArticulation_applyImpulse_4");
        var _emscripten_bind_PxArticulation_computeImpulseResponse_6 = Module["_emscripten_bind_PxArticulation_computeImpulseResponse_6"] = createExportWrapper("emscripten_bind_PxArticulation_computeImpulseResponse_6");
        var _emscripten_bind_PxArticulation_getScene_0 = Module["_emscripten_bind_PxArticulation_getScene_0"] = createExportWrapper("emscripten_bind_PxArticulation_getScene_0");
        var _emscripten_bind_PxArticulation_setSolverIterationCounts_2 = Module["_emscripten_bind_PxArticulation_setSolverIterationCounts_2"] = createExportWrapper("emscripten_bind_PxArticulation_setSolverIterationCounts_2");
        var _emscripten_bind_PxArticulation_isSleeping_0 = Module["_emscripten_bind_PxArticulation_isSleeping_0"] = createExportWrapper("emscripten_bind_PxArticulation_isSleeping_0");
        var _emscripten_bind_PxArticulation_setSleepThreshold_1 = Module["_emscripten_bind_PxArticulation_setSleepThreshold_1"] = createExportWrapper("emscripten_bind_PxArticulation_setSleepThreshold_1");
        var _emscripten_bind_PxArticulation_getSleepThreshold_0 = Module["_emscripten_bind_PxArticulation_getSleepThreshold_0"] = createExportWrapper("emscripten_bind_PxArticulation_getSleepThreshold_0");
        var _emscripten_bind_PxArticulation_setStabilizationThreshold_1 = Module["_emscripten_bind_PxArticulation_setStabilizationThreshold_1"] = createExportWrapper("emscripten_bind_PxArticulation_setStabilizationThreshold_1");
        var _emscripten_bind_PxArticulation_getStabilizationThreshold_0 = Module["_emscripten_bind_PxArticulation_getStabilizationThreshold_0"] = createExportWrapper("emscripten_bind_PxArticulation_getStabilizationThreshold_0");
        var _emscripten_bind_PxArticulation_setWakeCounter_1 = Module["_emscripten_bind_PxArticulation_setWakeCounter_1"] = createExportWrapper("emscripten_bind_PxArticulation_setWakeCounter_1");
        var _emscripten_bind_PxArticulation_getWakeCounter_0 = Module["_emscripten_bind_PxArticulation_getWakeCounter_0"] = createExportWrapper("emscripten_bind_PxArticulation_getWakeCounter_0");
        var _emscripten_bind_PxArticulation_wakeUp_0 = Module["_emscripten_bind_PxArticulation_wakeUp_0"] = createExportWrapper("emscripten_bind_PxArticulation_wakeUp_0");
        var _emscripten_bind_PxArticulation_putToSleep_0 = Module["_emscripten_bind_PxArticulation_putToSleep_0"] = createExportWrapper("emscripten_bind_PxArticulation_putToSleep_0");
        var _emscripten_bind_PxArticulation_createLink_2 = Module["_emscripten_bind_PxArticulation_createLink_2"] = createExportWrapper("emscripten_bind_PxArticulation_createLink_2");
        var _emscripten_bind_PxArticulation_getNbLinks_0 = Module["_emscripten_bind_PxArticulation_getNbLinks_0"] = createExportWrapper("emscripten_bind_PxArticulation_getNbLinks_0");
        var _emscripten_bind_PxArticulation_setName_1 = Module["_emscripten_bind_PxArticulation_setName_1"] = createExportWrapper("emscripten_bind_PxArticulation_setName_1");
        var _emscripten_bind_PxArticulation_getName_0 = Module["_emscripten_bind_PxArticulation_getName_0"] = createExportWrapper("emscripten_bind_PxArticulation_getName_0");
        var _emscripten_bind_PxArticulation_getWorldBounds_0 = Module["_emscripten_bind_PxArticulation_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxArticulation_getWorldBounds_0");
        var _emscripten_bind_PxArticulation_getAggregate_0 = Module["_emscripten_bind_PxArticulation_getAggregate_0"] = createExportWrapper("emscripten_bind_PxArticulation_getAggregate_0");
        var _emscripten_bind_PxArticulation_release_0 = Module["_emscripten_bind_PxArticulation_release_0"] = createExportWrapper("emscripten_bind_PxArticulation_release_0");
        var _emscripten_bind_PxArticulation_getConcreteTypeName_0 = Module["_emscripten_bind_PxArticulation_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxArticulation_getConcreteTypeName_0");
        var _emscripten_bind_PxArticulation_getConcreteType_0 = Module["_emscripten_bind_PxArticulation_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxArticulation_getConcreteType_0");
        var _emscripten_bind_PxArticulation_setBaseFlag_2 = Module["_emscripten_bind_PxArticulation_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxArticulation_setBaseFlag_2");
        var _emscripten_bind_PxArticulation_setBaseFlags_1 = Module["_emscripten_bind_PxArticulation_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxArticulation_setBaseFlags_1");
        var _emscripten_bind_PxArticulation_getBaseFlags_0 = Module["_emscripten_bind_PxArticulation_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxArticulation_getBaseFlags_0");
        var _emscripten_bind_PxArticulation_isReleasable_0 = Module["_emscripten_bind_PxArticulation_isReleasable_0"] = createExportWrapper("emscripten_bind_PxArticulation_isReleasable_0");
        var _emscripten_bind_PxArticulationCacheFlags_PxArticulationCacheFlags_1 = Module["_emscripten_bind_PxArticulationCacheFlags_PxArticulationCacheFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationCacheFlags_PxArticulationCacheFlags_1");
        var _emscripten_bind_PxArticulationCacheFlags_isSet_1 = Module["_emscripten_bind_PxArticulationCacheFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxArticulationCacheFlags_isSet_1");
        var _emscripten_bind_PxArticulationCacheFlags_set_1 = Module["_emscripten_bind_PxArticulationCacheFlags_set_1"] = createExportWrapper("emscripten_bind_PxArticulationCacheFlags_set_1");
        var _emscripten_bind_PxArticulationCacheFlags_clear_1 = Module["_emscripten_bind_PxArticulationCacheFlags_clear_1"] = createExportWrapper("emscripten_bind_PxArticulationCacheFlags_clear_1");
        var _emscripten_bind_PxArticulationCacheFlags___destroy___0 = Module["_emscripten_bind_PxArticulationCacheFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxArticulationCacheFlags___destroy___0");
        var _emscripten_bind_PxArticulationFlags_PxArticulationFlags_1 = Module["_emscripten_bind_PxArticulationFlags_PxArticulationFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationFlags_PxArticulationFlags_1");
        var _emscripten_bind_PxArticulationFlags_isSet_1 = Module["_emscripten_bind_PxArticulationFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxArticulationFlags_isSet_1");
        var _emscripten_bind_PxArticulationFlags_set_1 = Module["_emscripten_bind_PxArticulationFlags_set_1"] = createExportWrapper("emscripten_bind_PxArticulationFlags_set_1");
        var _emscripten_bind_PxArticulationFlags_clear_1 = Module["_emscripten_bind_PxArticulationFlags_clear_1"] = createExportWrapper("emscripten_bind_PxArticulationFlags_clear_1");
        var _emscripten_bind_PxArticulationFlags___destroy___0 = Module["_emscripten_bind_PxArticulationFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxArticulationFlags___destroy___0");
        var _emscripten_bind_PxArticulationJoint_setTargetOrientation_1 = Module["_emscripten_bind_PxArticulationJoint_setTargetOrientation_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setTargetOrientation_1");
        var _emscripten_bind_PxArticulationJoint_getTargetOrientation_0 = Module["_emscripten_bind_PxArticulationJoint_getTargetOrientation_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getTargetOrientation_0");
        var _emscripten_bind_PxArticulationJoint_setTargetVelocity_1 = Module["_emscripten_bind_PxArticulationJoint_setTargetVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setTargetVelocity_1");
        var _emscripten_bind_PxArticulationJoint_getTargetVelocity_0 = Module["_emscripten_bind_PxArticulationJoint_getTargetVelocity_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getTargetVelocity_0");
        var _emscripten_bind_PxArticulationJoint_setDriveType_1 = Module["_emscripten_bind_PxArticulationJoint_setDriveType_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setDriveType_1");
        var _emscripten_bind_PxArticulationJoint_getDriveType_0 = Module["_emscripten_bind_PxArticulationJoint_getDriveType_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getDriveType_0");
        var _emscripten_bind_PxArticulationJoint_setStiffness_1 = Module["_emscripten_bind_PxArticulationJoint_setStiffness_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setStiffness_1");
        var _emscripten_bind_PxArticulationJoint_getStiffness_0 = Module["_emscripten_bind_PxArticulationJoint_getStiffness_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getStiffness_0");
        var _emscripten_bind_PxArticulationJoint_setDamping_1 = Module["_emscripten_bind_PxArticulationJoint_setDamping_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setDamping_1");
        var _emscripten_bind_PxArticulationJoint_getDamping_0 = Module["_emscripten_bind_PxArticulationJoint_getDamping_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getDamping_0");
        var _emscripten_bind_PxArticulationJoint_setInternalCompliance_1 = Module["_emscripten_bind_PxArticulationJoint_setInternalCompliance_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setInternalCompliance_1");
        var _emscripten_bind_PxArticulationJoint_getInternalCompliance_0 = Module["_emscripten_bind_PxArticulationJoint_getInternalCompliance_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getInternalCompliance_0");
        var _emscripten_bind_PxArticulationJoint_setExternalCompliance_1 = Module["_emscripten_bind_PxArticulationJoint_setExternalCompliance_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setExternalCompliance_1");
        var _emscripten_bind_PxArticulationJoint_getExternalCompliance_0 = Module["_emscripten_bind_PxArticulationJoint_getExternalCompliance_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getExternalCompliance_0");
        var _emscripten_bind_PxArticulationJoint_setSwingLimit_2 = Module["_emscripten_bind_PxArticulationJoint_setSwingLimit_2"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setSwingLimit_2");
        var _emscripten_bind_PxArticulationJoint_setTangentialStiffness_1 = Module["_emscripten_bind_PxArticulationJoint_setTangentialStiffness_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setTangentialStiffness_1");
        var _emscripten_bind_PxArticulationJoint_getTangentialStiffness_0 = Module["_emscripten_bind_PxArticulationJoint_getTangentialStiffness_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getTangentialStiffness_0");
        var _emscripten_bind_PxArticulationJoint_setTangentialDamping_1 = Module["_emscripten_bind_PxArticulationJoint_setTangentialDamping_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setTangentialDamping_1");
        var _emscripten_bind_PxArticulationJoint_getTangentialDamping_0 = Module["_emscripten_bind_PxArticulationJoint_getTangentialDamping_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getTangentialDamping_0");
        var _emscripten_bind_PxArticulationJoint_setSwingLimitContactDistance_1 = Module["_emscripten_bind_PxArticulationJoint_setSwingLimitContactDistance_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setSwingLimitContactDistance_1");
        var _emscripten_bind_PxArticulationJoint_getSwingLimitContactDistance_0 = Module["_emscripten_bind_PxArticulationJoint_getSwingLimitContactDistance_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getSwingLimitContactDistance_0");
        var _emscripten_bind_PxArticulationJoint_setSwingLimitEnabled_1 = Module["_emscripten_bind_PxArticulationJoint_setSwingLimitEnabled_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setSwingLimitEnabled_1");
        var _emscripten_bind_PxArticulationJoint_getSwingLimitEnabled_0 = Module["_emscripten_bind_PxArticulationJoint_getSwingLimitEnabled_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getSwingLimitEnabled_0");
        var _emscripten_bind_PxArticulationJoint_setTwistLimit_2 = Module["_emscripten_bind_PxArticulationJoint_setTwistLimit_2"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setTwistLimit_2");
        var _emscripten_bind_PxArticulationJoint_setTwistLimitEnabled_1 = Module["_emscripten_bind_PxArticulationJoint_setTwistLimitEnabled_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setTwistLimitEnabled_1");
        var _emscripten_bind_PxArticulationJoint_getTwistLimitEnabled_0 = Module["_emscripten_bind_PxArticulationJoint_getTwistLimitEnabled_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getTwistLimitEnabled_0");
        var _emscripten_bind_PxArticulationJoint_setTwistLimitContactDistance_1 = Module["_emscripten_bind_PxArticulationJoint_setTwistLimitContactDistance_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setTwistLimitContactDistance_1");
        var _emscripten_bind_PxArticulationJoint_getTwistLimitContactDistance_0 = Module["_emscripten_bind_PxArticulationJoint_getTwistLimitContactDistance_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getTwistLimitContactDistance_0");
        var _emscripten_bind_PxArticulationJoint_getParentArticulationLink_0 = Module["_emscripten_bind_PxArticulationJoint_getParentArticulationLink_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getParentArticulationLink_0");
        var _emscripten_bind_PxArticulationJoint_setParentPose_1 = Module["_emscripten_bind_PxArticulationJoint_setParentPose_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setParentPose_1");
        var _emscripten_bind_PxArticulationJoint_getParentPose_0 = Module["_emscripten_bind_PxArticulationJoint_getParentPose_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getParentPose_0");
        var _emscripten_bind_PxArticulationJoint_getChildArticulationLink_0 = Module["_emscripten_bind_PxArticulationJoint_getChildArticulationLink_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getChildArticulationLink_0");
        var _emscripten_bind_PxArticulationJoint_setChildPose_1 = Module["_emscripten_bind_PxArticulationJoint_setChildPose_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setChildPose_1");
        var _emscripten_bind_PxArticulationJoint_getChildPose_0 = Module["_emscripten_bind_PxArticulationJoint_getChildPose_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getChildPose_0");
        var _emscripten_bind_PxArticulationJoint_release_0 = Module["_emscripten_bind_PxArticulationJoint_release_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_release_0");
        var _emscripten_bind_PxArticulationJoint_getConcreteTypeName_0 = Module["_emscripten_bind_PxArticulationJoint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getConcreteTypeName_0");
        var _emscripten_bind_PxArticulationJoint_getConcreteType_0 = Module["_emscripten_bind_PxArticulationJoint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getConcreteType_0");
        var _emscripten_bind_PxArticulationJoint_setBaseFlag_2 = Module["_emscripten_bind_PxArticulationJoint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setBaseFlag_2");
        var _emscripten_bind_PxArticulationJoint_setBaseFlags_1 = Module["_emscripten_bind_PxArticulationJoint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationJoint_setBaseFlags_1");
        var _emscripten_bind_PxArticulationJoint_getBaseFlags_0 = Module["_emscripten_bind_PxArticulationJoint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_getBaseFlags_0");
        var _emscripten_bind_PxArticulationJoint_isReleasable_0 = Module["_emscripten_bind_PxArticulationJoint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxArticulationJoint_isReleasable_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setJointType_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setJointType_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setJointType_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getJointType_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getJointType_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getJointType_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setMotion_2 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setMotion_2"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setMotion_2");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getMotion_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getMotion_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getMotion_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setLimit_3 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setLimit_3"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setLimit_3");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_4 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_4"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_4");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_5 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_5"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_5");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setDriveTarget_2 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setDriveTarget_2"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setDriveTarget_2");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setDriveVelocity_2 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setDriveVelocity_2"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setDriveVelocity_2");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getDriveTarget_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getDriveTarget_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getDriveTarget_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getDriveVelocity_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getDriveVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getDriveVelocity_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setFrictionCoefficient_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setFrictionCoefficient_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setFrictionCoefficient_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getFrictionCoefficient_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getFrictionCoefficient_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getFrictionCoefficient_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setMaxJointVelocity_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setMaxJointVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setMaxJointVelocity_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getMaxJointVelocity_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getMaxJointVelocity_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getMaxJointVelocity_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getParentArticulationLink_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getParentArticulationLink_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getParentArticulationLink_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setParentPose_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setParentPose_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setParentPose_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getParentPose_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getParentPose_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getParentPose_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getChildArticulationLink_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getChildArticulationLink_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getChildArticulationLink_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setChildPose_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setChildPose_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setChildPose_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getChildPose_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getChildPose_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getChildPose_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_release_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_release_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_release_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteTypeName_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteTypeName_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteType_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteType_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlag_2 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlag_2");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlags_1 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlags_1");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_getBaseFlags_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_getBaseFlags_0");
        var _emscripten_bind_PxArticulationJointReducedCoordinate_isReleasable_0 = Module["_emscripten_bind_PxArticulationJointReducedCoordinate_isReleasable_0"] = createExportWrapper("emscripten_bind_PxArticulationJointReducedCoordinate_isReleasable_0");
        var _emscripten_bind_PxArticulationLink_getArticulation_0 = Module["_emscripten_bind_PxArticulationLink_getArticulation_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getArticulation_0");
        var _emscripten_bind_PxArticulationLink_getInboundJoint_0 = Module["_emscripten_bind_PxArticulationLink_getInboundJoint_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getInboundJoint_0");
        var _emscripten_bind_PxArticulationLink_getInboundJointDof_0 = Module["_emscripten_bind_PxArticulationLink_getInboundJointDof_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getInboundJointDof_0");
        var _emscripten_bind_PxArticulationLink_getNbChildren_0 = Module["_emscripten_bind_PxArticulationLink_getNbChildren_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getNbChildren_0");
        var _emscripten_bind_PxArticulationLink_getLinkIndex_0 = Module["_emscripten_bind_PxArticulationLink_getLinkIndex_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getLinkIndex_0");
        var _emscripten_bind_PxArticulationLink_getType_0 = Module["_emscripten_bind_PxArticulationLink_getType_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getType_0");
        var _emscripten_bind_PxArticulationLink_getScene_0 = Module["_emscripten_bind_PxArticulationLink_getScene_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getScene_0");
        var _emscripten_bind_PxArticulationLink_setName_1 = Module["_emscripten_bind_PxArticulationLink_setName_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setName_1");
        var _emscripten_bind_PxArticulationLink_getName_0 = Module["_emscripten_bind_PxArticulationLink_getName_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getName_0");
        var _emscripten_bind_PxArticulationLink_getWorldBounds_0 = Module["_emscripten_bind_PxArticulationLink_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getWorldBounds_0");
        var _emscripten_bind_PxArticulationLink_getWorldBounds_1 = Module["_emscripten_bind_PxArticulationLink_getWorldBounds_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_getWorldBounds_1");
        var _emscripten_bind_PxArticulationLink_setActorFlags_1 = Module["_emscripten_bind_PxArticulationLink_setActorFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setActorFlags_1");
        var _emscripten_bind_PxArticulationLink_getActorFlags_0 = Module["_emscripten_bind_PxArticulationLink_getActorFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getActorFlags_0");
        var _emscripten_bind_PxArticulationLink_setDominanceGroup_1 = Module["_emscripten_bind_PxArticulationLink_setDominanceGroup_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setDominanceGroup_1");
        var _emscripten_bind_PxArticulationLink_getDominanceGroup_0 = Module["_emscripten_bind_PxArticulationLink_getDominanceGroup_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getDominanceGroup_0");
        var _emscripten_bind_PxArticulationLink_setOwnerClient_1 = Module["_emscripten_bind_PxArticulationLink_setOwnerClient_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setOwnerClient_1");
        var _emscripten_bind_PxArticulationLink_getOwnerClient_0 = Module["_emscripten_bind_PxArticulationLink_getOwnerClient_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getOwnerClient_0");
        var _emscripten_bind_PxArticulationLink_release_0 = Module["_emscripten_bind_PxArticulationLink_release_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_release_0");
        var _emscripten_bind_PxArticulationLink_getConcreteTypeName_0 = Module["_emscripten_bind_PxArticulationLink_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getConcreteTypeName_0");
        var _emscripten_bind_PxArticulationLink_getConcreteType_0 = Module["_emscripten_bind_PxArticulationLink_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getConcreteType_0");
        var _emscripten_bind_PxArticulationLink_setBaseFlag_2 = Module["_emscripten_bind_PxArticulationLink_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_setBaseFlag_2");
        var _emscripten_bind_PxArticulationLink_setBaseFlags_1 = Module["_emscripten_bind_PxArticulationLink_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setBaseFlags_1");
        var _emscripten_bind_PxArticulationLink_getBaseFlags_0 = Module["_emscripten_bind_PxArticulationLink_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getBaseFlags_0");
        var _emscripten_bind_PxArticulationLink_isReleasable_0 = Module["_emscripten_bind_PxArticulationLink_isReleasable_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_isReleasable_0");
        var _emscripten_bind_PxArticulationLink_getGlobalPose_0 = Module["_emscripten_bind_PxArticulationLink_getGlobalPose_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getGlobalPose_0");
        var _emscripten_bind_PxArticulationLink_setGlobalPose_1 = Module["_emscripten_bind_PxArticulationLink_setGlobalPose_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setGlobalPose_1");
        var _emscripten_bind_PxArticulationLink_setGlobalPose_2 = Module["_emscripten_bind_PxArticulationLink_setGlobalPose_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_setGlobalPose_2");
        var _emscripten_bind_PxArticulationLink_attachShape_1 = Module["_emscripten_bind_PxArticulationLink_attachShape_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_attachShape_1");
        var _emscripten_bind_PxArticulationLink_detachShape_1 = Module["_emscripten_bind_PxArticulationLink_detachShape_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_detachShape_1");
        var _emscripten_bind_PxArticulationLink_detachShape_2 = Module["_emscripten_bind_PxArticulationLink_detachShape_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_detachShape_2");
        var _emscripten_bind_PxArticulationLink_getNbShapes_0 = Module["_emscripten_bind_PxArticulationLink_getNbShapes_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getNbShapes_0");
        var _emscripten_bind_PxArticulationLink_setCMassLocalPose_1 = Module["_emscripten_bind_PxArticulationLink_setCMassLocalPose_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setCMassLocalPose_1");
        var _emscripten_bind_PxArticulationLink_getCMassLocalPose_0 = Module["_emscripten_bind_PxArticulationLink_getCMassLocalPose_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getCMassLocalPose_0");
        var _emscripten_bind_PxArticulationLink_setMass_1 = Module["_emscripten_bind_PxArticulationLink_setMass_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setMass_1");
        var _emscripten_bind_PxArticulationLink_getMass_0 = Module["_emscripten_bind_PxArticulationLink_getMass_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMass_0");
        var _emscripten_bind_PxArticulationLink_getInvMass_0 = Module["_emscripten_bind_PxArticulationLink_getInvMass_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getInvMass_0");
        var _emscripten_bind_PxArticulationLink_setMassSpaceInertiaTensor_1 = Module["_emscripten_bind_PxArticulationLink_setMassSpaceInertiaTensor_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setMassSpaceInertiaTensor_1");
        var _emscripten_bind_PxArticulationLink_getMassSpaceInertiaTensor_0 = Module["_emscripten_bind_PxArticulationLink_getMassSpaceInertiaTensor_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMassSpaceInertiaTensor_0");
        var _emscripten_bind_PxArticulationLink_getMassSpaceInvInertiaTensor_0 = Module["_emscripten_bind_PxArticulationLink_getMassSpaceInvInertiaTensor_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMassSpaceInvInertiaTensor_0");
        var _emscripten_bind_PxArticulationLink_setLinearDamping_1 = Module["_emscripten_bind_PxArticulationLink_setLinearDamping_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setLinearDamping_1");
        var _emscripten_bind_PxArticulationLink_getLinearDamping_0 = Module["_emscripten_bind_PxArticulationLink_getLinearDamping_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getLinearDamping_0");
        var _emscripten_bind_PxArticulationLink_setAngularDamping_1 = Module["_emscripten_bind_PxArticulationLink_setAngularDamping_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setAngularDamping_1");
        var _emscripten_bind_PxArticulationLink_getAngularDamping_0 = Module["_emscripten_bind_PxArticulationLink_getAngularDamping_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getAngularDamping_0");
        var _emscripten_bind_PxArticulationLink_getLinearVelocity_0 = Module["_emscripten_bind_PxArticulationLink_getLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getLinearVelocity_0");
        var _emscripten_bind_PxArticulationLink_setLinearVelocity_1 = Module["_emscripten_bind_PxArticulationLink_setLinearVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setLinearVelocity_1");
        var _emscripten_bind_PxArticulationLink_setLinearVelocity_2 = Module["_emscripten_bind_PxArticulationLink_setLinearVelocity_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_setLinearVelocity_2");
        var _emscripten_bind_PxArticulationLink_getAngularVelocity_0 = Module["_emscripten_bind_PxArticulationLink_getAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getAngularVelocity_0");
        var _emscripten_bind_PxArticulationLink_setAngularVelocity_1 = Module["_emscripten_bind_PxArticulationLink_setAngularVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setAngularVelocity_1");
        var _emscripten_bind_PxArticulationLink_setAngularVelocity_2 = Module["_emscripten_bind_PxArticulationLink_setAngularVelocity_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_setAngularVelocity_2");
        var _emscripten_bind_PxArticulationLink_getMaxLinearVelocity_0 = Module["_emscripten_bind_PxArticulationLink_getMaxLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMaxLinearVelocity_0");
        var _emscripten_bind_PxArticulationLink_setMaxLinearVelocity_1 = Module["_emscripten_bind_PxArticulationLink_setMaxLinearVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setMaxLinearVelocity_1");
        var _emscripten_bind_PxArticulationLink_getMaxAngularVelocity_0 = Module["_emscripten_bind_PxArticulationLink_getMaxAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMaxAngularVelocity_0");
        var _emscripten_bind_PxArticulationLink_setMaxAngularVelocity_1 = Module["_emscripten_bind_PxArticulationLink_setMaxAngularVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setMaxAngularVelocity_1");
        var _emscripten_bind_PxArticulationLink_addForce_1 = Module["_emscripten_bind_PxArticulationLink_addForce_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_addForce_1");
        var _emscripten_bind_PxArticulationLink_addForce_2 = Module["_emscripten_bind_PxArticulationLink_addForce_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_addForce_2");
        var _emscripten_bind_PxArticulationLink_addForce_3 = Module["_emscripten_bind_PxArticulationLink_addForce_3"] = createExportWrapper("emscripten_bind_PxArticulationLink_addForce_3");
        var _emscripten_bind_PxArticulationLink_addTorque_1 = Module["_emscripten_bind_PxArticulationLink_addTorque_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_addTorque_1");
        var _emscripten_bind_PxArticulationLink_addTorque_2 = Module["_emscripten_bind_PxArticulationLink_addTorque_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_addTorque_2");
        var _emscripten_bind_PxArticulationLink_addTorque_3 = Module["_emscripten_bind_PxArticulationLink_addTorque_3"] = createExportWrapper("emscripten_bind_PxArticulationLink_addTorque_3");
        var _emscripten_bind_PxArticulationLink_clearForce_1 = Module["_emscripten_bind_PxArticulationLink_clearForce_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_clearForce_1");
        var _emscripten_bind_PxArticulationLink_clearTorque_1 = Module["_emscripten_bind_PxArticulationLink_clearTorque_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_clearTorque_1");
        var _emscripten_bind_PxArticulationLink_setForceAndTorque_2 = Module["_emscripten_bind_PxArticulationLink_setForceAndTorque_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_setForceAndTorque_2");
        var _emscripten_bind_PxArticulationLink_setForceAndTorque_3 = Module["_emscripten_bind_PxArticulationLink_setForceAndTorque_3"] = createExportWrapper("emscripten_bind_PxArticulationLink_setForceAndTorque_3");
        var _emscripten_bind_PxArticulationLink_setRigidBodyFlag_2 = Module["_emscripten_bind_PxArticulationLink_setRigidBodyFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationLink_setRigidBodyFlag_2");
        var _emscripten_bind_PxArticulationLink_setRigidBodyFlags_1 = Module["_emscripten_bind_PxArticulationLink_setRigidBodyFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setRigidBodyFlags_1");
        var _emscripten_bind_PxArticulationLink_getRigidBodyFlags_0 = Module["_emscripten_bind_PxArticulationLink_getRigidBodyFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getRigidBodyFlags_0");
        var _emscripten_bind_PxArticulationLink_setMinCCDAdvanceCoefficient_1 = Module["_emscripten_bind_PxArticulationLink_setMinCCDAdvanceCoefficient_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setMinCCDAdvanceCoefficient_1");
        var _emscripten_bind_PxArticulationLink_getMinCCDAdvanceCoefficient_0 = Module["_emscripten_bind_PxArticulationLink_getMinCCDAdvanceCoefficient_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMinCCDAdvanceCoefficient_0");
        var _emscripten_bind_PxArticulationLink_setMaxDepenetrationVelocity_1 = Module["_emscripten_bind_PxArticulationLink_setMaxDepenetrationVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setMaxDepenetrationVelocity_1");
        var _emscripten_bind_PxArticulationLink_getMaxDepenetrationVelocity_0 = Module["_emscripten_bind_PxArticulationLink_getMaxDepenetrationVelocity_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMaxDepenetrationVelocity_0");
        var _emscripten_bind_PxArticulationLink_setMaxContactImpulse_1 = Module["_emscripten_bind_PxArticulationLink_setMaxContactImpulse_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_setMaxContactImpulse_1");
        var _emscripten_bind_PxArticulationLink_getMaxContactImpulse_0 = Module["_emscripten_bind_PxArticulationLink_getMaxContactImpulse_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getMaxContactImpulse_0");
        var _emscripten_bind_PxArticulationLink_getInternalIslandNodeIndex_0 = Module["_emscripten_bind_PxArticulationLink_getInternalIslandNodeIndex_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_getInternalIslandNodeIndex_0");
        var _emscripten_bind_PxArticulationLink_get_userData_0 = Module["_emscripten_bind_PxArticulationLink_get_userData_0"] = createExportWrapper("emscripten_bind_PxArticulationLink_get_userData_0");
        var _emscripten_bind_PxArticulationLink_set_userData_1 = Module["_emscripten_bind_PxArticulationLink_set_userData_1"] = createExportWrapper("emscripten_bind_PxArticulationLink_set_userData_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlags_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlags_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlag_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlag_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_getArticulationFlags_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getArticulationFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getArticulationFlags_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_getDofs_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getDofs_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getDofs_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_createCache_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_createCache_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_createCache_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_getCacheDataSize_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getCacheDataSize_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getCacheDataSize_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_zeroCache_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_zeroCache_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_zeroCache_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_applyCache_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_applyCache_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_applyCache_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_applyCache_3 = Module["_emscripten_bind_PxArticulationReducedCoordinate_applyCache_3"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_applyCache_3");
        var _emscripten_bind_PxArticulationReducedCoordinate_copyInternalStateToCache_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_copyInternalStateToCache_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_copyInternalStateToCache_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_releaseCache_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_releaseCache_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_releaseCache_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_packJointData_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_packJointData_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_packJointData_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_unpackJointData_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_unpackJointData_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_unpackJointData_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_commonInit_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_commonInit_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_commonInit_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedGravityForce_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedGravityForce_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedGravityForce_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedExternalForce_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedExternalForce_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedExternalForce_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeJointAcceleration_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeJointAcceleration_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeJointAcceleration_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeJointForce_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeJointForce_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeJointForce_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeCoefficientMatrix_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeCoefficientMatrix_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeCoefficientMatrix_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeLambda_4 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeLambda_4"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeLambda_4");
        var _emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedMassMatrix_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedMassMatrix_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedMassMatrix_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_addLoopJoint_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_addLoopJoint_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_addLoopJoint_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_removeLoopJoint_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_removeLoopJoint_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_removeLoopJoint_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getNbLoopJoints_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getNbLoopJoints_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getNbLoopJoints_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_getCoefficientMatrixSize_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getCoefficientMatrixSize_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getCoefficientMatrixSize_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_teleportRootLink_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_teleportRootLink_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_teleportRootLink_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_getLinkVelocity_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getLinkVelocity_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getLinkVelocity_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getLinkAcceleration_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getLinkAcceleration_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getLinkAcceleration_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getScene_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getScene_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getScene_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_setSolverIterationCounts_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setSolverIterationCounts_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setSolverIterationCounts_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_isSleeping_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_isSleeping_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_isSleeping_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_setSleepThreshold_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setSleepThreshold_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setSleepThreshold_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getSleepThreshold_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getSleepThreshold_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getSleepThreshold_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_setStabilizationThreshold_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setStabilizationThreshold_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setStabilizationThreshold_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getStabilizationThreshold_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getStabilizationThreshold_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getStabilizationThreshold_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_setWakeCounter_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setWakeCounter_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setWakeCounter_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getWakeCounter_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getWakeCounter_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getWakeCounter_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_wakeUp_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_wakeUp_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_wakeUp_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_putToSleep_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_putToSleep_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_putToSleep_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_createLink_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_createLink_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_createLink_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_getNbLinks_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getNbLinks_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getNbLinks_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_setName_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setName_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setName_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getName_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getName_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getName_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_getWorldBounds_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getWorldBounds_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_getAggregate_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getAggregate_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getAggregate_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_release_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_release_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_release_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_getConcreteTypeName_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getConcreteTypeName_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_getConcreteType_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getConcreteType_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_setBaseFlag_2 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setBaseFlag_2");
        var _emscripten_bind_PxArticulationReducedCoordinate_setBaseFlags_1 = Module["_emscripten_bind_PxArticulationReducedCoordinate_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_setBaseFlags_1");
        var _emscripten_bind_PxArticulationReducedCoordinate_getBaseFlags_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_getBaseFlags_0");
        var _emscripten_bind_PxArticulationReducedCoordinate_isReleasable_0 = Module["_emscripten_bind_PxArticulationReducedCoordinate_isReleasable_0"] = createExportWrapper("emscripten_bind_PxArticulationReducedCoordinate_isReleasable_0");
        var _emscripten_bind_PxBatchQuery_execute_0 = Module["_emscripten_bind_PxBatchQuery_execute_0"] = createExportWrapper("emscripten_bind_PxBatchQuery_execute_0");
        var _emscripten_bind_PxBatchQuery_getPreFilterShader_0 = Module["_emscripten_bind_PxBatchQuery_getPreFilterShader_0"] = createExportWrapper("emscripten_bind_PxBatchQuery_getPreFilterShader_0");
        var _emscripten_bind_PxBatchQuery_getPostFilterShader_0 = Module["_emscripten_bind_PxBatchQuery_getPostFilterShader_0"] = createExportWrapper("emscripten_bind_PxBatchQuery_getPostFilterShader_0");
        var _emscripten_bind_PxBatchQuery_getFilterShaderData_0 = Module["_emscripten_bind_PxBatchQuery_getFilterShaderData_0"] = createExportWrapper("emscripten_bind_PxBatchQuery_getFilterShaderData_0");
        var _emscripten_bind_PxBatchQuery_getFilterShaderDataSize_0 = Module["_emscripten_bind_PxBatchQuery_getFilterShaderDataSize_0"] = createExportWrapper("emscripten_bind_PxBatchQuery_getFilterShaderDataSize_0");
        var _emscripten_bind_PxBatchQuery_setUserMemory_1 = Module["_emscripten_bind_PxBatchQuery_setUserMemory_1"] = createExportWrapper("emscripten_bind_PxBatchQuery_setUserMemory_1");
        var _emscripten_bind_PxBatchQuery_getUserMemory_0 = Module["_emscripten_bind_PxBatchQuery_getUserMemory_0"] = createExportWrapper("emscripten_bind_PxBatchQuery_getUserMemory_0");
        var _emscripten_bind_PxBatchQuery_release_0 = Module["_emscripten_bind_PxBatchQuery_release_0"] = createExportWrapper("emscripten_bind_PxBatchQuery_release_0");
        var _emscripten_bind_PxBatchQueryDesc_PxBatchQueryDesc_3 = Module["_emscripten_bind_PxBatchQueryDesc_PxBatchQueryDesc_3"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_PxBatchQueryDesc_3");
        var _emscripten_bind_PxBatchQueryDesc_isValid_0 = Module["_emscripten_bind_PxBatchQueryDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_isValid_0");
        var _emscripten_bind_PxBatchQueryDesc_get_filterShaderData_0 = Module["_emscripten_bind_PxBatchQueryDesc_get_filterShaderData_0"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_get_filterShaderData_0");
        var _emscripten_bind_PxBatchQueryDesc_set_filterShaderData_1 = Module["_emscripten_bind_PxBatchQueryDesc_set_filterShaderData_1"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_set_filterShaderData_1");
        var _emscripten_bind_PxBatchQueryDesc_get_filterShaderDataSize_0 = Module["_emscripten_bind_PxBatchQueryDesc_get_filterShaderDataSize_0"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_get_filterShaderDataSize_0");
        var _emscripten_bind_PxBatchQueryDesc_set_filterShaderDataSize_1 = Module["_emscripten_bind_PxBatchQueryDesc_set_filterShaderDataSize_1"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_set_filterShaderDataSize_1");
        var _emscripten_bind_PxBatchQueryDesc_get_preFilterShader_0 = Module["_emscripten_bind_PxBatchQueryDesc_get_preFilterShader_0"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_get_preFilterShader_0");
        var _emscripten_bind_PxBatchQueryDesc_set_preFilterShader_1 = Module["_emscripten_bind_PxBatchQueryDesc_set_preFilterShader_1"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_set_preFilterShader_1");
        var _emscripten_bind_PxBatchQueryDesc_get_postFilterShader_0 = Module["_emscripten_bind_PxBatchQueryDesc_get_postFilterShader_0"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_get_postFilterShader_0");
        var _emscripten_bind_PxBatchQueryDesc_set_postFilterShader_1 = Module["_emscripten_bind_PxBatchQueryDesc_set_postFilterShader_1"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_set_postFilterShader_1");
        var _emscripten_bind_PxBatchQueryDesc_get_queryMemory_0 = Module["_emscripten_bind_PxBatchQueryDesc_get_queryMemory_0"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_get_queryMemory_0");
        var _emscripten_bind_PxBatchQueryDesc_set_queryMemory_1 = Module["_emscripten_bind_PxBatchQueryDesc_set_queryMemory_1"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc_set_queryMemory_1");
        var _emscripten_bind_PxBatchQueryDesc___destroy___0 = Module["_emscripten_bind_PxBatchQueryDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxBatchQueryDesc___destroy___0");
        var _emscripten_bind_PxBatchQueryMemory_get_userRaycastResultBuffer_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_userRaycastResultBuffer_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_userRaycastResultBuffer_0");
        var _emscripten_bind_PxBatchQueryMemory_set_userRaycastResultBuffer_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_userRaycastResultBuffer_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_userRaycastResultBuffer_1");
        var _emscripten_bind_PxBatchQueryMemory_get_userRaycastTouchBuffer_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_userRaycastTouchBuffer_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_userRaycastTouchBuffer_0");
        var _emscripten_bind_PxBatchQueryMemory_set_userRaycastTouchBuffer_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_userRaycastTouchBuffer_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_userRaycastTouchBuffer_1");
        var _emscripten_bind_PxBatchQueryMemory_get_userSweepResultBuffer_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_userSweepResultBuffer_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_userSweepResultBuffer_0");
        var _emscripten_bind_PxBatchQueryMemory_set_userSweepResultBuffer_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_userSweepResultBuffer_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_userSweepResultBuffer_1");
        var _emscripten_bind_PxBatchQueryMemory_get_userSweepTouchBuffer_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_userSweepTouchBuffer_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_userSweepTouchBuffer_0");
        var _emscripten_bind_PxBatchQueryMemory_set_userSweepTouchBuffer_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_userSweepTouchBuffer_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_userSweepTouchBuffer_1");
        var _emscripten_bind_PxBatchQueryMemory_get_userOverlapResultBuffer_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_userOverlapResultBuffer_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_userOverlapResultBuffer_0");
        var _emscripten_bind_PxBatchQueryMemory_set_userOverlapResultBuffer_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_userOverlapResultBuffer_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_userOverlapResultBuffer_1");
        var _emscripten_bind_PxBatchQueryMemory_get_userOverlapTouchBuffer_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_userOverlapTouchBuffer_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_userOverlapTouchBuffer_0");
        var _emscripten_bind_PxBatchQueryMemory_set_userOverlapTouchBuffer_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_userOverlapTouchBuffer_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_userOverlapTouchBuffer_1");
        var _emscripten_bind_PxBatchQueryMemory_get_raycastTouchBufferSize_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_raycastTouchBufferSize_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_raycastTouchBufferSize_0");
        var _emscripten_bind_PxBatchQueryMemory_set_raycastTouchBufferSize_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_raycastTouchBufferSize_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_raycastTouchBufferSize_1");
        var _emscripten_bind_PxBatchQueryMemory_get_sweepTouchBufferSize_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_sweepTouchBufferSize_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_sweepTouchBufferSize_0");
        var _emscripten_bind_PxBatchQueryMemory_set_sweepTouchBufferSize_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_sweepTouchBufferSize_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_sweepTouchBufferSize_1");
        var _emscripten_bind_PxBatchQueryMemory_get_overlapTouchBufferSize_0 = Module["_emscripten_bind_PxBatchQueryMemory_get_overlapTouchBufferSize_0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_get_overlapTouchBufferSize_0");
        var _emscripten_bind_PxBatchQueryMemory_set_overlapTouchBufferSize_1 = Module["_emscripten_bind_PxBatchQueryMemory_set_overlapTouchBufferSize_1"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory_set_overlapTouchBufferSize_1");
        var _emscripten_bind_PxBatchQueryMemory___destroy___0 = Module["_emscripten_bind_PxBatchQueryMemory___destroy___0"] = createExportWrapper("emscripten_bind_PxBatchQueryMemory___destroy___0");
        var _emscripten_bind_PxBatchQueryPostFilterShader___destroy___0 = Module["_emscripten_bind_PxBatchQueryPostFilterShader___destroy___0"] = createExportWrapper("emscripten_bind_PxBatchQueryPostFilterShader___destroy___0");
        var _emscripten_bind_PxBatchQueryPreFilterShader___destroy___0 = Module["_emscripten_bind_PxBatchQueryPreFilterShader___destroy___0"] = createExportWrapper("emscripten_bind_PxBatchQueryPreFilterShader___destroy___0");
        var _emscripten_bind_PxBroadPhaseCaps_PxBroadPhaseCaps_0 = Module["_emscripten_bind_PxBroadPhaseCaps_PxBroadPhaseCaps_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps_PxBroadPhaseCaps_0");
        var _emscripten_bind_PxBroadPhaseCaps_get_maxNbRegions_0 = Module["_emscripten_bind_PxBroadPhaseCaps_get_maxNbRegions_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps_get_maxNbRegions_0");
        var _emscripten_bind_PxBroadPhaseCaps_set_maxNbRegions_1 = Module["_emscripten_bind_PxBroadPhaseCaps_set_maxNbRegions_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps_set_maxNbRegions_1");
        var _emscripten_bind_PxBroadPhaseCaps_get_maxNbObjects_0 = Module["_emscripten_bind_PxBroadPhaseCaps_get_maxNbObjects_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps_get_maxNbObjects_0");
        var _emscripten_bind_PxBroadPhaseCaps_set_maxNbObjects_1 = Module["_emscripten_bind_PxBroadPhaseCaps_set_maxNbObjects_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps_set_maxNbObjects_1");
        var _emscripten_bind_PxBroadPhaseCaps_get_needsPredefinedBounds_0 = Module["_emscripten_bind_PxBroadPhaseCaps_get_needsPredefinedBounds_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps_get_needsPredefinedBounds_0");
        var _emscripten_bind_PxBroadPhaseCaps_set_needsPredefinedBounds_1 = Module["_emscripten_bind_PxBroadPhaseCaps_set_needsPredefinedBounds_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps_set_needsPredefinedBounds_1");
        var _emscripten_bind_PxBroadPhaseCaps___destroy___0 = Module["_emscripten_bind_PxBroadPhaseCaps___destroy___0"] = createExportWrapper("emscripten_bind_PxBroadPhaseCaps___destroy___0");
        var _emscripten_bind_PxBroadPhaseRegion_PxBroadPhaseRegion_0 = Module["_emscripten_bind_PxBroadPhaseRegion_PxBroadPhaseRegion_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegion_PxBroadPhaseRegion_0");
        var _emscripten_bind_PxBroadPhaseRegion_get_bounds_0 = Module["_emscripten_bind_PxBroadPhaseRegion_get_bounds_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegion_get_bounds_0");
        var _emscripten_bind_PxBroadPhaseRegion_set_bounds_1 = Module["_emscripten_bind_PxBroadPhaseRegion_set_bounds_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegion_set_bounds_1");
        var _emscripten_bind_PxBroadPhaseRegion_get_userData_0 = Module["_emscripten_bind_PxBroadPhaseRegion_get_userData_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegion_get_userData_0");
        var _emscripten_bind_PxBroadPhaseRegion_set_userData_1 = Module["_emscripten_bind_PxBroadPhaseRegion_set_userData_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegion_set_userData_1");
        var _emscripten_bind_PxBroadPhaseRegion___destroy___0 = Module["_emscripten_bind_PxBroadPhaseRegion___destroy___0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegion___destroy___0");
        var _emscripten_bind_PxBroadPhaseRegionInfo_PxBroadPhaseRegionInfo_0 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_PxBroadPhaseRegionInfo_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_PxBroadPhaseRegionInfo_0");
        var _emscripten_bind_PxBroadPhaseRegionInfo_get_region_0 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_get_region_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_get_region_0");
        var _emscripten_bind_PxBroadPhaseRegionInfo_set_region_1 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_set_region_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_set_region_1");
        var _emscripten_bind_PxBroadPhaseRegionInfo_get_nbStaticObjects_0 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_get_nbStaticObjects_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_get_nbStaticObjects_0");
        var _emscripten_bind_PxBroadPhaseRegionInfo_set_nbStaticObjects_1 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_set_nbStaticObjects_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_set_nbStaticObjects_1");
        var _emscripten_bind_PxBroadPhaseRegionInfo_get_nbDynamicObjects_0 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_get_nbDynamicObjects_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_get_nbDynamicObjects_0");
        var _emscripten_bind_PxBroadPhaseRegionInfo_set_nbDynamicObjects_1 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_set_nbDynamicObjects_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_set_nbDynamicObjects_1");
        var _emscripten_bind_PxBroadPhaseRegionInfo_get_active_0 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_get_active_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_get_active_0");
        var _emscripten_bind_PxBroadPhaseRegionInfo_set_active_1 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_set_active_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_set_active_1");
        var _emscripten_bind_PxBroadPhaseRegionInfo_get_overlap_0 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_get_overlap_0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_get_overlap_0");
        var _emscripten_bind_PxBroadPhaseRegionInfo_set_overlap_1 = Module["_emscripten_bind_PxBroadPhaseRegionInfo_set_overlap_1"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo_set_overlap_1");
        var _emscripten_bind_PxBroadPhaseRegionInfo___destroy___0 = Module["_emscripten_bind_PxBroadPhaseRegionInfo___destroy___0"] = createExportWrapper("emscripten_bind_PxBroadPhaseRegionInfo___destroy___0");
        var _emscripten_bind_PxConstraint_release_0 = Module["_emscripten_bind_PxConstraint_release_0"] = createExportWrapper("emscripten_bind_PxConstraint_release_0");
        var _emscripten_bind_PxConstraint_getScene_0 = Module["_emscripten_bind_PxConstraint_getScene_0"] = createExportWrapper("emscripten_bind_PxConstraint_getScene_0");
        var _emscripten_bind_PxConstraint_setActors_2 = Module["_emscripten_bind_PxConstraint_setActors_2"] = createExportWrapper("emscripten_bind_PxConstraint_setActors_2");
        var _emscripten_bind_PxConstraint_markDirty_0 = Module["_emscripten_bind_PxConstraint_markDirty_0"] = createExportWrapper("emscripten_bind_PxConstraint_markDirty_0");
        var _emscripten_bind_PxConstraint_setFlags_1 = Module["_emscripten_bind_PxConstraint_setFlags_1"] = createExportWrapper("emscripten_bind_PxConstraint_setFlags_1");
        var _emscripten_bind_PxConstraint_getFlags_0 = Module["_emscripten_bind_PxConstraint_getFlags_0"] = createExportWrapper("emscripten_bind_PxConstraint_getFlags_0");
        var _emscripten_bind_PxConstraint_setFlag_2 = Module["_emscripten_bind_PxConstraint_setFlag_2"] = createExportWrapper("emscripten_bind_PxConstraint_setFlag_2");
        var _emscripten_bind_PxConstraint_getForce_2 = Module["_emscripten_bind_PxConstraint_getForce_2"] = createExportWrapper("emscripten_bind_PxConstraint_getForce_2");
        var _emscripten_bind_PxConstraint_isValid_0 = Module["_emscripten_bind_PxConstraint_isValid_0"] = createExportWrapper("emscripten_bind_PxConstraint_isValid_0");
        var _emscripten_bind_PxConstraint_setBreakForce_2 = Module["_emscripten_bind_PxConstraint_setBreakForce_2"] = createExportWrapper("emscripten_bind_PxConstraint_setBreakForce_2");
        var _emscripten_bind_PxConstraint_setMinResponseThreshold_1 = Module["_emscripten_bind_PxConstraint_setMinResponseThreshold_1"] = createExportWrapper("emscripten_bind_PxConstraint_setMinResponseThreshold_1");
        var _emscripten_bind_PxConstraint_getMinResponseThreshold_0 = Module["_emscripten_bind_PxConstraint_getMinResponseThreshold_0"] = createExportWrapper("emscripten_bind_PxConstraint_getMinResponseThreshold_0");
        var _emscripten_bind_PxConstraint_getConcreteTypeName_0 = Module["_emscripten_bind_PxConstraint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxConstraint_getConcreteTypeName_0");
        var _emscripten_bind_PxConstraint_getConcreteType_0 = Module["_emscripten_bind_PxConstraint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxConstraint_getConcreteType_0");
        var _emscripten_bind_PxConstraint_setBaseFlag_2 = Module["_emscripten_bind_PxConstraint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxConstraint_setBaseFlag_2");
        var _emscripten_bind_PxConstraint_setBaseFlags_1 = Module["_emscripten_bind_PxConstraint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxConstraint_setBaseFlags_1");
        var _emscripten_bind_PxConstraint_getBaseFlags_0 = Module["_emscripten_bind_PxConstraint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxConstraint_getBaseFlags_0");
        var _emscripten_bind_PxConstraint_isReleasable_0 = Module["_emscripten_bind_PxConstraint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxConstraint_isReleasable_0");
        var _emscripten_bind_PxConstraintFlags_PxConstraintFlags_1 = Module["_emscripten_bind_PxConstraintFlags_PxConstraintFlags_1"] = createExportWrapper("emscripten_bind_PxConstraintFlags_PxConstraintFlags_1");
        var _emscripten_bind_PxConstraintFlags_isSet_1 = Module["_emscripten_bind_PxConstraintFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxConstraintFlags_isSet_1");
        var _emscripten_bind_PxConstraintFlags_set_1 = Module["_emscripten_bind_PxConstraintFlags_set_1"] = createExportWrapper("emscripten_bind_PxConstraintFlags_set_1");
        var _emscripten_bind_PxConstraintFlags_clear_1 = Module["_emscripten_bind_PxConstraintFlags_clear_1"] = createExportWrapper("emscripten_bind_PxConstraintFlags_clear_1");
        var _emscripten_bind_PxConstraintFlags___destroy___0 = Module["_emscripten_bind_PxConstraintFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxConstraintFlags___destroy___0");
        var _emscripten_bind_PxConstraintInfo_get_constraint_0 = Module["_emscripten_bind_PxConstraintInfo_get_constraint_0"] = createExportWrapper("emscripten_bind_PxConstraintInfo_get_constraint_0");
        var _emscripten_bind_PxConstraintInfo_set_constraint_1 = Module["_emscripten_bind_PxConstraintInfo_set_constraint_1"] = createExportWrapper("emscripten_bind_PxConstraintInfo_set_constraint_1");
        var _emscripten_bind_PxConstraintInfo_get_externalReference_0 = Module["_emscripten_bind_PxConstraintInfo_get_externalReference_0"] = createExportWrapper("emscripten_bind_PxConstraintInfo_get_externalReference_0");
        var _emscripten_bind_PxConstraintInfo_set_externalReference_1 = Module["_emscripten_bind_PxConstraintInfo_set_externalReference_1"] = createExportWrapper("emscripten_bind_PxConstraintInfo_set_externalReference_1");
        var _emscripten_bind_PxConstraintInfo_get_type_0 = Module["_emscripten_bind_PxConstraintInfo_get_type_0"] = createExportWrapper("emscripten_bind_PxConstraintInfo_get_type_0");
        var _emscripten_bind_PxConstraintInfo_set_type_1 = Module["_emscripten_bind_PxConstraintInfo_set_type_1"] = createExportWrapper("emscripten_bind_PxConstraintInfo_set_type_1");
        var _emscripten_bind_PxConstraintInfo___destroy___0 = Module["_emscripten_bind_PxConstraintInfo___destroy___0"] = createExportWrapper("emscripten_bind_PxConstraintInfo___destroy___0");
        var _emscripten_bind_PxContactPairHeaderFlags_PxContactPairHeaderFlags_1 = Module["_emscripten_bind_PxContactPairHeaderFlags_PxContactPairHeaderFlags_1"] = createExportWrapper("emscripten_bind_PxContactPairHeaderFlags_PxContactPairHeaderFlags_1");
        var _emscripten_bind_PxContactPairHeaderFlags_isSet_1 = Module["_emscripten_bind_PxContactPairHeaderFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxContactPairHeaderFlags_isSet_1");
        var _emscripten_bind_PxContactPairHeaderFlags_set_1 = Module["_emscripten_bind_PxContactPairHeaderFlags_set_1"] = createExportWrapper("emscripten_bind_PxContactPairHeaderFlags_set_1");
        var _emscripten_bind_PxContactPairHeaderFlags_clear_1 = Module["_emscripten_bind_PxContactPairHeaderFlags_clear_1"] = createExportWrapper("emscripten_bind_PxContactPairHeaderFlags_clear_1");
        var _emscripten_bind_PxContactPairHeaderFlags___destroy___0 = Module["_emscripten_bind_PxContactPairHeaderFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxContactPairHeaderFlags___destroy___0");
        var _emscripten_bind_PxContactPair_get_shapes_1 = Module["_emscripten_bind_PxContactPair_get_shapes_1"] = createExportWrapper("emscripten_bind_PxContactPair_get_shapes_1");
        var _emscripten_bind_PxContactPair_set_shapes_2 = Module["_emscripten_bind_PxContactPair_set_shapes_2"] = createExportWrapper("emscripten_bind_PxContactPair_set_shapes_2");
        var _emscripten_bind_PxContactPair_get_contactCount_0 = Module["_emscripten_bind_PxContactPair_get_contactCount_0"] = createExportWrapper("emscripten_bind_PxContactPair_get_contactCount_0");
        var _emscripten_bind_PxContactPair_set_contactCount_1 = Module["_emscripten_bind_PxContactPair_set_contactCount_1"] = createExportWrapper("emscripten_bind_PxContactPair_set_contactCount_1");
        var _emscripten_bind_PxContactPair_get_patchCount_0 = Module["_emscripten_bind_PxContactPair_get_patchCount_0"] = createExportWrapper("emscripten_bind_PxContactPair_get_patchCount_0");
        var _emscripten_bind_PxContactPair_set_patchCount_1 = Module["_emscripten_bind_PxContactPair_set_patchCount_1"] = createExportWrapper("emscripten_bind_PxContactPair_set_patchCount_1");
        var _emscripten_bind_PxContactPair_get_flags_0 = Module["_emscripten_bind_PxContactPair_get_flags_0"] = createExportWrapper("emscripten_bind_PxContactPair_get_flags_0");
        var _emscripten_bind_PxContactPair_set_flags_1 = Module["_emscripten_bind_PxContactPair_set_flags_1"] = createExportWrapper("emscripten_bind_PxContactPair_set_flags_1");
        var _emscripten_bind_PxContactPair_get_events_0 = Module["_emscripten_bind_PxContactPair_get_events_0"] = createExportWrapper("emscripten_bind_PxContactPair_get_events_0");
        var _emscripten_bind_PxContactPair_set_events_1 = Module["_emscripten_bind_PxContactPair_set_events_1"] = createExportWrapper("emscripten_bind_PxContactPair_set_events_1");
        var _emscripten_bind_PxContactPair___destroy___0 = Module["_emscripten_bind_PxContactPair___destroy___0"] = createExportWrapper("emscripten_bind_PxContactPair___destroy___0");
        var _emscripten_bind_PxContactPairFlags_PxContactPairFlags_1 = Module["_emscripten_bind_PxContactPairFlags_PxContactPairFlags_1"] = createExportWrapper("emscripten_bind_PxContactPairFlags_PxContactPairFlags_1");
        var _emscripten_bind_PxContactPairFlags_isSet_1 = Module["_emscripten_bind_PxContactPairFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxContactPairFlags_isSet_1");
        var _emscripten_bind_PxContactPairFlags_set_1 = Module["_emscripten_bind_PxContactPairFlags_set_1"] = createExportWrapper("emscripten_bind_PxContactPairFlags_set_1");
        var _emscripten_bind_PxContactPairFlags_clear_1 = Module["_emscripten_bind_PxContactPairFlags_clear_1"] = createExportWrapper("emscripten_bind_PxContactPairFlags_clear_1");
        var _emscripten_bind_PxContactPairFlags___destroy___0 = Module["_emscripten_bind_PxContactPairFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxContactPairFlags___destroy___0");
        var _emscripten_bind_PxContactPairHeader_get_actors_1 = Module["_emscripten_bind_PxContactPairHeader_get_actors_1"] = createExportWrapper("emscripten_bind_PxContactPairHeader_get_actors_1");
        var _emscripten_bind_PxContactPairHeader_set_actors_2 = Module["_emscripten_bind_PxContactPairHeader_set_actors_2"] = createExportWrapper("emscripten_bind_PxContactPairHeader_set_actors_2");
        var _emscripten_bind_PxContactPairHeader_get_flags_0 = Module["_emscripten_bind_PxContactPairHeader_get_flags_0"] = createExportWrapper("emscripten_bind_PxContactPairHeader_get_flags_0");
        var _emscripten_bind_PxContactPairHeader_set_flags_1 = Module["_emscripten_bind_PxContactPairHeader_set_flags_1"] = createExportWrapper("emscripten_bind_PxContactPairHeader_set_flags_1");
        var _emscripten_bind_PxContactPairHeader_get_pairs_0 = Module["_emscripten_bind_PxContactPairHeader_get_pairs_0"] = createExportWrapper("emscripten_bind_PxContactPairHeader_get_pairs_0");
        var _emscripten_bind_PxContactPairHeader_set_pairs_1 = Module["_emscripten_bind_PxContactPairHeader_set_pairs_1"] = createExportWrapper("emscripten_bind_PxContactPairHeader_set_pairs_1");
        var _emscripten_bind_PxContactPairHeader_get_nbPairs_0 = Module["_emscripten_bind_PxContactPairHeader_get_nbPairs_0"] = createExportWrapper("emscripten_bind_PxContactPairHeader_get_nbPairs_0");
        var _emscripten_bind_PxContactPairHeader_set_nbPairs_1 = Module["_emscripten_bind_PxContactPairHeader_set_nbPairs_1"] = createExportWrapper("emscripten_bind_PxContactPairHeader_set_nbPairs_1");
        var _emscripten_bind_PxContactPairHeader___destroy___0 = Module["_emscripten_bind_PxContactPairHeader___destroy___0"] = createExportWrapper("emscripten_bind_PxContactPairHeader___destroy___0");
        var _emscripten_bind_PxDominanceGroupPair_PxDominanceGroupPair_2 = Module["_emscripten_bind_PxDominanceGroupPair_PxDominanceGroupPair_2"] = createExportWrapper("emscripten_bind_PxDominanceGroupPair_PxDominanceGroupPair_2");
        var _emscripten_bind_PxDominanceGroupPair_get_dominance0_0 = Module["_emscripten_bind_PxDominanceGroupPair_get_dominance0_0"] = createExportWrapper("emscripten_bind_PxDominanceGroupPair_get_dominance0_0");
        var _emscripten_bind_PxDominanceGroupPair_set_dominance0_1 = Module["_emscripten_bind_PxDominanceGroupPair_set_dominance0_1"] = createExportWrapper("emscripten_bind_PxDominanceGroupPair_set_dominance0_1");
        var _emscripten_bind_PxDominanceGroupPair_get_dominance1_0 = Module["_emscripten_bind_PxDominanceGroupPair_get_dominance1_0"] = createExportWrapper("emscripten_bind_PxDominanceGroupPair_get_dominance1_0");
        var _emscripten_bind_PxDominanceGroupPair_set_dominance1_1 = Module["_emscripten_bind_PxDominanceGroupPair_set_dominance1_1"] = createExportWrapper("emscripten_bind_PxDominanceGroupPair_set_dominance1_1");
        var _emscripten_bind_PxDominanceGroupPair___destroy___0 = Module["_emscripten_bind_PxDominanceGroupPair___destroy___0"] = createExportWrapper("emscripten_bind_PxDominanceGroupPair___destroy___0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_PxgDynamicsMemoryConfig_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_PxgDynamicsMemoryConfig_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_PxgDynamicsMemoryConfig_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_constraintBufferCapacity_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_constraintBufferCapacity_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_constraintBufferCapacity_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_constraintBufferCapacity_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_constraintBufferCapacity_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_constraintBufferCapacity_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_contactBufferCapacity_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_contactBufferCapacity_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_contactBufferCapacity_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_contactBufferCapacity_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_contactBufferCapacity_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_contactBufferCapacity_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_tempBufferCapacity_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_tempBufferCapacity_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_tempBufferCapacity_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_tempBufferCapacity_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_tempBufferCapacity_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_tempBufferCapacity_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_contactStreamSize_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_contactStreamSize_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_contactStreamSize_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_contactStreamSize_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_contactStreamSize_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_contactStreamSize_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_patchStreamSize_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_patchStreamSize_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_patchStreamSize_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_patchStreamSize_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_patchStreamSize_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_patchStreamSize_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_forceStreamCapacity_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_forceStreamCapacity_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_forceStreamCapacity_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_forceStreamCapacity_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_forceStreamCapacity_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_forceStreamCapacity_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_heapCapacity_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_heapCapacity_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_heapCapacity_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_heapCapacity_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_heapCapacity_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_heapCapacity_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig_get_foundLostPairsCapacity_0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_get_foundLostPairsCapacity_0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_get_foundLostPairsCapacity_0");
        var _emscripten_bind_PxgDynamicsMemoryConfig_set_foundLostPairsCapacity_1 = Module["_emscripten_bind_PxgDynamicsMemoryConfig_set_foundLostPairsCapacity_1"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig_set_foundLostPairsCapacity_1");
        var _emscripten_bind_PxgDynamicsMemoryConfig___destroy___0 = Module["_emscripten_bind_PxgDynamicsMemoryConfig___destroy___0"] = createExportWrapper("emscripten_bind_PxgDynamicsMemoryConfig___destroy___0");
        var _emscripten_bind_PxFilterData_PxFilterData_0 = Module["_emscripten_bind_PxFilterData_PxFilterData_0"] = createExportWrapper("emscripten_bind_PxFilterData_PxFilterData_0");
        var _emscripten_bind_PxFilterData_PxFilterData_4 = Module["_emscripten_bind_PxFilterData_PxFilterData_4"] = createExportWrapper("emscripten_bind_PxFilterData_PxFilterData_4");
        var _emscripten_bind_PxFilterData_get_word0_0 = Module["_emscripten_bind_PxFilterData_get_word0_0"] = createExportWrapper("emscripten_bind_PxFilterData_get_word0_0");
        var _emscripten_bind_PxFilterData_set_word0_1 = Module["_emscripten_bind_PxFilterData_set_word0_1"] = createExportWrapper("emscripten_bind_PxFilterData_set_word0_1");
        var _emscripten_bind_PxFilterData_get_word1_0 = Module["_emscripten_bind_PxFilterData_get_word1_0"] = createExportWrapper("emscripten_bind_PxFilterData_get_word1_0");
        var _emscripten_bind_PxFilterData_set_word1_1 = Module["_emscripten_bind_PxFilterData_set_word1_1"] = createExportWrapper("emscripten_bind_PxFilterData_set_word1_1");
        var _emscripten_bind_PxFilterData_get_word2_0 = Module["_emscripten_bind_PxFilterData_get_word2_0"] = createExportWrapper("emscripten_bind_PxFilterData_get_word2_0");
        var _emscripten_bind_PxFilterData_set_word2_1 = Module["_emscripten_bind_PxFilterData_set_word2_1"] = createExportWrapper("emscripten_bind_PxFilterData_set_word2_1");
        var _emscripten_bind_PxFilterData_get_word3_0 = Module["_emscripten_bind_PxFilterData_get_word3_0"] = createExportWrapper("emscripten_bind_PxFilterData_get_word3_0");
        var _emscripten_bind_PxFilterData_set_word3_1 = Module["_emscripten_bind_PxFilterData_set_word3_1"] = createExportWrapper("emscripten_bind_PxFilterData_set_word3_1");
        var _emscripten_bind_PxFilterData___destroy___0 = Module["_emscripten_bind_PxFilterData___destroy___0"] = createExportWrapper("emscripten_bind_PxFilterData___destroy___0");
        var _emscripten_bind_PxHitFlags_PxHitFlags_1 = Module["_emscripten_bind_PxHitFlags_PxHitFlags_1"] = createExportWrapper("emscripten_bind_PxHitFlags_PxHitFlags_1");
        var _emscripten_bind_PxHitFlags_isSet_1 = Module["_emscripten_bind_PxHitFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxHitFlags_isSet_1");
        var _emscripten_bind_PxHitFlags_set_1 = Module["_emscripten_bind_PxHitFlags_set_1"] = createExportWrapper("emscripten_bind_PxHitFlags_set_1");
        var _emscripten_bind_PxHitFlags_clear_1 = Module["_emscripten_bind_PxHitFlags_clear_1"] = createExportWrapper("emscripten_bind_PxHitFlags_clear_1");
        var _emscripten_bind_PxHitFlags___destroy___0 = Module["_emscripten_bind_PxHitFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxHitFlags___destroy___0");
        var _emscripten_bind_PxOverlapBuffer10_PxOverlapBuffer10_0 = Module["_emscripten_bind_PxOverlapBuffer10_PxOverlapBuffer10_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_PxOverlapBuffer10_0");
        var _emscripten_bind_PxOverlapBuffer10_getNbAnyHits_0 = Module["_emscripten_bind_PxOverlapBuffer10_getNbAnyHits_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_getNbAnyHits_0");
        var _emscripten_bind_PxOverlapBuffer10_getAnyHit_1 = Module["_emscripten_bind_PxOverlapBuffer10_getAnyHit_1"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_getAnyHit_1");
        var _emscripten_bind_PxOverlapBuffer10_getNbTouches_0 = Module["_emscripten_bind_PxOverlapBuffer10_getNbTouches_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_getNbTouches_0");
        var _emscripten_bind_PxOverlapBuffer10_getTouches_0 = Module["_emscripten_bind_PxOverlapBuffer10_getTouches_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_getTouches_0");
        var _emscripten_bind_PxOverlapBuffer10_getTouch_1 = Module["_emscripten_bind_PxOverlapBuffer10_getTouch_1"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_getTouch_1");
        var _emscripten_bind_PxOverlapBuffer10_getMaxNbTouches_0 = Module["_emscripten_bind_PxOverlapBuffer10_getMaxNbTouches_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_getMaxNbTouches_0");
        var _emscripten_bind_PxOverlapBuffer10_hasAnyHits_0 = Module["_emscripten_bind_PxOverlapBuffer10_hasAnyHits_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_hasAnyHits_0");
        var _emscripten_bind_PxOverlapBuffer10_get_block_0 = Module["_emscripten_bind_PxOverlapBuffer10_get_block_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_get_block_0");
        var _emscripten_bind_PxOverlapBuffer10_set_block_1 = Module["_emscripten_bind_PxOverlapBuffer10_set_block_1"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_set_block_1");
        var _emscripten_bind_PxOverlapBuffer10_get_hasBlock_0 = Module["_emscripten_bind_PxOverlapBuffer10_get_hasBlock_0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_get_hasBlock_0");
        var _emscripten_bind_PxOverlapBuffer10_set_hasBlock_1 = Module["_emscripten_bind_PxOverlapBuffer10_set_hasBlock_1"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10_set_hasBlock_1");
        var _emscripten_bind_PxOverlapBuffer10___destroy___0 = Module["_emscripten_bind_PxOverlapBuffer10___destroy___0"] = createExportWrapper("emscripten_bind_PxOverlapBuffer10___destroy___0");
        var _emscripten_bind_PxOverlapHit_get_actor_0 = Module["_emscripten_bind_PxOverlapHit_get_actor_0"] = createExportWrapper("emscripten_bind_PxOverlapHit_get_actor_0");
        var _emscripten_bind_PxOverlapHit_set_actor_1 = Module["_emscripten_bind_PxOverlapHit_set_actor_1"] = createExportWrapper("emscripten_bind_PxOverlapHit_set_actor_1");
        var _emscripten_bind_PxOverlapHit_get_shape_0 = Module["_emscripten_bind_PxOverlapHit_get_shape_0"] = createExportWrapper("emscripten_bind_PxOverlapHit_get_shape_0");
        var _emscripten_bind_PxOverlapHit_set_shape_1 = Module["_emscripten_bind_PxOverlapHit_set_shape_1"] = createExportWrapper("emscripten_bind_PxOverlapHit_set_shape_1");
        var _emscripten_bind_PxOverlapHit_get_faceIndex_0 = Module["_emscripten_bind_PxOverlapHit_get_faceIndex_0"] = createExportWrapper("emscripten_bind_PxOverlapHit_get_faceIndex_0");
        var _emscripten_bind_PxOverlapHit_set_faceIndex_1 = Module["_emscripten_bind_PxOverlapHit_set_faceIndex_1"] = createExportWrapper("emscripten_bind_PxOverlapHit_set_faceIndex_1");
        var _emscripten_bind_PxOverlapHit___destroy___0 = Module["_emscripten_bind_PxOverlapHit___destroy___0"] = createExportWrapper("emscripten_bind_PxOverlapHit___destroy___0");
        var _emscripten_bind_PxOverlapQueryResult_getNbAnyHits_0 = Module["_emscripten_bind_PxOverlapQueryResult_getNbAnyHits_0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_getNbAnyHits_0");
        var _emscripten_bind_PxOverlapQueryResult_getAnyHit_1 = Module["_emscripten_bind_PxOverlapQueryResult_getAnyHit_1"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_getAnyHit_1");
        var _emscripten_bind_PxOverlapQueryResult_get_block_0 = Module["_emscripten_bind_PxOverlapQueryResult_get_block_0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_get_block_0");
        var _emscripten_bind_PxOverlapQueryResult_set_block_1 = Module["_emscripten_bind_PxOverlapQueryResult_set_block_1"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_set_block_1");
        var _emscripten_bind_PxOverlapQueryResult_get_touches_0 = Module["_emscripten_bind_PxOverlapQueryResult_get_touches_0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_get_touches_0");
        var _emscripten_bind_PxOverlapQueryResult_set_touches_1 = Module["_emscripten_bind_PxOverlapQueryResult_set_touches_1"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_set_touches_1");
        var _emscripten_bind_PxOverlapQueryResult_get_nbTouches_0 = Module["_emscripten_bind_PxOverlapQueryResult_get_nbTouches_0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_get_nbTouches_0");
        var _emscripten_bind_PxOverlapQueryResult_set_nbTouches_1 = Module["_emscripten_bind_PxOverlapQueryResult_set_nbTouches_1"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_set_nbTouches_1");
        var _emscripten_bind_PxOverlapQueryResult_get_userData_0 = Module["_emscripten_bind_PxOverlapQueryResult_get_userData_0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_get_userData_0");
        var _emscripten_bind_PxOverlapQueryResult_set_userData_1 = Module["_emscripten_bind_PxOverlapQueryResult_set_userData_1"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_set_userData_1");
        var _emscripten_bind_PxOverlapQueryResult_get_queryStatus_0 = Module["_emscripten_bind_PxOverlapQueryResult_get_queryStatus_0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_get_queryStatus_0");
        var _emscripten_bind_PxOverlapQueryResult_set_queryStatus_1 = Module["_emscripten_bind_PxOverlapQueryResult_set_queryStatus_1"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_set_queryStatus_1");
        var _emscripten_bind_PxOverlapQueryResult_get_hasBlock_0 = Module["_emscripten_bind_PxOverlapQueryResult_get_hasBlock_0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_get_hasBlock_0");
        var _emscripten_bind_PxOverlapQueryResult_set_hasBlock_1 = Module["_emscripten_bind_PxOverlapQueryResult_set_hasBlock_1"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult_set_hasBlock_1");
        var _emscripten_bind_PxOverlapQueryResult___destroy___0 = Module["_emscripten_bind_PxOverlapQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_PxOverlapQueryResult___destroy___0");
        var _emscripten_bind_PxMaterial_getConcreteTypeName_0 = Module["_emscripten_bind_PxMaterial_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxMaterial_getConcreteTypeName_0");
        var _emscripten_bind_PxMaterial_getConcreteType_0 = Module["_emscripten_bind_PxMaterial_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxMaterial_getConcreteType_0");
        var _emscripten_bind_PxMaterial_setBaseFlag_2 = Module["_emscripten_bind_PxMaterial_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxMaterial_setBaseFlag_2");
        var _emscripten_bind_PxMaterial_setBaseFlags_1 = Module["_emscripten_bind_PxMaterial_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxMaterial_setBaseFlags_1");
        var _emscripten_bind_PxMaterial_getBaseFlags_0 = Module["_emscripten_bind_PxMaterial_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxMaterial_getBaseFlags_0");
        var _emscripten_bind_PxMaterial_isReleasable_0 = Module["_emscripten_bind_PxMaterial_isReleasable_0"] = createExportWrapper("emscripten_bind_PxMaterial_isReleasable_0");
        var _emscripten_bind_PxMaterial_get_userData_0 = Module["_emscripten_bind_PxMaterial_get_userData_0"] = createExportWrapper("emscripten_bind_PxMaterial_get_userData_0");
        var _emscripten_bind_PxMaterial_set_userData_1 = Module["_emscripten_bind_PxMaterial_set_userData_1"] = createExportWrapper("emscripten_bind_PxMaterial_set_userData_1");
        var _emscripten_bind_PxPairFlags_PxPairFlags_1 = Module["_emscripten_bind_PxPairFlags_PxPairFlags_1"] = createExportWrapper("emscripten_bind_PxPairFlags_PxPairFlags_1");
        var _emscripten_bind_PxPairFlags_isSet_1 = Module["_emscripten_bind_PxPairFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxPairFlags_isSet_1");
        var _emscripten_bind_PxPairFlags_set_1 = Module["_emscripten_bind_PxPairFlags_set_1"] = createExportWrapper("emscripten_bind_PxPairFlags_set_1");
        var _emscripten_bind_PxPairFlags_clear_1 = Module["_emscripten_bind_PxPairFlags_clear_1"] = createExportWrapper("emscripten_bind_PxPairFlags_clear_1");
        var _emscripten_bind_PxPairFlags___destroy___0 = Module["_emscripten_bind_PxPairFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxPairFlags___destroy___0");
        var _emscripten_bind_PxPhysics_release_0 = Module["_emscripten_bind_PxPhysics_release_0"] = createExportWrapper("emscripten_bind_PxPhysics_release_0");
        var _emscripten_bind_PxPhysics_getFoundation_0 = Module["_emscripten_bind_PxPhysics_getFoundation_0"] = createExportWrapper("emscripten_bind_PxPhysics_getFoundation_0");
        var _emscripten_bind_PxPhysics_createAggregate_2 = Module["_emscripten_bind_PxPhysics_createAggregate_2"] = createExportWrapper("emscripten_bind_PxPhysics_createAggregate_2");
        var _emscripten_bind_PxPhysics_getTolerancesScale_0 = Module["_emscripten_bind_PxPhysics_getTolerancesScale_0"] = createExportWrapper("emscripten_bind_PxPhysics_getTolerancesScale_0");
        var _emscripten_bind_PxPhysics_createScene_1 = Module["_emscripten_bind_PxPhysics_createScene_1"] = createExportWrapper("emscripten_bind_PxPhysics_createScene_1");
        var _emscripten_bind_PxPhysics_createRigidStatic_1 = Module["_emscripten_bind_PxPhysics_createRigidStatic_1"] = createExportWrapper("emscripten_bind_PxPhysics_createRigidStatic_1");
        var _emscripten_bind_PxPhysics_createRigidDynamic_1 = Module["_emscripten_bind_PxPhysics_createRigidDynamic_1"] = createExportWrapper("emscripten_bind_PxPhysics_createRigidDynamic_1");
        var _emscripten_bind_PxPhysics_createShape_2 = Module["_emscripten_bind_PxPhysics_createShape_2"] = createExportWrapper("emscripten_bind_PxPhysics_createShape_2");
        var _emscripten_bind_PxPhysics_createShape_3 = Module["_emscripten_bind_PxPhysics_createShape_3"] = createExportWrapper("emscripten_bind_PxPhysics_createShape_3");
        var _emscripten_bind_PxPhysics_createShape_4 = Module["_emscripten_bind_PxPhysics_createShape_4"] = createExportWrapper("emscripten_bind_PxPhysics_createShape_4");
        var _emscripten_bind_PxPhysics_getNbShapes_0 = Module["_emscripten_bind_PxPhysics_getNbShapes_0"] = createExportWrapper("emscripten_bind_PxPhysics_getNbShapes_0");
        var _emscripten_bind_PxPhysics_createArticulation_0 = Module["_emscripten_bind_PxPhysics_createArticulation_0"] = createExportWrapper("emscripten_bind_PxPhysics_createArticulation_0");
        var _emscripten_bind_PxPhysics_createArticulationReducedCoordinate_0 = Module["_emscripten_bind_PxPhysics_createArticulationReducedCoordinate_0"] = createExportWrapper("emscripten_bind_PxPhysics_createArticulationReducedCoordinate_0");
        var _emscripten_bind_PxPhysics_createMaterial_3 = Module["_emscripten_bind_PxPhysics_createMaterial_3"] = createExportWrapper("emscripten_bind_PxPhysics_createMaterial_3");
        var _emscripten_bind_PxPhysics_getPhysicsInsertionCallback_0 = Module["_emscripten_bind_PxPhysics_getPhysicsInsertionCallback_0"] = createExportWrapper("emscripten_bind_PxPhysics_getPhysicsInsertionCallback_0");
        var _emscripten_bind_PxPhysics___destroy___0 = Module["_emscripten_bind_PxPhysics___destroy___0"] = createExportWrapper("emscripten_bind_PxPhysics___destroy___0");
        var _emscripten_bind_PxQueryFilterData_PxQueryFilterData_0 = Module["_emscripten_bind_PxQueryFilterData_PxQueryFilterData_0"] = createExportWrapper("emscripten_bind_PxQueryFilterData_PxQueryFilterData_0");
        var _emscripten_bind_PxQueryFilterData_PxQueryFilterData_1 = Module["_emscripten_bind_PxQueryFilterData_PxQueryFilterData_1"] = createExportWrapper("emscripten_bind_PxQueryFilterData_PxQueryFilterData_1");
        var _emscripten_bind_PxQueryFilterData_PxQueryFilterData_2 = Module["_emscripten_bind_PxQueryFilterData_PxQueryFilterData_2"] = createExportWrapper("emscripten_bind_PxQueryFilterData_PxQueryFilterData_2");
        var _emscripten_bind_PxQueryFilterData_get_data_0 = Module["_emscripten_bind_PxQueryFilterData_get_data_0"] = createExportWrapper("emscripten_bind_PxQueryFilterData_get_data_0");
        var _emscripten_bind_PxQueryFilterData_set_data_1 = Module["_emscripten_bind_PxQueryFilterData_set_data_1"] = createExportWrapper("emscripten_bind_PxQueryFilterData_set_data_1");
        var _emscripten_bind_PxQueryFilterData_get_flags_0 = Module["_emscripten_bind_PxQueryFilterData_get_flags_0"] = createExportWrapper("emscripten_bind_PxQueryFilterData_get_flags_0");
        var _emscripten_bind_PxQueryFilterData_set_flags_1 = Module["_emscripten_bind_PxQueryFilterData_set_flags_1"] = createExportWrapper("emscripten_bind_PxQueryFilterData_set_flags_1");
        var _emscripten_bind_PxQueryFilterData___destroy___0 = Module["_emscripten_bind_PxQueryFilterData___destroy___0"] = createExportWrapper("emscripten_bind_PxQueryFilterData___destroy___0");
        var _emscripten_bind_PxQueryFlags_PxQueryFlags_1 = Module["_emscripten_bind_PxQueryFlags_PxQueryFlags_1"] = createExportWrapper("emscripten_bind_PxQueryFlags_PxQueryFlags_1");
        var _emscripten_bind_PxQueryFlags_isSet_1 = Module["_emscripten_bind_PxQueryFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxQueryFlags_isSet_1");
        var _emscripten_bind_PxQueryFlags_set_1 = Module["_emscripten_bind_PxQueryFlags_set_1"] = createExportWrapper("emscripten_bind_PxQueryFlags_set_1");
        var _emscripten_bind_PxQueryFlags_clear_1 = Module["_emscripten_bind_PxQueryFlags_clear_1"] = createExportWrapper("emscripten_bind_PxQueryFlags_clear_1");
        var _emscripten_bind_PxQueryFlags___destroy___0 = Module["_emscripten_bind_PxQueryFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxQueryFlags___destroy___0");
        var _emscripten_bind_PxRaycastBuffer10_PxRaycastBuffer10_0 = Module["_emscripten_bind_PxRaycastBuffer10_PxRaycastBuffer10_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_PxRaycastBuffer10_0");
        var _emscripten_bind_PxRaycastBuffer10_getNbAnyHits_0 = Module["_emscripten_bind_PxRaycastBuffer10_getNbAnyHits_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_getNbAnyHits_0");
        var _emscripten_bind_PxRaycastBuffer10_getAnyHit_1 = Module["_emscripten_bind_PxRaycastBuffer10_getAnyHit_1"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_getAnyHit_1");
        var _emscripten_bind_PxRaycastBuffer10_getNbTouches_0 = Module["_emscripten_bind_PxRaycastBuffer10_getNbTouches_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_getNbTouches_0");
        var _emscripten_bind_PxRaycastBuffer10_getTouches_0 = Module["_emscripten_bind_PxRaycastBuffer10_getTouches_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_getTouches_0");
        var _emscripten_bind_PxRaycastBuffer10_getTouch_1 = Module["_emscripten_bind_PxRaycastBuffer10_getTouch_1"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_getTouch_1");
        var _emscripten_bind_PxRaycastBuffer10_getMaxNbTouches_0 = Module["_emscripten_bind_PxRaycastBuffer10_getMaxNbTouches_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_getMaxNbTouches_0");
        var _emscripten_bind_PxRaycastBuffer10_hasAnyHits_0 = Module["_emscripten_bind_PxRaycastBuffer10_hasAnyHits_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_hasAnyHits_0");
        var _emscripten_bind_PxRaycastBuffer10_get_block_0 = Module["_emscripten_bind_PxRaycastBuffer10_get_block_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_get_block_0");
        var _emscripten_bind_PxRaycastBuffer10_set_block_1 = Module["_emscripten_bind_PxRaycastBuffer10_set_block_1"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_set_block_1");
        var _emscripten_bind_PxRaycastBuffer10_get_hasBlock_0 = Module["_emscripten_bind_PxRaycastBuffer10_get_hasBlock_0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_get_hasBlock_0");
        var _emscripten_bind_PxRaycastBuffer10_set_hasBlock_1 = Module["_emscripten_bind_PxRaycastBuffer10_set_hasBlock_1"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10_set_hasBlock_1");
        var _emscripten_bind_PxRaycastBuffer10___destroy___0 = Module["_emscripten_bind_PxRaycastBuffer10___destroy___0"] = createExportWrapper("emscripten_bind_PxRaycastBuffer10___destroy___0");
        var _emscripten_bind_PxRaycastHit_PxRaycastHit_0 = Module["_emscripten_bind_PxRaycastHit_PxRaycastHit_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_PxRaycastHit_0");
        var _emscripten_bind_PxRaycastHit_get_u_0 = Module["_emscripten_bind_PxRaycastHit_get_u_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_u_0");
        var _emscripten_bind_PxRaycastHit_set_u_1 = Module["_emscripten_bind_PxRaycastHit_set_u_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_u_1");
        var _emscripten_bind_PxRaycastHit_get_v_0 = Module["_emscripten_bind_PxRaycastHit_get_v_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_v_0");
        var _emscripten_bind_PxRaycastHit_set_v_1 = Module["_emscripten_bind_PxRaycastHit_set_v_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_v_1");
        var _emscripten_bind_PxRaycastHit_get_actor_0 = Module["_emscripten_bind_PxRaycastHit_get_actor_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_actor_0");
        var _emscripten_bind_PxRaycastHit_set_actor_1 = Module["_emscripten_bind_PxRaycastHit_set_actor_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_actor_1");
        var _emscripten_bind_PxRaycastHit_get_shape_0 = Module["_emscripten_bind_PxRaycastHit_get_shape_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_shape_0");
        var _emscripten_bind_PxRaycastHit_set_shape_1 = Module["_emscripten_bind_PxRaycastHit_set_shape_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_shape_1");
        var _emscripten_bind_PxRaycastHit_get_flags_0 = Module["_emscripten_bind_PxRaycastHit_get_flags_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_flags_0");
        var _emscripten_bind_PxRaycastHit_set_flags_1 = Module["_emscripten_bind_PxRaycastHit_set_flags_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_flags_1");
        var _emscripten_bind_PxRaycastHit_get_position_0 = Module["_emscripten_bind_PxRaycastHit_get_position_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_position_0");
        var _emscripten_bind_PxRaycastHit_set_position_1 = Module["_emscripten_bind_PxRaycastHit_set_position_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_position_1");
        var _emscripten_bind_PxRaycastHit_get_normal_0 = Module["_emscripten_bind_PxRaycastHit_get_normal_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_normal_0");
        var _emscripten_bind_PxRaycastHit_set_normal_1 = Module["_emscripten_bind_PxRaycastHit_set_normal_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_normal_1");
        var _emscripten_bind_PxRaycastHit_get_distance_0 = Module["_emscripten_bind_PxRaycastHit_get_distance_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_distance_0");
        var _emscripten_bind_PxRaycastHit_set_distance_1 = Module["_emscripten_bind_PxRaycastHit_set_distance_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_distance_1");
        var _emscripten_bind_PxRaycastHit_get_faceIndex_0 = Module["_emscripten_bind_PxRaycastHit_get_faceIndex_0"] = createExportWrapper("emscripten_bind_PxRaycastHit_get_faceIndex_0");
        var _emscripten_bind_PxRaycastHit_set_faceIndex_1 = Module["_emscripten_bind_PxRaycastHit_set_faceIndex_1"] = createExportWrapper("emscripten_bind_PxRaycastHit_set_faceIndex_1");
        var _emscripten_bind_PxRaycastHit___destroy___0 = Module["_emscripten_bind_PxRaycastHit___destroy___0"] = createExportWrapper("emscripten_bind_PxRaycastHit___destroy___0");
        var _emscripten_bind_PxRaycastQueryResult_getNbAnyHits_0 = Module["_emscripten_bind_PxRaycastQueryResult_getNbAnyHits_0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_getNbAnyHits_0");
        var _emscripten_bind_PxRaycastQueryResult_getAnyHit_1 = Module["_emscripten_bind_PxRaycastQueryResult_getAnyHit_1"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_getAnyHit_1");
        var _emscripten_bind_PxRaycastQueryResult_get_block_0 = Module["_emscripten_bind_PxRaycastQueryResult_get_block_0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_get_block_0");
        var _emscripten_bind_PxRaycastQueryResult_set_block_1 = Module["_emscripten_bind_PxRaycastQueryResult_set_block_1"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_set_block_1");
        var _emscripten_bind_PxRaycastQueryResult_get_touches_0 = Module["_emscripten_bind_PxRaycastQueryResult_get_touches_0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_get_touches_0");
        var _emscripten_bind_PxRaycastQueryResult_set_touches_1 = Module["_emscripten_bind_PxRaycastQueryResult_set_touches_1"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_set_touches_1");
        var _emscripten_bind_PxRaycastQueryResult_get_nbTouches_0 = Module["_emscripten_bind_PxRaycastQueryResult_get_nbTouches_0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_get_nbTouches_0");
        var _emscripten_bind_PxRaycastQueryResult_set_nbTouches_1 = Module["_emscripten_bind_PxRaycastQueryResult_set_nbTouches_1"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_set_nbTouches_1");
        var _emscripten_bind_PxRaycastQueryResult_get_userData_0 = Module["_emscripten_bind_PxRaycastQueryResult_get_userData_0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_get_userData_0");
        var _emscripten_bind_PxRaycastQueryResult_set_userData_1 = Module["_emscripten_bind_PxRaycastQueryResult_set_userData_1"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_set_userData_1");
        var _emscripten_bind_PxRaycastQueryResult_get_queryStatus_0 = Module["_emscripten_bind_PxRaycastQueryResult_get_queryStatus_0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_get_queryStatus_0");
        var _emscripten_bind_PxRaycastQueryResult_set_queryStatus_1 = Module["_emscripten_bind_PxRaycastQueryResult_set_queryStatus_1"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_set_queryStatus_1");
        var _emscripten_bind_PxRaycastQueryResult_get_hasBlock_0 = Module["_emscripten_bind_PxRaycastQueryResult_get_hasBlock_0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_get_hasBlock_0");
        var _emscripten_bind_PxRaycastQueryResult_set_hasBlock_1 = Module["_emscripten_bind_PxRaycastQueryResult_set_hasBlock_1"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult_set_hasBlock_1");
        var _emscripten_bind_PxRaycastQueryResult___destroy___0 = Module["_emscripten_bind_PxRaycastQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_PxRaycastQueryResult___destroy___0");
        var _emscripten_bind_PxRigidBodyFlags_PxRigidBodyFlags_1 = Module["_emscripten_bind_PxRigidBodyFlags_PxRigidBodyFlags_1"] = createExportWrapper("emscripten_bind_PxRigidBodyFlags_PxRigidBodyFlags_1");
        var _emscripten_bind_PxRigidBodyFlags_isSet_1 = Module["_emscripten_bind_PxRigidBodyFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxRigidBodyFlags_isSet_1");
        var _emscripten_bind_PxRigidBodyFlags_set_1 = Module["_emscripten_bind_PxRigidBodyFlags_set_1"] = createExportWrapper("emscripten_bind_PxRigidBodyFlags_set_1");
        var _emscripten_bind_PxRigidBodyFlags_clear_1 = Module["_emscripten_bind_PxRigidBodyFlags_clear_1"] = createExportWrapper("emscripten_bind_PxRigidBodyFlags_clear_1");
        var _emscripten_bind_PxRigidBodyFlags___destroy___0 = Module["_emscripten_bind_PxRigidBodyFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxRigidBodyFlags___destroy___0");
        var _emscripten_bind_PxRigidDynamic_setKinematicTarget_1 = Module["_emscripten_bind_PxRigidDynamic_setKinematicTarget_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setKinematicTarget_1");
        var _emscripten_bind_PxRigidDynamic_getKinematicTarget_1 = Module["_emscripten_bind_PxRigidDynamic_getKinematicTarget_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getKinematicTarget_1");
        var _emscripten_bind_PxRigidDynamic_isSleeping_0 = Module["_emscripten_bind_PxRigidDynamic_isSleeping_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_isSleeping_0");
        var _emscripten_bind_PxRigidDynamic_setSleepThreshold_1 = Module["_emscripten_bind_PxRigidDynamic_setSleepThreshold_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setSleepThreshold_1");
        var _emscripten_bind_PxRigidDynamic_getSleepThreshold_0 = Module["_emscripten_bind_PxRigidDynamic_getSleepThreshold_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getSleepThreshold_0");
        var _emscripten_bind_PxRigidDynamic_setStabilizationThreshold_1 = Module["_emscripten_bind_PxRigidDynamic_setStabilizationThreshold_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setStabilizationThreshold_1");
        var _emscripten_bind_PxRigidDynamic_getStabilizationThreshold_0 = Module["_emscripten_bind_PxRigidDynamic_getStabilizationThreshold_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getStabilizationThreshold_0");
        var _emscripten_bind_PxRigidDynamic_getRigidDynamicLockFlags_0 = Module["_emscripten_bind_PxRigidDynamic_getRigidDynamicLockFlags_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getRigidDynamicLockFlags_0");
        var _emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlag_2 = Module["_emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlag_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlag_2");
        var _emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlags_1 = Module["_emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlags_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlags_1");
        var _emscripten_bind_PxRigidDynamic_setWakeCounter_1 = Module["_emscripten_bind_PxRigidDynamic_setWakeCounter_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setWakeCounter_1");
        var _emscripten_bind_PxRigidDynamic_getWakeCounter_0 = Module["_emscripten_bind_PxRigidDynamic_getWakeCounter_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getWakeCounter_0");
        var _emscripten_bind_PxRigidDynamic_wakeUp_0 = Module["_emscripten_bind_PxRigidDynamic_wakeUp_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_wakeUp_0");
        var _emscripten_bind_PxRigidDynamic_putToSleep_0 = Module["_emscripten_bind_PxRigidDynamic_putToSleep_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_putToSleep_0");
        var _emscripten_bind_PxRigidDynamic_setSolverIterationCounts_1 = Module["_emscripten_bind_PxRigidDynamic_setSolverIterationCounts_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setSolverIterationCounts_1");
        var _emscripten_bind_PxRigidDynamic_setSolverIterationCounts_2 = Module["_emscripten_bind_PxRigidDynamic_setSolverIterationCounts_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setSolverIterationCounts_2");
        var _emscripten_bind_PxRigidDynamic_getContactReportThreshold_0 = Module["_emscripten_bind_PxRigidDynamic_getContactReportThreshold_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getContactReportThreshold_0");
        var _emscripten_bind_PxRigidDynamic_setContactReportThreshold_1 = Module["_emscripten_bind_PxRigidDynamic_setContactReportThreshold_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setContactReportThreshold_1");
        var _emscripten_bind_PxRigidDynamic_getType_0 = Module["_emscripten_bind_PxRigidDynamic_getType_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getType_0");
        var _emscripten_bind_PxRigidDynamic_getScene_0 = Module["_emscripten_bind_PxRigidDynamic_getScene_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getScene_0");
        var _emscripten_bind_PxRigidDynamic_setName_1 = Module["_emscripten_bind_PxRigidDynamic_setName_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setName_1");
        var _emscripten_bind_PxRigidDynamic_getName_0 = Module["_emscripten_bind_PxRigidDynamic_getName_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getName_0");
        var _emscripten_bind_PxRigidDynamic_getWorldBounds_0 = Module["_emscripten_bind_PxRigidDynamic_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getWorldBounds_0");
        var _emscripten_bind_PxRigidDynamic_getWorldBounds_1 = Module["_emscripten_bind_PxRigidDynamic_getWorldBounds_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getWorldBounds_1");
        var _emscripten_bind_PxRigidDynamic_setActorFlags_1 = Module["_emscripten_bind_PxRigidDynamic_setActorFlags_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setActorFlags_1");
        var _emscripten_bind_PxRigidDynamic_getActorFlags_0 = Module["_emscripten_bind_PxRigidDynamic_getActorFlags_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getActorFlags_0");
        var _emscripten_bind_PxRigidDynamic_setDominanceGroup_1 = Module["_emscripten_bind_PxRigidDynamic_setDominanceGroup_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setDominanceGroup_1");
        var _emscripten_bind_PxRigidDynamic_getDominanceGroup_0 = Module["_emscripten_bind_PxRigidDynamic_getDominanceGroup_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getDominanceGroup_0");
        var _emscripten_bind_PxRigidDynamic_setOwnerClient_1 = Module["_emscripten_bind_PxRigidDynamic_setOwnerClient_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setOwnerClient_1");
        var _emscripten_bind_PxRigidDynamic_getOwnerClient_0 = Module["_emscripten_bind_PxRigidDynamic_getOwnerClient_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getOwnerClient_0");
        var _emscripten_bind_PxRigidDynamic_getConcreteTypeName_0 = Module["_emscripten_bind_PxRigidDynamic_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getConcreteTypeName_0");
        var _emscripten_bind_PxRigidDynamic_getConcreteType_0 = Module["_emscripten_bind_PxRigidDynamic_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getConcreteType_0");
        var _emscripten_bind_PxRigidDynamic_setBaseFlag_2 = Module["_emscripten_bind_PxRigidDynamic_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setBaseFlag_2");
        var _emscripten_bind_PxRigidDynamic_setBaseFlags_1 = Module["_emscripten_bind_PxRigidDynamic_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setBaseFlags_1");
        var _emscripten_bind_PxRigidDynamic_getBaseFlags_0 = Module["_emscripten_bind_PxRigidDynamic_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getBaseFlags_0");
        var _emscripten_bind_PxRigidDynamic_isReleasable_0 = Module["_emscripten_bind_PxRigidDynamic_isReleasable_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_isReleasable_0");
        var _emscripten_bind_PxRigidDynamic_getGlobalPose_0 = Module["_emscripten_bind_PxRigidDynamic_getGlobalPose_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getGlobalPose_0");
        var _emscripten_bind_PxRigidDynamic_setGlobalPose_1 = Module["_emscripten_bind_PxRigidDynamic_setGlobalPose_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setGlobalPose_1");
        var _emscripten_bind_PxRigidDynamic_setGlobalPose_2 = Module["_emscripten_bind_PxRigidDynamic_setGlobalPose_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setGlobalPose_2");
        var _emscripten_bind_PxRigidDynamic_attachShape_1 = Module["_emscripten_bind_PxRigidDynamic_attachShape_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_attachShape_1");
        var _emscripten_bind_PxRigidDynamic_detachShape_1 = Module["_emscripten_bind_PxRigidDynamic_detachShape_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_detachShape_1");
        var _emscripten_bind_PxRigidDynamic_detachShape_2 = Module["_emscripten_bind_PxRigidDynamic_detachShape_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_detachShape_2");
        var _emscripten_bind_PxRigidDynamic_getNbShapes_0 = Module["_emscripten_bind_PxRigidDynamic_getNbShapes_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getNbShapes_0");
        var _emscripten_bind_PxRigidDynamic_setCMassLocalPose_1 = Module["_emscripten_bind_PxRigidDynamic_setCMassLocalPose_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setCMassLocalPose_1");
        var _emscripten_bind_PxRigidDynamic_getCMassLocalPose_0 = Module["_emscripten_bind_PxRigidDynamic_getCMassLocalPose_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getCMassLocalPose_0");
        var _emscripten_bind_PxRigidDynamic_setMass_1 = Module["_emscripten_bind_PxRigidDynamic_setMass_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setMass_1");
        var _emscripten_bind_PxRigidDynamic_getMass_0 = Module["_emscripten_bind_PxRigidDynamic_getMass_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMass_0");
        var _emscripten_bind_PxRigidDynamic_getInvMass_0 = Module["_emscripten_bind_PxRigidDynamic_getInvMass_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getInvMass_0");
        var _emscripten_bind_PxRigidDynamic_setMassSpaceInertiaTensor_1 = Module["_emscripten_bind_PxRigidDynamic_setMassSpaceInertiaTensor_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setMassSpaceInertiaTensor_1");
        var _emscripten_bind_PxRigidDynamic_getMassSpaceInertiaTensor_0 = Module["_emscripten_bind_PxRigidDynamic_getMassSpaceInertiaTensor_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMassSpaceInertiaTensor_0");
        var _emscripten_bind_PxRigidDynamic_getMassSpaceInvInertiaTensor_0 = Module["_emscripten_bind_PxRigidDynamic_getMassSpaceInvInertiaTensor_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMassSpaceInvInertiaTensor_0");
        var _emscripten_bind_PxRigidDynamic_setLinearDamping_1 = Module["_emscripten_bind_PxRigidDynamic_setLinearDamping_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setLinearDamping_1");
        var _emscripten_bind_PxRigidDynamic_getLinearDamping_0 = Module["_emscripten_bind_PxRigidDynamic_getLinearDamping_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getLinearDamping_0");
        var _emscripten_bind_PxRigidDynamic_setAngularDamping_1 = Module["_emscripten_bind_PxRigidDynamic_setAngularDamping_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setAngularDamping_1");
        var _emscripten_bind_PxRigidDynamic_getAngularDamping_0 = Module["_emscripten_bind_PxRigidDynamic_getAngularDamping_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getAngularDamping_0");
        var _emscripten_bind_PxRigidDynamic_getLinearVelocity_0 = Module["_emscripten_bind_PxRigidDynamic_getLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getLinearVelocity_0");
        var _emscripten_bind_PxRigidDynamic_setLinearVelocity_1 = Module["_emscripten_bind_PxRigidDynamic_setLinearVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setLinearVelocity_1");
        var _emscripten_bind_PxRigidDynamic_setLinearVelocity_2 = Module["_emscripten_bind_PxRigidDynamic_setLinearVelocity_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setLinearVelocity_2");
        var _emscripten_bind_PxRigidDynamic_getAngularVelocity_0 = Module["_emscripten_bind_PxRigidDynamic_getAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getAngularVelocity_0");
        var _emscripten_bind_PxRigidDynamic_setAngularVelocity_1 = Module["_emscripten_bind_PxRigidDynamic_setAngularVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setAngularVelocity_1");
        var _emscripten_bind_PxRigidDynamic_setAngularVelocity_2 = Module["_emscripten_bind_PxRigidDynamic_setAngularVelocity_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setAngularVelocity_2");
        var _emscripten_bind_PxRigidDynamic_getMaxLinearVelocity_0 = Module["_emscripten_bind_PxRigidDynamic_getMaxLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMaxLinearVelocity_0");
        var _emscripten_bind_PxRigidDynamic_setMaxLinearVelocity_1 = Module["_emscripten_bind_PxRigidDynamic_setMaxLinearVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setMaxLinearVelocity_1");
        var _emscripten_bind_PxRigidDynamic_getMaxAngularVelocity_0 = Module["_emscripten_bind_PxRigidDynamic_getMaxAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMaxAngularVelocity_0");
        var _emscripten_bind_PxRigidDynamic_setMaxAngularVelocity_1 = Module["_emscripten_bind_PxRigidDynamic_setMaxAngularVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setMaxAngularVelocity_1");
        var _emscripten_bind_PxRigidDynamic_addForce_1 = Module["_emscripten_bind_PxRigidDynamic_addForce_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_addForce_1");
        var _emscripten_bind_PxRigidDynamic_addForce_2 = Module["_emscripten_bind_PxRigidDynamic_addForce_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_addForce_2");
        var _emscripten_bind_PxRigidDynamic_addForce_3 = Module["_emscripten_bind_PxRigidDynamic_addForce_3"] = createExportWrapper("emscripten_bind_PxRigidDynamic_addForce_3");
        var _emscripten_bind_PxRigidDynamic_addTorque_1 = Module["_emscripten_bind_PxRigidDynamic_addTorque_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_addTorque_1");
        var _emscripten_bind_PxRigidDynamic_addTorque_2 = Module["_emscripten_bind_PxRigidDynamic_addTorque_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_addTorque_2");
        var _emscripten_bind_PxRigidDynamic_addTorque_3 = Module["_emscripten_bind_PxRigidDynamic_addTorque_3"] = createExportWrapper("emscripten_bind_PxRigidDynamic_addTorque_3");
        var _emscripten_bind_PxRigidDynamic_clearForce_1 = Module["_emscripten_bind_PxRigidDynamic_clearForce_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_clearForce_1");
        var _emscripten_bind_PxRigidDynamic_clearTorque_1 = Module["_emscripten_bind_PxRigidDynamic_clearTorque_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_clearTorque_1");
        var _emscripten_bind_PxRigidDynamic_setForceAndTorque_2 = Module["_emscripten_bind_PxRigidDynamic_setForceAndTorque_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setForceAndTorque_2");
        var _emscripten_bind_PxRigidDynamic_setForceAndTorque_3 = Module["_emscripten_bind_PxRigidDynamic_setForceAndTorque_3"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setForceAndTorque_3");
        var _emscripten_bind_PxRigidDynamic_setRigidBodyFlag_2 = Module["_emscripten_bind_PxRigidDynamic_setRigidBodyFlag_2"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setRigidBodyFlag_2");
        var _emscripten_bind_PxRigidDynamic_setRigidBodyFlags_1 = Module["_emscripten_bind_PxRigidDynamic_setRigidBodyFlags_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setRigidBodyFlags_1");
        var _emscripten_bind_PxRigidDynamic_getRigidBodyFlags_0 = Module["_emscripten_bind_PxRigidDynamic_getRigidBodyFlags_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getRigidBodyFlags_0");
        var _emscripten_bind_PxRigidDynamic_setMinCCDAdvanceCoefficient_1 = Module["_emscripten_bind_PxRigidDynamic_setMinCCDAdvanceCoefficient_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setMinCCDAdvanceCoefficient_1");
        var _emscripten_bind_PxRigidDynamic_getMinCCDAdvanceCoefficient_0 = Module["_emscripten_bind_PxRigidDynamic_getMinCCDAdvanceCoefficient_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMinCCDAdvanceCoefficient_0");
        var _emscripten_bind_PxRigidDynamic_setMaxDepenetrationVelocity_1 = Module["_emscripten_bind_PxRigidDynamic_setMaxDepenetrationVelocity_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setMaxDepenetrationVelocity_1");
        var _emscripten_bind_PxRigidDynamic_getMaxDepenetrationVelocity_0 = Module["_emscripten_bind_PxRigidDynamic_getMaxDepenetrationVelocity_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMaxDepenetrationVelocity_0");
        var _emscripten_bind_PxRigidDynamic_setMaxContactImpulse_1 = Module["_emscripten_bind_PxRigidDynamic_setMaxContactImpulse_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_setMaxContactImpulse_1");
        var _emscripten_bind_PxRigidDynamic_getMaxContactImpulse_0 = Module["_emscripten_bind_PxRigidDynamic_getMaxContactImpulse_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getMaxContactImpulse_0");
        var _emscripten_bind_PxRigidDynamic_getInternalIslandNodeIndex_0 = Module["_emscripten_bind_PxRigidDynamic_getInternalIslandNodeIndex_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_getInternalIslandNodeIndex_0");
        var _emscripten_bind_PxRigidDynamic_get_userData_0 = Module["_emscripten_bind_PxRigidDynamic_get_userData_0"] = createExportWrapper("emscripten_bind_PxRigidDynamic_get_userData_0");
        var _emscripten_bind_PxRigidDynamic_set_userData_1 = Module["_emscripten_bind_PxRigidDynamic_set_userData_1"] = createExportWrapper("emscripten_bind_PxRigidDynamic_set_userData_1");
        var _emscripten_bind_PxRigidDynamicLockFlags_PxRigidDynamicLockFlags_1 = Module["_emscripten_bind_PxRigidDynamicLockFlags_PxRigidDynamicLockFlags_1"] = createExportWrapper("emscripten_bind_PxRigidDynamicLockFlags_PxRigidDynamicLockFlags_1");
        var _emscripten_bind_PxRigidDynamicLockFlags_isSet_1 = Module["_emscripten_bind_PxRigidDynamicLockFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxRigidDynamicLockFlags_isSet_1");
        var _emscripten_bind_PxRigidDynamicLockFlags_set_1 = Module["_emscripten_bind_PxRigidDynamicLockFlags_set_1"] = createExportWrapper("emscripten_bind_PxRigidDynamicLockFlags_set_1");
        var _emscripten_bind_PxRigidDynamicLockFlags_clear_1 = Module["_emscripten_bind_PxRigidDynamicLockFlags_clear_1"] = createExportWrapper("emscripten_bind_PxRigidDynamicLockFlags_clear_1");
        var _emscripten_bind_PxRigidDynamicLockFlags___destroy___0 = Module["_emscripten_bind_PxRigidDynamicLockFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxRigidDynamicLockFlags___destroy___0");
        var _emscripten_bind_PxRigidStatic_getType_0 = Module["_emscripten_bind_PxRigidStatic_getType_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getType_0");
        var _emscripten_bind_PxRigidStatic_getScene_0 = Module["_emscripten_bind_PxRigidStatic_getScene_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getScene_0");
        var _emscripten_bind_PxRigidStatic_setName_1 = Module["_emscripten_bind_PxRigidStatic_setName_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_setName_1");
        var _emscripten_bind_PxRigidStatic_getName_0 = Module["_emscripten_bind_PxRigidStatic_getName_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getName_0");
        var _emscripten_bind_PxRigidStatic_getWorldBounds_0 = Module["_emscripten_bind_PxRigidStatic_getWorldBounds_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getWorldBounds_0");
        var _emscripten_bind_PxRigidStatic_getWorldBounds_1 = Module["_emscripten_bind_PxRigidStatic_getWorldBounds_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_getWorldBounds_1");
        var _emscripten_bind_PxRigidStatic_setActorFlags_1 = Module["_emscripten_bind_PxRigidStatic_setActorFlags_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_setActorFlags_1");
        var _emscripten_bind_PxRigidStatic_getActorFlags_0 = Module["_emscripten_bind_PxRigidStatic_getActorFlags_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getActorFlags_0");
        var _emscripten_bind_PxRigidStatic_setDominanceGroup_1 = Module["_emscripten_bind_PxRigidStatic_setDominanceGroup_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_setDominanceGroup_1");
        var _emscripten_bind_PxRigidStatic_getDominanceGroup_0 = Module["_emscripten_bind_PxRigidStatic_getDominanceGroup_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getDominanceGroup_0");
        var _emscripten_bind_PxRigidStatic_setOwnerClient_1 = Module["_emscripten_bind_PxRigidStatic_setOwnerClient_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_setOwnerClient_1");
        var _emscripten_bind_PxRigidStatic_getOwnerClient_0 = Module["_emscripten_bind_PxRigidStatic_getOwnerClient_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getOwnerClient_0");
        var _emscripten_bind_PxRigidStatic_getConcreteTypeName_0 = Module["_emscripten_bind_PxRigidStatic_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getConcreteTypeName_0");
        var _emscripten_bind_PxRigidStatic_getConcreteType_0 = Module["_emscripten_bind_PxRigidStatic_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getConcreteType_0");
        var _emscripten_bind_PxRigidStatic_setBaseFlag_2 = Module["_emscripten_bind_PxRigidStatic_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxRigidStatic_setBaseFlag_2");
        var _emscripten_bind_PxRigidStatic_setBaseFlags_1 = Module["_emscripten_bind_PxRigidStatic_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_setBaseFlags_1");
        var _emscripten_bind_PxRigidStatic_getBaseFlags_0 = Module["_emscripten_bind_PxRigidStatic_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getBaseFlags_0");
        var _emscripten_bind_PxRigidStatic_isReleasable_0 = Module["_emscripten_bind_PxRigidStatic_isReleasable_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_isReleasable_0");
        var _emscripten_bind_PxRigidStatic_getGlobalPose_0 = Module["_emscripten_bind_PxRigidStatic_getGlobalPose_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getGlobalPose_0");
        var _emscripten_bind_PxRigidStatic_setGlobalPose_1 = Module["_emscripten_bind_PxRigidStatic_setGlobalPose_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_setGlobalPose_1");
        var _emscripten_bind_PxRigidStatic_setGlobalPose_2 = Module["_emscripten_bind_PxRigidStatic_setGlobalPose_2"] = createExportWrapper("emscripten_bind_PxRigidStatic_setGlobalPose_2");
        var _emscripten_bind_PxRigidStatic_attachShape_1 = Module["_emscripten_bind_PxRigidStatic_attachShape_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_attachShape_1");
        var _emscripten_bind_PxRigidStatic_detachShape_1 = Module["_emscripten_bind_PxRigidStatic_detachShape_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_detachShape_1");
        var _emscripten_bind_PxRigidStatic_detachShape_2 = Module["_emscripten_bind_PxRigidStatic_detachShape_2"] = createExportWrapper("emscripten_bind_PxRigidStatic_detachShape_2");
        var _emscripten_bind_PxRigidStatic_getNbShapes_0 = Module["_emscripten_bind_PxRigidStatic_getNbShapes_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_getNbShapes_0");
        var _emscripten_bind_PxRigidStatic_get_userData_0 = Module["_emscripten_bind_PxRigidStatic_get_userData_0"] = createExportWrapper("emscripten_bind_PxRigidStatic_get_userData_0");
        var _emscripten_bind_PxRigidStatic_set_userData_1 = Module["_emscripten_bind_PxRigidStatic_set_userData_1"] = createExportWrapper("emscripten_bind_PxRigidStatic_set_userData_1");
        var _emscripten_bind_PxScene_addActor_1 = Module["_emscripten_bind_PxScene_addActor_1"] = createExportWrapper("emscripten_bind_PxScene_addActor_1");
        var _emscripten_bind_PxScene_addActor_2 = Module["_emscripten_bind_PxScene_addActor_2"] = createExportWrapper("emscripten_bind_PxScene_addActor_2");
        var _emscripten_bind_PxScene_removeActor_1 = Module["_emscripten_bind_PxScene_removeActor_1"] = createExportWrapper("emscripten_bind_PxScene_removeActor_1");
        var _emscripten_bind_PxScene_removeActor_2 = Module["_emscripten_bind_PxScene_removeActor_2"] = createExportWrapper("emscripten_bind_PxScene_removeActor_2");
        var _emscripten_bind_PxScene_addAggregate_1 = Module["_emscripten_bind_PxScene_addAggregate_1"] = createExportWrapper("emscripten_bind_PxScene_addAggregate_1");
        var _emscripten_bind_PxScene_removeAggregate_1 = Module["_emscripten_bind_PxScene_removeAggregate_1"] = createExportWrapper("emscripten_bind_PxScene_removeAggregate_1");
        var _emscripten_bind_PxScene_removeAggregate_2 = Module["_emscripten_bind_PxScene_removeAggregate_2"] = createExportWrapper("emscripten_bind_PxScene_removeAggregate_2");
        var _emscripten_bind_PxScene_addCollection_1 = Module["_emscripten_bind_PxScene_addCollection_1"] = createExportWrapper("emscripten_bind_PxScene_addCollection_1");
        var _emscripten_bind_PxScene_getWakeCounterResetValue_0 = Module["_emscripten_bind_PxScene_getWakeCounterResetValue_0"] = createExportWrapper("emscripten_bind_PxScene_getWakeCounterResetValue_0");
        var _emscripten_bind_PxScene_shiftOrigin_1 = Module["_emscripten_bind_PxScene_shiftOrigin_1"] = createExportWrapper("emscripten_bind_PxScene_shiftOrigin_1");
        var _emscripten_bind_PxScene_addArticulation_1 = Module["_emscripten_bind_PxScene_addArticulation_1"] = createExportWrapper("emscripten_bind_PxScene_addArticulation_1");
        var _emscripten_bind_PxScene_removeArticulation_1 = Module["_emscripten_bind_PxScene_removeArticulation_1"] = createExportWrapper("emscripten_bind_PxScene_removeArticulation_1");
        var _emscripten_bind_PxScene_removeArticulation_2 = Module["_emscripten_bind_PxScene_removeArticulation_2"] = createExportWrapper("emscripten_bind_PxScene_removeArticulation_2");
        var _emscripten_bind_PxScene_getNbActors_1 = Module["_emscripten_bind_PxScene_getNbActors_1"] = createExportWrapper("emscripten_bind_PxScene_getNbActors_1");
        var _emscripten_bind_PxScene_getNbArticulations_0 = Module["_emscripten_bind_PxScene_getNbArticulations_0"] = createExportWrapper("emscripten_bind_PxScene_getNbArticulations_0");
        var _emscripten_bind_PxScene_getNbConstraints_0 = Module["_emscripten_bind_PxScene_getNbConstraints_0"] = createExportWrapper("emscripten_bind_PxScene_getNbConstraints_0");
        var _emscripten_bind_PxScene_getNbAggregates_0 = Module["_emscripten_bind_PxScene_getNbAggregates_0"] = createExportWrapper("emscripten_bind_PxScene_getNbAggregates_0");
        var _emscripten_bind_PxScene_setDominanceGroupPair_3 = Module["_emscripten_bind_PxScene_setDominanceGroupPair_3"] = createExportWrapper("emscripten_bind_PxScene_setDominanceGroupPair_3");
        var _emscripten_bind_PxScene_getCpuDispatcher_0 = Module["_emscripten_bind_PxScene_getCpuDispatcher_0"] = createExportWrapper("emscripten_bind_PxScene_getCpuDispatcher_0");
        var _emscripten_bind_PxScene_getCudaContextManager_0 = Module["_emscripten_bind_PxScene_getCudaContextManager_0"] = createExportWrapper("emscripten_bind_PxScene_getCudaContextManager_0");
        var _emscripten_bind_PxScene_createClient_0 = Module["_emscripten_bind_PxScene_createClient_0"] = createExportWrapper("emscripten_bind_PxScene_createClient_0");
        var _emscripten_bind_PxScene_setSimulationEventCallback_1 = Module["_emscripten_bind_PxScene_setSimulationEventCallback_1"] = createExportWrapper("emscripten_bind_PxScene_setSimulationEventCallback_1");
        var _emscripten_bind_PxScene_getSimulationEventCallback_0 = Module["_emscripten_bind_PxScene_getSimulationEventCallback_0"] = createExportWrapper("emscripten_bind_PxScene_getSimulationEventCallback_0");
        var _emscripten_bind_PxScene_setFilterShaderData_2 = Module["_emscripten_bind_PxScene_setFilterShaderData_2"] = createExportWrapper("emscripten_bind_PxScene_setFilterShaderData_2");
        var _emscripten_bind_PxScene_getFilterShaderData_0 = Module["_emscripten_bind_PxScene_getFilterShaderData_0"] = createExportWrapper("emscripten_bind_PxScene_getFilterShaderData_0");
        var _emscripten_bind_PxScene_getFilterShaderDataSize_0 = Module["_emscripten_bind_PxScene_getFilterShaderDataSize_0"] = createExportWrapper("emscripten_bind_PxScene_getFilterShaderDataSize_0");
        var _emscripten_bind_PxScene_getFilterShader_0 = Module["_emscripten_bind_PxScene_getFilterShader_0"] = createExportWrapper("emscripten_bind_PxScene_getFilterShader_0");
        var _emscripten_bind_PxScene_resetFiltering_1 = Module["_emscripten_bind_PxScene_resetFiltering_1"] = createExportWrapper("emscripten_bind_PxScene_resetFiltering_1");
        var _emscripten_bind_PxScene_getKinematicKinematicFilteringMode_0 = Module["_emscripten_bind_PxScene_getKinematicKinematicFilteringMode_0"] = createExportWrapper("emscripten_bind_PxScene_getKinematicKinematicFilteringMode_0");
        var _emscripten_bind_PxScene_getStaticKinematicFilteringMode_0 = Module["_emscripten_bind_PxScene_getStaticKinematicFilteringMode_0"] = createExportWrapper("emscripten_bind_PxScene_getStaticKinematicFilteringMode_0");
        var _emscripten_bind_PxScene_simulate_1 = Module["_emscripten_bind_PxScene_simulate_1"] = createExportWrapper("emscripten_bind_PxScene_simulate_1");
        var _emscripten_bind_PxScene_simulate_2 = Module["_emscripten_bind_PxScene_simulate_2"] = createExportWrapper("emscripten_bind_PxScene_simulate_2");
        var _emscripten_bind_PxScene_simulate_3 = Module["_emscripten_bind_PxScene_simulate_3"] = createExportWrapper("emscripten_bind_PxScene_simulate_3");
        var _emscripten_bind_PxScene_simulate_4 = Module["_emscripten_bind_PxScene_simulate_4"] = createExportWrapper("emscripten_bind_PxScene_simulate_4");
        var _emscripten_bind_PxScene_simulate_5 = Module["_emscripten_bind_PxScene_simulate_5"] = createExportWrapper("emscripten_bind_PxScene_simulate_5");
        var _emscripten_bind_PxScene_advance_0 = Module["_emscripten_bind_PxScene_advance_0"] = createExportWrapper("emscripten_bind_PxScene_advance_0");
        var _emscripten_bind_PxScene_advance_1 = Module["_emscripten_bind_PxScene_advance_1"] = createExportWrapper("emscripten_bind_PxScene_advance_1");
        var _emscripten_bind_PxScene_collide_1 = Module["_emscripten_bind_PxScene_collide_1"] = createExportWrapper("emscripten_bind_PxScene_collide_1");
        var _emscripten_bind_PxScene_collide_2 = Module["_emscripten_bind_PxScene_collide_2"] = createExportWrapper("emscripten_bind_PxScene_collide_2");
        var _emscripten_bind_PxScene_collide_3 = Module["_emscripten_bind_PxScene_collide_3"] = createExportWrapper("emscripten_bind_PxScene_collide_3");
        var _emscripten_bind_PxScene_collide_4 = Module["_emscripten_bind_PxScene_collide_4"] = createExportWrapper("emscripten_bind_PxScene_collide_4");
        var _emscripten_bind_PxScene_collide_5 = Module["_emscripten_bind_PxScene_collide_5"] = createExportWrapper("emscripten_bind_PxScene_collide_5");
        var _emscripten_bind_PxScene_checkResults_0 = Module["_emscripten_bind_PxScene_checkResults_0"] = createExportWrapper("emscripten_bind_PxScene_checkResults_0");
        var _emscripten_bind_PxScene_checkResults_1 = Module["_emscripten_bind_PxScene_checkResults_1"] = createExportWrapper("emscripten_bind_PxScene_checkResults_1");
        var _emscripten_bind_PxScene_fetchCollision_0 = Module["_emscripten_bind_PxScene_fetchCollision_0"] = createExportWrapper("emscripten_bind_PxScene_fetchCollision_0");
        var _emscripten_bind_PxScene_fetchCollision_1 = Module["_emscripten_bind_PxScene_fetchCollision_1"] = createExportWrapper("emscripten_bind_PxScene_fetchCollision_1");
        var _emscripten_bind_PxScene_fetchResults_0 = Module["_emscripten_bind_PxScene_fetchResults_0"] = createExportWrapper("emscripten_bind_PxScene_fetchResults_0");
        var _emscripten_bind_PxScene_fetchResults_1 = Module["_emscripten_bind_PxScene_fetchResults_1"] = createExportWrapper("emscripten_bind_PxScene_fetchResults_1");
        var _emscripten_bind_PxScene_processCallbacks_1 = Module["_emscripten_bind_PxScene_processCallbacks_1"] = createExportWrapper("emscripten_bind_PxScene_processCallbacks_1");
        var _emscripten_bind_PxScene_flushSimulation_0 = Module["_emscripten_bind_PxScene_flushSimulation_0"] = createExportWrapper("emscripten_bind_PxScene_flushSimulation_0");
        var _emscripten_bind_PxScene_flushSimulation_1 = Module["_emscripten_bind_PxScene_flushSimulation_1"] = createExportWrapper("emscripten_bind_PxScene_flushSimulation_1");
        var _emscripten_bind_PxScene_setGravity_1 = Module["_emscripten_bind_PxScene_setGravity_1"] = createExportWrapper("emscripten_bind_PxScene_setGravity_1");
        var _emscripten_bind_PxScene_getGravity_0 = Module["_emscripten_bind_PxScene_getGravity_0"] = createExportWrapper("emscripten_bind_PxScene_getGravity_0");
        var _emscripten_bind_PxScene_setBounceThresholdVelocity_1 = Module["_emscripten_bind_PxScene_setBounceThresholdVelocity_1"] = createExportWrapper("emscripten_bind_PxScene_setBounceThresholdVelocity_1");
        var _emscripten_bind_PxScene_getBounceThresholdVelocity_0 = Module["_emscripten_bind_PxScene_getBounceThresholdVelocity_0"] = createExportWrapper("emscripten_bind_PxScene_getBounceThresholdVelocity_0");
        var _emscripten_bind_PxScene_setCCDMaxPasses_1 = Module["_emscripten_bind_PxScene_setCCDMaxPasses_1"] = createExportWrapper("emscripten_bind_PxScene_setCCDMaxPasses_1");
        var _emscripten_bind_PxScene_getCCDMaxPasses_0 = Module["_emscripten_bind_PxScene_getCCDMaxPasses_0"] = createExportWrapper("emscripten_bind_PxScene_getCCDMaxPasses_0");
        var _emscripten_bind_PxScene_getFrictionOffsetThreshold_0 = Module["_emscripten_bind_PxScene_getFrictionOffsetThreshold_0"] = createExportWrapper("emscripten_bind_PxScene_getFrictionOffsetThreshold_0");
        var _emscripten_bind_PxScene_setFrictionType_1 = Module["_emscripten_bind_PxScene_setFrictionType_1"] = createExportWrapper("emscripten_bind_PxScene_setFrictionType_1");
        var _emscripten_bind_PxScene_getFrictionType_0 = Module["_emscripten_bind_PxScene_getFrictionType_0"] = createExportWrapper("emscripten_bind_PxScene_getFrictionType_0");
        var _emscripten_bind_PxScene_getSimulationStatistics_1 = Module["_emscripten_bind_PxScene_getSimulationStatistics_1"] = createExportWrapper("emscripten_bind_PxScene_getSimulationStatistics_1");
        var _emscripten_bind_PxScene_getStaticStructure_0 = Module["_emscripten_bind_PxScene_getStaticStructure_0"] = createExportWrapper("emscripten_bind_PxScene_getStaticStructure_0");
        var _emscripten_bind_PxScene_getDynamicStructure_0 = Module["_emscripten_bind_PxScene_getDynamicStructure_0"] = createExportWrapper("emscripten_bind_PxScene_getDynamicStructure_0");
        var _emscripten_bind_PxScene_flushQueryUpdates_0 = Module["_emscripten_bind_PxScene_flushQueryUpdates_0"] = createExportWrapper("emscripten_bind_PxScene_flushQueryUpdates_0");
        var _emscripten_bind_PxScene_createBatchQuery_1 = Module["_emscripten_bind_PxScene_createBatchQuery_1"] = createExportWrapper("emscripten_bind_PxScene_createBatchQuery_1");
        var _emscripten_bind_PxScene_setDynamicTreeRebuildRateHint_1 = Module["_emscripten_bind_PxScene_setDynamicTreeRebuildRateHint_1"] = createExportWrapper("emscripten_bind_PxScene_setDynamicTreeRebuildRateHint_1");
        var _emscripten_bind_PxScene_getDynamicTreeRebuildRateHint_0 = Module["_emscripten_bind_PxScene_getDynamicTreeRebuildRateHint_0"] = createExportWrapper("emscripten_bind_PxScene_getDynamicTreeRebuildRateHint_0");
        var _emscripten_bind_PxScene_forceDynamicTreeRebuild_2 = Module["_emscripten_bind_PxScene_forceDynamicTreeRebuild_2"] = createExportWrapper("emscripten_bind_PxScene_forceDynamicTreeRebuild_2");
        var _emscripten_bind_PxScene_setSceneQueryUpdateMode_1 = Module["_emscripten_bind_PxScene_setSceneQueryUpdateMode_1"] = createExportWrapper("emscripten_bind_PxScene_setSceneQueryUpdateMode_1");
        var _emscripten_bind_PxScene_getSceneQueryUpdateMode_0 = Module["_emscripten_bind_PxScene_getSceneQueryUpdateMode_0"] = createExportWrapper("emscripten_bind_PxScene_getSceneQueryUpdateMode_0");
        var _emscripten_bind_PxScene_sceneQueriesUpdate_0 = Module["_emscripten_bind_PxScene_sceneQueriesUpdate_0"] = createExportWrapper("emscripten_bind_PxScene_sceneQueriesUpdate_0");
        var _emscripten_bind_PxScene_sceneQueriesUpdate_1 = Module["_emscripten_bind_PxScene_sceneQueriesUpdate_1"] = createExportWrapper("emscripten_bind_PxScene_sceneQueriesUpdate_1");
        var _emscripten_bind_PxScene_sceneQueriesUpdate_2 = Module["_emscripten_bind_PxScene_sceneQueriesUpdate_2"] = createExportWrapper("emscripten_bind_PxScene_sceneQueriesUpdate_2");
        var _emscripten_bind_PxScene_checkQueries_0 = Module["_emscripten_bind_PxScene_checkQueries_0"] = createExportWrapper("emscripten_bind_PxScene_checkQueries_0");
        var _emscripten_bind_PxScene_checkQueries_1 = Module["_emscripten_bind_PxScene_checkQueries_1"] = createExportWrapper("emscripten_bind_PxScene_checkQueries_1");
        var _emscripten_bind_PxScene_fetchQueries_0 = Module["_emscripten_bind_PxScene_fetchQueries_0"] = createExportWrapper("emscripten_bind_PxScene_fetchQueries_0");
        var _emscripten_bind_PxScene_fetchQueries_1 = Module["_emscripten_bind_PxScene_fetchQueries_1"] = createExportWrapper("emscripten_bind_PxScene_fetchQueries_1");
        var _emscripten_bind_PxScene_raycast_4 = Module["_emscripten_bind_PxScene_raycast_4"] = createExportWrapper("emscripten_bind_PxScene_raycast_4");
        var _emscripten_bind_PxScene_raycast_5 = Module["_emscripten_bind_PxScene_raycast_5"] = createExportWrapper("emscripten_bind_PxScene_raycast_5");
        var _emscripten_bind_PxScene_raycast_6 = Module["_emscripten_bind_PxScene_raycast_6"] = createExportWrapper("emscripten_bind_PxScene_raycast_6");
        var _emscripten_bind_PxScene_sweep_5 = Module["_emscripten_bind_PxScene_sweep_5"] = createExportWrapper("emscripten_bind_PxScene_sweep_5");
        var _emscripten_bind_PxScene_sweep_6 = Module["_emscripten_bind_PxScene_sweep_6"] = createExportWrapper("emscripten_bind_PxScene_sweep_6");
        var _emscripten_bind_PxScene_sweep_7 = Module["_emscripten_bind_PxScene_sweep_7"] = createExportWrapper("emscripten_bind_PxScene_sweep_7");
        var _emscripten_bind_PxScene_overlap_3 = Module["_emscripten_bind_PxScene_overlap_3"] = createExportWrapper("emscripten_bind_PxScene_overlap_3");
        var _emscripten_bind_PxScene_overlap_4 = Module["_emscripten_bind_PxScene_overlap_4"] = createExportWrapper("emscripten_bind_PxScene_overlap_4");
        var _emscripten_bind_PxScene_getSceneQueryStaticTimestamp_0 = Module["_emscripten_bind_PxScene_getSceneQueryStaticTimestamp_0"] = createExportWrapper("emscripten_bind_PxScene_getSceneQueryStaticTimestamp_0");
        var _emscripten_bind_PxScene_getBroadPhaseType_0 = Module["_emscripten_bind_PxScene_getBroadPhaseType_0"] = createExportWrapper("emscripten_bind_PxScene_getBroadPhaseType_0");
        var _emscripten_bind_PxScene_getBroadPhaseCaps_1 = Module["_emscripten_bind_PxScene_getBroadPhaseCaps_1"] = createExportWrapper("emscripten_bind_PxScene_getBroadPhaseCaps_1");
        var _emscripten_bind_PxScene_getNbBroadPhaseRegions_0 = Module["_emscripten_bind_PxScene_getNbBroadPhaseRegions_0"] = createExportWrapper("emscripten_bind_PxScene_getNbBroadPhaseRegions_0");
        var _emscripten_bind_PxScene_getBroadPhaseRegions_2 = Module["_emscripten_bind_PxScene_getBroadPhaseRegions_2"] = createExportWrapper("emscripten_bind_PxScene_getBroadPhaseRegions_2");
        var _emscripten_bind_PxScene_getBroadPhaseRegions_3 = Module["_emscripten_bind_PxScene_getBroadPhaseRegions_3"] = createExportWrapper("emscripten_bind_PxScene_getBroadPhaseRegions_3");
        var _emscripten_bind_PxScene_addBroadPhaseRegion_1 = Module["_emscripten_bind_PxScene_addBroadPhaseRegion_1"] = createExportWrapper("emscripten_bind_PxScene_addBroadPhaseRegion_1");
        var _emscripten_bind_PxScene_addBroadPhaseRegion_2 = Module["_emscripten_bind_PxScene_addBroadPhaseRegion_2"] = createExportWrapper("emscripten_bind_PxScene_addBroadPhaseRegion_2");
        var _emscripten_bind_PxScene_removeBroadPhaseRegion_1 = Module["_emscripten_bind_PxScene_removeBroadPhaseRegion_1"] = createExportWrapper("emscripten_bind_PxScene_removeBroadPhaseRegion_1");
        var _emscripten_bind_PxScene_lockRead_0 = Module["_emscripten_bind_PxScene_lockRead_0"] = createExportWrapper("emscripten_bind_PxScene_lockRead_0");
        var _emscripten_bind_PxScene_lockRead_1 = Module["_emscripten_bind_PxScene_lockRead_1"] = createExportWrapper("emscripten_bind_PxScene_lockRead_1");
        var _emscripten_bind_PxScene_lockRead_2 = Module["_emscripten_bind_PxScene_lockRead_2"] = createExportWrapper("emscripten_bind_PxScene_lockRead_2");
        var _emscripten_bind_PxScene_unlockRead_0 = Module["_emscripten_bind_PxScene_unlockRead_0"] = createExportWrapper("emscripten_bind_PxScene_unlockRead_0");
        var _emscripten_bind_PxScene_lockWrite_0 = Module["_emscripten_bind_PxScene_lockWrite_0"] = createExportWrapper("emscripten_bind_PxScene_lockWrite_0");
        var _emscripten_bind_PxScene_lockWrite_1 = Module["_emscripten_bind_PxScene_lockWrite_1"] = createExportWrapper("emscripten_bind_PxScene_lockWrite_1");
        var _emscripten_bind_PxScene_lockWrite_2 = Module["_emscripten_bind_PxScene_lockWrite_2"] = createExportWrapper("emscripten_bind_PxScene_lockWrite_2");
        var _emscripten_bind_PxScene_unlockWrite_0 = Module["_emscripten_bind_PxScene_unlockWrite_0"] = createExportWrapper("emscripten_bind_PxScene_unlockWrite_0");
        var _emscripten_bind_PxScene_setNbContactDataBlocks_1 = Module["_emscripten_bind_PxScene_setNbContactDataBlocks_1"] = createExportWrapper("emscripten_bind_PxScene_setNbContactDataBlocks_1");
        var _emscripten_bind_PxScene_getNbContactDataBlocksUsed_0 = Module["_emscripten_bind_PxScene_getNbContactDataBlocksUsed_0"] = createExportWrapper("emscripten_bind_PxScene_getNbContactDataBlocksUsed_0");
        var _emscripten_bind_PxScene_getMaxNbContactDataBlocksUsed_0 = Module["_emscripten_bind_PxScene_getMaxNbContactDataBlocksUsed_0"] = createExportWrapper("emscripten_bind_PxScene_getMaxNbContactDataBlocksUsed_0");
        var _emscripten_bind_PxScene_getContactReportStreamBufferSize_0 = Module["_emscripten_bind_PxScene_getContactReportStreamBufferSize_0"] = createExportWrapper("emscripten_bind_PxScene_getContactReportStreamBufferSize_0");
        var _emscripten_bind_PxScene_setSolverBatchSize_1 = Module["_emscripten_bind_PxScene_setSolverBatchSize_1"] = createExportWrapper("emscripten_bind_PxScene_setSolverBatchSize_1");
        var _emscripten_bind_PxScene_getSolverBatchSize_0 = Module["_emscripten_bind_PxScene_getSolverBatchSize_0"] = createExportWrapper("emscripten_bind_PxScene_getSolverBatchSize_0");
        var _emscripten_bind_PxScene_setSolverArticulationBatchSize_1 = Module["_emscripten_bind_PxScene_setSolverArticulationBatchSize_1"] = createExportWrapper("emscripten_bind_PxScene_setSolverArticulationBatchSize_1");
        var _emscripten_bind_PxScene_getSolverArticulationBatchSize_0 = Module["_emscripten_bind_PxScene_getSolverArticulationBatchSize_0"] = createExportWrapper("emscripten_bind_PxScene_getSolverArticulationBatchSize_0");
        var _emscripten_bind_PxScene_release_0 = Module["_emscripten_bind_PxScene_release_0"] = createExportWrapper("emscripten_bind_PxScene_release_0");
        var _emscripten_bind_PxScene_setFlag_2 = Module["_emscripten_bind_PxScene_setFlag_2"] = createExportWrapper("emscripten_bind_PxScene_setFlag_2");
        var _emscripten_bind_PxScene_getFlags_0 = Module["_emscripten_bind_PxScene_getFlags_0"] = createExportWrapper("emscripten_bind_PxScene_getFlags_0");
        var _emscripten_bind_PxScene_setLimits_1 = Module["_emscripten_bind_PxScene_setLimits_1"] = createExportWrapper("emscripten_bind_PxScene_setLimits_1");
        var _emscripten_bind_PxScene_getLimits_0 = Module["_emscripten_bind_PxScene_getLimits_0"] = createExportWrapper("emscripten_bind_PxScene_getLimits_0");
        var _emscripten_bind_PxScene_getPhysics_0 = Module["_emscripten_bind_PxScene_getPhysics_0"] = createExportWrapper("emscripten_bind_PxScene_getPhysics_0");
        var _emscripten_bind_PxScene_getTimestamp_0 = Module["_emscripten_bind_PxScene_getTimestamp_0"] = createExportWrapper("emscripten_bind_PxScene_getTimestamp_0");
        var _emscripten_bind_PxScene_get_userData_0 = Module["_emscripten_bind_PxScene_get_userData_0"] = createExportWrapper("emscripten_bind_PxScene_get_userData_0");
        var _emscripten_bind_PxScene_set_userData_1 = Module["_emscripten_bind_PxScene_set_userData_1"] = createExportWrapper("emscripten_bind_PxScene_set_userData_1");
        var _emscripten_bind_PxSceneDesc_PxSceneDesc_1 = Module["_emscripten_bind_PxSceneDesc_PxSceneDesc_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_PxSceneDesc_1");
        var _emscripten_bind_PxSceneDesc_setToDefault_1 = Module["_emscripten_bind_PxSceneDesc_setToDefault_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_setToDefault_1");
        var _emscripten_bind_PxSceneDesc_isValid_0 = Module["_emscripten_bind_PxSceneDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_isValid_0");
        var _emscripten_bind_PxSceneDesc_get_gravity_0 = Module["_emscripten_bind_PxSceneDesc_get_gravity_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_gravity_0");
        var _emscripten_bind_PxSceneDesc_set_gravity_1 = Module["_emscripten_bind_PxSceneDesc_set_gravity_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_gravity_1");
        var _emscripten_bind_PxSceneDesc_get_simulationEventCallback_0 = Module["_emscripten_bind_PxSceneDesc_get_simulationEventCallback_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_simulationEventCallback_0");
        var _emscripten_bind_PxSceneDesc_set_simulationEventCallback_1 = Module["_emscripten_bind_PxSceneDesc_set_simulationEventCallback_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_simulationEventCallback_1");
        var _emscripten_bind_PxSceneDesc_get_filterShaderData_0 = Module["_emscripten_bind_PxSceneDesc_get_filterShaderData_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_filterShaderData_0");
        var _emscripten_bind_PxSceneDesc_set_filterShaderData_1 = Module["_emscripten_bind_PxSceneDesc_set_filterShaderData_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_filterShaderData_1");
        var _emscripten_bind_PxSceneDesc_get_filterShaderDataSize_0 = Module["_emscripten_bind_PxSceneDesc_get_filterShaderDataSize_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_filterShaderDataSize_0");
        var _emscripten_bind_PxSceneDesc_set_filterShaderDataSize_1 = Module["_emscripten_bind_PxSceneDesc_set_filterShaderDataSize_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_filterShaderDataSize_1");
        var _emscripten_bind_PxSceneDesc_get_filterShader_0 = Module["_emscripten_bind_PxSceneDesc_get_filterShader_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_filterShader_0");
        var _emscripten_bind_PxSceneDesc_set_filterShader_1 = Module["_emscripten_bind_PxSceneDesc_set_filterShader_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_filterShader_1");
        var _emscripten_bind_PxSceneDesc_get_kineKineFilteringMode_0 = Module["_emscripten_bind_PxSceneDesc_get_kineKineFilteringMode_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_kineKineFilteringMode_0");
        var _emscripten_bind_PxSceneDesc_set_kineKineFilteringMode_1 = Module["_emscripten_bind_PxSceneDesc_set_kineKineFilteringMode_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_kineKineFilteringMode_1");
        var _emscripten_bind_PxSceneDesc_get_staticKineFilteringMode_0 = Module["_emscripten_bind_PxSceneDesc_get_staticKineFilteringMode_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_staticKineFilteringMode_0");
        var _emscripten_bind_PxSceneDesc_set_staticKineFilteringMode_1 = Module["_emscripten_bind_PxSceneDesc_set_staticKineFilteringMode_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_staticKineFilteringMode_1");
        var _emscripten_bind_PxSceneDesc_get_broadPhaseType_0 = Module["_emscripten_bind_PxSceneDesc_get_broadPhaseType_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_broadPhaseType_0");
        var _emscripten_bind_PxSceneDesc_set_broadPhaseType_1 = Module["_emscripten_bind_PxSceneDesc_set_broadPhaseType_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_broadPhaseType_1");
        var _emscripten_bind_PxSceneDesc_get_limits_0 = Module["_emscripten_bind_PxSceneDesc_get_limits_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_limits_0");
        var _emscripten_bind_PxSceneDesc_set_limits_1 = Module["_emscripten_bind_PxSceneDesc_set_limits_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_limits_1");
        var _emscripten_bind_PxSceneDesc_get_frictionType_0 = Module["_emscripten_bind_PxSceneDesc_get_frictionType_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_frictionType_0");
        var _emscripten_bind_PxSceneDesc_set_frictionType_1 = Module["_emscripten_bind_PxSceneDesc_set_frictionType_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_frictionType_1");
        var _emscripten_bind_PxSceneDesc_get_solverType_0 = Module["_emscripten_bind_PxSceneDesc_get_solverType_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_solverType_0");
        var _emscripten_bind_PxSceneDesc_set_solverType_1 = Module["_emscripten_bind_PxSceneDesc_set_solverType_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_solverType_1");
        var _emscripten_bind_PxSceneDesc_get_bounceThresholdVelocity_0 = Module["_emscripten_bind_PxSceneDesc_get_bounceThresholdVelocity_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_bounceThresholdVelocity_0");
        var _emscripten_bind_PxSceneDesc_set_bounceThresholdVelocity_1 = Module["_emscripten_bind_PxSceneDesc_set_bounceThresholdVelocity_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_bounceThresholdVelocity_1");
        var _emscripten_bind_PxSceneDesc_get_frictionOffsetThreshold_0 = Module["_emscripten_bind_PxSceneDesc_get_frictionOffsetThreshold_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_frictionOffsetThreshold_0");
        var _emscripten_bind_PxSceneDesc_set_frictionOffsetThreshold_1 = Module["_emscripten_bind_PxSceneDesc_set_frictionOffsetThreshold_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_frictionOffsetThreshold_1");
        var _emscripten_bind_PxSceneDesc_get_ccdMaxSeparation_0 = Module["_emscripten_bind_PxSceneDesc_get_ccdMaxSeparation_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_ccdMaxSeparation_0");
        var _emscripten_bind_PxSceneDesc_set_ccdMaxSeparation_1 = Module["_emscripten_bind_PxSceneDesc_set_ccdMaxSeparation_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_ccdMaxSeparation_1");
        var _emscripten_bind_PxSceneDesc_get_solverOffsetSlop_0 = Module["_emscripten_bind_PxSceneDesc_get_solverOffsetSlop_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_solverOffsetSlop_0");
        var _emscripten_bind_PxSceneDesc_set_solverOffsetSlop_1 = Module["_emscripten_bind_PxSceneDesc_set_solverOffsetSlop_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_solverOffsetSlop_1");
        var _emscripten_bind_PxSceneDesc_get_flags_0 = Module["_emscripten_bind_PxSceneDesc_get_flags_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_flags_0");
        var _emscripten_bind_PxSceneDesc_set_flags_1 = Module["_emscripten_bind_PxSceneDesc_set_flags_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_flags_1");
        var _emscripten_bind_PxSceneDesc_get_cpuDispatcher_0 = Module["_emscripten_bind_PxSceneDesc_get_cpuDispatcher_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_cpuDispatcher_0");
        var _emscripten_bind_PxSceneDesc_set_cpuDispatcher_1 = Module["_emscripten_bind_PxSceneDesc_set_cpuDispatcher_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_cpuDispatcher_1");
        var _emscripten_bind_PxSceneDesc_get_cudaContextManager_0 = Module["_emscripten_bind_PxSceneDesc_get_cudaContextManager_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_cudaContextManager_0");
        var _emscripten_bind_PxSceneDesc_set_cudaContextManager_1 = Module["_emscripten_bind_PxSceneDesc_set_cudaContextManager_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_cudaContextManager_1");
        var _emscripten_bind_PxSceneDesc_get_staticStructure_0 = Module["_emscripten_bind_PxSceneDesc_get_staticStructure_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_staticStructure_0");
        var _emscripten_bind_PxSceneDesc_set_staticStructure_1 = Module["_emscripten_bind_PxSceneDesc_set_staticStructure_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_staticStructure_1");
        var _emscripten_bind_PxSceneDesc_get_dynamicStructure_0 = Module["_emscripten_bind_PxSceneDesc_get_dynamicStructure_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_dynamicStructure_0");
        var _emscripten_bind_PxSceneDesc_set_dynamicStructure_1 = Module["_emscripten_bind_PxSceneDesc_set_dynamicStructure_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_dynamicStructure_1");
        var _emscripten_bind_PxSceneDesc_get_dynamicTreeRebuildRateHint_0 = Module["_emscripten_bind_PxSceneDesc_get_dynamicTreeRebuildRateHint_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_dynamicTreeRebuildRateHint_0");
        var _emscripten_bind_PxSceneDesc_set_dynamicTreeRebuildRateHint_1 = Module["_emscripten_bind_PxSceneDesc_set_dynamicTreeRebuildRateHint_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_dynamicTreeRebuildRateHint_1");
        var _emscripten_bind_PxSceneDesc_get_sceneQueryUpdateMode_0 = Module["_emscripten_bind_PxSceneDesc_get_sceneQueryUpdateMode_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_sceneQueryUpdateMode_0");
        var _emscripten_bind_PxSceneDesc_set_sceneQueryUpdateMode_1 = Module["_emscripten_bind_PxSceneDesc_set_sceneQueryUpdateMode_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_sceneQueryUpdateMode_1");
        var _emscripten_bind_PxSceneDesc_get_userData_0 = Module["_emscripten_bind_PxSceneDesc_get_userData_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_userData_0");
        var _emscripten_bind_PxSceneDesc_set_userData_1 = Module["_emscripten_bind_PxSceneDesc_set_userData_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_userData_1");
        var _emscripten_bind_PxSceneDesc_get_solverBatchSize_0 = Module["_emscripten_bind_PxSceneDesc_get_solverBatchSize_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_solverBatchSize_0");
        var _emscripten_bind_PxSceneDesc_set_solverBatchSize_1 = Module["_emscripten_bind_PxSceneDesc_set_solverBatchSize_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_solverBatchSize_1");
        var _emscripten_bind_PxSceneDesc_get_solverArticulationBatchSize_0 = Module["_emscripten_bind_PxSceneDesc_get_solverArticulationBatchSize_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_solverArticulationBatchSize_0");
        var _emscripten_bind_PxSceneDesc_set_solverArticulationBatchSize_1 = Module["_emscripten_bind_PxSceneDesc_set_solverArticulationBatchSize_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_solverArticulationBatchSize_1");
        var _emscripten_bind_PxSceneDesc_get_nbContactDataBlocks_0 = Module["_emscripten_bind_PxSceneDesc_get_nbContactDataBlocks_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_nbContactDataBlocks_0");
        var _emscripten_bind_PxSceneDesc_set_nbContactDataBlocks_1 = Module["_emscripten_bind_PxSceneDesc_set_nbContactDataBlocks_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_nbContactDataBlocks_1");
        var _emscripten_bind_PxSceneDesc_get_maxBiasCoefficient_0 = Module["_emscripten_bind_PxSceneDesc_get_maxBiasCoefficient_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_maxBiasCoefficient_0");
        var _emscripten_bind_PxSceneDesc_set_maxBiasCoefficient_1 = Module["_emscripten_bind_PxSceneDesc_set_maxBiasCoefficient_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_maxBiasCoefficient_1");
        var _emscripten_bind_PxSceneDesc_get_contactReportStreamBufferSize_0 = Module["_emscripten_bind_PxSceneDesc_get_contactReportStreamBufferSize_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_contactReportStreamBufferSize_0");
        var _emscripten_bind_PxSceneDesc_set_contactReportStreamBufferSize_1 = Module["_emscripten_bind_PxSceneDesc_set_contactReportStreamBufferSize_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_contactReportStreamBufferSize_1");
        var _emscripten_bind_PxSceneDesc_get_ccdMaxPasses_0 = Module["_emscripten_bind_PxSceneDesc_get_ccdMaxPasses_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_ccdMaxPasses_0");
        var _emscripten_bind_PxSceneDesc_set_ccdMaxPasses_1 = Module["_emscripten_bind_PxSceneDesc_set_ccdMaxPasses_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_ccdMaxPasses_1");
        var _emscripten_bind_PxSceneDesc_get_ccdThreshold_0 = Module["_emscripten_bind_PxSceneDesc_get_ccdThreshold_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_ccdThreshold_0");
        var _emscripten_bind_PxSceneDesc_set_ccdThreshold_1 = Module["_emscripten_bind_PxSceneDesc_set_ccdThreshold_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_ccdThreshold_1");
        var _emscripten_bind_PxSceneDesc_get_wakeCounterResetValue_0 = Module["_emscripten_bind_PxSceneDesc_get_wakeCounterResetValue_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_wakeCounterResetValue_0");
        var _emscripten_bind_PxSceneDesc_set_wakeCounterResetValue_1 = Module["_emscripten_bind_PxSceneDesc_set_wakeCounterResetValue_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_wakeCounterResetValue_1");
        var _emscripten_bind_PxSceneDesc_get_sanityBounds_0 = Module["_emscripten_bind_PxSceneDesc_get_sanityBounds_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_sanityBounds_0");
        var _emscripten_bind_PxSceneDesc_set_sanityBounds_1 = Module["_emscripten_bind_PxSceneDesc_set_sanityBounds_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_sanityBounds_1");
        var _emscripten_bind_PxSceneDesc_get_gpuDynamicsConfig_0 = Module["_emscripten_bind_PxSceneDesc_get_gpuDynamicsConfig_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_gpuDynamicsConfig_0");
        var _emscripten_bind_PxSceneDesc_set_gpuDynamicsConfig_1 = Module["_emscripten_bind_PxSceneDesc_set_gpuDynamicsConfig_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_gpuDynamicsConfig_1");
        var _emscripten_bind_PxSceneDesc_get_gpuMaxNumPartitions_0 = Module["_emscripten_bind_PxSceneDesc_get_gpuMaxNumPartitions_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_gpuMaxNumPartitions_0");
        var _emscripten_bind_PxSceneDesc_set_gpuMaxNumPartitions_1 = Module["_emscripten_bind_PxSceneDesc_set_gpuMaxNumPartitions_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_gpuMaxNumPartitions_1");
        var _emscripten_bind_PxSceneDesc_get_gpuComputeVersion_0 = Module["_emscripten_bind_PxSceneDesc_get_gpuComputeVersion_0"] = createExportWrapper("emscripten_bind_PxSceneDesc_get_gpuComputeVersion_0");
        var _emscripten_bind_PxSceneDesc_set_gpuComputeVersion_1 = Module["_emscripten_bind_PxSceneDesc_set_gpuComputeVersion_1"] = createExportWrapper("emscripten_bind_PxSceneDesc_set_gpuComputeVersion_1");
        var _emscripten_bind_PxSceneDesc___destroy___0 = Module["_emscripten_bind_PxSceneDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxSceneDesc___destroy___0");
        var _emscripten_bind_PxSceneFlags_PxSceneFlags_1 = Module["_emscripten_bind_PxSceneFlags_PxSceneFlags_1"] = createExportWrapper("emscripten_bind_PxSceneFlags_PxSceneFlags_1");
        var _emscripten_bind_PxSceneFlags_isSet_1 = Module["_emscripten_bind_PxSceneFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxSceneFlags_isSet_1");
        var _emscripten_bind_PxSceneFlags_set_1 = Module["_emscripten_bind_PxSceneFlags_set_1"] = createExportWrapper("emscripten_bind_PxSceneFlags_set_1");
        var _emscripten_bind_PxSceneFlags_clear_1 = Module["_emscripten_bind_PxSceneFlags_clear_1"] = createExportWrapper("emscripten_bind_PxSceneFlags_clear_1");
        var _emscripten_bind_PxSceneFlags___destroy___0 = Module["_emscripten_bind_PxSceneFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxSceneFlags___destroy___0");
        var _emscripten_bind_PxSceneLimits_PxSceneLimits_0 = Module["_emscripten_bind_PxSceneLimits_PxSceneLimits_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_PxSceneLimits_0");
        var _emscripten_bind_PxSceneLimits_setToDefault_0 = Module["_emscripten_bind_PxSceneLimits_setToDefault_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_setToDefault_0");
        var _emscripten_bind_PxSceneLimits_isValid_0 = Module["_emscripten_bind_PxSceneLimits_isValid_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_isValid_0");
        var _emscripten_bind_PxSceneLimits_get_maxNbActors_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbActors_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbActors_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbActors_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbActors_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbActors_1");
        var _emscripten_bind_PxSceneLimits_get_maxNbBodies_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbBodies_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbBodies_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbBodies_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbBodies_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbBodies_1");
        var _emscripten_bind_PxSceneLimits_get_maxNbStaticShapes_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbStaticShapes_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbStaticShapes_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbStaticShapes_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbStaticShapes_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbStaticShapes_1");
        var _emscripten_bind_PxSceneLimits_get_maxNbDynamicShapes_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbDynamicShapes_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbDynamicShapes_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbDynamicShapes_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbDynamicShapes_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbDynamicShapes_1");
        var _emscripten_bind_PxSceneLimits_get_maxNbAggregates_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbAggregates_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbAggregates_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbAggregates_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbAggregates_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbAggregates_1");
        var _emscripten_bind_PxSceneLimits_get_maxNbConstraints_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbConstraints_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbConstraints_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbConstraints_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbConstraints_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbConstraints_1");
        var _emscripten_bind_PxSceneLimits_get_maxNbRegions_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbRegions_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbRegions_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbRegions_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbRegions_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbRegions_1");
        var _emscripten_bind_PxSceneLimits_get_maxNbBroadPhaseOverlaps_0 = Module["_emscripten_bind_PxSceneLimits_get_maxNbBroadPhaseOverlaps_0"] = createExportWrapper("emscripten_bind_PxSceneLimits_get_maxNbBroadPhaseOverlaps_0");
        var _emscripten_bind_PxSceneLimits_set_maxNbBroadPhaseOverlaps_1 = Module["_emscripten_bind_PxSceneLimits_set_maxNbBroadPhaseOverlaps_1"] = createExportWrapper("emscripten_bind_PxSceneLimits_set_maxNbBroadPhaseOverlaps_1");
        var _emscripten_bind_PxSceneLimits___destroy___0 = Module["_emscripten_bind_PxSceneLimits___destroy___0"] = createExportWrapper("emscripten_bind_PxSceneLimits___destroy___0");
        var _emscripten_bind_PxShape_getReferenceCount_0 = Module["_emscripten_bind_PxShape_getReferenceCount_0"] = createExportWrapper("emscripten_bind_PxShape_getReferenceCount_0");
        var _emscripten_bind_PxShape_acquireReference_0 = Module["_emscripten_bind_PxShape_acquireReference_0"] = createExportWrapper("emscripten_bind_PxShape_acquireReference_0");
        var _emscripten_bind_PxShape_getGeometryType_0 = Module["_emscripten_bind_PxShape_getGeometryType_0"] = createExportWrapper("emscripten_bind_PxShape_getGeometryType_0");
        var _emscripten_bind_PxShape_setGeometry_1 = Module["_emscripten_bind_PxShape_setGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_setGeometry_1");
        var _emscripten_bind_PxShape_getGeometry_0 = Module["_emscripten_bind_PxShape_getGeometry_0"] = createExportWrapper("emscripten_bind_PxShape_getGeometry_0");
        var _emscripten_bind_PxShape_getBoxGeometry_1 = Module["_emscripten_bind_PxShape_getBoxGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_getBoxGeometry_1");
        var _emscripten_bind_PxShape_getSphereGeometry_1 = Module["_emscripten_bind_PxShape_getSphereGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_getSphereGeometry_1");
        var _emscripten_bind_PxShape_getCapsuleGeometry_1 = Module["_emscripten_bind_PxShape_getCapsuleGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_getCapsuleGeometry_1");
        var _emscripten_bind_PxShape_getPlaneGeometry_1 = Module["_emscripten_bind_PxShape_getPlaneGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_getPlaneGeometry_1");
        var _emscripten_bind_PxShape_getConvexMeshGeometry_1 = Module["_emscripten_bind_PxShape_getConvexMeshGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_getConvexMeshGeometry_1");
        var _emscripten_bind_PxShape_getTriangleMeshGeometry_1 = Module["_emscripten_bind_PxShape_getTriangleMeshGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_getTriangleMeshGeometry_1");
        var _emscripten_bind_PxShape_getHeightFieldGeometry_1 = Module["_emscripten_bind_PxShape_getHeightFieldGeometry_1"] = createExportWrapper("emscripten_bind_PxShape_getHeightFieldGeometry_1");
        var _emscripten_bind_PxShape_getActor_0 = Module["_emscripten_bind_PxShape_getActor_0"] = createExportWrapper("emscripten_bind_PxShape_getActor_0");
        var _emscripten_bind_PxShape_setMaterials_2 = Module["_emscripten_bind_PxShape_setMaterials_2"] = createExportWrapper("emscripten_bind_PxShape_setMaterials_2");
        var _emscripten_bind_PxShape_getNbMaterials_0 = Module["_emscripten_bind_PxShape_getNbMaterials_0"] = createExportWrapper("emscripten_bind_PxShape_getNbMaterials_0");
        var _emscripten_bind_PxShape_getMaterials_3 = Module["_emscripten_bind_PxShape_getMaterials_3"] = createExportWrapper("emscripten_bind_PxShape_getMaterials_3");
        var _emscripten_bind_PxShape_getMaterialFromInternalFaceIndex_1 = Module["_emscripten_bind_PxShape_getMaterialFromInternalFaceIndex_1"] = createExportWrapper("emscripten_bind_PxShape_getMaterialFromInternalFaceIndex_1");
        var _emscripten_bind_PxShape_setContactOffset_1 = Module["_emscripten_bind_PxShape_setContactOffset_1"] = createExportWrapper("emscripten_bind_PxShape_setContactOffset_1");
        var _emscripten_bind_PxShape_getContactOffset_0 = Module["_emscripten_bind_PxShape_getContactOffset_0"] = createExportWrapper("emscripten_bind_PxShape_getContactOffset_0");
        var _emscripten_bind_PxShape_setRestOffset_1 = Module["_emscripten_bind_PxShape_setRestOffset_1"] = createExportWrapper("emscripten_bind_PxShape_setRestOffset_1");
        var _emscripten_bind_PxShape_getRestOffset_0 = Module["_emscripten_bind_PxShape_getRestOffset_0"] = createExportWrapper("emscripten_bind_PxShape_getRestOffset_0");
        var _emscripten_bind_PxShape_setTorsionalPatchRadius_1 = Module["_emscripten_bind_PxShape_setTorsionalPatchRadius_1"] = createExportWrapper("emscripten_bind_PxShape_setTorsionalPatchRadius_1");
        var _emscripten_bind_PxShape_getTorsionalPatchRadius_0 = Module["_emscripten_bind_PxShape_getTorsionalPatchRadius_0"] = createExportWrapper("emscripten_bind_PxShape_getTorsionalPatchRadius_0");
        var _emscripten_bind_PxShape_setMinTorsionalPatchRadius_1 = Module["_emscripten_bind_PxShape_setMinTorsionalPatchRadius_1"] = createExportWrapper("emscripten_bind_PxShape_setMinTorsionalPatchRadius_1");
        var _emscripten_bind_PxShape_getMinTorsionalPatchRadius_0 = Module["_emscripten_bind_PxShape_getMinTorsionalPatchRadius_0"] = createExportWrapper("emscripten_bind_PxShape_getMinTorsionalPatchRadius_0");
        var _emscripten_bind_PxShape_setFlag_2 = Module["_emscripten_bind_PxShape_setFlag_2"] = createExportWrapper("emscripten_bind_PxShape_setFlag_2");
        var _emscripten_bind_PxShape_setFlags_1 = Module["_emscripten_bind_PxShape_setFlags_1"] = createExportWrapper("emscripten_bind_PxShape_setFlags_1");
        var _emscripten_bind_PxShape_getFlags_0 = Module["_emscripten_bind_PxShape_getFlags_0"] = createExportWrapper("emscripten_bind_PxShape_getFlags_0");
        var _emscripten_bind_PxShape_isExclusive_0 = Module["_emscripten_bind_PxShape_isExclusive_0"] = createExportWrapper("emscripten_bind_PxShape_isExclusive_0");
        var _emscripten_bind_PxShape_setName_1 = Module["_emscripten_bind_PxShape_setName_1"] = createExportWrapper("emscripten_bind_PxShape_setName_1");
        var _emscripten_bind_PxShape_getName_0 = Module["_emscripten_bind_PxShape_getName_0"] = createExportWrapper("emscripten_bind_PxShape_getName_0");
        var _emscripten_bind_PxShape_setLocalPose_1 = Module["_emscripten_bind_PxShape_setLocalPose_1"] = createExportWrapper("emscripten_bind_PxShape_setLocalPose_1");
        var _emscripten_bind_PxShape_getLocalPose_0 = Module["_emscripten_bind_PxShape_getLocalPose_0"] = createExportWrapper("emscripten_bind_PxShape_getLocalPose_0");
        var _emscripten_bind_PxShape_setSimulationFilterData_1 = Module["_emscripten_bind_PxShape_setSimulationFilterData_1"] = createExportWrapper("emscripten_bind_PxShape_setSimulationFilterData_1");
        var _emscripten_bind_PxShape_getSimulationFilterData_0 = Module["_emscripten_bind_PxShape_getSimulationFilterData_0"] = createExportWrapper("emscripten_bind_PxShape_getSimulationFilterData_0");
        var _emscripten_bind_PxShape_setQueryFilterData_1 = Module["_emscripten_bind_PxShape_setQueryFilterData_1"] = createExportWrapper("emscripten_bind_PxShape_setQueryFilterData_1");
        var _emscripten_bind_PxShape_getQueryFilterData_0 = Module["_emscripten_bind_PxShape_getQueryFilterData_0"] = createExportWrapper("emscripten_bind_PxShape_getQueryFilterData_0");
        var _emscripten_bind_PxShape_getConcreteTypeName_0 = Module["_emscripten_bind_PxShape_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxShape_getConcreteTypeName_0");
        var _emscripten_bind_PxShape_getConcreteType_0 = Module["_emscripten_bind_PxShape_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxShape_getConcreteType_0");
        var _emscripten_bind_PxShape_setBaseFlag_2 = Module["_emscripten_bind_PxShape_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxShape_setBaseFlag_2");
        var _emscripten_bind_PxShape_setBaseFlags_1 = Module["_emscripten_bind_PxShape_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxShape_setBaseFlags_1");
        var _emscripten_bind_PxShape_getBaseFlags_0 = Module["_emscripten_bind_PxShape_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxShape_getBaseFlags_0");
        var _emscripten_bind_PxShape_isReleasable_0 = Module["_emscripten_bind_PxShape_isReleasable_0"] = createExportWrapper("emscripten_bind_PxShape_isReleasable_0");
        var _emscripten_bind_PxShape_get_userData_0 = Module["_emscripten_bind_PxShape_get_userData_0"] = createExportWrapper("emscripten_bind_PxShape_get_userData_0");
        var _emscripten_bind_PxShape_set_userData_1 = Module["_emscripten_bind_PxShape_set_userData_1"] = createExportWrapper("emscripten_bind_PxShape_set_userData_1");
        var _emscripten_bind_PxShapeFlags_PxShapeFlags_1 = Module["_emscripten_bind_PxShapeFlags_PxShapeFlags_1"] = createExportWrapper("emscripten_bind_PxShapeFlags_PxShapeFlags_1");
        var _emscripten_bind_PxShapeFlags_isSet_1 = Module["_emscripten_bind_PxShapeFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxShapeFlags_isSet_1");
        var _emscripten_bind_PxShapeFlags_set_1 = Module["_emscripten_bind_PxShapeFlags_set_1"] = createExportWrapper("emscripten_bind_PxShapeFlags_set_1");
        var _emscripten_bind_PxShapeFlags_clear_1 = Module["_emscripten_bind_PxShapeFlags_clear_1"] = createExportWrapper("emscripten_bind_PxShapeFlags_clear_1");
        var _emscripten_bind_PxShapeFlags___destroy___0 = Module["_emscripten_bind_PxShapeFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxShapeFlags___destroy___0");
        var _emscripten_bind_JavaSimulationEventCallback_JavaSimulationEventCallback_0 = Module["_emscripten_bind_JavaSimulationEventCallback_JavaSimulationEventCallback_0"] = createExportWrapper("emscripten_bind_JavaSimulationEventCallback_JavaSimulationEventCallback_0");
        var _emscripten_bind_JavaSimulationEventCallback_onConstraintBreak_2 = Module["_emscripten_bind_JavaSimulationEventCallback_onConstraintBreak_2"] = createExportWrapper("emscripten_bind_JavaSimulationEventCallback_onConstraintBreak_2");
        var _emscripten_bind_JavaSimulationEventCallback_onWake_2 = Module["_emscripten_bind_JavaSimulationEventCallback_onWake_2"] = createExportWrapper("emscripten_bind_JavaSimulationEventCallback_onWake_2");
        var _emscripten_bind_JavaSimulationEventCallback_onSleep_2 = Module["_emscripten_bind_JavaSimulationEventCallback_onSleep_2"] = createExportWrapper("emscripten_bind_JavaSimulationEventCallback_onSleep_2");
        var _emscripten_bind_JavaSimulationEventCallback_onContact_3 = Module["_emscripten_bind_JavaSimulationEventCallback_onContact_3"] = createExportWrapper("emscripten_bind_JavaSimulationEventCallback_onContact_3");
        var _emscripten_bind_JavaSimulationEventCallback_onTrigger_2 = Module["_emscripten_bind_JavaSimulationEventCallback_onTrigger_2"] = createExportWrapper("emscripten_bind_JavaSimulationEventCallback_onTrigger_2");
        var _emscripten_bind_JavaSimulationEventCallback___destroy___0 = Module["_emscripten_bind_JavaSimulationEventCallback___destroy___0"] = createExportWrapper("emscripten_bind_JavaSimulationEventCallback___destroy___0");
        var _emscripten_bind_PxSimulationFilterShader___destroy___0 = Module["_emscripten_bind_PxSimulationFilterShader___destroy___0"] = createExportWrapper("emscripten_bind_PxSimulationFilterShader___destroy___0");
        var _emscripten_bind_PxSimulationStatistics_get_nbActiveConstraints_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbActiveConstraints_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbActiveConstraints_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbActiveConstraints_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbActiveConstraints_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbActiveConstraints_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbActiveDynamicBodies_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbActiveDynamicBodies_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbActiveDynamicBodies_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbActiveDynamicBodies_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbActiveDynamicBodies_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbActiveDynamicBodies_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbActiveKinematicBodies_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbActiveKinematicBodies_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbActiveKinematicBodies_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbActiveKinematicBodies_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbActiveKinematicBodies_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbActiveKinematicBodies_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbStaticBodies_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbStaticBodies_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbStaticBodies_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbStaticBodies_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbStaticBodies_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbStaticBodies_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbDynamicBodies_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbDynamicBodies_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbDynamicBodies_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbDynamicBodies_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbDynamicBodies_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbDynamicBodies_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbKinematicBodies_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbKinematicBodies_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbKinematicBodies_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbKinematicBodies_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbKinematicBodies_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbKinematicBodies_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbShapes_1 = Module["_emscripten_bind_PxSimulationStatistics_get_nbShapes_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbShapes_1");
        var _emscripten_bind_PxSimulationStatistics_set_nbShapes_2 = Module["_emscripten_bind_PxSimulationStatistics_set_nbShapes_2"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbShapes_2");
        var _emscripten_bind_PxSimulationStatistics_get_nbAggregates_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbAggregates_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbAggregates_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbAggregates_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbAggregates_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbAggregates_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbArticulations_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbArticulations_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbArticulations_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbArticulations_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbArticulations_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbArticulations_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbAxisSolverConstraints_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbAxisSolverConstraints_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbAxisSolverConstraints_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbAxisSolverConstraints_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbAxisSolverConstraints_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbAxisSolverConstraints_1");
        var _emscripten_bind_PxSimulationStatistics_get_compressedContactSize_0 = Module["_emscripten_bind_PxSimulationStatistics_get_compressedContactSize_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_compressedContactSize_0");
        var _emscripten_bind_PxSimulationStatistics_set_compressedContactSize_1 = Module["_emscripten_bind_PxSimulationStatistics_set_compressedContactSize_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_compressedContactSize_1");
        var _emscripten_bind_PxSimulationStatistics_get_requiredContactConstraintMemory_0 = Module["_emscripten_bind_PxSimulationStatistics_get_requiredContactConstraintMemory_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_requiredContactConstraintMemory_0");
        var _emscripten_bind_PxSimulationStatistics_set_requiredContactConstraintMemory_1 = Module["_emscripten_bind_PxSimulationStatistics_set_requiredContactConstraintMemory_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_requiredContactConstraintMemory_1");
        var _emscripten_bind_PxSimulationStatistics_get_peakConstraintMemory_0 = Module["_emscripten_bind_PxSimulationStatistics_get_peakConstraintMemory_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_peakConstraintMemory_0");
        var _emscripten_bind_PxSimulationStatistics_set_peakConstraintMemory_1 = Module["_emscripten_bind_PxSimulationStatistics_set_peakConstraintMemory_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_peakConstraintMemory_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsTotal_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsTotal_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsTotal_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsTotal_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsTotal_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsTotal_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithCacheHits_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithCacheHits_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithCacheHits_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithCacheHits_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithCacheHits_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithCacheHits_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithContacts_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithContacts_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithContacts_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithContacts_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithContacts_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithContacts_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbNewPairs_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbNewPairs_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbNewPairs_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbNewPairs_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbNewPairs_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbNewPairs_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbLostPairs_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbLostPairs_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbLostPairs_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbLostPairs_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbLostPairs_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbLostPairs_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbNewTouches_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbNewTouches_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbNewTouches_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbNewTouches_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbNewTouches_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbNewTouches_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbLostTouches_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbLostTouches_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbLostTouches_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbLostTouches_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbLostTouches_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbLostTouches_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbPartitions_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbPartitions_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbPartitions_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbPartitions_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbPartitions_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbPartitions_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseAdds_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseAdds_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseAdds_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseAdds_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseAdds_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseAdds_1");
        var _emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseRemoves_0 = Module["_emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseRemoves_0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseRemoves_0");
        var _emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseRemoves_1 = Module["_emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseRemoves_1"] = createExportWrapper("emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseRemoves_1");
        var _emscripten_bind_PxSimulationStatistics___destroy___0 = Module["_emscripten_bind_PxSimulationStatistics___destroy___0"] = createExportWrapper("emscripten_bind_PxSimulationStatistics___destroy___0");
        var _emscripten_bind_PxSpatialVelocity_get_linear_0 = Module["_emscripten_bind_PxSpatialVelocity_get_linear_0"] = createExportWrapper("emscripten_bind_PxSpatialVelocity_get_linear_0");
        var _emscripten_bind_PxSpatialVelocity_set_linear_1 = Module["_emscripten_bind_PxSpatialVelocity_set_linear_1"] = createExportWrapper("emscripten_bind_PxSpatialVelocity_set_linear_1");
        var _emscripten_bind_PxSpatialVelocity_get_angular_0 = Module["_emscripten_bind_PxSpatialVelocity_get_angular_0"] = createExportWrapper("emscripten_bind_PxSpatialVelocity_get_angular_0");
        var _emscripten_bind_PxSpatialVelocity_set_angular_1 = Module["_emscripten_bind_PxSpatialVelocity_set_angular_1"] = createExportWrapper("emscripten_bind_PxSpatialVelocity_set_angular_1");
        var _emscripten_bind_PxSpatialVelocity___destroy___0 = Module["_emscripten_bind_PxSpatialVelocity___destroy___0"] = createExportWrapper("emscripten_bind_PxSpatialVelocity___destroy___0");
        var _emscripten_bind_PxSweepBuffer10_PxSweepBuffer10_0 = Module["_emscripten_bind_PxSweepBuffer10_PxSweepBuffer10_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_PxSweepBuffer10_0");
        var _emscripten_bind_PxSweepBuffer10_getNbAnyHits_0 = Module["_emscripten_bind_PxSweepBuffer10_getNbAnyHits_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_getNbAnyHits_0");
        var _emscripten_bind_PxSweepBuffer10_getAnyHit_1 = Module["_emscripten_bind_PxSweepBuffer10_getAnyHit_1"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_getAnyHit_1");
        var _emscripten_bind_PxSweepBuffer10_getNbTouches_0 = Module["_emscripten_bind_PxSweepBuffer10_getNbTouches_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_getNbTouches_0");
        var _emscripten_bind_PxSweepBuffer10_getTouches_0 = Module["_emscripten_bind_PxSweepBuffer10_getTouches_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_getTouches_0");
        var _emscripten_bind_PxSweepBuffer10_getTouch_1 = Module["_emscripten_bind_PxSweepBuffer10_getTouch_1"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_getTouch_1");
        var _emscripten_bind_PxSweepBuffer10_getMaxNbTouches_0 = Module["_emscripten_bind_PxSweepBuffer10_getMaxNbTouches_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_getMaxNbTouches_0");
        var _emscripten_bind_PxSweepBuffer10_hasAnyHits_0 = Module["_emscripten_bind_PxSweepBuffer10_hasAnyHits_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_hasAnyHits_0");
        var _emscripten_bind_PxSweepBuffer10_get_block_0 = Module["_emscripten_bind_PxSweepBuffer10_get_block_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_get_block_0");
        var _emscripten_bind_PxSweepBuffer10_set_block_1 = Module["_emscripten_bind_PxSweepBuffer10_set_block_1"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_set_block_1");
        var _emscripten_bind_PxSweepBuffer10_get_hasBlock_0 = Module["_emscripten_bind_PxSweepBuffer10_get_hasBlock_0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_get_hasBlock_0");
        var _emscripten_bind_PxSweepBuffer10_set_hasBlock_1 = Module["_emscripten_bind_PxSweepBuffer10_set_hasBlock_1"] = createExportWrapper("emscripten_bind_PxSweepBuffer10_set_hasBlock_1");
        var _emscripten_bind_PxSweepBuffer10___destroy___0 = Module["_emscripten_bind_PxSweepBuffer10___destroy___0"] = createExportWrapper("emscripten_bind_PxSweepBuffer10___destroy___0");
        var _emscripten_bind_PxSweepHit_get_actor_0 = Module["_emscripten_bind_PxSweepHit_get_actor_0"] = createExportWrapper("emscripten_bind_PxSweepHit_get_actor_0");
        var _emscripten_bind_PxSweepHit_set_actor_1 = Module["_emscripten_bind_PxSweepHit_set_actor_1"] = createExportWrapper("emscripten_bind_PxSweepHit_set_actor_1");
        var _emscripten_bind_PxSweepHit_get_shape_0 = Module["_emscripten_bind_PxSweepHit_get_shape_0"] = createExportWrapper("emscripten_bind_PxSweepHit_get_shape_0");
        var _emscripten_bind_PxSweepHit_set_shape_1 = Module["_emscripten_bind_PxSweepHit_set_shape_1"] = createExportWrapper("emscripten_bind_PxSweepHit_set_shape_1");
        var _emscripten_bind_PxSweepHit_get_flags_0 = Module["_emscripten_bind_PxSweepHit_get_flags_0"] = createExportWrapper("emscripten_bind_PxSweepHit_get_flags_0");
        var _emscripten_bind_PxSweepHit_set_flags_1 = Module["_emscripten_bind_PxSweepHit_set_flags_1"] = createExportWrapper("emscripten_bind_PxSweepHit_set_flags_1");
        var _emscripten_bind_PxSweepHit_get_position_0 = Module["_emscripten_bind_PxSweepHit_get_position_0"] = createExportWrapper("emscripten_bind_PxSweepHit_get_position_0");
        var _emscripten_bind_PxSweepHit_set_position_1 = Module["_emscripten_bind_PxSweepHit_set_position_1"] = createExportWrapper("emscripten_bind_PxSweepHit_set_position_1");
        var _emscripten_bind_PxSweepHit_get_normal_0 = Module["_emscripten_bind_PxSweepHit_get_normal_0"] = createExportWrapper("emscripten_bind_PxSweepHit_get_normal_0");
        var _emscripten_bind_PxSweepHit_set_normal_1 = Module["_emscripten_bind_PxSweepHit_set_normal_1"] = createExportWrapper("emscripten_bind_PxSweepHit_set_normal_1");
        var _emscripten_bind_PxSweepHit_get_distance_0 = Module["_emscripten_bind_PxSweepHit_get_distance_0"] = createExportWrapper("emscripten_bind_PxSweepHit_get_distance_0");
        var _emscripten_bind_PxSweepHit_set_distance_1 = Module["_emscripten_bind_PxSweepHit_set_distance_1"] = createExportWrapper("emscripten_bind_PxSweepHit_set_distance_1");
        var _emscripten_bind_PxSweepHit_get_faceIndex_0 = Module["_emscripten_bind_PxSweepHit_get_faceIndex_0"] = createExportWrapper("emscripten_bind_PxSweepHit_get_faceIndex_0");
        var _emscripten_bind_PxSweepHit_set_faceIndex_1 = Module["_emscripten_bind_PxSweepHit_set_faceIndex_1"] = createExportWrapper("emscripten_bind_PxSweepHit_set_faceIndex_1");
        var _emscripten_bind_PxSweepHit___destroy___0 = Module["_emscripten_bind_PxSweepHit___destroy___0"] = createExportWrapper("emscripten_bind_PxSweepHit___destroy___0");
        var _emscripten_bind_PxSweepQueryResult_getNbAnyHits_0 = Module["_emscripten_bind_PxSweepQueryResult_getNbAnyHits_0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_getNbAnyHits_0");
        var _emscripten_bind_PxSweepQueryResult_getAnyHit_1 = Module["_emscripten_bind_PxSweepQueryResult_getAnyHit_1"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_getAnyHit_1");
        var _emscripten_bind_PxSweepQueryResult_get_block_0 = Module["_emscripten_bind_PxSweepQueryResult_get_block_0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_get_block_0");
        var _emscripten_bind_PxSweepQueryResult_set_block_1 = Module["_emscripten_bind_PxSweepQueryResult_set_block_1"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_set_block_1");
        var _emscripten_bind_PxSweepQueryResult_get_touches_0 = Module["_emscripten_bind_PxSweepQueryResult_get_touches_0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_get_touches_0");
        var _emscripten_bind_PxSweepQueryResult_set_touches_1 = Module["_emscripten_bind_PxSweepQueryResult_set_touches_1"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_set_touches_1");
        var _emscripten_bind_PxSweepQueryResult_get_nbTouches_0 = Module["_emscripten_bind_PxSweepQueryResult_get_nbTouches_0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_get_nbTouches_0");
        var _emscripten_bind_PxSweepQueryResult_set_nbTouches_1 = Module["_emscripten_bind_PxSweepQueryResult_set_nbTouches_1"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_set_nbTouches_1");
        var _emscripten_bind_PxSweepQueryResult_get_userData_0 = Module["_emscripten_bind_PxSweepQueryResult_get_userData_0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_get_userData_0");
        var _emscripten_bind_PxSweepQueryResult_set_userData_1 = Module["_emscripten_bind_PxSweepQueryResult_set_userData_1"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_set_userData_1");
        var _emscripten_bind_PxSweepQueryResult_get_queryStatus_0 = Module["_emscripten_bind_PxSweepQueryResult_get_queryStatus_0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_get_queryStatus_0");
        var _emscripten_bind_PxSweepQueryResult_set_queryStatus_1 = Module["_emscripten_bind_PxSweepQueryResult_set_queryStatus_1"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_set_queryStatus_1");
        var _emscripten_bind_PxSweepQueryResult_get_hasBlock_0 = Module["_emscripten_bind_PxSweepQueryResult_get_hasBlock_0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_get_hasBlock_0");
        var _emscripten_bind_PxSweepQueryResult_set_hasBlock_1 = Module["_emscripten_bind_PxSweepQueryResult_set_hasBlock_1"] = createExportWrapper("emscripten_bind_PxSweepQueryResult_set_hasBlock_1");
        var _emscripten_bind_PxSweepQueryResult___destroy___0 = Module["_emscripten_bind_PxSweepQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_PxSweepQueryResult___destroy___0");
        var _emscripten_bind_PxTriggerPair_get_triggerShape_0 = Module["_emscripten_bind_PxTriggerPair_get_triggerShape_0"] = createExportWrapper("emscripten_bind_PxTriggerPair_get_triggerShape_0");
        var _emscripten_bind_PxTriggerPair_set_triggerShape_1 = Module["_emscripten_bind_PxTriggerPair_set_triggerShape_1"] = createExportWrapper("emscripten_bind_PxTriggerPair_set_triggerShape_1");
        var _emscripten_bind_PxTriggerPair_get_triggerActor_0 = Module["_emscripten_bind_PxTriggerPair_get_triggerActor_0"] = createExportWrapper("emscripten_bind_PxTriggerPair_get_triggerActor_0");
        var _emscripten_bind_PxTriggerPair_set_triggerActor_1 = Module["_emscripten_bind_PxTriggerPair_set_triggerActor_1"] = createExportWrapper("emscripten_bind_PxTriggerPair_set_triggerActor_1");
        var _emscripten_bind_PxTriggerPair_get_otherShape_0 = Module["_emscripten_bind_PxTriggerPair_get_otherShape_0"] = createExportWrapper("emscripten_bind_PxTriggerPair_get_otherShape_0");
        var _emscripten_bind_PxTriggerPair_set_otherShape_1 = Module["_emscripten_bind_PxTriggerPair_set_otherShape_1"] = createExportWrapper("emscripten_bind_PxTriggerPair_set_otherShape_1");
        var _emscripten_bind_PxTriggerPair_get_otherActor_0 = Module["_emscripten_bind_PxTriggerPair_get_otherActor_0"] = createExportWrapper("emscripten_bind_PxTriggerPair_get_otherActor_0");
        var _emscripten_bind_PxTriggerPair_set_otherActor_1 = Module["_emscripten_bind_PxTriggerPair_set_otherActor_1"] = createExportWrapper("emscripten_bind_PxTriggerPair_set_otherActor_1");
        var _emscripten_bind_PxTriggerPair_get_status_0 = Module["_emscripten_bind_PxTriggerPair_get_status_0"] = createExportWrapper("emscripten_bind_PxTriggerPair_get_status_0");
        var _emscripten_bind_PxTriggerPair_set_status_1 = Module["_emscripten_bind_PxTriggerPair_set_status_1"] = createExportWrapper("emscripten_bind_PxTriggerPair_set_status_1");
        var _emscripten_bind_PxTriggerPair_get_flags_0 = Module["_emscripten_bind_PxTriggerPair_get_flags_0"] = createExportWrapper("emscripten_bind_PxTriggerPair_get_flags_0");
        var _emscripten_bind_PxTriggerPair_set_flags_1 = Module["_emscripten_bind_PxTriggerPair_set_flags_1"] = createExportWrapper("emscripten_bind_PxTriggerPair_set_flags_1");
        var _emscripten_bind_PxTriggerPair___destroy___0 = Module["_emscripten_bind_PxTriggerPair___destroy___0"] = createExportWrapper("emscripten_bind_PxTriggerPair___destroy___0");
        var _emscripten_bind_PxTriggerPairFlags_PxTriggerPairFlags_1 = Module["_emscripten_bind_PxTriggerPairFlags_PxTriggerPairFlags_1"] = createExportWrapper("emscripten_bind_PxTriggerPairFlags_PxTriggerPairFlags_1");
        var _emscripten_bind_PxTriggerPairFlags_isSet_1 = Module["_emscripten_bind_PxTriggerPairFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxTriggerPairFlags_isSet_1");
        var _emscripten_bind_PxTriggerPairFlags_set_1 = Module["_emscripten_bind_PxTriggerPairFlags_set_1"] = createExportWrapper("emscripten_bind_PxTriggerPairFlags_set_1");
        var _emscripten_bind_PxTriggerPairFlags_clear_1 = Module["_emscripten_bind_PxTriggerPairFlags_clear_1"] = createExportWrapper("emscripten_bind_PxTriggerPairFlags_clear_1");
        var _emscripten_bind_PxTriggerPairFlags___destroy___0 = Module["_emscripten_bind_PxTriggerPairFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxTriggerPairFlags___destroy___0");
        var _emscripten_bind_PxVehicleTopLevelFunctions_InitVehicleSDK_1 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_InitVehicleSDK_1"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_InitVehicleSDK_1");
        var _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleComputeSprungMasses_6 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleComputeSprungMasses_6"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleComputeSprungMasses_6");
        var _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleSuspensionRaycasts_4 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleSuspensionRaycasts_4"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleSuspensionRaycasts_4");
        var _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleUpdates_5 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleUpdates_5"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleUpdates_5");
        var _emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetBasisVectors_2 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetBasisVectors_2"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetBasisVectors_2");
        var _emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetUpdateMode_1 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetUpdateMode_1"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetUpdateMode_1");
        var _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_getFrictionVsSlipGraph_3 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_getFrictionVsSlipGraph_3"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_getFrictionVsSlipGraph_3");
        var _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_setFrictionVsSlipGraph_4 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_setFrictionVsSlipGraph_4"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_setFrictionVsSlipGraph_4");
        var _emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPreFilterBlocking_0 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPreFilterBlocking_0"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPreFilterBlocking_0");
        var _emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPostFilterBlocking_0 = Module["_emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPostFilterBlocking_0"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPostFilterBlocking_0");
        var _emscripten_bind_PxVehicleTopLevelFunctions___destroy___0 = Module["_emscripten_bind_PxVehicleTopLevelFunctions___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleTopLevelFunctions___destroy___0");
        var _emscripten_bind_PxVehicleAckermannGeometryData_PxVehicleAckermannGeometryData_0 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_PxVehicleAckermannGeometryData_0"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_PxVehicleAckermannGeometryData_0");
        var _emscripten_bind_PxVehicleAckermannGeometryData_get_mAccuracy_0 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_get_mAccuracy_0"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_get_mAccuracy_0");
        var _emscripten_bind_PxVehicleAckermannGeometryData_set_mAccuracy_1 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_set_mAccuracy_1"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_set_mAccuracy_1");
        var _emscripten_bind_PxVehicleAckermannGeometryData_get_mFrontWidth_0 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_get_mFrontWidth_0"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_get_mFrontWidth_0");
        var _emscripten_bind_PxVehicleAckermannGeometryData_set_mFrontWidth_1 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_set_mFrontWidth_1"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_set_mFrontWidth_1");
        var _emscripten_bind_PxVehicleAckermannGeometryData_get_mRearWidth_0 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_get_mRearWidth_0"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_get_mRearWidth_0");
        var _emscripten_bind_PxVehicleAckermannGeometryData_set_mRearWidth_1 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_set_mRearWidth_1"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_set_mRearWidth_1");
        var _emscripten_bind_PxVehicleAckermannGeometryData_get_mAxleSeparation_0 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_get_mAxleSeparation_0"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_get_mAxleSeparation_0");
        var _emscripten_bind_PxVehicleAckermannGeometryData_set_mAxleSeparation_1 = Module["_emscripten_bind_PxVehicleAckermannGeometryData_set_mAxleSeparation_1"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData_set_mAxleSeparation_1");
        var _emscripten_bind_PxVehicleAckermannGeometryData___destroy___0 = Module["_emscripten_bind_PxVehicleAckermannGeometryData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleAckermannGeometryData___destroy___0");
        var _emscripten_bind_PxVehicleAntiRollBarData_PxVehicleAntiRollBarData_0 = Module["_emscripten_bind_PxVehicleAntiRollBarData_PxVehicleAntiRollBarData_0"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData_PxVehicleAntiRollBarData_0");
        var _emscripten_bind_PxVehicleAntiRollBarData_get_mWheel0_0 = Module["_emscripten_bind_PxVehicleAntiRollBarData_get_mWheel0_0"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData_get_mWheel0_0");
        var _emscripten_bind_PxVehicleAntiRollBarData_set_mWheel0_1 = Module["_emscripten_bind_PxVehicleAntiRollBarData_set_mWheel0_1"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData_set_mWheel0_1");
        var _emscripten_bind_PxVehicleAntiRollBarData_get_mWheel1_0 = Module["_emscripten_bind_PxVehicleAntiRollBarData_get_mWheel1_0"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData_get_mWheel1_0");
        var _emscripten_bind_PxVehicleAntiRollBarData_set_mWheel1_1 = Module["_emscripten_bind_PxVehicleAntiRollBarData_set_mWheel1_1"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData_set_mWheel1_1");
        var _emscripten_bind_PxVehicleAntiRollBarData_get_mStiffness_0 = Module["_emscripten_bind_PxVehicleAntiRollBarData_get_mStiffness_0"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData_get_mStiffness_0");
        var _emscripten_bind_PxVehicleAntiRollBarData_set_mStiffness_1 = Module["_emscripten_bind_PxVehicleAntiRollBarData_set_mStiffness_1"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData_set_mStiffness_1");
        var _emscripten_bind_PxVehicleAntiRollBarData___destroy___0 = Module["_emscripten_bind_PxVehicleAntiRollBarData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleAntiRollBarData___destroy___0");
        var _emscripten_bind_PxVehicleAutoBoxData_PxVehicleAutoBoxData_0 = Module["_emscripten_bind_PxVehicleAutoBoxData_PxVehicleAutoBoxData_0"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_PxVehicleAutoBoxData_0");
        var _emscripten_bind_PxVehicleAutoBoxData_setLatency_1 = Module["_emscripten_bind_PxVehicleAutoBoxData_setLatency_1"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_setLatency_1");
        var _emscripten_bind_PxVehicleAutoBoxData_getLatency_0 = Module["_emscripten_bind_PxVehicleAutoBoxData_getLatency_0"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_getLatency_0");
        var _emscripten_bind_PxVehicleAutoBoxData_getUpRatios_1 = Module["_emscripten_bind_PxVehicleAutoBoxData_getUpRatios_1"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_getUpRatios_1");
        var _emscripten_bind_PxVehicleAutoBoxData_setUpRatios_2 = Module["_emscripten_bind_PxVehicleAutoBoxData_setUpRatios_2"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_setUpRatios_2");
        var _emscripten_bind_PxVehicleAutoBoxData_getDownRatios_1 = Module["_emscripten_bind_PxVehicleAutoBoxData_getDownRatios_1"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_getDownRatios_1");
        var _emscripten_bind_PxVehicleAutoBoxData_setDownRatios_2 = Module["_emscripten_bind_PxVehicleAutoBoxData_setDownRatios_2"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_setDownRatios_2");
        var _emscripten_bind_PxVehicleAutoBoxData_get_mUpRatios_1 = Module["_emscripten_bind_PxVehicleAutoBoxData_get_mUpRatios_1"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_get_mUpRatios_1");
        var _emscripten_bind_PxVehicleAutoBoxData_set_mUpRatios_2 = Module["_emscripten_bind_PxVehicleAutoBoxData_set_mUpRatios_2"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_set_mUpRatios_2");
        var _emscripten_bind_PxVehicleAutoBoxData_get_mDownRatios_1 = Module["_emscripten_bind_PxVehicleAutoBoxData_get_mDownRatios_1"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_get_mDownRatios_1");
        var _emscripten_bind_PxVehicleAutoBoxData_set_mDownRatios_2 = Module["_emscripten_bind_PxVehicleAutoBoxData_set_mDownRatios_2"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData_set_mDownRatios_2");
        var _emscripten_bind_PxVehicleAutoBoxData___destroy___0 = Module["_emscripten_bind_PxVehicleAutoBoxData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleAutoBoxData___destroy___0");
        var _emscripten_bind_PxVehicleChassisData_PxVehicleChassisData_0 = Module["_emscripten_bind_PxVehicleChassisData_PxVehicleChassisData_0"] = createExportWrapper("emscripten_bind_PxVehicleChassisData_PxVehicleChassisData_0");
        var _emscripten_bind_PxVehicleChassisData_get_mMOI_0 = Module["_emscripten_bind_PxVehicleChassisData_get_mMOI_0"] = createExportWrapper("emscripten_bind_PxVehicleChassisData_get_mMOI_0");
        var _emscripten_bind_PxVehicleChassisData_set_mMOI_1 = Module["_emscripten_bind_PxVehicleChassisData_set_mMOI_1"] = createExportWrapper("emscripten_bind_PxVehicleChassisData_set_mMOI_1");
        var _emscripten_bind_PxVehicleChassisData_get_mMass_0 = Module["_emscripten_bind_PxVehicleChassisData_get_mMass_0"] = createExportWrapper("emscripten_bind_PxVehicleChassisData_get_mMass_0");
        var _emscripten_bind_PxVehicleChassisData_set_mMass_1 = Module["_emscripten_bind_PxVehicleChassisData_set_mMass_1"] = createExportWrapper("emscripten_bind_PxVehicleChassisData_set_mMass_1");
        var _emscripten_bind_PxVehicleChassisData_get_mCMOffset_0 = Module["_emscripten_bind_PxVehicleChassisData_get_mCMOffset_0"] = createExportWrapper("emscripten_bind_PxVehicleChassisData_get_mCMOffset_0");
        var _emscripten_bind_PxVehicleChassisData_set_mCMOffset_1 = Module["_emscripten_bind_PxVehicleChassisData_set_mCMOffset_1"] = createExportWrapper("emscripten_bind_PxVehicleChassisData_set_mCMOffset_1");
        var _emscripten_bind_PxVehicleChassisData___destroy___0 = Module["_emscripten_bind_PxVehicleChassisData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleChassisData___destroy___0");
        var _emscripten_bind_PxVehicleClutchData_PxVehicleClutchData_0 = Module["_emscripten_bind_PxVehicleClutchData_PxVehicleClutchData_0"] = createExportWrapper("emscripten_bind_PxVehicleClutchData_PxVehicleClutchData_0");
        var _emscripten_bind_PxVehicleClutchData_get_mStrength_0 = Module["_emscripten_bind_PxVehicleClutchData_get_mStrength_0"] = createExportWrapper("emscripten_bind_PxVehicleClutchData_get_mStrength_0");
        var _emscripten_bind_PxVehicleClutchData_set_mStrength_1 = Module["_emscripten_bind_PxVehicleClutchData_set_mStrength_1"] = createExportWrapper("emscripten_bind_PxVehicleClutchData_set_mStrength_1");
        var _emscripten_bind_PxVehicleClutchData_get_mAccuracyMode_0 = Module["_emscripten_bind_PxVehicleClutchData_get_mAccuracyMode_0"] = createExportWrapper("emscripten_bind_PxVehicleClutchData_get_mAccuracyMode_0");
        var _emscripten_bind_PxVehicleClutchData_set_mAccuracyMode_1 = Module["_emscripten_bind_PxVehicleClutchData_set_mAccuracyMode_1"] = createExportWrapper("emscripten_bind_PxVehicleClutchData_set_mAccuracyMode_1");
        var _emscripten_bind_PxVehicleClutchData_get_mEstimateIterations_0 = Module["_emscripten_bind_PxVehicleClutchData_get_mEstimateIterations_0"] = createExportWrapper("emscripten_bind_PxVehicleClutchData_get_mEstimateIterations_0");
        var _emscripten_bind_PxVehicleClutchData_set_mEstimateIterations_1 = Module["_emscripten_bind_PxVehicleClutchData_set_mEstimateIterations_1"] = createExportWrapper("emscripten_bind_PxVehicleClutchData_set_mEstimateIterations_1");
        var _emscripten_bind_PxVehicleClutchData___destroy___0 = Module["_emscripten_bind_PxVehicleClutchData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleClutchData___destroy___0");
        var _emscripten_bind_PxVehicleDifferential4WData_PxVehicleDifferential4WData_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_PxVehicleDifferential4WData_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_PxVehicleDifferential4WData_0");
        var _emscripten_bind_PxVehicleDifferential4WData_get_mFrontRearSplit_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_get_mFrontRearSplit_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_get_mFrontRearSplit_0");
        var _emscripten_bind_PxVehicleDifferential4WData_set_mFrontRearSplit_1 = Module["_emscripten_bind_PxVehicleDifferential4WData_set_mFrontRearSplit_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_set_mFrontRearSplit_1");
        var _emscripten_bind_PxVehicleDifferential4WData_get_mFrontLeftRightSplit_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_get_mFrontLeftRightSplit_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_get_mFrontLeftRightSplit_0");
        var _emscripten_bind_PxVehicleDifferential4WData_set_mFrontLeftRightSplit_1 = Module["_emscripten_bind_PxVehicleDifferential4WData_set_mFrontLeftRightSplit_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_set_mFrontLeftRightSplit_1");
        var _emscripten_bind_PxVehicleDifferential4WData_get_mRearLeftRightSplit_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_get_mRearLeftRightSplit_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_get_mRearLeftRightSplit_0");
        var _emscripten_bind_PxVehicleDifferential4WData_set_mRearLeftRightSplit_1 = Module["_emscripten_bind_PxVehicleDifferential4WData_set_mRearLeftRightSplit_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_set_mRearLeftRightSplit_1");
        var _emscripten_bind_PxVehicleDifferential4WData_get_mCentreBias_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_get_mCentreBias_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_get_mCentreBias_0");
        var _emscripten_bind_PxVehicleDifferential4WData_set_mCentreBias_1 = Module["_emscripten_bind_PxVehicleDifferential4WData_set_mCentreBias_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_set_mCentreBias_1");
        var _emscripten_bind_PxVehicleDifferential4WData_get_mFrontBias_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_get_mFrontBias_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_get_mFrontBias_0");
        var _emscripten_bind_PxVehicleDifferential4WData_set_mFrontBias_1 = Module["_emscripten_bind_PxVehicleDifferential4WData_set_mFrontBias_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_set_mFrontBias_1");
        var _emscripten_bind_PxVehicleDifferential4WData_get_mRearBias_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_get_mRearBias_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_get_mRearBias_0");
        var _emscripten_bind_PxVehicleDifferential4WData_set_mRearBias_1 = Module["_emscripten_bind_PxVehicleDifferential4WData_set_mRearBias_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_set_mRearBias_1");
        var _emscripten_bind_PxVehicleDifferential4WData_get_mType_0 = Module["_emscripten_bind_PxVehicleDifferential4WData_get_mType_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_get_mType_0");
        var _emscripten_bind_PxVehicleDifferential4WData_set_mType_1 = Module["_emscripten_bind_PxVehicleDifferential4WData_set_mType_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData_set_mType_1");
        var _emscripten_bind_PxVehicleDifferential4WData___destroy___0 = Module["_emscripten_bind_PxVehicleDifferential4WData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleDifferential4WData___destroy___0");
        var _emscripten_bind_PxVehicleDifferentialNWData_PxVehicleDifferentialNWData_0 = Module["_emscripten_bind_PxVehicleDifferentialNWData_PxVehicleDifferentialNWData_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferentialNWData_PxVehicleDifferentialNWData_0");
        var _emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheel_2 = Module["_emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheel_2"] = createExportWrapper("emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheel_2");
        var _emscripten_bind_PxVehicleDifferentialNWData_getIsDrivenWheel_1 = Module["_emscripten_bind_PxVehicleDifferentialNWData_getIsDrivenWheel_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferentialNWData_getIsDrivenWheel_1");
        var _emscripten_bind_PxVehicleDifferentialNWData_getDrivenWheelStatus_0 = Module["_emscripten_bind_PxVehicleDifferentialNWData_getDrivenWheelStatus_0"] = createExportWrapper("emscripten_bind_PxVehicleDifferentialNWData_getDrivenWheelStatus_0");
        var _emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheelStatus_1 = Module["_emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheelStatus_1"] = createExportWrapper("emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheelStatus_1");
        var _emscripten_bind_PxVehicleDifferentialNWData___destroy___0 = Module["_emscripten_bind_PxVehicleDifferentialNWData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleDifferentialNWData___destroy___0");
        var _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_allocate_2 = Module["_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_allocate_2"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_allocate_2");
        var _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setup_4 = Module["_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setup_4"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setup_4");
        var _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_release_0 = Module["_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_release_0"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_release_0");
        var _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setTypePairFriction_3 = Module["_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setTypePairFriction_3"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setTypePairFriction_3");
        var _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getTypePairFriction_2 = Module["_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getTypePairFriction_2"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getTypePairFriction_2");
        var _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbSurfaceTypes_0 = Module["_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbSurfaceTypes_0"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbSurfaceTypes_0");
        var _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbTireTypes_0 = Module["_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbTireTypes_0"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbTireTypes_0");
        var _emscripten_bind_PxVehicleDrivableSurfaceType_PxVehicleDrivableSurfaceType_0 = Module["_emscripten_bind_PxVehicleDrivableSurfaceType_PxVehicleDrivableSurfaceType_0"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceType_PxVehicleDrivableSurfaceType_0");
        var _emscripten_bind_PxVehicleDrivableSurfaceType_get_mType_0 = Module["_emscripten_bind_PxVehicleDrivableSurfaceType_get_mType_0"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceType_get_mType_0");
        var _emscripten_bind_PxVehicleDrivableSurfaceType_set_mType_1 = Module["_emscripten_bind_PxVehicleDrivableSurfaceType_set_mType_1"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceType_set_mType_1");
        var _emscripten_bind_PxVehicleDrivableSurfaceType___destroy___0 = Module["_emscripten_bind_PxVehicleDrivableSurfaceType___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleDrivableSurfaceType___destroy___0");
        var _emscripten_bind_PxVehicleDrive4W_allocate_1 = Module["_emscripten_bind_PxVehicleDrive4W_allocate_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_allocate_1");
        var _emscripten_bind_PxVehicleDrive4W_free_0 = Module["_emscripten_bind_PxVehicleDrive4W_free_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_free_0");
        var _emscripten_bind_PxVehicleDrive4W_setup_5 = Module["_emscripten_bind_PxVehicleDrive4W_setup_5"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_setup_5");
        var _emscripten_bind_PxVehicleDrive4W_setToRestState_0 = Module["_emscripten_bind_PxVehicleDrive4W_setToRestState_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_setToRestState_0");
        var _emscripten_bind_PxVehicleDrive4W_getConcreteTypeName_0 = Module["_emscripten_bind_PxVehicleDrive4W_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_getConcreteTypeName_0");
        var _emscripten_bind_PxVehicleDrive4W_getConcreteType_0 = Module["_emscripten_bind_PxVehicleDrive4W_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_getConcreteType_0");
        var _emscripten_bind_PxVehicleDrive4W_setBaseFlag_2 = Module["_emscripten_bind_PxVehicleDrive4W_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_setBaseFlag_2");
        var _emscripten_bind_PxVehicleDrive4W_setBaseFlags_1 = Module["_emscripten_bind_PxVehicleDrive4W_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_setBaseFlags_1");
        var _emscripten_bind_PxVehicleDrive4W_getBaseFlags_0 = Module["_emscripten_bind_PxVehicleDrive4W_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_getBaseFlags_0");
        var _emscripten_bind_PxVehicleDrive4W_isReleasable_0 = Module["_emscripten_bind_PxVehicleDrive4W_isReleasable_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_isReleasable_0");
        var _emscripten_bind_PxVehicleDrive4W_getVehicleType_0 = Module["_emscripten_bind_PxVehicleDrive4W_getVehicleType_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_getVehicleType_0");
        var _emscripten_bind_PxVehicleDrive4W_getRigidDynamicActor_0 = Module["_emscripten_bind_PxVehicleDrive4W_getRigidDynamicActor_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_getRigidDynamicActor_0");
        var _emscripten_bind_PxVehicleDrive4W_computeForwardSpeed_0 = Module["_emscripten_bind_PxVehicleDrive4W_computeForwardSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_computeForwardSpeed_0");
        var _emscripten_bind_PxVehicleDrive4W_computeSidewaysSpeed_0 = Module["_emscripten_bind_PxVehicleDrive4W_computeSidewaysSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_computeSidewaysSpeed_0");
        var _emscripten_bind_PxVehicleDrive4W_getNbNonDrivenWheels_0 = Module["_emscripten_bind_PxVehicleDrive4W_getNbNonDrivenWheels_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_getNbNonDrivenWheels_0");
        var _emscripten_bind_PxVehicleDrive4W_get_mDriveSimData_0 = Module["_emscripten_bind_PxVehicleDrive4W_get_mDriveSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_get_mDriveSimData_0");
        var _emscripten_bind_PxVehicleDrive4W_set_mDriveSimData_1 = Module["_emscripten_bind_PxVehicleDrive4W_set_mDriveSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_set_mDriveSimData_1");
        var _emscripten_bind_PxVehicleDrive4W_get_mDriveDynData_0 = Module["_emscripten_bind_PxVehicleDrive4W_get_mDriveDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_get_mDriveDynData_0");
        var _emscripten_bind_PxVehicleDrive4W_set_mDriveDynData_1 = Module["_emscripten_bind_PxVehicleDrive4W_set_mDriveDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_set_mDriveDynData_1");
        var _emscripten_bind_PxVehicleDrive4W_get_mWheelsSimData_0 = Module["_emscripten_bind_PxVehicleDrive4W_get_mWheelsSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_get_mWheelsSimData_0");
        var _emscripten_bind_PxVehicleDrive4W_set_mWheelsSimData_1 = Module["_emscripten_bind_PxVehicleDrive4W_set_mWheelsSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_set_mWheelsSimData_1");
        var _emscripten_bind_PxVehicleDrive4W_get_mWheelsDynData_0 = Module["_emscripten_bind_PxVehicleDrive4W_get_mWheelsDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_get_mWheelsDynData_0");
        var _emscripten_bind_PxVehicleDrive4W_set_mWheelsDynData_1 = Module["_emscripten_bind_PxVehicleDrive4W_set_mWheelsDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDrive4W_set_mWheelsDynData_1");
        var _emscripten_bind_PxVehicleDriveDynData_setToRestState_0 = Module["_emscripten_bind_PxVehicleDriveDynData_setToRestState_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setToRestState_0");
        var _emscripten_bind_PxVehicleDriveDynData_setAnalogInput_2 = Module["_emscripten_bind_PxVehicleDriveDynData_setAnalogInput_2"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setAnalogInput_2");
        var _emscripten_bind_PxVehicleDriveDynData_getAnalogInput_1 = Module["_emscripten_bind_PxVehicleDriveDynData_getAnalogInput_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getAnalogInput_1");
        var _emscripten_bind_PxVehicleDriveDynData_setGearUp_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setGearUp_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setGearUp_1");
        var _emscripten_bind_PxVehicleDriveDynData_setGearDown_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setGearDown_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setGearDown_1");
        var _emscripten_bind_PxVehicleDriveDynData_getGearUp_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getGearUp_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getGearUp_0");
        var _emscripten_bind_PxVehicleDriveDynData_getGearDown_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getGearDown_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getGearDown_0");
        var _emscripten_bind_PxVehicleDriveDynData_setUseAutoGears_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setUseAutoGears_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setUseAutoGears_1");
        var _emscripten_bind_PxVehicleDriveDynData_getUseAutoGears_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getUseAutoGears_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getUseAutoGears_0");
        var _emscripten_bind_PxVehicleDriveDynData_toggleAutoGears_0 = Module["_emscripten_bind_PxVehicleDriveDynData_toggleAutoGears_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_toggleAutoGears_0");
        var _emscripten_bind_PxVehicleDriveDynData_setCurrentGear_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setCurrentGear_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setCurrentGear_1");
        var _emscripten_bind_PxVehicleDriveDynData_getCurrentGear_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getCurrentGear_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getCurrentGear_0");
        var _emscripten_bind_PxVehicleDriveDynData_setTargetGear_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setTargetGear_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setTargetGear_1");
        var _emscripten_bind_PxVehicleDriveDynData_getTargetGear_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getTargetGear_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getTargetGear_0");
        var _emscripten_bind_PxVehicleDriveDynData_startGearChange_1 = Module["_emscripten_bind_PxVehicleDriveDynData_startGearChange_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_startGearChange_1");
        var _emscripten_bind_PxVehicleDriveDynData_forceGearChange_1 = Module["_emscripten_bind_PxVehicleDriveDynData_forceGearChange_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_forceGearChange_1");
        var _emscripten_bind_PxVehicleDriveDynData_setEngineRotationSpeed_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setEngineRotationSpeed_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setEngineRotationSpeed_1");
        var _emscripten_bind_PxVehicleDriveDynData_getEngineRotationSpeed_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getEngineRotationSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getEngineRotationSpeed_0");
        var _emscripten_bind_PxVehicleDriveDynData_getGearSwitchTime_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getGearSwitchTime_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getGearSwitchTime_0");
        var _emscripten_bind_PxVehicleDriveDynData_getAutoBoxSwitchTime_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getAutoBoxSwitchTime_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getAutoBoxSwitchTime_0");
        var _emscripten_bind_PxVehicleDriveDynData_getNbAnalogInput_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getNbAnalogInput_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getNbAnalogInput_0");
        var _emscripten_bind_PxVehicleDriveDynData_setGearChange_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setGearChange_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setGearChange_1");
        var _emscripten_bind_PxVehicleDriveDynData_getGearChange_0 = Module["_emscripten_bind_PxVehicleDriveDynData_getGearChange_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_getGearChange_0");
        var _emscripten_bind_PxVehicleDriveDynData_setGearSwitchTime_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setGearSwitchTime_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setGearSwitchTime_1");
        var _emscripten_bind_PxVehicleDriveDynData_setAutoBoxSwitchTime_1 = Module["_emscripten_bind_PxVehicleDriveDynData_setAutoBoxSwitchTime_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_setAutoBoxSwitchTime_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mControlAnalogVals_1 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mControlAnalogVals_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mControlAnalogVals_1");
        var _emscripten_bind_PxVehicleDriveDynData_set_mControlAnalogVals_2 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mControlAnalogVals_2"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mControlAnalogVals_2");
        var _emscripten_bind_PxVehicleDriveDynData_get_mUseAutoGears_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mUseAutoGears_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mUseAutoGears_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mUseAutoGears_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mUseAutoGears_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mUseAutoGears_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mGearUpPressed_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mGearUpPressed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mGearUpPressed_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mGearUpPressed_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mGearUpPressed_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mGearUpPressed_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mGearDownPressed_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mGearDownPressed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mGearDownPressed_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mGearDownPressed_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mGearDownPressed_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mGearDownPressed_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mCurrentGear_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mCurrentGear_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mCurrentGear_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mCurrentGear_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mCurrentGear_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mCurrentGear_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mTargetGear_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mTargetGear_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mTargetGear_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mTargetGear_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mTargetGear_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mTargetGear_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mEnginespeed_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mEnginespeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mEnginespeed_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mEnginespeed_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mEnginespeed_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mEnginespeed_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mGearSwitchTime_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mGearSwitchTime_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mGearSwitchTime_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mGearSwitchTime_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mGearSwitchTime_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mGearSwitchTime_1");
        var _emscripten_bind_PxVehicleDriveDynData_get_mAutoBoxSwitchTime_0 = Module["_emscripten_bind_PxVehicleDriveDynData_get_mAutoBoxSwitchTime_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_get_mAutoBoxSwitchTime_0");
        var _emscripten_bind_PxVehicleDriveDynData_set_mAutoBoxSwitchTime_1 = Module["_emscripten_bind_PxVehicleDriveDynData_set_mAutoBoxSwitchTime_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData_set_mAutoBoxSwitchTime_1");
        var _emscripten_bind_PxVehicleDriveDynData___destroy___0 = Module["_emscripten_bind_PxVehicleDriveDynData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleDriveDynData___destroy___0");
        var _emscripten_bind_PxVehicleDriveNW_allocate_1 = Module["_emscripten_bind_PxVehicleDriveNW_allocate_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_allocate_1");
        var _emscripten_bind_PxVehicleDriveNW_free_0 = Module["_emscripten_bind_PxVehicleDriveNW_free_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_free_0");
        var _emscripten_bind_PxVehicleDriveNW_setup_5 = Module["_emscripten_bind_PxVehicleDriveNW_setup_5"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_setup_5");
        var _emscripten_bind_PxVehicleDriveNW_setToRestState_0 = Module["_emscripten_bind_PxVehicleDriveNW_setToRestState_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_setToRestState_0");
        var _emscripten_bind_PxVehicleDriveNW_getConcreteTypeName_0 = Module["_emscripten_bind_PxVehicleDriveNW_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_getConcreteTypeName_0");
        var _emscripten_bind_PxVehicleDriveNW_getConcreteType_0 = Module["_emscripten_bind_PxVehicleDriveNW_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_getConcreteType_0");
        var _emscripten_bind_PxVehicleDriveNW_setBaseFlag_2 = Module["_emscripten_bind_PxVehicleDriveNW_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_setBaseFlag_2");
        var _emscripten_bind_PxVehicleDriveNW_setBaseFlags_1 = Module["_emscripten_bind_PxVehicleDriveNW_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_setBaseFlags_1");
        var _emscripten_bind_PxVehicleDriveNW_getBaseFlags_0 = Module["_emscripten_bind_PxVehicleDriveNW_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_getBaseFlags_0");
        var _emscripten_bind_PxVehicleDriveNW_isReleasable_0 = Module["_emscripten_bind_PxVehicleDriveNW_isReleasable_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_isReleasable_0");
        var _emscripten_bind_PxVehicleDriveNW_getVehicleType_0 = Module["_emscripten_bind_PxVehicleDriveNW_getVehicleType_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_getVehicleType_0");
        var _emscripten_bind_PxVehicleDriveNW_getRigidDynamicActor_0 = Module["_emscripten_bind_PxVehicleDriveNW_getRigidDynamicActor_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_getRigidDynamicActor_0");
        var _emscripten_bind_PxVehicleDriveNW_computeForwardSpeed_0 = Module["_emscripten_bind_PxVehicleDriveNW_computeForwardSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_computeForwardSpeed_0");
        var _emscripten_bind_PxVehicleDriveNW_computeSidewaysSpeed_0 = Module["_emscripten_bind_PxVehicleDriveNW_computeSidewaysSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_computeSidewaysSpeed_0");
        var _emscripten_bind_PxVehicleDriveNW_getNbNonDrivenWheels_0 = Module["_emscripten_bind_PxVehicleDriveNW_getNbNonDrivenWheels_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_getNbNonDrivenWheels_0");
        var _emscripten_bind_PxVehicleDriveNW_get_mDriveSimData_0 = Module["_emscripten_bind_PxVehicleDriveNW_get_mDriveSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_get_mDriveSimData_0");
        var _emscripten_bind_PxVehicleDriveNW_set_mDriveSimData_1 = Module["_emscripten_bind_PxVehicleDriveNW_set_mDriveSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_set_mDriveSimData_1");
        var _emscripten_bind_PxVehicleDriveNW_get_mDriveDynData_0 = Module["_emscripten_bind_PxVehicleDriveNW_get_mDriveDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_get_mDriveDynData_0");
        var _emscripten_bind_PxVehicleDriveNW_set_mDriveDynData_1 = Module["_emscripten_bind_PxVehicleDriveNW_set_mDriveDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_set_mDriveDynData_1");
        var _emscripten_bind_PxVehicleDriveNW_get_mWheelsSimData_0 = Module["_emscripten_bind_PxVehicleDriveNW_get_mWheelsSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_get_mWheelsSimData_0");
        var _emscripten_bind_PxVehicleDriveNW_set_mWheelsSimData_1 = Module["_emscripten_bind_PxVehicleDriveNW_set_mWheelsSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_set_mWheelsSimData_1");
        var _emscripten_bind_PxVehicleDriveNW_get_mWheelsDynData_0 = Module["_emscripten_bind_PxVehicleDriveNW_get_mWheelsDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_get_mWheelsDynData_0");
        var _emscripten_bind_PxVehicleDriveNW_set_mWheelsDynData_1 = Module["_emscripten_bind_PxVehicleDriveNW_set_mWheelsDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveNW_set_mWheelsDynData_1");
        var _emscripten_bind_PxVehicleDriveSimData4W_PxVehicleDriveSimData4W_0 = Module["_emscripten_bind_PxVehicleDriveSimData4W_PxVehicleDriveSimData4W_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_PxVehicleDriveSimData4W_0");
        var _emscripten_bind_PxVehicleDriveSimData4W_getDiffData_0 = Module["_emscripten_bind_PxVehicleDriveSimData4W_getDiffData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_getDiffData_0");
        var _emscripten_bind_PxVehicleDriveSimData4W_getAckermannGeometryData_0 = Module["_emscripten_bind_PxVehicleDriveSimData4W_getAckermannGeometryData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_getAckermannGeometryData_0");
        var _emscripten_bind_PxVehicleDriveSimData4W_setDiffData_1 = Module["_emscripten_bind_PxVehicleDriveSimData4W_setDiffData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_setDiffData_1");
        var _emscripten_bind_PxVehicleDriveSimData4W_setAckermannGeometryData_1 = Module["_emscripten_bind_PxVehicleDriveSimData4W_setAckermannGeometryData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_setAckermannGeometryData_1");
        var _emscripten_bind_PxVehicleDriveSimData4W_getEngineData_0 = Module["_emscripten_bind_PxVehicleDriveSimData4W_getEngineData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_getEngineData_0");
        var _emscripten_bind_PxVehicleDriveSimData4W_setEngineData_1 = Module["_emscripten_bind_PxVehicleDriveSimData4W_setEngineData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_setEngineData_1");
        var _emscripten_bind_PxVehicleDriveSimData4W_getGearsData_0 = Module["_emscripten_bind_PxVehicleDriveSimData4W_getGearsData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_getGearsData_0");
        var _emscripten_bind_PxVehicleDriveSimData4W_setGearsData_1 = Module["_emscripten_bind_PxVehicleDriveSimData4W_setGearsData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_setGearsData_1");
        var _emscripten_bind_PxVehicleDriveSimData4W_getClutchData_0 = Module["_emscripten_bind_PxVehicleDriveSimData4W_getClutchData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_getClutchData_0");
        var _emscripten_bind_PxVehicleDriveSimData4W_setClutchData_1 = Module["_emscripten_bind_PxVehicleDriveSimData4W_setClutchData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_setClutchData_1");
        var _emscripten_bind_PxVehicleDriveSimData4W_getAutoBoxData_0 = Module["_emscripten_bind_PxVehicleDriveSimData4W_getAutoBoxData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_getAutoBoxData_0");
        var _emscripten_bind_PxVehicleDriveSimData4W_setAutoBoxData_1 = Module["_emscripten_bind_PxVehicleDriveSimData4W_setAutoBoxData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W_setAutoBoxData_1");
        var _emscripten_bind_PxVehicleDriveSimData4W___destroy___0 = Module["_emscripten_bind_PxVehicleDriveSimData4W___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimData4W___destroy___0");
        var _emscripten_bind_PxVehicleDriveSimDataNW_PxVehicleDriveSimDataNW_0 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_PxVehicleDriveSimDataNW_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_PxVehicleDriveSimDataNW_0");
        var _emscripten_bind_PxVehicleDriveSimDataNW_getDiffData_0 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_getDiffData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_getDiffData_0");
        var _emscripten_bind_PxVehicleDriveSimDataNW_setDiffData_1 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_setDiffData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_setDiffData_1");
        var _emscripten_bind_PxVehicleDriveSimDataNW_getEngineData_0 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_getEngineData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_getEngineData_0");
        var _emscripten_bind_PxVehicleDriveSimDataNW_setEngineData_1 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_setEngineData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_setEngineData_1");
        var _emscripten_bind_PxVehicleDriveSimDataNW_getGearsData_0 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_getGearsData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_getGearsData_0");
        var _emscripten_bind_PxVehicleDriveSimDataNW_setGearsData_1 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_setGearsData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_setGearsData_1");
        var _emscripten_bind_PxVehicleDriveSimDataNW_getClutchData_0 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_getClutchData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_getClutchData_0");
        var _emscripten_bind_PxVehicleDriveSimDataNW_setClutchData_1 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_setClutchData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_setClutchData_1");
        var _emscripten_bind_PxVehicleDriveSimDataNW_getAutoBoxData_0 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_getAutoBoxData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_getAutoBoxData_0");
        var _emscripten_bind_PxVehicleDriveSimDataNW_setAutoBoxData_1 = Module["_emscripten_bind_PxVehicleDriveSimDataNW_setAutoBoxData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW_setAutoBoxData_1");
        var _emscripten_bind_PxVehicleDriveSimDataNW___destroy___0 = Module["_emscripten_bind_PxVehicleDriveSimDataNW___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleDriveSimDataNW___destroy___0");
        var _emscripten_bind_PxVehicleDriveTank_allocate_1 = Module["_emscripten_bind_PxVehicleDriveTank_allocate_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_allocate_1");
        var _emscripten_bind_PxVehicleDriveTank_free_0 = Module["_emscripten_bind_PxVehicleDriveTank_free_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_free_0");
        var _emscripten_bind_PxVehicleDriveTank_setup_5 = Module["_emscripten_bind_PxVehicleDriveTank_setup_5"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_setup_5");
        var _emscripten_bind_PxVehicleDriveTank_setDriveModel_1 = Module["_emscripten_bind_PxVehicleDriveTank_setDriveModel_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_setDriveModel_1");
        var _emscripten_bind_PxVehicleDriveTank_getDriveModel_0 = Module["_emscripten_bind_PxVehicleDriveTank_getDriveModel_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_getDriveModel_0");
        var _emscripten_bind_PxVehicleDriveTank_setToRestState_0 = Module["_emscripten_bind_PxVehicleDriveTank_setToRestState_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_setToRestState_0");
        var _emscripten_bind_PxVehicleDriveTank_getConcreteTypeName_0 = Module["_emscripten_bind_PxVehicleDriveTank_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_getConcreteTypeName_0");
        var _emscripten_bind_PxVehicleDriveTank_getConcreteType_0 = Module["_emscripten_bind_PxVehicleDriveTank_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_getConcreteType_0");
        var _emscripten_bind_PxVehicleDriveTank_setBaseFlag_2 = Module["_emscripten_bind_PxVehicleDriveTank_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_setBaseFlag_2");
        var _emscripten_bind_PxVehicleDriveTank_setBaseFlags_1 = Module["_emscripten_bind_PxVehicleDriveTank_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_setBaseFlags_1");
        var _emscripten_bind_PxVehicleDriveTank_getBaseFlags_0 = Module["_emscripten_bind_PxVehicleDriveTank_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_getBaseFlags_0");
        var _emscripten_bind_PxVehicleDriveTank_isReleasable_0 = Module["_emscripten_bind_PxVehicleDriveTank_isReleasable_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_isReleasable_0");
        var _emscripten_bind_PxVehicleDriveTank_getVehicleType_0 = Module["_emscripten_bind_PxVehicleDriveTank_getVehicleType_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_getVehicleType_0");
        var _emscripten_bind_PxVehicleDriveTank_getRigidDynamicActor_0 = Module["_emscripten_bind_PxVehicleDriveTank_getRigidDynamicActor_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_getRigidDynamicActor_0");
        var _emscripten_bind_PxVehicleDriveTank_computeForwardSpeed_0 = Module["_emscripten_bind_PxVehicleDriveTank_computeForwardSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_computeForwardSpeed_0");
        var _emscripten_bind_PxVehicleDriveTank_computeSidewaysSpeed_0 = Module["_emscripten_bind_PxVehicleDriveTank_computeSidewaysSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_computeSidewaysSpeed_0");
        var _emscripten_bind_PxVehicleDriveTank_getNbNonDrivenWheels_0 = Module["_emscripten_bind_PxVehicleDriveTank_getNbNonDrivenWheels_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_getNbNonDrivenWheels_0");
        var _emscripten_bind_PxVehicleDriveTank_get_mDriveSimData_0 = Module["_emscripten_bind_PxVehicleDriveTank_get_mDriveSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_get_mDriveSimData_0");
        var _emscripten_bind_PxVehicleDriveTank_set_mDriveSimData_1 = Module["_emscripten_bind_PxVehicleDriveTank_set_mDriveSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_set_mDriveSimData_1");
        var _emscripten_bind_PxVehicleDriveTank_get_mDriveDynData_0 = Module["_emscripten_bind_PxVehicleDriveTank_get_mDriveDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_get_mDriveDynData_0");
        var _emscripten_bind_PxVehicleDriveTank_set_mDriveDynData_1 = Module["_emscripten_bind_PxVehicleDriveTank_set_mDriveDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_set_mDriveDynData_1");
        var _emscripten_bind_PxVehicleDriveTank_get_mWheelsSimData_0 = Module["_emscripten_bind_PxVehicleDriveTank_get_mWheelsSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_get_mWheelsSimData_0");
        var _emscripten_bind_PxVehicleDriveTank_set_mWheelsSimData_1 = Module["_emscripten_bind_PxVehicleDriveTank_set_mWheelsSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_set_mWheelsSimData_1");
        var _emscripten_bind_PxVehicleDriveTank_get_mWheelsDynData_0 = Module["_emscripten_bind_PxVehicleDriveTank_get_mWheelsDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_get_mWheelsDynData_0");
        var _emscripten_bind_PxVehicleDriveTank_set_mWheelsDynData_1 = Module["_emscripten_bind_PxVehicleDriveTank_set_mWheelsDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleDriveTank_set_mWheelsDynData_1");
        var _emscripten_bind_PxVehicleEngineData_PxVehicleEngineData_0 = Module["_emscripten_bind_PxVehicleEngineData_PxVehicleEngineData_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_PxVehicleEngineData_0");
        var _emscripten_bind_PxVehicleEngineData_get_mTorqueCurve_0 = Module["_emscripten_bind_PxVehicleEngineData_get_mTorqueCurve_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_get_mTorqueCurve_0");
        var _emscripten_bind_PxVehicleEngineData_set_mTorqueCurve_1 = Module["_emscripten_bind_PxVehicleEngineData_set_mTorqueCurve_1"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_set_mTorqueCurve_1");
        var _emscripten_bind_PxVehicleEngineData_get_mMOI_0 = Module["_emscripten_bind_PxVehicleEngineData_get_mMOI_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_get_mMOI_0");
        var _emscripten_bind_PxVehicleEngineData_set_mMOI_1 = Module["_emscripten_bind_PxVehicleEngineData_set_mMOI_1"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_set_mMOI_1");
        var _emscripten_bind_PxVehicleEngineData_get_mPeakTorque_0 = Module["_emscripten_bind_PxVehicleEngineData_get_mPeakTorque_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_get_mPeakTorque_0");
        var _emscripten_bind_PxVehicleEngineData_set_mPeakTorque_1 = Module["_emscripten_bind_PxVehicleEngineData_set_mPeakTorque_1"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_set_mPeakTorque_1");
        var _emscripten_bind_PxVehicleEngineData_get_mMaxOmega_0 = Module["_emscripten_bind_PxVehicleEngineData_get_mMaxOmega_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_get_mMaxOmega_0");
        var _emscripten_bind_PxVehicleEngineData_set_mMaxOmega_1 = Module["_emscripten_bind_PxVehicleEngineData_set_mMaxOmega_1"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_set_mMaxOmega_1");
        var _emscripten_bind_PxVehicleEngineData_get_mDampingRateFullThrottle_0 = Module["_emscripten_bind_PxVehicleEngineData_get_mDampingRateFullThrottle_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_get_mDampingRateFullThrottle_0");
        var _emscripten_bind_PxVehicleEngineData_set_mDampingRateFullThrottle_1 = Module["_emscripten_bind_PxVehicleEngineData_set_mDampingRateFullThrottle_1"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_set_mDampingRateFullThrottle_1");
        var _emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchEngaged_0 = Module["_emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchEngaged_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchEngaged_0");
        var _emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchEngaged_1 = Module["_emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchEngaged_1"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchEngaged_1");
        var _emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchDisengaged_0 = Module["_emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchDisengaged_0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchDisengaged_0");
        var _emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchDisengaged_1 = Module["_emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchDisengaged_1"] = createExportWrapper("emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchDisengaged_1");
        var _emscripten_bind_PxVehicleEngineData___destroy___0 = Module["_emscripten_bind_PxVehicleEngineData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleEngineData___destroy___0");
        var _emscripten_bind_PxEngineTorqueLookupTable_PxEngineTorqueLookupTable_0 = Module["_emscripten_bind_PxEngineTorqueLookupTable_PxEngineTorqueLookupTable_0"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_PxEngineTorqueLookupTable_0");
        var _emscripten_bind_PxEngineTorqueLookupTable_addPair_2 = Module["_emscripten_bind_PxEngineTorqueLookupTable_addPair_2"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_addPair_2");
        var _emscripten_bind_PxEngineTorqueLookupTable_getYVal_1 = Module["_emscripten_bind_PxEngineTorqueLookupTable_getYVal_1"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_getYVal_1");
        var _emscripten_bind_PxEngineTorqueLookupTable_getNbDataPairs_0 = Module["_emscripten_bind_PxEngineTorqueLookupTable_getNbDataPairs_0"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_getNbDataPairs_0");
        var _emscripten_bind_PxEngineTorqueLookupTable_clear_0 = Module["_emscripten_bind_PxEngineTorqueLookupTable_clear_0"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_clear_0");
        var _emscripten_bind_PxEngineTorqueLookupTable_getX_1 = Module["_emscripten_bind_PxEngineTorqueLookupTable_getX_1"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_getX_1");
        var _emscripten_bind_PxEngineTorqueLookupTable_getY_1 = Module["_emscripten_bind_PxEngineTorqueLookupTable_getY_1"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_getY_1");
        var _emscripten_bind_PxEngineTorqueLookupTable_get_mDataPairs_1 = Module["_emscripten_bind_PxEngineTorqueLookupTable_get_mDataPairs_1"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_get_mDataPairs_1");
        var _emscripten_bind_PxEngineTorqueLookupTable_set_mDataPairs_2 = Module["_emscripten_bind_PxEngineTorqueLookupTable_set_mDataPairs_2"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_set_mDataPairs_2");
        var _emscripten_bind_PxEngineTorqueLookupTable_get_mNbDataPairs_0 = Module["_emscripten_bind_PxEngineTorqueLookupTable_get_mNbDataPairs_0"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_get_mNbDataPairs_0");
        var _emscripten_bind_PxEngineTorqueLookupTable_set_mNbDataPairs_1 = Module["_emscripten_bind_PxEngineTorqueLookupTable_set_mNbDataPairs_1"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable_set_mNbDataPairs_1");
        var _emscripten_bind_PxEngineTorqueLookupTable___destroy___0 = Module["_emscripten_bind_PxEngineTorqueLookupTable___destroy___0"] = createExportWrapper("emscripten_bind_PxEngineTorqueLookupTable___destroy___0");
        var _emscripten_bind_PxVehicleGearsData_PxVehicleGearsData_0 = Module["_emscripten_bind_PxVehicleGearsData_PxVehicleGearsData_0"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_PxVehicleGearsData_0");
        var _emscripten_bind_PxVehicleGearsData_getGearRatio_1 = Module["_emscripten_bind_PxVehicleGearsData_getGearRatio_1"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_getGearRatio_1");
        var _emscripten_bind_PxVehicleGearsData_setGearRatio_2 = Module["_emscripten_bind_PxVehicleGearsData_setGearRatio_2"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_setGearRatio_2");
        var _emscripten_bind_PxVehicleGearsData_get_mRatios_1 = Module["_emscripten_bind_PxVehicleGearsData_get_mRatios_1"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_get_mRatios_1");
        var _emscripten_bind_PxVehicleGearsData_set_mRatios_2 = Module["_emscripten_bind_PxVehicleGearsData_set_mRatios_2"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_set_mRatios_2");
        var _emscripten_bind_PxVehicleGearsData_get_mFinalRatio_0 = Module["_emscripten_bind_PxVehicleGearsData_get_mFinalRatio_0"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_get_mFinalRatio_0");
        var _emscripten_bind_PxVehicleGearsData_set_mFinalRatio_1 = Module["_emscripten_bind_PxVehicleGearsData_set_mFinalRatio_1"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_set_mFinalRatio_1");
        var _emscripten_bind_PxVehicleGearsData_get_mNbRatios_0 = Module["_emscripten_bind_PxVehicleGearsData_get_mNbRatios_0"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_get_mNbRatios_0");
        var _emscripten_bind_PxVehicleGearsData_set_mNbRatios_1 = Module["_emscripten_bind_PxVehicleGearsData_set_mNbRatios_1"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_set_mNbRatios_1");
        var _emscripten_bind_PxVehicleGearsData_get_mSwitchTime_0 = Module["_emscripten_bind_PxVehicleGearsData_get_mSwitchTime_0"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_get_mSwitchTime_0");
        var _emscripten_bind_PxVehicleGearsData_set_mSwitchTime_1 = Module["_emscripten_bind_PxVehicleGearsData_set_mSwitchTime_1"] = createExportWrapper("emscripten_bind_PxVehicleGearsData_set_mSwitchTime_1");
        var _emscripten_bind_PxVehicleGearsData___destroy___0 = Module["_emscripten_bind_PxVehicleGearsData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleGearsData___destroy___0");
        var _emscripten_bind_PxVehicleNoDrive_allocate_1 = Module["_emscripten_bind_PxVehicleNoDrive_allocate_1"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_allocate_1");
        var _emscripten_bind_PxVehicleNoDrive_free_0 = Module["_emscripten_bind_PxVehicleNoDrive_free_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_free_0");
        var _emscripten_bind_PxVehicleNoDrive_setup_3 = Module["_emscripten_bind_PxVehicleNoDrive_setup_3"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_setup_3");
        var _emscripten_bind_PxVehicleNoDrive_setToRestState_0 = Module["_emscripten_bind_PxVehicleNoDrive_setToRestState_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_setToRestState_0");
        var _emscripten_bind_PxVehicleNoDrive_setBrakeTorque_2 = Module["_emscripten_bind_PxVehicleNoDrive_setBrakeTorque_2"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_setBrakeTorque_2");
        var _emscripten_bind_PxVehicleNoDrive_setDriveTorque_2 = Module["_emscripten_bind_PxVehicleNoDrive_setDriveTorque_2"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_setDriveTorque_2");
        var _emscripten_bind_PxVehicleNoDrive_setSteerAngle_2 = Module["_emscripten_bind_PxVehicleNoDrive_setSteerAngle_2"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_setSteerAngle_2");
        var _emscripten_bind_PxVehicleNoDrive_getBrakeTorque_1 = Module["_emscripten_bind_PxVehicleNoDrive_getBrakeTorque_1"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getBrakeTorque_1");
        var _emscripten_bind_PxVehicleNoDrive_getDriveTorque_1 = Module["_emscripten_bind_PxVehicleNoDrive_getDriveTorque_1"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getDriveTorque_1");
        var _emscripten_bind_PxVehicleNoDrive_getSteerAngle_1 = Module["_emscripten_bind_PxVehicleNoDrive_getSteerAngle_1"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getSteerAngle_1");
        var _emscripten_bind_PxVehicleNoDrive_getNbSteerAngle_0 = Module["_emscripten_bind_PxVehicleNoDrive_getNbSteerAngle_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getNbSteerAngle_0");
        var _emscripten_bind_PxVehicleNoDrive_getNbDriveTorque_0 = Module["_emscripten_bind_PxVehicleNoDrive_getNbDriveTorque_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getNbDriveTorque_0");
        var _emscripten_bind_PxVehicleNoDrive_getNbBrakeTorque_0 = Module["_emscripten_bind_PxVehicleNoDrive_getNbBrakeTorque_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getNbBrakeTorque_0");
        var _emscripten_bind_PxVehicleNoDrive_getConcreteTypeName_0 = Module["_emscripten_bind_PxVehicleNoDrive_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getConcreteTypeName_0");
        var _emscripten_bind_PxVehicleNoDrive_getConcreteType_0 = Module["_emscripten_bind_PxVehicleNoDrive_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getConcreteType_0");
        var _emscripten_bind_PxVehicleNoDrive_setBaseFlag_2 = Module["_emscripten_bind_PxVehicleNoDrive_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_setBaseFlag_2");
        var _emscripten_bind_PxVehicleNoDrive_setBaseFlags_1 = Module["_emscripten_bind_PxVehicleNoDrive_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_setBaseFlags_1");
        var _emscripten_bind_PxVehicleNoDrive_getBaseFlags_0 = Module["_emscripten_bind_PxVehicleNoDrive_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getBaseFlags_0");
        var _emscripten_bind_PxVehicleNoDrive_isReleasable_0 = Module["_emscripten_bind_PxVehicleNoDrive_isReleasable_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_isReleasable_0");
        var _emscripten_bind_PxVehicleNoDrive_getVehicleType_0 = Module["_emscripten_bind_PxVehicleNoDrive_getVehicleType_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getVehicleType_0");
        var _emscripten_bind_PxVehicleNoDrive_getRigidDynamicActor_0 = Module["_emscripten_bind_PxVehicleNoDrive_getRigidDynamicActor_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getRigidDynamicActor_0");
        var _emscripten_bind_PxVehicleNoDrive_computeForwardSpeed_0 = Module["_emscripten_bind_PxVehicleNoDrive_computeForwardSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_computeForwardSpeed_0");
        var _emscripten_bind_PxVehicleNoDrive_computeSidewaysSpeed_0 = Module["_emscripten_bind_PxVehicleNoDrive_computeSidewaysSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_computeSidewaysSpeed_0");
        var _emscripten_bind_PxVehicleNoDrive_getNbNonDrivenWheels_0 = Module["_emscripten_bind_PxVehicleNoDrive_getNbNonDrivenWheels_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_getNbNonDrivenWheels_0");
        var _emscripten_bind_PxVehicleNoDrive_get_mWheelsSimData_0 = Module["_emscripten_bind_PxVehicleNoDrive_get_mWheelsSimData_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_get_mWheelsSimData_0");
        var _emscripten_bind_PxVehicleNoDrive_set_mWheelsSimData_1 = Module["_emscripten_bind_PxVehicleNoDrive_set_mWheelsSimData_1"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_set_mWheelsSimData_1");
        var _emscripten_bind_PxVehicleNoDrive_get_mWheelsDynData_0 = Module["_emscripten_bind_PxVehicleNoDrive_get_mWheelsDynData_0"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_get_mWheelsDynData_0");
        var _emscripten_bind_PxVehicleNoDrive_set_mWheelsDynData_1 = Module["_emscripten_bind_PxVehicleNoDrive_set_mWheelsDynData_1"] = createExportWrapper("emscripten_bind_PxVehicleNoDrive_set_mWheelsDynData_1");
        var _emscripten_bind_PxVehicleSuspensionData_PxVehicleSuspensionData_0 = Module["_emscripten_bind_PxVehicleSuspensionData_PxVehicleSuspensionData_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_PxVehicleSuspensionData_0");
        var _emscripten_bind_PxVehicleSuspensionData_setMassAndPreserveNaturalFrequency_1 = Module["_emscripten_bind_PxVehicleSuspensionData_setMassAndPreserveNaturalFrequency_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_setMassAndPreserveNaturalFrequency_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mSpringStrength_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mSpringStrength_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mSpringStrength_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mSpringStrength_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mSpringStrength_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mSpringStrength_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mSpringDamperRate_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mSpringDamperRate_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mSpringDamperRate_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mSpringDamperRate_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mSpringDamperRate_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mSpringDamperRate_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mMaxCompression_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mMaxCompression_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mMaxCompression_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mMaxCompression_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mMaxCompression_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mMaxCompression_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mMaxDroop_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mMaxDroop_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mMaxDroop_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mMaxDroop_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mMaxDroop_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mMaxDroop_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mSprungMass_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mSprungMass_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mSprungMass_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mSprungMass_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mSprungMass_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mSprungMass_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mCamberAtRest_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mCamberAtRest_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mCamberAtRest_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mCamberAtRest_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mCamberAtRest_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mCamberAtRest_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxCompression_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxCompression_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxCompression_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxCompression_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxCompression_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxCompression_1");
        var _emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxDroop_0 = Module["_emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxDroop_0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxDroop_0");
        var _emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxDroop_1 = Module["_emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxDroop_1"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxDroop_1");
        var _emscripten_bind_PxVehicleSuspensionData___destroy___0 = Module["_emscripten_bind_PxVehicleSuspensionData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleSuspensionData___destroy___0");
        var _emscripten_bind_PxVehicleTireData_PxVehicleTireData_0 = Module["_emscripten_bind_PxVehicleTireData_PxVehicleTireData_0"] = createExportWrapper("emscripten_bind_PxVehicleTireData_PxVehicleTireData_0");
        var _emscripten_bind_PxVehicleTireData_get_mLatStiffX_0 = Module["_emscripten_bind_PxVehicleTireData_get_mLatStiffX_0"] = createExportWrapper("emscripten_bind_PxVehicleTireData_get_mLatStiffX_0");
        var _emscripten_bind_PxVehicleTireData_set_mLatStiffX_1 = Module["_emscripten_bind_PxVehicleTireData_set_mLatStiffX_1"] = createExportWrapper("emscripten_bind_PxVehicleTireData_set_mLatStiffX_1");
        var _emscripten_bind_PxVehicleTireData_get_mLatStiffY_0 = Module["_emscripten_bind_PxVehicleTireData_get_mLatStiffY_0"] = createExportWrapper("emscripten_bind_PxVehicleTireData_get_mLatStiffY_0");
        var _emscripten_bind_PxVehicleTireData_set_mLatStiffY_1 = Module["_emscripten_bind_PxVehicleTireData_set_mLatStiffY_1"] = createExportWrapper("emscripten_bind_PxVehicleTireData_set_mLatStiffY_1");
        var _emscripten_bind_PxVehicleTireData_get_mLongitudinalStiffnessPerUnitGravity_0 = Module["_emscripten_bind_PxVehicleTireData_get_mLongitudinalStiffnessPerUnitGravity_0"] = createExportWrapper("emscripten_bind_PxVehicleTireData_get_mLongitudinalStiffnessPerUnitGravity_0");
        var _emscripten_bind_PxVehicleTireData_set_mLongitudinalStiffnessPerUnitGravity_1 = Module["_emscripten_bind_PxVehicleTireData_set_mLongitudinalStiffnessPerUnitGravity_1"] = createExportWrapper("emscripten_bind_PxVehicleTireData_set_mLongitudinalStiffnessPerUnitGravity_1");
        var _emscripten_bind_PxVehicleTireData_get_mCamberStiffnessPerUnitGravity_0 = Module["_emscripten_bind_PxVehicleTireData_get_mCamberStiffnessPerUnitGravity_0"] = createExportWrapper("emscripten_bind_PxVehicleTireData_get_mCamberStiffnessPerUnitGravity_0");
        var _emscripten_bind_PxVehicleTireData_set_mCamberStiffnessPerUnitGravity_1 = Module["_emscripten_bind_PxVehicleTireData_set_mCamberStiffnessPerUnitGravity_1"] = createExportWrapper("emscripten_bind_PxVehicleTireData_set_mCamberStiffnessPerUnitGravity_1");
        var _emscripten_bind_PxVehicleTireData_get_mType_0 = Module["_emscripten_bind_PxVehicleTireData_get_mType_0"] = createExportWrapper("emscripten_bind_PxVehicleTireData_get_mType_0");
        var _emscripten_bind_PxVehicleTireData_set_mType_1 = Module["_emscripten_bind_PxVehicleTireData_set_mType_1"] = createExportWrapper("emscripten_bind_PxVehicleTireData_set_mType_1");
        var _emscripten_bind_PxVehicleTireData___destroy___0 = Module["_emscripten_bind_PxVehicleTireData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleTireData___destroy___0");
        var _emscripten_bind_PxVehicleTireLoadFilterData_PxVehicleTireLoadFilterData_0 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_PxVehicleTireLoadFilterData_0"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_PxVehicleTireLoadFilterData_0");
        var _emscripten_bind_PxVehicleTireLoadFilterData_getDenominator_0 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_getDenominator_0"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_getDenominator_0");
        var _emscripten_bind_PxVehicleTireLoadFilterData_get_mMinNormalisedLoad_0 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_get_mMinNormalisedLoad_0"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_get_mMinNormalisedLoad_0");
        var _emscripten_bind_PxVehicleTireLoadFilterData_set_mMinNormalisedLoad_1 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_set_mMinNormalisedLoad_1"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_set_mMinNormalisedLoad_1");
        var _emscripten_bind_PxVehicleTireLoadFilterData_get_mMinFilteredNormalisedLoad_0 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_get_mMinFilteredNormalisedLoad_0"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_get_mMinFilteredNormalisedLoad_0");
        var _emscripten_bind_PxVehicleTireLoadFilterData_set_mMinFilteredNormalisedLoad_1 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_set_mMinFilteredNormalisedLoad_1"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_set_mMinFilteredNormalisedLoad_1");
        var _emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxNormalisedLoad_0 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxNormalisedLoad_0"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxNormalisedLoad_0");
        var _emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxNormalisedLoad_1 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxNormalisedLoad_1"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxNormalisedLoad_1");
        var _emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxFilteredNormalisedLoad_0 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxFilteredNormalisedLoad_0"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxFilteredNormalisedLoad_0");
        var _emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxFilteredNormalisedLoad_1 = Module["_emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxFilteredNormalisedLoad_1"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxFilteredNormalisedLoad_1");
        var _emscripten_bind_PxVehicleTireLoadFilterData___destroy___0 = Module["_emscripten_bind_PxVehicleTireLoadFilterData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleTireLoadFilterData___destroy___0");
        var _emscripten_bind_PxVehicleWheelData_PxVehicleWheelData_0 = Module["_emscripten_bind_PxVehicleWheelData_PxVehicleWheelData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_PxVehicleWheelData_0");
        var _emscripten_bind_PxVehicleWheelData_get_mRadius_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mRadius_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mRadius_0");
        var _emscripten_bind_PxVehicleWheelData_set_mRadius_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mRadius_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mRadius_1");
        var _emscripten_bind_PxVehicleWheelData_get_mWidth_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mWidth_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mWidth_0");
        var _emscripten_bind_PxVehicleWheelData_set_mWidth_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mWidth_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mWidth_1");
        var _emscripten_bind_PxVehicleWheelData_get_mMass_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mMass_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mMass_0");
        var _emscripten_bind_PxVehicleWheelData_set_mMass_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mMass_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mMass_1");
        var _emscripten_bind_PxVehicleWheelData_get_mMOI_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mMOI_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mMOI_0");
        var _emscripten_bind_PxVehicleWheelData_set_mMOI_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mMOI_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mMOI_1");
        var _emscripten_bind_PxVehicleWheelData_get_mDampingRate_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mDampingRate_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mDampingRate_0");
        var _emscripten_bind_PxVehicleWheelData_set_mDampingRate_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mDampingRate_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mDampingRate_1");
        var _emscripten_bind_PxVehicleWheelData_get_mMaxBrakeTorque_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mMaxBrakeTorque_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mMaxBrakeTorque_0");
        var _emscripten_bind_PxVehicleWheelData_set_mMaxBrakeTorque_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mMaxBrakeTorque_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mMaxBrakeTorque_1");
        var _emscripten_bind_PxVehicleWheelData_get_mMaxHandBrakeTorque_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mMaxHandBrakeTorque_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mMaxHandBrakeTorque_0");
        var _emscripten_bind_PxVehicleWheelData_set_mMaxHandBrakeTorque_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mMaxHandBrakeTorque_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mMaxHandBrakeTorque_1");
        var _emscripten_bind_PxVehicleWheelData_get_mMaxSteer_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mMaxSteer_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mMaxSteer_0");
        var _emscripten_bind_PxVehicleWheelData_set_mMaxSteer_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mMaxSteer_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mMaxSteer_1");
        var _emscripten_bind_PxVehicleWheelData_get_mToeAngle_0 = Module["_emscripten_bind_PxVehicleWheelData_get_mToeAngle_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_get_mToeAngle_0");
        var _emscripten_bind_PxVehicleWheelData_set_mToeAngle_1 = Module["_emscripten_bind_PxVehicleWheelData_set_mToeAngle_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelData_set_mToeAngle_1");
        var _emscripten_bind_PxVehicleWheelData___destroy___0 = Module["_emscripten_bind_PxVehicleWheelData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleWheelData___destroy___0");
        var _emscripten_bind_PxVehicleWheelQueryResult_PxVehicleWheelQueryResult_0 = Module["_emscripten_bind_PxVehicleWheelQueryResult_PxVehicleWheelQueryResult_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelQueryResult_PxVehicleWheelQueryResult_0");
        var _emscripten_bind_PxVehicleWheelQueryResult_get_wheelQueryResults_0 = Module["_emscripten_bind_PxVehicleWheelQueryResult_get_wheelQueryResults_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelQueryResult_get_wheelQueryResults_0");
        var _emscripten_bind_PxVehicleWheelQueryResult_set_wheelQueryResults_1 = Module["_emscripten_bind_PxVehicleWheelQueryResult_set_wheelQueryResults_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelQueryResult_set_wheelQueryResults_1");
        var _emscripten_bind_PxVehicleWheelQueryResult_get_nbWheelQueryResults_0 = Module["_emscripten_bind_PxVehicleWheelQueryResult_get_nbWheelQueryResults_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelQueryResult_get_nbWheelQueryResults_0");
        var _emscripten_bind_PxVehicleWheelQueryResult_set_nbWheelQueryResults_1 = Module["_emscripten_bind_PxVehicleWheelQueryResult_set_nbWheelQueryResults_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelQueryResult_set_nbWheelQueryResults_1");
        var _emscripten_bind_PxVehicleWheelQueryResult___destroy___0 = Module["_emscripten_bind_PxVehicleWheelQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleWheelQueryResult___destroy___0");
        var _emscripten_bind_PxVehicleWheelsDynData_setToRestState_0 = Module["_emscripten_bind_PxVehicleWheelsDynData_setToRestState_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_setToRestState_0");
        var _emscripten_bind_PxVehicleWheelsDynData_setWheelRotationSpeed_2 = Module["_emscripten_bind_PxVehicleWheelsDynData_setWheelRotationSpeed_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_setWheelRotationSpeed_2");
        var _emscripten_bind_PxVehicleWheelsDynData_getWheelRotationSpeed_1 = Module["_emscripten_bind_PxVehicleWheelsDynData_getWheelRotationSpeed_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_getWheelRotationSpeed_1");
        var _emscripten_bind_PxVehicleWheelsDynData_setWheelRotationAngle_2 = Module["_emscripten_bind_PxVehicleWheelsDynData_setWheelRotationAngle_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_setWheelRotationAngle_2");
        var _emscripten_bind_PxVehicleWheelsDynData_getWheelRotationAngle_1 = Module["_emscripten_bind_PxVehicleWheelsDynData_getWheelRotationAngle_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_getWheelRotationAngle_1");
        var _emscripten_bind_PxVehicleWheelsDynData_copy_3 = Module["_emscripten_bind_PxVehicleWheelsDynData_copy_3"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_copy_3");
        var _emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationSpeed_0 = Module["_emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationSpeed_0");
        var _emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationAngle_0 = Module["_emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationAngle_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationAngle_0");
        var _emscripten_bind_PxVehicleWheelsDynData___destroy___0 = Module["_emscripten_bind_PxVehicleWheelsDynData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsDynData___destroy___0");
        var _emscripten_bind_PxVehicleWheelsSimData_allocate_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_allocate_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_allocate_1");
        var _emscripten_bind_PxVehicleWheelsSimData_setChassisMass_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_setChassisMass_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setChassisMass_1");
        var _emscripten_bind_PxVehicleWheelsSimData_free_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_free_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_free_0");
        var _emscripten_bind_PxVehicleWheelsSimData_copy_3 = Module["_emscripten_bind_PxVehicleWheelsSimData_copy_3"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_copy_3");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbWheels_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbWheels_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbWheels_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getSuspensionData_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getSuspensionData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getSuspensionData_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getWheelData_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getWheelData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getWheelData_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getTireData_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getTireData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getTireData_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getSuspTravelDirection_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getSuspTravelDirection_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getSuspTravelDirection_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getSuspForceAppPointOffset_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getSuspForceAppPointOffset_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getSuspForceAppPointOffset_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getTireForceAppPointOffset_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getTireForceAppPointOffset_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getTireForceAppPointOffset_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getWheelCentreOffset_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getWheelCentreOffset_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getWheelCentreOffset_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getWheelShapeMapping_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getWheelShapeMapping_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getWheelShapeMapping_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getSceneQueryFilterData_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getSceneQueryFilterData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getSceneQueryFilterData_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getAntiRollBarData_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getAntiRollBarData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getAntiRollBarData_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getTireLoadFilterData_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getTireLoadFilterData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getTireLoadFilterData_0");
        var _emscripten_bind_PxVehicleWheelsSimData_setSuspensionData_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setSuspensionData_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setSuspensionData_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setWheelData_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setWheelData_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setWheelData_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setTireData_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setTireData_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setTireData_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setSuspTravelDirection_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setSuspTravelDirection_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setSuspTravelDirection_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setSuspForceAppPointOffset_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setSuspForceAppPointOffset_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setSuspForceAppPointOffset_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setTireForceAppPointOffset_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setTireForceAppPointOffset_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setTireForceAppPointOffset_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setWheelCentreOffset_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setWheelCentreOffset_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setWheelCentreOffset_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setWheelShapeMapping_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setWheelShapeMapping_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setWheelShapeMapping_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setSceneQueryFilterData_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setSceneQueryFilterData_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setSceneQueryFilterData_2");
        var _emscripten_bind_PxVehicleWheelsSimData_setTireLoadFilterData_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_setTireLoadFilterData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setTireLoadFilterData_1");
        var _emscripten_bind_PxVehicleWheelsSimData_addAntiRollBarData_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_addAntiRollBarData_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_addAntiRollBarData_1");
        var _emscripten_bind_PxVehicleWheelsSimData_disableWheel_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_disableWheel_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_disableWheel_1");
        var _emscripten_bind_PxVehicleWheelsSimData_enableWheel_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_enableWheel_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_enableWheel_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getIsWheelDisabled_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getIsWheelDisabled_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getIsWheelDisabled_1");
        var _emscripten_bind_PxVehicleWheelsSimData_setSubStepCount_3 = Module["_emscripten_bind_PxVehicleWheelsSimData_setSubStepCount_3"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setSubStepCount_3");
        var _emscripten_bind_PxVehicleWheelsSimData_setMinLongSlipDenominator_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_setMinLongSlipDenominator_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setMinLongSlipDenominator_1");
        var _emscripten_bind_PxVehicleWheelsSimData_setFlags_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_setFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setFlags_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getFlags_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getFlags_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getFlags_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbWheels4_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbWheels4_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbWheels4_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbSuspensionData_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbSuspensionData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbSuspensionData_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbWheelData_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbWheelData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbWheelData_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbSuspTravelDirection_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbSuspTravelDirection_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbSuspTravelDirection_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbTireData_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbTireData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbTireData_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbSuspForceAppPointOffset_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbSuspForceAppPointOffset_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbSuspForceAppPointOffset_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbTireForceAppPointOffset_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbTireForceAppPointOffset_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbTireForceAppPointOffset_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbWheelCentreOffset_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbWheelCentreOffset_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbWheelCentreOffset_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbWheelShapeMapping_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbWheelShapeMapping_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbWheelShapeMapping_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbSceneQueryFilterData_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbSceneQueryFilterData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbSceneQueryFilterData_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getMinLongSlipDenominator_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getMinLongSlipDenominator_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getMinLongSlipDenominator_0");
        var _emscripten_bind_PxVehicleWheelsSimData_setThresholdLongSpeed_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_setThresholdLongSpeed_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setThresholdLongSpeed_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getThresholdLongSpeed_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getThresholdLongSpeed_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getThresholdLongSpeed_0");
        var _emscripten_bind_PxVehicleWheelsSimData_setLowForwardSpeedSubStepCount_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_setLowForwardSpeedSubStepCount_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setLowForwardSpeedSubStepCount_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getLowForwardSpeedSubStepCount_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getLowForwardSpeedSubStepCount_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getLowForwardSpeedSubStepCount_0");
        var _emscripten_bind_PxVehicleWheelsSimData_setHighForwardSpeedSubStepCount_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_setHighForwardSpeedSubStepCount_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setHighForwardSpeedSubStepCount_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getHighForwardSpeedSubStepCount_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getHighForwardSpeedSubStepCount_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getHighForwardSpeedSubStepCount_0");
        var _emscripten_bind_PxVehicleWheelsSimData_setWheelEnabledState_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setWheelEnabledState_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setWheelEnabledState_2");
        var _emscripten_bind_PxVehicleWheelsSimData_getWheelEnabledState_1 = Module["_emscripten_bind_PxVehicleWheelsSimData_getWheelEnabledState_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getWheelEnabledState_1");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbWheelEnabledState_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbWheelEnabledState_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbWheelEnabledState_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars4_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars4_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars4_0");
        var _emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBarData_0 = Module["_emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBarData_0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBarData_0");
        var _emscripten_bind_PxVehicleWheelsSimData_setAntiRollBarData_2 = Module["_emscripten_bind_PxVehicleWheelsSimData_setAntiRollBarData_2"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData_setAntiRollBarData_2");
        var _emscripten_bind_PxVehicleWheelsSimData___destroy___0 = Module["_emscripten_bind_PxVehicleWheelsSimData___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimData___destroy___0");
        var _emscripten_bind_PxVehicleWheelsSimFlags_PxVehicleWheelsSimFlags_1 = Module["_emscripten_bind_PxVehicleWheelsSimFlags_PxVehicleWheelsSimFlags_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimFlags_PxVehicleWheelsSimFlags_1");
        var _emscripten_bind_PxVehicleWheelsSimFlags_isSet_1 = Module["_emscripten_bind_PxVehicleWheelsSimFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimFlags_isSet_1");
        var _emscripten_bind_PxVehicleWheelsSimFlags_set_1 = Module["_emscripten_bind_PxVehicleWheelsSimFlags_set_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimFlags_set_1");
        var _emscripten_bind_PxVehicleWheelsSimFlags_clear_1 = Module["_emscripten_bind_PxVehicleWheelsSimFlags_clear_1"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimFlags_clear_1");
        var _emscripten_bind_PxVehicleWheelsSimFlags___destroy___0 = Module["_emscripten_bind_PxVehicleWheelsSimFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsSimFlags___destroy___0");
        var _emscripten_bind_PxWheelQueryResult_PxWheelQueryResult_0 = Module["_emscripten_bind_PxWheelQueryResult_PxWheelQueryResult_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_PxWheelQueryResult_0");
        var _emscripten_bind_PxWheelQueryResult_get_suspLineStart_0 = Module["_emscripten_bind_PxWheelQueryResult_get_suspLineStart_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_suspLineStart_0");
        var _emscripten_bind_PxWheelQueryResult_set_suspLineStart_1 = Module["_emscripten_bind_PxWheelQueryResult_set_suspLineStart_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_suspLineStart_1");
        var _emscripten_bind_PxWheelQueryResult_get_suspLineDir_0 = Module["_emscripten_bind_PxWheelQueryResult_get_suspLineDir_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_suspLineDir_0");
        var _emscripten_bind_PxWheelQueryResult_set_suspLineDir_1 = Module["_emscripten_bind_PxWheelQueryResult_set_suspLineDir_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_suspLineDir_1");
        var _emscripten_bind_PxWheelQueryResult_get_suspLineLength_0 = Module["_emscripten_bind_PxWheelQueryResult_get_suspLineLength_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_suspLineLength_0");
        var _emscripten_bind_PxWheelQueryResult_set_suspLineLength_1 = Module["_emscripten_bind_PxWheelQueryResult_set_suspLineLength_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_suspLineLength_1");
        var _emscripten_bind_PxWheelQueryResult_get_isInAir_0 = Module["_emscripten_bind_PxWheelQueryResult_get_isInAir_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_isInAir_0");
        var _emscripten_bind_PxWheelQueryResult_set_isInAir_1 = Module["_emscripten_bind_PxWheelQueryResult_set_isInAir_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_isInAir_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireContactActor_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireContactActor_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireContactActor_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireContactActor_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireContactActor_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireContactActor_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireContactShape_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireContactShape_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireContactShape_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireContactShape_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireContactShape_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireContactShape_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireSurfaceMaterial_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireSurfaceMaterial_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireSurfaceMaterial_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireSurfaceMaterial_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireSurfaceMaterial_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireSurfaceMaterial_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireSurfaceType_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireSurfaceType_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireSurfaceType_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireSurfaceType_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireSurfaceType_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireSurfaceType_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireContactPoint_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireContactPoint_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireContactPoint_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireContactPoint_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireContactPoint_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireContactPoint_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireContactNormal_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireContactNormal_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireContactNormal_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireContactNormal_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireContactNormal_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireContactNormal_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireFriction_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireFriction_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireFriction_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireFriction_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireFriction_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireFriction_1");
        var _emscripten_bind_PxWheelQueryResult_get_suspJounce_0 = Module["_emscripten_bind_PxWheelQueryResult_get_suspJounce_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_suspJounce_0");
        var _emscripten_bind_PxWheelQueryResult_set_suspJounce_1 = Module["_emscripten_bind_PxWheelQueryResult_set_suspJounce_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_suspJounce_1");
        var _emscripten_bind_PxWheelQueryResult_get_suspSpringForce_0 = Module["_emscripten_bind_PxWheelQueryResult_get_suspSpringForce_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_suspSpringForce_0");
        var _emscripten_bind_PxWheelQueryResult_set_suspSpringForce_1 = Module["_emscripten_bind_PxWheelQueryResult_set_suspSpringForce_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_suspSpringForce_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireLongitudinalDir_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireLongitudinalDir_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireLongitudinalDir_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireLongitudinalDir_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireLongitudinalDir_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireLongitudinalDir_1");
        var _emscripten_bind_PxWheelQueryResult_get_tireLateralDir_0 = Module["_emscripten_bind_PxWheelQueryResult_get_tireLateralDir_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_tireLateralDir_0");
        var _emscripten_bind_PxWheelQueryResult_set_tireLateralDir_1 = Module["_emscripten_bind_PxWheelQueryResult_set_tireLateralDir_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_tireLateralDir_1");
        var _emscripten_bind_PxWheelQueryResult_get_longitudinalSlip_0 = Module["_emscripten_bind_PxWheelQueryResult_get_longitudinalSlip_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_longitudinalSlip_0");
        var _emscripten_bind_PxWheelQueryResult_set_longitudinalSlip_1 = Module["_emscripten_bind_PxWheelQueryResult_set_longitudinalSlip_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_longitudinalSlip_1");
        var _emscripten_bind_PxWheelQueryResult_get_lateralSlip_0 = Module["_emscripten_bind_PxWheelQueryResult_get_lateralSlip_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_lateralSlip_0");
        var _emscripten_bind_PxWheelQueryResult_set_lateralSlip_1 = Module["_emscripten_bind_PxWheelQueryResult_set_lateralSlip_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_lateralSlip_1");
        var _emscripten_bind_PxWheelQueryResult_get_steerAngle_0 = Module["_emscripten_bind_PxWheelQueryResult_get_steerAngle_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_steerAngle_0");
        var _emscripten_bind_PxWheelQueryResult_set_steerAngle_1 = Module["_emscripten_bind_PxWheelQueryResult_set_steerAngle_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_steerAngle_1");
        var _emscripten_bind_PxWheelQueryResult_get_localPose_0 = Module["_emscripten_bind_PxWheelQueryResult_get_localPose_0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_get_localPose_0");
        var _emscripten_bind_PxWheelQueryResult_set_localPose_1 = Module["_emscripten_bind_PxWheelQueryResult_set_localPose_1"] = createExportWrapper("emscripten_bind_PxWheelQueryResult_set_localPose_1");
        var _emscripten_bind_PxWheelQueryResult___destroy___0 = Module["_emscripten_bind_PxWheelQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_PxWheelQueryResult___destroy___0");
        var _emscripten_bind_PxBoxGeometry_PxBoxGeometry_3 = Module["_emscripten_bind_PxBoxGeometry_PxBoxGeometry_3"] = createExportWrapper("emscripten_bind_PxBoxGeometry_PxBoxGeometry_3");
        var _emscripten_bind_PxBoxGeometry_isValid_0 = Module["_emscripten_bind_PxBoxGeometry_isValid_0"] = createExportWrapper("emscripten_bind_PxBoxGeometry_isValid_0");
        var _emscripten_bind_PxBoxGeometry_getType_0 = Module["_emscripten_bind_PxBoxGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxBoxGeometry_getType_0");
        var _emscripten_bind_PxBoxGeometry_get_halfExtents_0 = Module["_emscripten_bind_PxBoxGeometry_get_halfExtents_0"] = createExportWrapper("emscripten_bind_PxBoxGeometry_get_halfExtents_0");
        var _emscripten_bind_PxBoxGeometry_set_halfExtents_1 = Module["_emscripten_bind_PxBoxGeometry_set_halfExtents_1"] = createExportWrapper("emscripten_bind_PxBoxGeometry_set_halfExtents_1");
        var _emscripten_bind_PxBoxGeometry___destroy___0 = Module["_emscripten_bind_PxBoxGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxBoxGeometry___destroy___0");
        var _emscripten_bind_PxBVHStructure_getConcreteTypeName_0 = Module["_emscripten_bind_PxBVHStructure_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxBVHStructure_getConcreteTypeName_0");
        var _emscripten_bind_PxBVHStructure_getConcreteType_0 = Module["_emscripten_bind_PxBVHStructure_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxBVHStructure_getConcreteType_0");
        var _emscripten_bind_PxBVHStructure_setBaseFlag_2 = Module["_emscripten_bind_PxBVHStructure_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxBVHStructure_setBaseFlag_2");
        var _emscripten_bind_PxBVHStructure_setBaseFlags_1 = Module["_emscripten_bind_PxBVHStructure_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxBVHStructure_setBaseFlags_1");
        var _emscripten_bind_PxBVHStructure_getBaseFlags_0 = Module["_emscripten_bind_PxBVHStructure_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxBVHStructure_getBaseFlags_0");
        var _emscripten_bind_PxBVHStructure_isReleasable_0 = Module["_emscripten_bind_PxBVHStructure_isReleasable_0"] = createExportWrapper("emscripten_bind_PxBVHStructure_isReleasable_0");
        var _emscripten_bind_PxCapsuleGeometry_PxCapsuleGeometry_2 = Module["_emscripten_bind_PxCapsuleGeometry_PxCapsuleGeometry_2"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry_PxCapsuleGeometry_2");
        var _emscripten_bind_PxCapsuleGeometry_isValid_0 = Module["_emscripten_bind_PxCapsuleGeometry_isValid_0"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry_isValid_0");
        var _emscripten_bind_PxCapsuleGeometry_getType_0 = Module["_emscripten_bind_PxCapsuleGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry_getType_0");
        var _emscripten_bind_PxCapsuleGeometry_get_radius_0 = Module["_emscripten_bind_PxCapsuleGeometry_get_radius_0"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry_get_radius_0");
        var _emscripten_bind_PxCapsuleGeometry_set_radius_1 = Module["_emscripten_bind_PxCapsuleGeometry_set_radius_1"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry_set_radius_1");
        var _emscripten_bind_PxCapsuleGeometry_get_halfHeight_0 = Module["_emscripten_bind_PxCapsuleGeometry_get_halfHeight_0"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry_get_halfHeight_0");
        var _emscripten_bind_PxCapsuleGeometry_set_halfHeight_1 = Module["_emscripten_bind_PxCapsuleGeometry_set_halfHeight_1"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry_set_halfHeight_1");
        var _emscripten_bind_PxCapsuleGeometry___destroy___0 = Module["_emscripten_bind_PxCapsuleGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxCapsuleGeometry___destroy___0");
        var _emscripten_bind_PxConvexMesh_getNbVertices_0 = Module["_emscripten_bind_PxConvexMesh_getNbVertices_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getNbVertices_0");
        var _emscripten_bind_PxConvexMesh_getVertices_0 = Module["_emscripten_bind_PxConvexMesh_getVertices_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getVertices_0");
        var _emscripten_bind_PxConvexMesh_getIndexBuffer_0 = Module["_emscripten_bind_PxConvexMesh_getIndexBuffer_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getIndexBuffer_0");
        var _emscripten_bind_PxConvexMesh_getNbPolygons_0 = Module["_emscripten_bind_PxConvexMesh_getNbPolygons_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getNbPolygons_0");
        var _emscripten_bind_PxConvexMesh_getPolygonData_2 = Module["_emscripten_bind_PxConvexMesh_getPolygonData_2"] = createExportWrapper("emscripten_bind_PxConvexMesh_getPolygonData_2");
        var _emscripten_bind_PxConvexMesh_getReferenceCount_0 = Module["_emscripten_bind_PxConvexMesh_getReferenceCount_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getReferenceCount_0");
        var _emscripten_bind_PxConvexMesh_acquireReference_0 = Module["_emscripten_bind_PxConvexMesh_acquireReference_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_acquireReference_0");
        var _emscripten_bind_PxConvexMesh_getLocalBounds_0 = Module["_emscripten_bind_PxConvexMesh_getLocalBounds_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getLocalBounds_0");
        var _emscripten_bind_PxConvexMesh_isGpuCompatible_0 = Module["_emscripten_bind_PxConvexMesh_isGpuCompatible_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_isGpuCompatible_0");
        var _emscripten_bind_PxConvexMesh_getConcreteTypeName_0 = Module["_emscripten_bind_PxConvexMesh_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getConcreteTypeName_0");
        var _emscripten_bind_PxConvexMesh_getConcreteType_0 = Module["_emscripten_bind_PxConvexMesh_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getConcreteType_0");
        var _emscripten_bind_PxConvexMesh_setBaseFlag_2 = Module["_emscripten_bind_PxConvexMesh_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxConvexMesh_setBaseFlag_2");
        var _emscripten_bind_PxConvexMesh_setBaseFlags_1 = Module["_emscripten_bind_PxConvexMesh_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxConvexMesh_setBaseFlags_1");
        var _emscripten_bind_PxConvexMesh_getBaseFlags_0 = Module["_emscripten_bind_PxConvexMesh_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_getBaseFlags_0");
        var _emscripten_bind_PxConvexMesh_isReleasable_0 = Module["_emscripten_bind_PxConvexMesh_isReleasable_0"] = createExportWrapper("emscripten_bind_PxConvexMesh_isReleasable_0");
        var _emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_1 = Module["_emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_1"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_1");
        var _emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_2 = Module["_emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_2"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_2");
        var _emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_3 = Module["_emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_3"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_3");
        var _emscripten_bind_PxConvexMeshGeometry_isValid_0 = Module["_emscripten_bind_PxConvexMeshGeometry_isValid_0"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry_isValid_0");
        var _emscripten_bind_PxConvexMeshGeometry_getType_0 = Module["_emscripten_bind_PxConvexMeshGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry_getType_0");
        var _emscripten_bind_PxConvexMeshGeometry_get_scale_0 = Module["_emscripten_bind_PxConvexMeshGeometry_get_scale_0"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry_get_scale_0");
        var _emscripten_bind_PxConvexMeshGeometry_set_scale_1 = Module["_emscripten_bind_PxConvexMeshGeometry_set_scale_1"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry_set_scale_1");
        var _emscripten_bind_PxConvexMeshGeometry___destroy___0 = Module["_emscripten_bind_PxConvexMeshGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometry___destroy___0");
        var _emscripten_bind_PxConvexMeshGeometryFlags_PxConvexMeshGeometryFlags_1 = Module["_emscripten_bind_PxConvexMeshGeometryFlags_PxConvexMeshGeometryFlags_1"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometryFlags_PxConvexMeshGeometryFlags_1");
        var _emscripten_bind_PxConvexMeshGeometryFlags_isSet_1 = Module["_emscripten_bind_PxConvexMeshGeometryFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometryFlags_isSet_1");
        var _emscripten_bind_PxConvexMeshGeometryFlags_set_1 = Module["_emscripten_bind_PxConvexMeshGeometryFlags_set_1"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometryFlags_set_1");
        var _emscripten_bind_PxConvexMeshGeometryFlags_clear_1 = Module["_emscripten_bind_PxConvexMeshGeometryFlags_clear_1"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometryFlags_clear_1");
        var _emscripten_bind_PxConvexMeshGeometryFlags___destroy___0 = Module["_emscripten_bind_PxConvexMeshGeometryFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxConvexMeshGeometryFlags___destroy___0");
        var _emscripten_bind_PxGeometryHolder_PxGeometryHolder_0 = Module["_emscripten_bind_PxGeometryHolder_PxGeometryHolder_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_PxGeometryHolder_0");
        var _emscripten_bind_PxGeometryHolder_PxGeometryHolder_1 = Module["_emscripten_bind_PxGeometryHolder_PxGeometryHolder_1"] = createExportWrapper("emscripten_bind_PxGeometryHolder_PxGeometryHolder_1");
        var _emscripten_bind_PxGeometryHolder_getType_0 = Module["_emscripten_bind_PxGeometryHolder_getType_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_getType_0");
        var _emscripten_bind_PxGeometryHolder_sphere_0 = Module["_emscripten_bind_PxGeometryHolder_sphere_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_sphere_0");
        var _emscripten_bind_PxGeometryHolder_plane_0 = Module["_emscripten_bind_PxGeometryHolder_plane_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_plane_0");
        var _emscripten_bind_PxGeometryHolder_capsule_0 = Module["_emscripten_bind_PxGeometryHolder_capsule_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_capsule_0");
        var _emscripten_bind_PxGeometryHolder_box_0 = Module["_emscripten_bind_PxGeometryHolder_box_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_box_0");
        var _emscripten_bind_PxGeometryHolder_convexMesh_0 = Module["_emscripten_bind_PxGeometryHolder_convexMesh_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_convexMesh_0");
        var _emscripten_bind_PxGeometryHolder_triangleMesh_0 = Module["_emscripten_bind_PxGeometryHolder_triangleMesh_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_triangleMesh_0");
        var _emscripten_bind_PxGeometryHolder_heightField_0 = Module["_emscripten_bind_PxGeometryHolder_heightField_0"] = createExportWrapper("emscripten_bind_PxGeometryHolder_heightField_0");
        var _emscripten_bind_PxGeometryHolder_storeAny_1 = Module["_emscripten_bind_PxGeometryHolder_storeAny_1"] = createExportWrapper("emscripten_bind_PxGeometryHolder_storeAny_1");
        var _emscripten_bind_PxGeometryHolder___destroy___0 = Module["_emscripten_bind_PxGeometryHolder___destroy___0"] = createExportWrapper("emscripten_bind_PxGeometryHolder___destroy___0");
        var _emscripten_bind_PxGeometryQuery_sweep_7 = Module["_emscripten_bind_PxGeometryQuery_sweep_7"] = createExportWrapper("emscripten_bind_PxGeometryQuery_sweep_7");
        var _emscripten_bind_PxGeometryQuery_sweep_8 = Module["_emscripten_bind_PxGeometryQuery_sweep_8"] = createExportWrapper("emscripten_bind_PxGeometryQuery_sweep_8");
        var _emscripten_bind_PxGeometryQuery_sweep_9 = Module["_emscripten_bind_PxGeometryQuery_sweep_9"] = createExportWrapper("emscripten_bind_PxGeometryQuery_sweep_9");
        var _emscripten_bind_PxGeometryQuery_overlap_4 = Module["_emscripten_bind_PxGeometryQuery_overlap_4"] = createExportWrapper("emscripten_bind_PxGeometryQuery_overlap_4");
        var _emscripten_bind_PxGeometryQuery_raycast_8 = Module["_emscripten_bind_PxGeometryQuery_raycast_8"] = createExportWrapper("emscripten_bind_PxGeometryQuery_raycast_8");
        var _emscripten_bind_PxGeometryQuery_pointDistance_3 = Module["_emscripten_bind_PxGeometryQuery_pointDistance_3"] = createExportWrapper("emscripten_bind_PxGeometryQuery_pointDistance_3");
        var _emscripten_bind_PxGeometryQuery_pointDistance_4 = Module["_emscripten_bind_PxGeometryQuery_pointDistance_4"] = createExportWrapper("emscripten_bind_PxGeometryQuery_pointDistance_4");
        var _emscripten_bind_PxGeometryQuery_getWorldBounds_2 = Module["_emscripten_bind_PxGeometryQuery_getWorldBounds_2"] = createExportWrapper("emscripten_bind_PxGeometryQuery_getWorldBounds_2");
        var _emscripten_bind_PxGeometryQuery_getWorldBounds_3 = Module["_emscripten_bind_PxGeometryQuery_getWorldBounds_3"] = createExportWrapper("emscripten_bind_PxGeometryQuery_getWorldBounds_3");
        var _emscripten_bind_PxGeometryQuery_isValid_1 = Module["_emscripten_bind_PxGeometryQuery_isValid_1"] = createExportWrapper("emscripten_bind_PxGeometryQuery_isValid_1");
        var _emscripten_bind_PxGeometryQuery___destroy___0 = Module["_emscripten_bind_PxGeometryQuery___destroy___0"] = createExportWrapper("emscripten_bind_PxGeometryQuery___destroy___0");
        var _emscripten_bind_PxHeightField_saveCells_2 = Module["_emscripten_bind_PxHeightField_saveCells_2"] = createExportWrapper("emscripten_bind_PxHeightField_saveCells_2");
        var _emscripten_bind_PxHeightField_modifySamples_3 = Module["_emscripten_bind_PxHeightField_modifySamples_3"] = createExportWrapper("emscripten_bind_PxHeightField_modifySamples_3");
        var _emscripten_bind_PxHeightField_modifySamples_4 = Module["_emscripten_bind_PxHeightField_modifySamples_4"] = createExportWrapper("emscripten_bind_PxHeightField_modifySamples_4");
        var _emscripten_bind_PxHeightField_getNbRows_0 = Module["_emscripten_bind_PxHeightField_getNbRows_0"] = createExportWrapper("emscripten_bind_PxHeightField_getNbRows_0");
        var _emscripten_bind_PxHeightField_getNbColumns_0 = Module["_emscripten_bind_PxHeightField_getNbColumns_0"] = createExportWrapper("emscripten_bind_PxHeightField_getNbColumns_0");
        var _emscripten_bind_PxHeightField_getFormat_0 = Module["_emscripten_bind_PxHeightField_getFormat_0"] = createExportWrapper("emscripten_bind_PxHeightField_getFormat_0");
        var _emscripten_bind_PxHeightField_getSampleStride_0 = Module["_emscripten_bind_PxHeightField_getSampleStride_0"] = createExportWrapper("emscripten_bind_PxHeightField_getSampleStride_0");
        var _emscripten_bind_PxHeightField_getConvexEdgeThreshold_0 = Module["_emscripten_bind_PxHeightField_getConvexEdgeThreshold_0"] = createExportWrapper("emscripten_bind_PxHeightField_getConvexEdgeThreshold_0");
        var _emscripten_bind_PxHeightField_getFlags_0 = Module["_emscripten_bind_PxHeightField_getFlags_0"] = createExportWrapper("emscripten_bind_PxHeightField_getFlags_0");
        var _emscripten_bind_PxHeightField_getHeight_2 = Module["_emscripten_bind_PxHeightField_getHeight_2"] = createExportWrapper("emscripten_bind_PxHeightField_getHeight_2");
        var _emscripten_bind_PxHeightField_getReferenceCount_0 = Module["_emscripten_bind_PxHeightField_getReferenceCount_0"] = createExportWrapper("emscripten_bind_PxHeightField_getReferenceCount_0");
        var _emscripten_bind_PxHeightField_acquireReference_0 = Module["_emscripten_bind_PxHeightField_acquireReference_0"] = createExportWrapper("emscripten_bind_PxHeightField_acquireReference_0");
        var _emscripten_bind_PxHeightField_getTriangleMaterialIndex_1 = Module["_emscripten_bind_PxHeightField_getTriangleMaterialIndex_1"] = createExportWrapper("emscripten_bind_PxHeightField_getTriangleMaterialIndex_1");
        var _emscripten_bind_PxHeightField_getTriangleNormal_1 = Module["_emscripten_bind_PxHeightField_getTriangleNormal_1"] = createExportWrapper("emscripten_bind_PxHeightField_getTriangleNormal_1");
        var _emscripten_bind_PxHeightField_getSample_2 = Module["_emscripten_bind_PxHeightField_getSample_2"] = createExportWrapper("emscripten_bind_PxHeightField_getSample_2");
        var _emscripten_bind_PxHeightField_getTimestamp_0 = Module["_emscripten_bind_PxHeightField_getTimestamp_0"] = createExportWrapper("emscripten_bind_PxHeightField_getTimestamp_0");
        var _emscripten_bind_PxHeightField_getConcreteTypeName_0 = Module["_emscripten_bind_PxHeightField_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxHeightField_getConcreteTypeName_0");
        var _emscripten_bind_PxHeightField_getConcreteType_0 = Module["_emscripten_bind_PxHeightField_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxHeightField_getConcreteType_0");
        var _emscripten_bind_PxHeightField_setBaseFlag_2 = Module["_emscripten_bind_PxHeightField_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxHeightField_setBaseFlag_2");
        var _emscripten_bind_PxHeightField_setBaseFlags_1 = Module["_emscripten_bind_PxHeightField_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxHeightField_setBaseFlags_1");
        var _emscripten_bind_PxHeightField_getBaseFlags_0 = Module["_emscripten_bind_PxHeightField_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxHeightField_getBaseFlags_0");
        var _emscripten_bind_PxHeightField_isReleasable_0 = Module["_emscripten_bind_PxHeightField_isReleasable_0"] = createExportWrapper("emscripten_bind_PxHeightField_isReleasable_0");
        var _emscripten_bind_PxHeightFieldDesc_PxHeightFieldDesc_0 = Module["_emscripten_bind_PxHeightFieldDesc_PxHeightFieldDesc_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_PxHeightFieldDesc_0");
        var _emscripten_bind_PxHeightFieldDesc_setToDefault_0 = Module["_emscripten_bind_PxHeightFieldDesc_setToDefault_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_setToDefault_0");
        var _emscripten_bind_PxHeightFieldDesc_isValid_0 = Module["_emscripten_bind_PxHeightFieldDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_isValid_0");
        var _emscripten_bind_PxHeightFieldDesc_get_nbRows_0 = Module["_emscripten_bind_PxHeightFieldDesc_get_nbRows_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_get_nbRows_0");
        var _emscripten_bind_PxHeightFieldDesc_set_nbRows_1 = Module["_emscripten_bind_PxHeightFieldDesc_set_nbRows_1"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_set_nbRows_1");
        var _emscripten_bind_PxHeightFieldDesc_get_nbColumns_0 = Module["_emscripten_bind_PxHeightFieldDesc_get_nbColumns_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_get_nbColumns_0");
        var _emscripten_bind_PxHeightFieldDesc_set_nbColumns_1 = Module["_emscripten_bind_PxHeightFieldDesc_set_nbColumns_1"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_set_nbColumns_1");
        var _emscripten_bind_PxHeightFieldDesc_get_format_0 = Module["_emscripten_bind_PxHeightFieldDesc_get_format_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_get_format_0");
        var _emscripten_bind_PxHeightFieldDesc_set_format_1 = Module["_emscripten_bind_PxHeightFieldDesc_set_format_1"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_set_format_1");
        var _emscripten_bind_PxHeightFieldDesc_get_samples_0 = Module["_emscripten_bind_PxHeightFieldDesc_get_samples_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_get_samples_0");
        var _emscripten_bind_PxHeightFieldDesc_set_samples_1 = Module["_emscripten_bind_PxHeightFieldDesc_set_samples_1"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_set_samples_1");
        var _emscripten_bind_PxHeightFieldDesc_get_convexEdgeThreshold_0 = Module["_emscripten_bind_PxHeightFieldDesc_get_convexEdgeThreshold_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_get_convexEdgeThreshold_0");
        var _emscripten_bind_PxHeightFieldDesc_set_convexEdgeThreshold_1 = Module["_emscripten_bind_PxHeightFieldDesc_set_convexEdgeThreshold_1"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_set_convexEdgeThreshold_1");
        var _emscripten_bind_PxHeightFieldDesc_get_flags_0 = Module["_emscripten_bind_PxHeightFieldDesc_get_flags_0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_get_flags_0");
        var _emscripten_bind_PxHeightFieldDesc_set_flags_1 = Module["_emscripten_bind_PxHeightFieldDesc_set_flags_1"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc_set_flags_1");
        var _emscripten_bind_PxHeightFieldDesc___destroy___0 = Module["_emscripten_bind_PxHeightFieldDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxHeightFieldDesc___destroy___0");
        var _emscripten_bind_PxHeightFieldFlags_PxHeightFieldFlags_1 = Module["_emscripten_bind_PxHeightFieldFlags_PxHeightFieldFlags_1"] = createExportWrapper("emscripten_bind_PxHeightFieldFlags_PxHeightFieldFlags_1");
        var _emscripten_bind_PxHeightFieldFlags_isSet_1 = Module["_emscripten_bind_PxHeightFieldFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxHeightFieldFlags_isSet_1");
        var _emscripten_bind_PxHeightFieldFlags_set_1 = Module["_emscripten_bind_PxHeightFieldFlags_set_1"] = createExportWrapper("emscripten_bind_PxHeightFieldFlags_set_1");
        var _emscripten_bind_PxHeightFieldFlags_clear_1 = Module["_emscripten_bind_PxHeightFieldFlags_clear_1"] = createExportWrapper("emscripten_bind_PxHeightFieldFlags_clear_1");
        var _emscripten_bind_PxHeightFieldFlags___destroy___0 = Module["_emscripten_bind_PxHeightFieldFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxHeightFieldFlags___destroy___0");
        var _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_0 = Module["_emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_0");
        var _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_5 = Module["_emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_5"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_5");
        var _emscripten_bind_PxHeightFieldGeometry_isValid_0 = Module["_emscripten_bind_PxHeightFieldGeometry_isValid_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_isValid_0");
        var _emscripten_bind_PxHeightFieldGeometry_getType_0 = Module["_emscripten_bind_PxHeightFieldGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_getType_0");
        var _emscripten_bind_PxHeightFieldGeometry_get_heightField_0 = Module["_emscripten_bind_PxHeightFieldGeometry_get_heightField_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_get_heightField_0");
        var _emscripten_bind_PxHeightFieldGeometry_set_heightField_1 = Module["_emscripten_bind_PxHeightFieldGeometry_set_heightField_1"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_set_heightField_1");
        var _emscripten_bind_PxHeightFieldGeometry_get_heightScale_0 = Module["_emscripten_bind_PxHeightFieldGeometry_get_heightScale_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_get_heightScale_0");
        var _emscripten_bind_PxHeightFieldGeometry_set_heightScale_1 = Module["_emscripten_bind_PxHeightFieldGeometry_set_heightScale_1"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_set_heightScale_1");
        var _emscripten_bind_PxHeightFieldGeometry_get_rowScale_0 = Module["_emscripten_bind_PxHeightFieldGeometry_get_rowScale_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_get_rowScale_0");
        var _emscripten_bind_PxHeightFieldGeometry_set_rowScale_1 = Module["_emscripten_bind_PxHeightFieldGeometry_set_rowScale_1"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_set_rowScale_1");
        var _emscripten_bind_PxHeightFieldGeometry_get_columnScale_0 = Module["_emscripten_bind_PxHeightFieldGeometry_get_columnScale_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_get_columnScale_0");
        var _emscripten_bind_PxHeightFieldGeometry_set_columnScale_1 = Module["_emscripten_bind_PxHeightFieldGeometry_set_columnScale_1"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_set_columnScale_1");
        var _emscripten_bind_PxHeightFieldGeometry_get_heightFieldFlags_0 = Module["_emscripten_bind_PxHeightFieldGeometry_get_heightFieldFlags_0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_get_heightFieldFlags_0");
        var _emscripten_bind_PxHeightFieldGeometry_set_heightFieldFlags_1 = Module["_emscripten_bind_PxHeightFieldGeometry_set_heightFieldFlags_1"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry_set_heightFieldFlags_1");
        var _emscripten_bind_PxHeightFieldGeometry___destroy___0 = Module["_emscripten_bind_PxHeightFieldGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxHeightFieldGeometry___destroy___0");
        var _emscripten_bind_PxHeightFieldSample_get_height_0 = Module["_emscripten_bind_PxHeightFieldSample_get_height_0"] = createExportWrapper("emscripten_bind_PxHeightFieldSample_get_height_0");
        var _emscripten_bind_PxHeightFieldSample_set_height_1 = Module["_emscripten_bind_PxHeightFieldSample_set_height_1"] = createExportWrapper("emscripten_bind_PxHeightFieldSample_set_height_1");
        var _emscripten_bind_PxHeightFieldSample_get_materialIndex0_0 = Module["_emscripten_bind_PxHeightFieldSample_get_materialIndex0_0"] = createExportWrapper("emscripten_bind_PxHeightFieldSample_get_materialIndex0_0");
        var _emscripten_bind_PxHeightFieldSample_set_materialIndex0_1 = Module["_emscripten_bind_PxHeightFieldSample_set_materialIndex0_1"] = createExportWrapper("emscripten_bind_PxHeightFieldSample_set_materialIndex0_1");
        var _emscripten_bind_PxHeightFieldSample_get_materialIndex1_0 = Module["_emscripten_bind_PxHeightFieldSample_get_materialIndex1_0"] = createExportWrapper("emscripten_bind_PxHeightFieldSample_get_materialIndex1_0");
        var _emscripten_bind_PxHeightFieldSample_set_materialIndex1_1 = Module["_emscripten_bind_PxHeightFieldSample_set_materialIndex1_1"] = createExportWrapper("emscripten_bind_PxHeightFieldSample_set_materialIndex1_1");
        var _emscripten_bind_PxHeightFieldSample___destroy___0 = Module["_emscripten_bind_PxHeightFieldSample___destroy___0"] = createExportWrapper("emscripten_bind_PxHeightFieldSample___destroy___0");
        var _emscripten_bind_PxHullPolygon_PxHullPolygon_0 = Module["_emscripten_bind_PxHullPolygon_PxHullPolygon_0"] = createExportWrapper("emscripten_bind_PxHullPolygon_PxHullPolygon_0");
        var _emscripten_bind_PxHullPolygon_get_mPlane_1 = Module["_emscripten_bind_PxHullPolygon_get_mPlane_1"] = createExportWrapper("emscripten_bind_PxHullPolygon_get_mPlane_1");
        var _emscripten_bind_PxHullPolygon_set_mPlane_2 = Module["_emscripten_bind_PxHullPolygon_set_mPlane_2"] = createExportWrapper("emscripten_bind_PxHullPolygon_set_mPlane_2");
        var _emscripten_bind_PxHullPolygon_get_mNbVerts_0 = Module["_emscripten_bind_PxHullPolygon_get_mNbVerts_0"] = createExportWrapper("emscripten_bind_PxHullPolygon_get_mNbVerts_0");
        var _emscripten_bind_PxHullPolygon_set_mNbVerts_1 = Module["_emscripten_bind_PxHullPolygon_set_mNbVerts_1"] = createExportWrapper("emscripten_bind_PxHullPolygon_set_mNbVerts_1");
        var _emscripten_bind_PxHullPolygon_get_mIndexBase_0 = Module["_emscripten_bind_PxHullPolygon_get_mIndexBase_0"] = createExportWrapper("emscripten_bind_PxHullPolygon_get_mIndexBase_0");
        var _emscripten_bind_PxHullPolygon_set_mIndexBase_1 = Module["_emscripten_bind_PxHullPolygon_set_mIndexBase_1"] = createExportWrapper("emscripten_bind_PxHullPolygon_set_mIndexBase_1");
        var _emscripten_bind_PxHullPolygon___destroy___0 = Module["_emscripten_bind_PxHullPolygon___destroy___0"] = createExportWrapper("emscripten_bind_PxHullPolygon___destroy___0");
        var _emscripten_bind_PxMeshFlags_PxMeshFlags_1 = Module["_emscripten_bind_PxMeshFlags_PxMeshFlags_1"] = createExportWrapper("emscripten_bind_PxMeshFlags_PxMeshFlags_1");
        var _emscripten_bind_PxMeshFlags_isSet_1 = Module["_emscripten_bind_PxMeshFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxMeshFlags_isSet_1");
        var _emscripten_bind_PxMeshFlags_set_1 = Module["_emscripten_bind_PxMeshFlags_set_1"] = createExportWrapper("emscripten_bind_PxMeshFlags_set_1");
        var _emscripten_bind_PxMeshFlags_clear_1 = Module["_emscripten_bind_PxMeshFlags_clear_1"] = createExportWrapper("emscripten_bind_PxMeshFlags_clear_1");
        var _emscripten_bind_PxMeshFlags___destroy___0 = Module["_emscripten_bind_PxMeshFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxMeshFlags___destroy___0");
        var _emscripten_bind_PxMeshGeometryFlags_PxMeshGeometryFlags_1 = Module["_emscripten_bind_PxMeshGeometryFlags_PxMeshGeometryFlags_1"] = createExportWrapper("emscripten_bind_PxMeshGeometryFlags_PxMeshGeometryFlags_1");
        var _emscripten_bind_PxMeshGeometryFlags_isSet_1 = Module["_emscripten_bind_PxMeshGeometryFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxMeshGeometryFlags_isSet_1");
        var _emscripten_bind_PxMeshGeometryFlags_set_1 = Module["_emscripten_bind_PxMeshGeometryFlags_set_1"] = createExportWrapper("emscripten_bind_PxMeshGeometryFlags_set_1");
        var _emscripten_bind_PxMeshGeometryFlags_clear_1 = Module["_emscripten_bind_PxMeshGeometryFlags_clear_1"] = createExportWrapper("emscripten_bind_PxMeshGeometryFlags_clear_1");
        var _emscripten_bind_PxMeshGeometryFlags___destroy___0 = Module["_emscripten_bind_PxMeshGeometryFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxMeshGeometryFlags___destroy___0");
        var _emscripten_bind_PxMeshScale_PxMeshScale_0 = Module["_emscripten_bind_PxMeshScale_PxMeshScale_0"] = createExportWrapper("emscripten_bind_PxMeshScale_PxMeshScale_0");
        var _emscripten_bind_PxMeshScale_PxMeshScale_1 = Module["_emscripten_bind_PxMeshScale_PxMeshScale_1"] = createExportWrapper("emscripten_bind_PxMeshScale_PxMeshScale_1");
        var _emscripten_bind_PxMeshScale_PxMeshScale_2 = Module["_emscripten_bind_PxMeshScale_PxMeshScale_2"] = createExportWrapper("emscripten_bind_PxMeshScale_PxMeshScale_2");
        var _emscripten_bind_PxMeshScale_get_scale_0 = Module["_emscripten_bind_PxMeshScale_get_scale_0"] = createExportWrapper("emscripten_bind_PxMeshScale_get_scale_0");
        var _emscripten_bind_PxMeshScale_set_scale_1 = Module["_emscripten_bind_PxMeshScale_set_scale_1"] = createExportWrapper("emscripten_bind_PxMeshScale_set_scale_1");
        var _emscripten_bind_PxMeshScale_get_rotation_0 = Module["_emscripten_bind_PxMeshScale_get_rotation_0"] = createExportWrapper("emscripten_bind_PxMeshScale_get_rotation_0");
        var _emscripten_bind_PxMeshScale_set_rotation_1 = Module["_emscripten_bind_PxMeshScale_set_rotation_1"] = createExportWrapper("emscripten_bind_PxMeshScale_set_rotation_1");
        var _emscripten_bind_PxMeshScale___destroy___0 = Module["_emscripten_bind_PxMeshScale___destroy___0"] = createExportWrapper("emscripten_bind_PxMeshScale___destroy___0");
        var _emscripten_bind_PxPlaneGeometry_PxPlaneGeometry_0 = Module["_emscripten_bind_PxPlaneGeometry_PxPlaneGeometry_0"] = createExportWrapper("emscripten_bind_PxPlaneGeometry_PxPlaneGeometry_0");
        var _emscripten_bind_PxPlaneGeometry_getType_0 = Module["_emscripten_bind_PxPlaneGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxPlaneGeometry_getType_0");
        var _emscripten_bind_PxPlaneGeometry___destroy___0 = Module["_emscripten_bind_PxPlaneGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxPlaneGeometry___destroy___0");
        var _emscripten_bind_PxSphereGeometry_PxSphereGeometry_1 = Module["_emscripten_bind_PxSphereGeometry_PxSphereGeometry_1"] = createExportWrapper("emscripten_bind_PxSphereGeometry_PxSphereGeometry_1");
        var _emscripten_bind_PxSphereGeometry_isValid_0 = Module["_emscripten_bind_PxSphereGeometry_isValid_0"] = createExportWrapper("emscripten_bind_PxSphereGeometry_isValid_0");
        var _emscripten_bind_PxSphereGeometry_getType_0 = Module["_emscripten_bind_PxSphereGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxSphereGeometry_getType_0");
        var _emscripten_bind_PxSphereGeometry_get_radius_0 = Module["_emscripten_bind_PxSphereGeometry_get_radius_0"] = createExportWrapper("emscripten_bind_PxSphereGeometry_get_radius_0");
        var _emscripten_bind_PxSphereGeometry_set_radius_1 = Module["_emscripten_bind_PxSphereGeometry_set_radius_1"] = createExportWrapper("emscripten_bind_PxSphereGeometry_set_radius_1");
        var _emscripten_bind_PxSphereGeometry___destroy___0 = Module["_emscripten_bind_PxSphereGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxSphereGeometry___destroy___0");
        var _emscripten_bind_PxTriangle_PxTriangle_0 = Module["_emscripten_bind_PxTriangle_PxTriangle_0"] = createExportWrapper("emscripten_bind_PxTriangle_PxTriangle_0");
        var _emscripten_bind_PxTriangle_PxTriangle_3 = Module["_emscripten_bind_PxTriangle_PxTriangle_3"] = createExportWrapper("emscripten_bind_PxTriangle_PxTriangle_3");
        var _emscripten_bind_PxTriangle_normal_1 = Module["_emscripten_bind_PxTriangle_normal_1"] = createExportWrapper("emscripten_bind_PxTriangle_normal_1");
        var _emscripten_bind_PxTriangle_denormalizedNormal_1 = Module["_emscripten_bind_PxTriangle_denormalizedNormal_1"] = createExportWrapper("emscripten_bind_PxTriangle_denormalizedNormal_1");
        var _emscripten_bind_PxTriangle_area_0 = Module["_emscripten_bind_PxTriangle_area_0"] = createExportWrapper("emscripten_bind_PxTriangle_area_0");
        var _emscripten_bind_PxTriangle_pointFromUV_2 = Module["_emscripten_bind_PxTriangle_pointFromUV_2"] = createExportWrapper("emscripten_bind_PxTriangle_pointFromUV_2");
        var _emscripten_bind_PxTriangle___destroy___0 = Module["_emscripten_bind_PxTriangle___destroy___0"] = createExportWrapper("emscripten_bind_PxTriangle___destroy___0");
        var _emscripten_bind_PxTriangleMesh_getNbVertices_0 = Module["_emscripten_bind_PxTriangleMesh_getNbVertices_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getNbVertices_0");
        var _emscripten_bind_PxTriangleMesh_getVertices_0 = Module["_emscripten_bind_PxTriangleMesh_getVertices_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getVertices_0");
        var _emscripten_bind_PxTriangleMesh_getVerticesForModification_0 = Module["_emscripten_bind_PxTriangleMesh_getVerticesForModification_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getVerticesForModification_0");
        var _emscripten_bind_PxTriangleMesh_refitBVH_0 = Module["_emscripten_bind_PxTriangleMesh_refitBVH_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_refitBVH_0");
        var _emscripten_bind_PxTriangleMesh_getNbTriangles_0 = Module["_emscripten_bind_PxTriangleMesh_getNbTriangles_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getNbTriangles_0");
        var _emscripten_bind_PxTriangleMesh_getTriangles_0 = Module["_emscripten_bind_PxTriangleMesh_getTriangles_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getTriangles_0");
        var _emscripten_bind_PxTriangleMesh_getTriangleMeshFlags_0 = Module["_emscripten_bind_PxTriangleMesh_getTriangleMeshFlags_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getTriangleMeshFlags_0");
        var _emscripten_bind_PxTriangleMesh_getTrianglesRemap_0 = Module["_emscripten_bind_PxTriangleMesh_getTrianglesRemap_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getTrianglesRemap_0");
        var _emscripten_bind_PxTriangleMesh_getTriangleMaterialIndex_1 = Module["_emscripten_bind_PxTriangleMesh_getTriangleMaterialIndex_1"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getTriangleMaterialIndex_1");
        var _emscripten_bind_PxTriangleMesh_getLocalBounds_0 = Module["_emscripten_bind_PxTriangleMesh_getLocalBounds_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getLocalBounds_0");
        var _emscripten_bind_PxTriangleMesh_getReferenceCount_0 = Module["_emscripten_bind_PxTriangleMesh_getReferenceCount_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getReferenceCount_0");
        var _emscripten_bind_PxTriangleMesh_acquireReference_0 = Module["_emscripten_bind_PxTriangleMesh_acquireReference_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_acquireReference_0");
        var _emscripten_bind_PxTriangleMesh_getConcreteTypeName_0 = Module["_emscripten_bind_PxTriangleMesh_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getConcreteTypeName_0");
        var _emscripten_bind_PxTriangleMesh_getConcreteType_0 = Module["_emscripten_bind_PxTriangleMesh_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getConcreteType_0");
        var _emscripten_bind_PxTriangleMesh_setBaseFlag_2 = Module["_emscripten_bind_PxTriangleMesh_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxTriangleMesh_setBaseFlag_2");
        var _emscripten_bind_PxTriangleMesh_setBaseFlags_1 = Module["_emscripten_bind_PxTriangleMesh_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxTriangleMesh_setBaseFlags_1");
        var _emscripten_bind_PxTriangleMesh_getBaseFlags_0 = Module["_emscripten_bind_PxTriangleMesh_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_getBaseFlags_0");
        var _emscripten_bind_PxTriangleMesh_isReleasable_0 = Module["_emscripten_bind_PxTriangleMesh_isReleasable_0"] = createExportWrapper("emscripten_bind_PxTriangleMesh_isReleasable_0");
        var _emscripten_bind_PxTriangleMeshFlags_PxTriangleMeshFlags_1 = Module["_emscripten_bind_PxTriangleMeshFlags_PxTriangleMeshFlags_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshFlags_PxTriangleMeshFlags_1");
        var _emscripten_bind_PxTriangleMeshFlags_isSet_1 = Module["_emscripten_bind_PxTriangleMeshFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshFlags_isSet_1");
        var _emscripten_bind_PxTriangleMeshFlags_set_1 = Module["_emscripten_bind_PxTriangleMeshFlags_set_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshFlags_set_1");
        var _emscripten_bind_PxTriangleMeshFlags_clear_1 = Module["_emscripten_bind_PxTriangleMeshFlags_clear_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshFlags_clear_1");
        var _emscripten_bind_PxTriangleMeshFlags___destroy___0 = Module["_emscripten_bind_PxTriangleMeshFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxTriangleMeshFlags___destroy___0");
        var _emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_1 = Module["_emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_1");
        var _emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_2 = Module["_emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_2"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_2");
        var _emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_3 = Module["_emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_3"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_3");
        var _emscripten_bind_PxTriangleMeshGeometry_isValid_0 = Module["_emscripten_bind_PxTriangleMeshGeometry_isValid_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry_isValid_0");
        var _emscripten_bind_PxTriangleMeshGeometry_getType_0 = Module["_emscripten_bind_PxTriangleMeshGeometry_getType_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry_getType_0");
        var _emscripten_bind_PxTriangleMeshGeometry_get_scale_0 = Module["_emscripten_bind_PxTriangleMeshGeometry_get_scale_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry_get_scale_0");
        var _emscripten_bind_PxTriangleMeshGeometry_set_scale_1 = Module["_emscripten_bind_PxTriangleMeshGeometry_set_scale_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry_set_scale_1");
        var _emscripten_bind_PxTriangleMeshGeometry___destroy___0 = Module["_emscripten_bind_PxTriangleMeshGeometry___destroy___0"] = createExportWrapper("emscripten_bind_PxTriangleMeshGeometry___destroy___0");
        var _emscripten_bind_PxBVH33MidphaseDesc_setToDefault_0 = Module["_emscripten_bind_PxBVH33MidphaseDesc_setToDefault_0"] = createExportWrapper("emscripten_bind_PxBVH33MidphaseDesc_setToDefault_0");
        var _emscripten_bind_PxBVH33MidphaseDesc_isValid_0 = Module["_emscripten_bind_PxBVH33MidphaseDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxBVH33MidphaseDesc_isValid_0");
        var _emscripten_bind_PxBVH33MidphaseDesc_get_meshSizePerformanceTradeOff_0 = Module["_emscripten_bind_PxBVH33MidphaseDesc_get_meshSizePerformanceTradeOff_0"] = createExportWrapper("emscripten_bind_PxBVH33MidphaseDesc_get_meshSizePerformanceTradeOff_0");
        var _emscripten_bind_PxBVH33MidphaseDesc_set_meshSizePerformanceTradeOff_1 = Module["_emscripten_bind_PxBVH33MidphaseDesc_set_meshSizePerformanceTradeOff_1"] = createExportWrapper("emscripten_bind_PxBVH33MidphaseDesc_set_meshSizePerformanceTradeOff_1");
        var _emscripten_bind_PxBVH33MidphaseDesc_get_meshCookingHint_0 = Module["_emscripten_bind_PxBVH33MidphaseDesc_get_meshCookingHint_0"] = createExportWrapper("emscripten_bind_PxBVH33MidphaseDesc_get_meshCookingHint_0");
        var _emscripten_bind_PxBVH33MidphaseDesc_set_meshCookingHint_1 = Module["_emscripten_bind_PxBVH33MidphaseDesc_set_meshCookingHint_1"] = createExportWrapper("emscripten_bind_PxBVH33MidphaseDesc_set_meshCookingHint_1");
        var _emscripten_bind_PxBVH33MidphaseDesc___destroy___0 = Module["_emscripten_bind_PxBVH33MidphaseDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxBVH33MidphaseDesc___destroy___0");
        var _emscripten_bind_PxBVH34MidphaseDesc_setToDefault_0 = Module["_emscripten_bind_PxBVH34MidphaseDesc_setToDefault_0"] = createExportWrapper("emscripten_bind_PxBVH34MidphaseDesc_setToDefault_0");
        var _emscripten_bind_PxBVH34MidphaseDesc_isValid_0 = Module["_emscripten_bind_PxBVH34MidphaseDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxBVH34MidphaseDesc_isValid_0");
        var _emscripten_bind_PxBVH34MidphaseDesc_get_numPrimsPerLeaf_0 = Module["_emscripten_bind_PxBVH34MidphaseDesc_get_numPrimsPerLeaf_0"] = createExportWrapper("emscripten_bind_PxBVH34MidphaseDesc_get_numPrimsPerLeaf_0");
        var _emscripten_bind_PxBVH34MidphaseDesc_set_numPrimsPerLeaf_1 = Module["_emscripten_bind_PxBVH34MidphaseDesc_set_numPrimsPerLeaf_1"] = createExportWrapper("emscripten_bind_PxBVH34MidphaseDesc_set_numPrimsPerLeaf_1");
        var _emscripten_bind_PxBVH34MidphaseDesc___destroy___0 = Module["_emscripten_bind_PxBVH34MidphaseDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxBVH34MidphaseDesc___destroy___0");
        var _emscripten_bind_PxConvexFlags_PxConvexFlags_1 = Module["_emscripten_bind_PxConvexFlags_PxConvexFlags_1"] = createExportWrapper("emscripten_bind_PxConvexFlags_PxConvexFlags_1");
        var _emscripten_bind_PxConvexFlags_isSet_1 = Module["_emscripten_bind_PxConvexFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxConvexFlags_isSet_1");
        var _emscripten_bind_PxConvexFlags_set_1 = Module["_emscripten_bind_PxConvexFlags_set_1"] = createExportWrapper("emscripten_bind_PxConvexFlags_set_1");
        var _emscripten_bind_PxConvexFlags_clear_1 = Module["_emscripten_bind_PxConvexFlags_clear_1"] = createExportWrapper("emscripten_bind_PxConvexFlags_clear_1");
        var _emscripten_bind_PxConvexFlags___destroy___0 = Module["_emscripten_bind_PxConvexFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxConvexFlags___destroy___0");
        var _emscripten_bind_PxConvexMeshDesc_PxConvexMeshDesc_0 = Module["_emscripten_bind_PxConvexMeshDesc_PxConvexMeshDesc_0"] = createExportWrapper("emscripten_bind_PxConvexMeshDesc_PxConvexMeshDesc_0");
        var _emscripten_bind_PxConvexMeshDesc_get_points_0 = Module["_emscripten_bind_PxConvexMeshDesc_get_points_0"] = createExportWrapper("emscripten_bind_PxConvexMeshDesc_get_points_0");
        var _emscripten_bind_PxConvexMeshDesc_set_points_1 = Module["_emscripten_bind_PxConvexMeshDesc_set_points_1"] = createExportWrapper("emscripten_bind_PxConvexMeshDesc_set_points_1");
        var _emscripten_bind_PxConvexMeshDesc_get_flags_0 = Module["_emscripten_bind_PxConvexMeshDesc_get_flags_0"] = createExportWrapper("emscripten_bind_PxConvexMeshDesc_get_flags_0");
        var _emscripten_bind_PxConvexMeshDesc_set_flags_1 = Module["_emscripten_bind_PxConvexMeshDesc_set_flags_1"] = createExportWrapper("emscripten_bind_PxConvexMeshDesc_set_flags_1");
        var _emscripten_bind_PxConvexMeshDesc___destroy___0 = Module["_emscripten_bind_PxConvexMeshDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxConvexMeshDesc___destroy___0");
        var _emscripten_bind_PxCooking_release_0 = Module["_emscripten_bind_PxCooking_release_0"] = createExportWrapper("emscripten_bind_PxCooking_release_0");
        var _emscripten_bind_PxCooking_createConvexMesh_2 = Module["_emscripten_bind_PxCooking_createConvexMesh_2"] = createExportWrapper("emscripten_bind_PxCooking_createConvexMesh_2");
        var _emscripten_bind_PxCooking_createTriangleMesh_2 = Module["_emscripten_bind_PxCooking_createTriangleMesh_2"] = createExportWrapper("emscripten_bind_PxCooking_createTriangleMesh_2");
        var _emscripten_bind_PxCooking_createHeightField_2 = Module["_emscripten_bind_PxCooking_createHeightField_2"] = createExportWrapper("emscripten_bind_PxCooking_createHeightField_2");
        var _emscripten_bind_PxCookingParams_PxCookingParams_1 = Module["_emscripten_bind_PxCookingParams_PxCookingParams_1"] = createExportWrapper("emscripten_bind_PxCookingParams_PxCookingParams_1");
        var _emscripten_bind_PxCookingParams_get_areaTestEpsilon_0 = Module["_emscripten_bind_PxCookingParams_get_areaTestEpsilon_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_areaTestEpsilon_0");
        var _emscripten_bind_PxCookingParams_set_areaTestEpsilon_1 = Module["_emscripten_bind_PxCookingParams_set_areaTestEpsilon_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_areaTestEpsilon_1");
        var _emscripten_bind_PxCookingParams_get_planeTolerance_0 = Module["_emscripten_bind_PxCookingParams_get_planeTolerance_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_planeTolerance_0");
        var _emscripten_bind_PxCookingParams_set_planeTolerance_1 = Module["_emscripten_bind_PxCookingParams_set_planeTolerance_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_planeTolerance_1");
        var _emscripten_bind_PxCookingParams_get_convexMeshCookingType_0 = Module["_emscripten_bind_PxCookingParams_get_convexMeshCookingType_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_convexMeshCookingType_0");
        var _emscripten_bind_PxCookingParams_set_convexMeshCookingType_1 = Module["_emscripten_bind_PxCookingParams_set_convexMeshCookingType_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_convexMeshCookingType_1");
        var _emscripten_bind_PxCookingParams_get_suppressTriangleMeshRemapTable_0 = Module["_emscripten_bind_PxCookingParams_get_suppressTriangleMeshRemapTable_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_suppressTriangleMeshRemapTable_0");
        var _emscripten_bind_PxCookingParams_set_suppressTriangleMeshRemapTable_1 = Module["_emscripten_bind_PxCookingParams_set_suppressTriangleMeshRemapTable_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_suppressTriangleMeshRemapTable_1");
        var _emscripten_bind_PxCookingParams_get_buildTriangleAdjacencies_0 = Module["_emscripten_bind_PxCookingParams_get_buildTriangleAdjacencies_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_buildTriangleAdjacencies_0");
        var _emscripten_bind_PxCookingParams_set_buildTriangleAdjacencies_1 = Module["_emscripten_bind_PxCookingParams_set_buildTriangleAdjacencies_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_buildTriangleAdjacencies_1");
        var _emscripten_bind_PxCookingParams_get_buildGPUData_0 = Module["_emscripten_bind_PxCookingParams_get_buildGPUData_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_buildGPUData_0");
        var _emscripten_bind_PxCookingParams_set_buildGPUData_1 = Module["_emscripten_bind_PxCookingParams_set_buildGPUData_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_buildGPUData_1");
        var _emscripten_bind_PxCookingParams_get_scale_0 = Module["_emscripten_bind_PxCookingParams_get_scale_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_scale_0");
        var _emscripten_bind_PxCookingParams_set_scale_1 = Module["_emscripten_bind_PxCookingParams_set_scale_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_scale_1");
        var _emscripten_bind_PxCookingParams_get_meshPreprocessParams_0 = Module["_emscripten_bind_PxCookingParams_get_meshPreprocessParams_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_meshPreprocessParams_0");
        var _emscripten_bind_PxCookingParams_set_meshPreprocessParams_1 = Module["_emscripten_bind_PxCookingParams_set_meshPreprocessParams_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_meshPreprocessParams_1");
        var _emscripten_bind_PxCookingParams_get_meshWeldTolerance_0 = Module["_emscripten_bind_PxCookingParams_get_meshWeldTolerance_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_meshWeldTolerance_0");
        var _emscripten_bind_PxCookingParams_set_meshWeldTolerance_1 = Module["_emscripten_bind_PxCookingParams_set_meshWeldTolerance_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_meshWeldTolerance_1");
        var _emscripten_bind_PxCookingParams_get_midphaseDesc_0 = Module["_emscripten_bind_PxCookingParams_get_midphaseDesc_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_midphaseDesc_0");
        var _emscripten_bind_PxCookingParams_set_midphaseDesc_1 = Module["_emscripten_bind_PxCookingParams_set_midphaseDesc_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_midphaseDesc_1");
        var _emscripten_bind_PxCookingParams_get_gaussMapLimit_0 = Module["_emscripten_bind_PxCookingParams_get_gaussMapLimit_0"] = createExportWrapper("emscripten_bind_PxCookingParams_get_gaussMapLimit_0");
        var _emscripten_bind_PxCookingParams_set_gaussMapLimit_1 = Module["_emscripten_bind_PxCookingParams_set_gaussMapLimit_1"] = createExportWrapper("emscripten_bind_PxCookingParams_set_gaussMapLimit_1");
        var _emscripten_bind_PxCookingParams___destroy___0 = Module["_emscripten_bind_PxCookingParams___destroy___0"] = createExportWrapper("emscripten_bind_PxCookingParams___destroy___0");
        var _emscripten_bind_PxMeshPreprocessingFlags_PxMeshPreprocessingFlags_1 = Module["_emscripten_bind_PxMeshPreprocessingFlags_PxMeshPreprocessingFlags_1"] = createExportWrapper("emscripten_bind_PxMeshPreprocessingFlags_PxMeshPreprocessingFlags_1");
        var _emscripten_bind_PxMeshPreprocessingFlags_isSet_1 = Module["_emscripten_bind_PxMeshPreprocessingFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxMeshPreprocessingFlags_isSet_1");
        var _emscripten_bind_PxMeshPreprocessingFlags_set_1 = Module["_emscripten_bind_PxMeshPreprocessingFlags_set_1"] = createExportWrapper("emscripten_bind_PxMeshPreprocessingFlags_set_1");
        var _emscripten_bind_PxMeshPreprocessingFlags_clear_1 = Module["_emscripten_bind_PxMeshPreprocessingFlags_clear_1"] = createExportWrapper("emscripten_bind_PxMeshPreprocessingFlags_clear_1");
        var _emscripten_bind_PxMeshPreprocessingFlags___destroy___0 = Module["_emscripten_bind_PxMeshPreprocessingFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxMeshPreprocessingFlags___destroy___0");
        var _emscripten_bind_PxMidphaseDesc_PxMidphaseDesc_0 = Module["_emscripten_bind_PxMidphaseDesc_PxMidphaseDesc_0"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_PxMidphaseDesc_0");
        var _emscripten_bind_PxMidphaseDesc_getType_0 = Module["_emscripten_bind_PxMidphaseDesc_getType_0"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_getType_0");
        var _emscripten_bind_PxMidphaseDesc_setToDefault_1 = Module["_emscripten_bind_PxMidphaseDesc_setToDefault_1"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_setToDefault_1");
        var _emscripten_bind_PxMidphaseDesc_isValid_0 = Module["_emscripten_bind_PxMidphaseDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_isValid_0");
        var _emscripten_bind_PxMidphaseDesc_get_mBVH33Desc_0 = Module["_emscripten_bind_PxMidphaseDesc_get_mBVH33Desc_0"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_get_mBVH33Desc_0");
        var _emscripten_bind_PxMidphaseDesc_set_mBVH33Desc_1 = Module["_emscripten_bind_PxMidphaseDesc_set_mBVH33Desc_1"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_set_mBVH33Desc_1");
        var _emscripten_bind_PxMidphaseDesc_get_mBVH34Desc_0 = Module["_emscripten_bind_PxMidphaseDesc_get_mBVH34Desc_0"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_get_mBVH34Desc_0");
        var _emscripten_bind_PxMidphaseDesc_set_mBVH34Desc_1 = Module["_emscripten_bind_PxMidphaseDesc_set_mBVH34Desc_1"] = createExportWrapper("emscripten_bind_PxMidphaseDesc_set_mBVH34Desc_1");
        var _emscripten_bind_PxMidphaseDesc___destroy___0 = Module["_emscripten_bind_PxMidphaseDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxMidphaseDesc___destroy___0");
        var _emscripten_bind_PxTriangleMeshDesc_PxTriangleMeshDesc_0 = Module["_emscripten_bind_PxTriangleMeshDesc_PxTriangleMeshDesc_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_PxTriangleMeshDesc_0");
        var _emscripten_bind_PxTriangleMeshDesc_setToDefault_0 = Module["_emscripten_bind_PxTriangleMeshDesc_setToDefault_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_setToDefault_0");
        var _emscripten_bind_PxTriangleMeshDesc_isValid_0 = Module["_emscripten_bind_PxTriangleMeshDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_isValid_0");
        var _emscripten_bind_PxTriangleMeshDesc_get_materialIndices_0 = Module["_emscripten_bind_PxTriangleMeshDesc_get_materialIndices_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_get_materialIndices_0");
        var _emscripten_bind_PxTriangleMeshDesc_set_materialIndices_1 = Module["_emscripten_bind_PxTriangleMeshDesc_set_materialIndices_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_set_materialIndices_1");
        var _emscripten_bind_PxTriangleMeshDesc_get_points_0 = Module["_emscripten_bind_PxTriangleMeshDesc_get_points_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_get_points_0");
        var _emscripten_bind_PxTriangleMeshDesc_set_points_1 = Module["_emscripten_bind_PxTriangleMeshDesc_set_points_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_set_points_1");
        var _emscripten_bind_PxTriangleMeshDesc_get_triangles_0 = Module["_emscripten_bind_PxTriangleMeshDesc_get_triangles_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_get_triangles_0");
        var _emscripten_bind_PxTriangleMeshDesc_set_triangles_1 = Module["_emscripten_bind_PxTriangleMeshDesc_set_triangles_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_set_triangles_1");
        var _emscripten_bind_PxTriangleMeshDesc_get_flags_0 = Module["_emscripten_bind_PxTriangleMeshDesc_get_flags_0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_get_flags_0");
        var _emscripten_bind_PxTriangleMeshDesc_set_flags_1 = Module["_emscripten_bind_PxTriangleMeshDesc_set_flags_1"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc_set_flags_1");
        var _emscripten_bind_PxTriangleMeshDesc___destroy___0 = Module["_emscripten_bind_PxTriangleMeshDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxTriangleMeshDesc___destroy___0");
        var _emscripten_bind_PxBaseFlags_PxBaseFlags_1 = Module["_emscripten_bind_PxBaseFlags_PxBaseFlags_1"] = createExportWrapper("emscripten_bind_PxBaseFlags_PxBaseFlags_1");
        var _emscripten_bind_PxBaseFlags_isSet_1 = Module["_emscripten_bind_PxBaseFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxBaseFlags_isSet_1");
        var _emscripten_bind_PxBaseFlags_set_1 = Module["_emscripten_bind_PxBaseFlags_set_1"] = createExportWrapper("emscripten_bind_PxBaseFlags_set_1");
        var _emscripten_bind_PxBaseFlags_clear_1 = Module["_emscripten_bind_PxBaseFlags_clear_1"] = createExportWrapper("emscripten_bind_PxBaseFlags_clear_1");
        var _emscripten_bind_PxBaseFlags___destroy___0 = Module["_emscripten_bind_PxBaseFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxBaseFlags___destroy___0");
        var _emscripten_bind_PxBaseTask___destroy___0 = Module["_emscripten_bind_PxBaseTask___destroy___0"] = createExportWrapper("emscripten_bind_PxBaseTask___destroy___0");
        var _emscripten_bind_PxBoundedData_PxBoundedData_0 = Module["_emscripten_bind_PxBoundedData_PxBoundedData_0"] = createExportWrapper("emscripten_bind_PxBoundedData_PxBoundedData_0");
        var _emscripten_bind_PxBoundedData_get_count_0 = Module["_emscripten_bind_PxBoundedData_get_count_0"] = createExportWrapper("emscripten_bind_PxBoundedData_get_count_0");
        var _emscripten_bind_PxBoundedData_set_count_1 = Module["_emscripten_bind_PxBoundedData_set_count_1"] = createExportWrapper("emscripten_bind_PxBoundedData_set_count_1");
        var _emscripten_bind_PxBoundedData_get_stride_0 = Module["_emscripten_bind_PxBoundedData_get_stride_0"] = createExportWrapper("emscripten_bind_PxBoundedData_get_stride_0");
        var _emscripten_bind_PxBoundedData_set_stride_1 = Module["_emscripten_bind_PxBoundedData_set_stride_1"] = createExportWrapper("emscripten_bind_PxBoundedData_set_stride_1");
        var _emscripten_bind_PxBoundedData_get_data_0 = Module["_emscripten_bind_PxBoundedData_get_data_0"] = createExportWrapper("emscripten_bind_PxBoundedData_get_data_0");
        var _emscripten_bind_PxBoundedData_set_data_1 = Module["_emscripten_bind_PxBoundedData_set_data_1"] = createExportWrapper("emscripten_bind_PxBoundedData_set_data_1");
        var _emscripten_bind_PxBoundedData___destroy___0 = Module["_emscripten_bind_PxBoundedData___destroy___0"] = createExportWrapper("emscripten_bind_PxBoundedData___destroy___0");
        var _emscripten_bind_PxBounds3_PxBounds3_0 = Module["_emscripten_bind_PxBounds3_PxBounds3_0"] = createExportWrapper("emscripten_bind_PxBounds3_PxBounds3_0");
        var _emscripten_bind_PxBounds3_PxBounds3_2 = Module["_emscripten_bind_PxBounds3_PxBounds3_2"] = createExportWrapper("emscripten_bind_PxBounds3_PxBounds3_2");
        var _emscripten_bind_PxBounds3_setEmpty_0 = Module["_emscripten_bind_PxBounds3_setEmpty_0"] = createExportWrapper("emscripten_bind_PxBounds3_setEmpty_0");
        var _emscripten_bind_PxBounds3_setMaximal_0 = Module["_emscripten_bind_PxBounds3_setMaximal_0"] = createExportWrapper("emscripten_bind_PxBounds3_setMaximal_0");
        var _emscripten_bind_PxBounds3_include_1 = Module["_emscripten_bind_PxBounds3_include_1"] = createExportWrapper("emscripten_bind_PxBounds3_include_1");
        var _emscripten_bind_PxBounds3_isEmpty_0 = Module["_emscripten_bind_PxBounds3_isEmpty_0"] = createExportWrapper("emscripten_bind_PxBounds3_isEmpty_0");
        var _emscripten_bind_PxBounds3_intersects_1 = Module["_emscripten_bind_PxBounds3_intersects_1"] = createExportWrapper("emscripten_bind_PxBounds3_intersects_1");
        var _emscripten_bind_PxBounds3_intersects1D_2 = Module["_emscripten_bind_PxBounds3_intersects1D_2"] = createExportWrapper("emscripten_bind_PxBounds3_intersects1D_2");
        var _emscripten_bind_PxBounds3_contains_1 = Module["_emscripten_bind_PxBounds3_contains_1"] = createExportWrapper("emscripten_bind_PxBounds3_contains_1");
        var _emscripten_bind_PxBounds3_isInside_1 = Module["_emscripten_bind_PxBounds3_isInside_1"] = createExportWrapper("emscripten_bind_PxBounds3_isInside_1");
        var _emscripten_bind_PxBounds3_getCenter_0 = Module["_emscripten_bind_PxBounds3_getCenter_0"] = createExportWrapper("emscripten_bind_PxBounds3_getCenter_0");
        var _emscripten_bind_PxBounds3_getDimensions_0 = Module["_emscripten_bind_PxBounds3_getDimensions_0"] = createExportWrapper("emscripten_bind_PxBounds3_getDimensions_0");
        var _emscripten_bind_PxBounds3_getExtents_0 = Module["_emscripten_bind_PxBounds3_getExtents_0"] = createExportWrapper("emscripten_bind_PxBounds3_getExtents_0");
        var _emscripten_bind_PxBounds3_scaleSafe_1 = Module["_emscripten_bind_PxBounds3_scaleSafe_1"] = createExportWrapper("emscripten_bind_PxBounds3_scaleSafe_1");
        var _emscripten_bind_PxBounds3_scaleFast_1 = Module["_emscripten_bind_PxBounds3_scaleFast_1"] = createExportWrapper("emscripten_bind_PxBounds3_scaleFast_1");
        var _emscripten_bind_PxBounds3_fattenSafe_1 = Module["_emscripten_bind_PxBounds3_fattenSafe_1"] = createExportWrapper("emscripten_bind_PxBounds3_fattenSafe_1");
        var _emscripten_bind_PxBounds3_fattenFast_1 = Module["_emscripten_bind_PxBounds3_fattenFast_1"] = createExportWrapper("emscripten_bind_PxBounds3_fattenFast_1");
        var _emscripten_bind_PxBounds3_isFinite_0 = Module["_emscripten_bind_PxBounds3_isFinite_0"] = createExportWrapper("emscripten_bind_PxBounds3_isFinite_0");
        var _emscripten_bind_PxBounds3_isValid_0 = Module["_emscripten_bind_PxBounds3_isValid_0"] = createExportWrapper("emscripten_bind_PxBounds3_isValid_0");
        var _emscripten_bind_PxBounds3_get_minimum_0 = Module["_emscripten_bind_PxBounds3_get_minimum_0"] = createExportWrapper("emscripten_bind_PxBounds3_get_minimum_0");
        var _emscripten_bind_PxBounds3_set_minimum_1 = Module["_emscripten_bind_PxBounds3_set_minimum_1"] = createExportWrapper("emscripten_bind_PxBounds3_set_minimum_1");
        var _emscripten_bind_PxBounds3_get_maximum_0 = Module["_emscripten_bind_PxBounds3_get_maximum_0"] = createExportWrapper("emscripten_bind_PxBounds3_get_maximum_0");
        var _emscripten_bind_PxBounds3_set_maximum_1 = Module["_emscripten_bind_PxBounds3_set_maximum_1"] = createExportWrapper("emscripten_bind_PxBounds3_set_maximum_1");
        var _emscripten_bind_PxBounds3___destroy___0 = Module["_emscripten_bind_PxBounds3___destroy___0"] = createExportWrapper("emscripten_bind_PxBounds3___destroy___0");
        var _emscripten_bind_PxCollection_add_1 = Module["_emscripten_bind_PxCollection_add_1"] = createExportWrapper("emscripten_bind_PxCollection_add_1");
        var _emscripten_bind_PxCollection_add_2 = Module["_emscripten_bind_PxCollection_add_2"] = createExportWrapper("emscripten_bind_PxCollection_add_2");
        var _emscripten_bind_PxCollection_remove_1 = Module["_emscripten_bind_PxCollection_remove_1"] = createExportWrapper("emscripten_bind_PxCollection_remove_1");
        var _emscripten_bind_PxCollection_contains_1 = Module["_emscripten_bind_PxCollection_contains_1"] = createExportWrapper("emscripten_bind_PxCollection_contains_1");
        var _emscripten_bind_PxCollection_addId_2 = Module["_emscripten_bind_PxCollection_addId_2"] = createExportWrapper("emscripten_bind_PxCollection_addId_2");
        var _emscripten_bind_PxCollection_removeId_1 = Module["_emscripten_bind_PxCollection_removeId_1"] = createExportWrapper("emscripten_bind_PxCollection_removeId_1");
        var _emscripten_bind_PxCollection_getNbObjects_0 = Module["_emscripten_bind_PxCollection_getNbObjects_0"] = createExportWrapper("emscripten_bind_PxCollection_getNbObjects_0");
        var _emscripten_bind_PxCollection_getObject_1 = Module["_emscripten_bind_PxCollection_getObject_1"] = createExportWrapper("emscripten_bind_PxCollection_getObject_1");
        var _emscripten_bind_PxCollection_find_1 = Module["_emscripten_bind_PxCollection_find_1"] = createExportWrapper("emscripten_bind_PxCollection_find_1");
        var _emscripten_bind_PxCollection_getNbIds_0 = Module["_emscripten_bind_PxCollection_getNbIds_0"] = createExportWrapper("emscripten_bind_PxCollection_getNbIds_0");
        var _emscripten_bind_PxCollection_getId_1 = Module["_emscripten_bind_PxCollection_getId_1"] = createExportWrapper("emscripten_bind_PxCollection_getId_1");
        var _emscripten_bind_PxCollection_release_0 = Module["_emscripten_bind_PxCollection_release_0"] = createExportWrapper("emscripten_bind_PxCollection_release_0");
        var _emscripten_bind_PxCudaContextManager_contextIsValid_0 = Module["_emscripten_bind_PxCudaContextManager_contextIsValid_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_contextIsValid_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM10_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM10_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM10_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM11_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM11_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM11_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM12_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM12_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM12_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM13_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM13_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM13_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM20_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM20_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM20_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM30_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM30_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM30_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM35_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM35_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM35_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM50_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM50_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM50_0");
        var _emscripten_bind_PxCudaContextManager_supportsArchSM52_0 = Module["_emscripten_bind_PxCudaContextManager_supportsArchSM52_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_supportsArchSM52_0");
        var _emscripten_bind_PxCudaContextManager_isIntegrated_0 = Module["_emscripten_bind_PxCudaContextManager_isIntegrated_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_isIntegrated_0");
        var _emscripten_bind_PxCudaContextManager_canMapHostMemory_0 = Module["_emscripten_bind_PxCudaContextManager_canMapHostMemory_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_canMapHostMemory_0");
        var _emscripten_bind_PxCudaContextManager_getDriverVersion_0 = Module["_emscripten_bind_PxCudaContextManager_getDriverVersion_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getDriverVersion_0");
        var _emscripten_bind_PxCudaContextManager_getDeviceTotalMemBytes_0 = Module["_emscripten_bind_PxCudaContextManager_getDeviceTotalMemBytes_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getDeviceTotalMemBytes_0");
        var _emscripten_bind_PxCudaContextManager_getMultiprocessorCount_0 = Module["_emscripten_bind_PxCudaContextManager_getMultiprocessorCount_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getMultiprocessorCount_0");
        var _emscripten_bind_PxCudaContextManager_getClockRate_0 = Module["_emscripten_bind_PxCudaContextManager_getClockRate_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getClockRate_0");
        var _emscripten_bind_PxCudaContextManager_getSharedMemPerBlock_0 = Module["_emscripten_bind_PxCudaContextManager_getSharedMemPerBlock_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getSharedMemPerBlock_0");
        var _emscripten_bind_PxCudaContextManager_getMaxThreadsPerBlock_0 = Module["_emscripten_bind_PxCudaContextManager_getMaxThreadsPerBlock_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getMaxThreadsPerBlock_0");
        var _emscripten_bind_PxCudaContextManager_getDeviceName_0 = Module["_emscripten_bind_PxCudaContextManager_getDeviceName_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getDeviceName_0");
        var _emscripten_bind_PxCudaContextManager_getInteropMode_0 = Module["_emscripten_bind_PxCudaContextManager_getInteropMode_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getInteropMode_0");
        var _emscripten_bind_PxCudaContextManager_setUsingConcurrentStreams_1 = Module["_emscripten_bind_PxCudaContextManager_setUsingConcurrentStreams_1"] = createExportWrapper("emscripten_bind_PxCudaContextManager_setUsingConcurrentStreams_1");
        var _emscripten_bind_PxCudaContextManager_getUsingConcurrentStreams_0 = Module["_emscripten_bind_PxCudaContextManager_getUsingConcurrentStreams_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_getUsingConcurrentStreams_0");
        var _emscripten_bind_PxCudaContextManager_usingDedicatedGPU_0 = Module["_emscripten_bind_PxCudaContextManager_usingDedicatedGPU_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_usingDedicatedGPU_0");
        var _emscripten_bind_PxCudaContextManager_release_0 = Module["_emscripten_bind_PxCudaContextManager_release_0"] = createExportWrapper("emscripten_bind_PxCudaContextManager_release_0");
        var _emscripten_bind_PxCudaContextManagerDesc_PxCudaContextManagerDesc_0 = Module["_emscripten_bind_PxCudaContextManagerDesc_PxCudaContextManagerDesc_0"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_PxCudaContextManagerDesc_0");
        var _emscripten_bind_PxCudaContextManagerDesc_get_graphicsDevice_0 = Module["_emscripten_bind_PxCudaContextManagerDesc_get_graphicsDevice_0"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_get_graphicsDevice_0");
        var _emscripten_bind_PxCudaContextManagerDesc_set_graphicsDevice_1 = Module["_emscripten_bind_PxCudaContextManagerDesc_set_graphicsDevice_1"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_set_graphicsDevice_1");
        var _emscripten_bind_PxCudaContextManagerDesc_get_interopMode_0 = Module["_emscripten_bind_PxCudaContextManagerDesc_get_interopMode_0"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_get_interopMode_0");
        var _emscripten_bind_PxCudaContextManagerDesc_set_interopMode_1 = Module["_emscripten_bind_PxCudaContextManagerDesc_set_interopMode_1"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_set_interopMode_1");
        var _emscripten_bind_PxCudaContextManagerDesc_get_maxMemorySize_1 = Module["_emscripten_bind_PxCudaContextManagerDesc_get_maxMemorySize_1"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_get_maxMemorySize_1");
        var _emscripten_bind_PxCudaContextManagerDesc_set_maxMemorySize_2 = Module["_emscripten_bind_PxCudaContextManagerDesc_set_maxMemorySize_2"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_set_maxMemorySize_2");
        var _emscripten_bind_PxCudaContextManagerDesc_get_memoryBaseSize_1 = Module["_emscripten_bind_PxCudaContextManagerDesc_get_memoryBaseSize_1"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_get_memoryBaseSize_1");
        var _emscripten_bind_PxCudaContextManagerDesc_set_memoryBaseSize_2 = Module["_emscripten_bind_PxCudaContextManagerDesc_set_memoryBaseSize_2"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_set_memoryBaseSize_2");
        var _emscripten_bind_PxCudaContextManagerDesc_get_memoryPageSize_1 = Module["_emscripten_bind_PxCudaContextManagerDesc_get_memoryPageSize_1"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_get_memoryPageSize_1");
        var _emscripten_bind_PxCudaContextManagerDesc_set_memoryPageSize_2 = Module["_emscripten_bind_PxCudaContextManagerDesc_set_memoryPageSize_2"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc_set_memoryPageSize_2");
        var _emscripten_bind_PxCudaContextManagerDesc___destroy___0 = Module["_emscripten_bind_PxCudaContextManagerDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxCudaContextManagerDesc___destroy___0");
        var _emscripten_bind_PxDefaultErrorCallback_PxDefaultErrorCallback_0 = Module["_emscripten_bind_PxDefaultErrorCallback_PxDefaultErrorCallback_0"] = createExportWrapper("emscripten_bind_PxDefaultErrorCallback_PxDefaultErrorCallback_0");
        var _emscripten_bind_PxDefaultErrorCallback_reportError_4 = Module["_emscripten_bind_PxDefaultErrorCallback_reportError_4"] = createExportWrapper("emscripten_bind_PxDefaultErrorCallback_reportError_4");
        var _emscripten_bind_PxDefaultErrorCallback___destroy___0 = Module["_emscripten_bind_PxDefaultErrorCallback___destroy___0"] = createExportWrapper("emscripten_bind_PxDefaultErrorCallback___destroy___0");
        var _emscripten_bind_JavaErrorCallback_JavaErrorCallback_0 = Module["_emscripten_bind_JavaErrorCallback_JavaErrorCallback_0"] = createExportWrapper("emscripten_bind_JavaErrorCallback_JavaErrorCallback_0");
        var _emscripten_bind_JavaErrorCallback_reportError_4 = Module["_emscripten_bind_JavaErrorCallback_reportError_4"] = createExportWrapper("emscripten_bind_JavaErrorCallback_reportError_4");
        var _emscripten_bind_JavaErrorCallback___destroy___0 = Module["_emscripten_bind_JavaErrorCallback___destroy___0"] = createExportWrapper("emscripten_bind_JavaErrorCallback___destroy___0");
        var _emscripten_bind_PxFoundation_release_0 = Module["_emscripten_bind_PxFoundation_release_0"] = createExportWrapper("emscripten_bind_PxFoundation_release_0");
        var _emscripten_bind_PxQuat_PxQuat_0 = Module["_emscripten_bind_PxQuat_PxQuat_0"] = createExportWrapper("emscripten_bind_PxQuat_PxQuat_0");
        var _emscripten_bind_PxQuat_PxQuat_4 = Module["_emscripten_bind_PxQuat_PxQuat_4"] = createExportWrapper("emscripten_bind_PxQuat_PxQuat_4");
        var _emscripten_bind_PxQuat_get_x_0 = Module["_emscripten_bind_PxQuat_get_x_0"] = createExportWrapper("emscripten_bind_PxQuat_get_x_0");
        var _emscripten_bind_PxQuat_set_x_1 = Module["_emscripten_bind_PxQuat_set_x_1"] = createExportWrapper("emscripten_bind_PxQuat_set_x_1");
        var _emscripten_bind_PxQuat_get_y_0 = Module["_emscripten_bind_PxQuat_get_y_0"] = createExportWrapper("emscripten_bind_PxQuat_get_y_0");
        var _emscripten_bind_PxQuat_set_y_1 = Module["_emscripten_bind_PxQuat_set_y_1"] = createExportWrapper("emscripten_bind_PxQuat_set_y_1");
        var _emscripten_bind_PxQuat_get_z_0 = Module["_emscripten_bind_PxQuat_get_z_0"] = createExportWrapper("emscripten_bind_PxQuat_get_z_0");
        var _emscripten_bind_PxQuat_set_z_1 = Module["_emscripten_bind_PxQuat_set_z_1"] = createExportWrapper("emscripten_bind_PxQuat_set_z_1");
        var _emscripten_bind_PxQuat_get_w_0 = Module["_emscripten_bind_PxQuat_get_w_0"] = createExportWrapper("emscripten_bind_PxQuat_get_w_0");
        var _emscripten_bind_PxQuat_set_w_1 = Module["_emscripten_bind_PxQuat_set_w_1"] = createExportWrapper("emscripten_bind_PxQuat_set_w_1");
        var _emscripten_bind_PxQuat___destroy___0 = Module["_emscripten_bind_PxQuat___destroy___0"] = createExportWrapper("emscripten_bind_PxQuat___destroy___0");
        var _emscripten_bind_PxTolerancesScale_PxTolerancesScale_0 = Module["_emscripten_bind_PxTolerancesScale_PxTolerancesScale_0"] = createExportWrapper("emscripten_bind_PxTolerancesScale_PxTolerancesScale_0");
        var _emscripten_bind_PxTolerancesScale___destroy___0 = Module["_emscripten_bind_PxTolerancesScale___destroy___0"] = createExportWrapper("emscripten_bind_PxTolerancesScale___destroy___0");
        var _emscripten_bind_PxTransform_PxTransform_1 = Module["_emscripten_bind_PxTransform_PxTransform_1"] = createExportWrapper("emscripten_bind_PxTransform_PxTransform_1");
        var _emscripten_bind_PxTransform_PxTransform_2 = Module["_emscripten_bind_PxTransform_PxTransform_2"] = createExportWrapper("emscripten_bind_PxTransform_PxTransform_2");
        var _emscripten_bind_PxTransform_get_q_0 = Module["_emscripten_bind_PxTransform_get_q_0"] = createExportWrapper("emscripten_bind_PxTransform_get_q_0");
        var _emscripten_bind_PxTransform_set_q_1 = Module["_emscripten_bind_PxTransform_set_q_1"] = createExportWrapper("emscripten_bind_PxTransform_set_q_1");
        var _emscripten_bind_PxTransform_get_p_0 = Module["_emscripten_bind_PxTransform_get_p_0"] = createExportWrapper("emscripten_bind_PxTransform_get_p_0");
        var _emscripten_bind_PxTransform_set_p_1 = Module["_emscripten_bind_PxTransform_set_p_1"] = createExportWrapper("emscripten_bind_PxTransform_set_p_1");
        var _emscripten_bind_PxTransform___destroy___0 = Module["_emscripten_bind_PxTransform___destroy___0"] = createExportWrapper("emscripten_bind_PxTransform___destroy___0");
        var _emscripten_bind_PxStridedData_get_stride_0 = Module["_emscripten_bind_PxStridedData_get_stride_0"] = createExportWrapper("emscripten_bind_PxStridedData_get_stride_0");
        var _emscripten_bind_PxStridedData_set_stride_1 = Module["_emscripten_bind_PxStridedData_set_stride_1"] = createExportWrapper("emscripten_bind_PxStridedData_set_stride_1");
        var _emscripten_bind_PxStridedData_get_data_0 = Module["_emscripten_bind_PxStridedData_get_data_0"] = createExportWrapper("emscripten_bind_PxStridedData_get_data_0");
        var _emscripten_bind_PxStridedData_set_data_1 = Module["_emscripten_bind_PxStridedData_set_data_1"] = createExportWrapper("emscripten_bind_PxStridedData_set_data_1");
        var _emscripten_bind_PxStridedData___destroy___0 = Module["_emscripten_bind_PxStridedData___destroy___0"] = createExportWrapper("emscripten_bind_PxStridedData___destroy___0");
        var _emscripten_bind_PxU16StridedData_get_stride_0 = Module["_emscripten_bind_PxU16StridedData_get_stride_0"] = createExportWrapper("emscripten_bind_PxU16StridedData_get_stride_0");
        var _emscripten_bind_PxU16StridedData_set_stride_1 = Module["_emscripten_bind_PxU16StridedData_set_stride_1"] = createExportWrapper("emscripten_bind_PxU16StridedData_set_stride_1");
        var _emscripten_bind_PxU16StridedData_get_data_0 = Module["_emscripten_bind_PxU16StridedData_get_data_0"] = createExportWrapper("emscripten_bind_PxU16StridedData_get_data_0");
        var _emscripten_bind_PxU16StridedData_set_data_1 = Module["_emscripten_bind_PxU16StridedData_set_data_1"] = createExportWrapper("emscripten_bind_PxU16StridedData_set_data_1");
        var _emscripten_bind_PxU16StridedData___destroy___0 = Module["_emscripten_bind_PxU16StridedData___destroy___0"] = createExportWrapper("emscripten_bind_PxU16StridedData___destroy___0");
        var _emscripten_bind_PxVec3_PxVec3_0 = Module["_emscripten_bind_PxVec3_PxVec3_0"] = createExportWrapper("emscripten_bind_PxVec3_PxVec3_0");
        var _emscripten_bind_PxVec3_PxVec3_3 = Module["_emscripten_bind_PxVec3_PxVec3_3"] = createExportWrapper("emscripten_bind_PxVec3_PxVec3_3");
        var _emscripten_bind_PxVec3_get_x_0 = Module["_emscripten_bind_PxVec3_get_x_0"] = createExportWrapper("emscripten_bind_PxVec3_get_x_0");
        var _emscripten_bind_PxVec3_set_x_1 = Module["_emscripten_bind_PxVec3_set_x_1"] = createExportWrapper("emscripten_bind_PxVec3_set_x_1");
        var _emscripten_bind_PxVec3_get_y_0 = Module["_emscripten_bind_PxVec3_get_y_0"] = createExportWrapper("emscripten_bind_PxVec3_get_y_0");
        var _emscripten_bind_PxVec3_set_y_1 = Module["_emscripten_bind_PxVec3_set_y_1"] = createExportWrapper("emscripten_bind_PxVec3_set_y_1");
        var _emscripten_bind_PxVec3_get_z_0 = Module["_emscripten_bind_PxVec3_get_z_0"] = createExportWrapper("emscripten_bind_PxVec3_get_z_0");
        var _emscripten_bind_PxVec3_set_z_1 = Module["_emscripten_bind_PxVec3_set_z_1"] = createExportWrapper("emscripten_bind_PxVec3_set_z_1");
        var _emscripten_bind_PxVec3___destroy___0 = Module["_emscripten_bind_PxVec3___destroy___0"] = createExportWrapper("emscripten_bind_PxVec3___destroy___0");
        var _emscripten_bind_PxCollectionExt_releaseObjects_1 = Module["_emscripten_bind_PxCollectionExt_releaseObjects_1"] = createExportWrapper("emscripten_bind_PxCollectionExt_releaseObjects_1");
        var _emscripten_bind_PxCollectionExt_releaseObjects_2 = Module["_emscripten_bind_PxCollectionExt_releaseObjects_2"] = createExportWrapper("emscripten_bind_PxCollectionExt_releaseObjects_2");
        var _emscripten_bind_PxCollectionExt_remove_2 = Module["_emscripten_bind_PxCollectionExt_remove_2"] = createExportWrapper("emscripten_bind_PxCollectionExt_remove_2");
        var _emscripten_bind_PxCollectionExt_remove_3 = Module["_emscripten_bind_PxCollectionExt_remove_3"] = createExportWrapper("emscripten_bind_PxCollectionExt_remove_3");
        var _emscripten_bind_PxCollectionExt_createCollection_1 = Module["_emscripten_bind_PxCollectionExt_createCollection_1"] = createExportWrapper("emscripten_bind_PxCollectionExt_createCollection_1");
        var _emscripten_bind_PxCollectionExt___destroy___0 = Module["_emscripten_bind_PxCollectionExt___destroy___0"] = createExportWrapper("emscripten_bind_PxCollectionExt___destroy___0");
        var _emscripten_bind_PxD6Joint_setMotion_2 = Module["_emscripten_bind_PxD6Joint_setMotion_2"] = createExportWrapper("emscripten_bind_PxD6Joint_setMotion_2");
        var _emscripten_bind_PxD6Joint_getMotion_1 = Module["_emscripten_bind_PxD6Joint_getMotion_1"] = createExportWrapper("emscripten_bind_PxD6Joint_getMotion_1");
        var _emscripten_bind_PxD6Joint_getTwistAngle_0 = Module["_emscripten_bind_PxD6Joint_getTwistAngle_0"] = createExportWrapper("emscripten_bind_PxD6Joint_getTwistAngle_0");
        var _emscripten_bind_PxD6Joint_getSwingYAngle_0 = Module["_emscripten_bind_PxD6Joint_getSwingYAngle_0"] = createExportWrapper("emscripten_bind_PxD6Joint_getSwingYAngle_0");
        var _emscripten_bind_PxD6Joint_getSwingZAngle_0 = Module["_emscripten_bind_PxD6Joint_getSwingZAngle_0"] = createExportWrapper("emscripten_bind_PxD6Joint_getSwingZAngle_0");
        var _emscripten_bind_PxD6Joint_setDistanceLimit_1 = Module["_emscripten_bind_PxD6Joint_setDistanceLimit_1"] = createExportWrapper("emscripten_bind_PxD6Joint_setDistanceLimit_1");
        var _emscripten_bind_PxD6Joint_setLinearLimit_2 = Module["_emscripten_bind_PxD6Joint_setLinearLimit_2"] = createExportWrapper("emscripten_bind_PxD6Joint_setLinearLimit_2");
        var _emscripten_bind_PxD6Joint_setTwistLimit_1 = Module["_emscripten_bind_PxD6Joint_setTwistLimit_1"] = createExportWrapper("emscripten_bind_PxD6Joint_setTwistLimit_1");
        var _emscripten_bind_PxD6Joint_setSwingLimit_1 = Module["_emscripten_bind_PxD6Joint_setSwingLimit_1"] = createExportWrapper("emscripten_bind_PxD6Joint_setSwingLimit_1");
        var _emscripten_bind_PxD6Joint_setPyramidSwingLimit_1 = Module["_emscripten_bind_PxD6Joint_setPyramidSwingLimit_1"] = createExportWrapper("emscripten_bind_PxD6Joint_setPyramidSwingLimit_1");
        var _emscripten_bind_PxD6Joint_setDrive_2 = Module["_emscripten_bind_PxD6Joint_setDrive_2"] = createExportWrapper("emscripten_bind_PxD6Joint_setDrive_2");
        var _emscripten_bind_PxD6Joint_getDrive_1 = Module["_emscripten_bind_PxD6Joint_getDrive_1"] = createExportWrapper("emscripten_bind_PxD6Joint_getDrive_1");
        var _emscripten_bind_PxD6Joint_setDrivePosition_1 = Module["_emscripten_bind_PxD6Joint_setDrivePosition_1"] = createExportWrapper("emscripten_bind_PxD6Joint_setDrivePosition_1");
        var _emscripten_bind_PxD6Joint_setDrivePosition_2 = Module["_emscripten_bind_PxD6Joint_setDrivePosition_2"] = createExportWrapper("emscripten_bind_PxD6Joint_setDrivePosition_2");
        var _emscripten_bind_PxD6Joint_getDrivePosition_0 = Module["_emscripten_bind_PxD6Joint_getDrivePosition_0"] = createExportWrapper("emscripten_bind_PxD6Joint_getDrivePosition_0");
        var _emscripten_bind_PxD6Joint_setDriveVelocity_2 = Module["_emscripten_bind_PxD6Joint_setDriveVelocity_2"] = createExportWrapper("emscripten_bind_PxD6Joint_setDriveVelocity_2");
        var _emscripten_bind_PxD6Joint_getDriveVelocity_2 = Module["_emscripten_bind_PxD6Joint_getDriveVelocity_2"] = createExportWrapper("emscripten_bind_PxD6Joint_getDriveVelocity_2");
        var _emscripten_bind_PxD6Joint_setProjectionLinearTolerance_1 = Module["_emscripten_bind_PxD6Joint_setProjectionLinearTolerance_1"] = createExportWrapper("emscripten_bind_PxD6Joint_setProjectionLinearTolerance_1");
        var _emscripten_bind_PxD6Joint_getProjectionLinearTolerance_0 = Module["_emscripten_bind_PxD6Joint_getProjectionLinearTolerance_0"] = createExportWrapper("emscripten_bind_PxD6Joint_getProjectionLinearTolerance_0");
        var _emscripten_bind_PxD6Joint_setProjectionAngularTolerance_1 = Module["_emscripten_bind_PxD6Joint_setProjectionAngularTolerance_1"] = createExportWrapper("emscripten_bind_PxD6Joint_setProjectionAngularTolerance_1");
        var _emscripten_bind_PxD6Joint_getProjectionAngularTolerance_0 = Module["_emscripten_bind_PxD6Joint_getProjectionAngularTolerance_0"] = createExportWrapper("emscripten_bind_PxD6Joint_getProjectionAngularTolerance_0");
        var _emscripten_bind_PxD6Joint___destroy___0 = Module["_emscripten_bind_PxD6Joint___destroy___0"] = createExportWrapper("emscripten_bind_PxD6Joint___destroy___0");
        var _emscripten_bind_PxD6JointDrive_PxD6JointDrive_0 = Module["_emscripten_bind_PxD6JointDrive_PxD6JointDrive_0"] = createExportWrapper("emscripten_bind_PxD6JointDrive_PxD6JointDrive_0");
        var _emscripten_bind_PxD6JointDrive_PxD6JointDrive_3 = Module["_emscripten_bind_PxD6JointDrive_PxD6JointDrive_3"] = createExportWrapper("emscripten_bind_PxD6JointDrive_PxD6JointDrive_3");
        var _emscripten_bind_PxD6JointDrive_PxD6JointDrive_4 = Module["_emscripten_bind_PxD6JointDrive_PxD6JointDrive_4"] = createExportWrapper("emscripten_bind_PxD6JointDrive_PxD6JointDrive_4");
        var _emscripten_bind_PxD6JointDrive_get_forceLimit_0 = Module["_emscripten_bind_PxD6JointDrive_get_forceLimit_0"] = createExportWrapper("emscripten_bind_PxD6JointDrive_get_forceLimit_0");
        var _emscripten_bind_PxD6JointDrive_set_forceLimit_1 = Module["_emscripten_bind_PxD6JointDrive_set_forceLimit_1"] = createExportWrapper("emscripten_bind_PxD6JointDrive_set_forceLimit_1");
        var _emscripten_bind_PxD6JointDrive_get_flags_0 = Module["_emscripten_bind_PxD6JointDrive_get_flags_0"] = createExportWrapper("emscripten_bind_PxD6JointDrive_get_flags_0");
        var _emscripten_bind_PxD6JointDrive_set_flags_1 = Module["_emscripten_bind_PxD6JointDrive_set_flags_1"] = createExportWrapper("emscripten_bind_PxD6JointDrive_set_flags_1");
        var _emscripten_bind_PxD6JointDrive_get_stiffness_0 = Module["_emscripten_bind_PxD6JointDrive_get_stiffness_0"] = createExportWrapper("emscripten_bind_PxD6JointDrive_get_stiffness_0");
        var _emscripten_bind_PxD6JointDrive_set_stiffness_1 = Module["_emscripten_bind_PxD6JointDrive_set_stiffness_1"] = createExportWrapper("emscripten_bind_PxD6JointDrive_set_stiffness_1");
        var _emscripten_bind_PxD6JointDrive_get_damping_0 = Module["_emscripten_bind_PxD6JointDrive_get_damping_0"] = createExportWrapper("emscripten_bind_PxD6JointDrive_get_damping_0");
        var _emscripten_bind_PxD6JointDrive_set_damping_1 = Module["_emscripten_bind_PxD6JointDrive_set_damping_1"] = createExportWrapper("emscripten_bind_PxD6JointDrive_set_damping_1");
        var _emscripten_bind_PxD6JointDrive___destroy___0 = Module["_emscripten_bind_PxD6JointDrive___destroy___0"] = createExportWrapper("emscripten_bind_PxD6JointDrive___destroy___0");
        var _emscripten_bind_PxD6JointDriveFlags_PxD6JointDriveFlags_1 = Module["_emscripten_bind_PxD6JointDriveFlags_PxD6JointDriveFlags_1"] = createExportWrapper("emscripten_bind_PxD6JointDriveFlags_PxD6JointDriveFlags_1");
        var _emscripten_bind_PxD6JointDriveFlags_isSet_1 = Module["_emscripten_bind_PxD6JointDriveFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxD6JointDriveFlags_isSet_1");
        var _emscripten_bind_PxD6JointDriveFlags_set_1 = Module["_emscripten_bind_PxD6JointDriveFlags_set_1"] = createExportWrapper("emscripten_bind_PxD6JointDriveFlags_set_1");
        var _emscripten_bind_PxD6JointDriveFlags_clear_1 = Module["_emscripten_bind_PxD6JointDriveFlags_clear_1"] = createExportWrapper("emscripten_bind_PxD6JointDriveFlags_clear_1");
        var _emscripten_bind_PxD6JointDriveFlags___destroy___0 = Module["_emscripten_bind_PxD6JointDriveFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxD6JointDriveFlags___destroy___0");
        var _emscripten_bind_PxDefaultAllocator_PxDefaultAllocator_0 = Module["_emscripten_bind_PxDefaultAllocator_PxDefaultAllocator_0"] = createExportWrapper("emscripten_bind_PxDefaultAllocator_PxDefaultAllocator_0");
        var _emscripten_bind_PxDefaultAllocator___destroy___0 = Module["_emscripten_bind_PxDefaultAllocator___destroy___0"] = createExportWrapper("emscripten_bind_PxDefaultAllocator___destroy___0");
        var _emscripten_bind_PxDefaultCpuDispatcher___destroy___0 = Module["_emscripten_bind_PxDefaultCpuDispatcher___destroy___0"] = createExportWrapper("emscripten_bind_PxDefaultCpuDispatcher___destroy___0");
        var _emscripten_bind_PxDefaultMemoryInputData_PxDefaultMemoryInputData_2 = Module["_emscripten_bind_PxDefaultMemoryInputData_PxDefaultMemoryInputData_2"] = createExportWrapper("emscripten_bind_PxDefaultMemoryInputData_PxDefaultMemoryInputData_2");
        var _emscripten_bind_PxDefaultMemoryInputData_read_2 = Module["_emscripten_bind_PxDefaultMemoryInputData_read_2"] = createExportWrapper("emscripten_bind_PxDefaultMemoryInputData_read_2");
        var _emscripten_bind_PxDefaultMemoryInputData_getLength_0 = Module["_emscripten_bind_PxDefaultMemoryInputData_getLength_0"] = createExportWrapper("emscripten_bind_PxDefaultMemoryInputData_getLength_0");
        var _emscripten_bind_PxDefaultMemoryInputData_seek_1 = Module["_emscripten_bind_PxDefaultMemoryInputData_seek_1"] = createExportWrapper("emscripten_bind_PxDefaultMemoryInputData_seek_1");
        var _emscripten_bind_PxDefaultMemoryInputData_tell_0 = Module["_emscripten_bind_PxDefaultMemoryInputData_tell_0"] = createExportWrapper("emscripten_bind_PxDefaultMemoryInputData_tell_0");
        var _emscripten_bind_PxDefaultMemoryInputData___destroy___0 = Module["_emscripten_bind_PxDefaultMemoryInputData___destroy___0"] = createExportWrapper("emscripten_bind_PxDefaultMemoryInputData___destroy___0");
        var _emscripten_bind_PxDefaultMemoryOutputStream_PxDefaultMemoryOutputStream_0 = Module["_emscripten_bind_PxDefaultMemoryOutputStream_PxDefaultMemoryOutputStream_0"] = createExportWrapper("emscripten_bind_PxDefaultMemoryOutputStream_PxDefaultMemoryOutputStream_0");
        var _emscripten_bind_PxDefaultMemoryOutputStream_write_2 = Module["_emscripten_bind_PxDefaultMemoryOutputStream_write_2"] = createExportWrapper("emscripten_bind_PxDefaultMemoryOutputStream_write_2");
        var _emscripten_bind_PxDefaultMemoryOutputStream_getSize_0 = Module["_emscripten_bind_PxDefaultMemoryOutputStream_getSize_0"] = createExportWrapper("emscripten_bind_PxDefaultMemoryOutputStream_getSize_0");
        var _emscripten_bind_PxDefaultMemoryOutputStream_getData_0 = Module["_emscripten_bind_PxDefaultMemoryOutputStream_getData_0"] = createExportWrapper("emscripten_bind_PxDefaultMemoryOutputStream_getData_0");
        var _emscripten_bind_PxDefaultMemoryOutputStream___destroy___0 = Module["_emscripten_bind_PxDefaultMemoryOutputStream___destroy___0"] = createExportWrapper("emscripten_bind_PxDefaultMemoryOutputStream___destroy___0");
        var _emscripten_bind_PxDistanceJoint_getDistance_0 = Module["_emscripten_bind_PxDistanceJoint_getDistance_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getDistance_0");
        var _emscripten_bind_PxDistanceJoint_setMinDistance_1 = Module["_emscripten_bind_PxDistanceJoint_setMinDistance_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setMinDistance_1");
        var _emscripten_bind_PxDistanceJoint_getMinDistance_0 = Module["_emscripten_bind_PxDistanceJoint_getMinDistance_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getMinDistance_0");
        var _emscripten_bind_PxDistanceJoint_setMaxDistance_1 = Module["_emscripten_bind_PxDistanceJoint_setMaxDistance_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setMaxDistance_1");
        var _emscripten_bind_PxDistanceJoint_getMaxDistance_0 = Module["_emscripten_bind_PxDistanceJoint_getMaxDistance_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getMaxDistance_0");
        var _emscripten_bind_PxDistanceJoint_setTolerance_1 = Module["_emscripten_bind_PxDistanceJoint_setTolerance_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setTolerance_1");
        var _emscripten_bind_PxDistanceJoint_getTolerance_0 = Module["_emscripten_bind_PxDistanceJoint_getTolerance_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getTolerance_0");
        var _emscripten_bind_PxDistanceJoint_setStiffness_1 = Module["_emscripten_bind_PxDistanceJoint_setStiffness_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setStiffness_1");
        var _emscripten_bind_PxDistanceJoint_getStiffness_0 = Module["_emscripten_bind_PxDistanceJoint_getStiffness_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getStiffness_0");
        var _emscripten_bind_PxDistanceJoint_setDamping_1 = Module["_emscripten_bind_PxDistanceJoint_setDamping_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setDamping_1");
        var _emscripten_bind_PxDistanceJoint_getDamping_0 = Module["_emscripten_bind_PxDistanceJoint_getDamping_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getDamping_0");
        var _emscripten_bind_PxDistanceJoint_setDistanceJointFlags_1 = Module["_emscripten_bind_PxDistanceJoint_setDistanceJointFlags_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setDistanceJointFlags_1");
        var _emscripten_bind_PxDistanceJoint_setDistanceJointFlag_2 = Module["_emscripten_bind_PxDistanceJoint_setDistanceJointFlag_2"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setDistanceJointFlag_2");
        var _emscripten_bind_PxDistanceJoint_getDistanceJointFlags_0 = Module["_emscripten_bind_PxDistanceJoint_getDistanceJointFlags_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getDistanceJointFlags_0");
        var _emscripten_bind_PxDistanceJoint_getConcreteTypeName_0 = Module["_emscripten_bind_PxDistanceJoint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getConcreteTypeName_0");
        var _emscripten_bind_PxDistanceJoint_getConcreteType_0 = Module["_emscripten_bind_PxDistanceJoint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getConcreteType_0");
        var _emscripten_bind_PxDistanceJoint_setBaseFlag_2 = Module["_emscripten_bind_PxDistanceJoint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setBaseFlag_2");
        var _emscripten_bind_PxDistanceJoint_setBaseFlags_1 = Module["_emscripten_bind_PxDistanceJoint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setBaseFlags_1");
        var _emscripten_bind_PxDistanceJoint_getBaseFlags_0 = Module["_emscripten_bind_PxDistanceJoint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getBaseFlags_0");
        var _emscripten_bind_PxDistanceJoint_isReleasable_0 = Module["_emscripten_bind_PxDistanceJoint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_isReleasable_0");
        var _emscripten_bind_PxDistanceJoint_setActors_2 = Module["_emscripten_bind_PxDistanceJoint_setActors_2"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setActors_2");
        var _emscripten_bind_PxDistanceJoint_setLocalPose_2 = Module["_emscripten_bind_PxDistanceJoint_setLocalPose_2"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setLocalPose_2");
        var _emscripten_bind_PxDistanceJoint_getLocalPose_1 = Module["_emscripten_bind_PxDistanceJoint_getLocalPose_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getLocalPose_1");
        var _emscripten_bind_PxDistanceJoint_getRelativeTransform_0 = Module["_emscripten_bind_PxDistanceJoint_getRelativeTransform_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getRelativeTransform_0");
        var _emscripten_bind_PxDistanceJoint_getRelativeLinearVelocity_0 = Module["_emscripten_bind_PxDistanceJoint_getRelativeLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getRelativeLinearVelocity_0");
        var _emscripten_bind_PxDistanceJoint_getRelativeAngularVelocity_0 = Module["_emscripten_bind_PxDistanceJoint_getRelativeAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getRelativeAngularVelocity_0");
        var _emscripten_bind_PxDistanceJoint_setBreakForce_2 = Module["_emscripten_bind_PxDistanceJoint_setBreakForce_2"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setBreakForce_2");
        var _emscripten_bind_PxDistanceJoint_setConstraintFlags_1 = Module["_emscripten_bind_PxDistanceJoint_setConstraintFlags_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setConstraintFlags_1");
        var _emscripten_bind_PxDistanceJoint_setConstraintFlag_2 = Module["_emscripten_bind_PxDistanceJoint_setConstraintFlag_2"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setConstraintFlag_2");
        var _emscripten_bind_PxDistanceJoint_getConstraintFlags_0 = Module["_emscripten_bind_PxDistanceJoint_getConstraintFlags_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getConstraintFlags_0");
        var _emscripten_bind_PxDistanceJoint_setInvMassScale0_1 = Module["_emscripten_bind_PxDistanceJoint_setInvMassScale0_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setInvMassScale0_1");
        var _emscripten_bind_PxDistanceJoint_getInvMassScale0_0 = Module["_emscripten_bind_PxDistanceJoint_getInvMassScale0_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getInvMassScale0_0");
        var _emscripten_bind_PxDistanceJoint_setInvMassScale1_1 = Module["_emscripten_bind_PxDistanceJoint_setInvMassScale1_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setInvMassScale1_1");
        var _emscripten_bind_PxDistanceJoint_getInvMassScale1_0 = Module["_emscripten_bind_PxDistanceJoint_getInvMassScale1_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getInvMassScale1_0");
        var _emscripten_bind_PxDistanceJoint_getConstraint_0 = Module["_emscripten_bind_PxDistanceJoint_getConstraint_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getConstraint_0");
        var _emscripten_bind_PxDistanceJoint_setName_1 = Module["_emscripten_bind_PxDistanceJoint_setName_1"] = createExportWrapper("emscripten_bind_PxDistanceJoint_setName_1");
        var _emscripten_bind_PxDistanceJoint_getName_0 = Module["_emscripten_bind_PxDistanceJoint_getName_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getName_0");
        var _emscripten_bind_PxDistanceJoint_release_0 = Module["_emscripten_bind_PxDistanceJoint_release_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_release_0");
        var _emscripten_bind_PxDistanceJoint_getScene_0 = Module["_emscripten_bind_PxDistanceJoint_getScene_0"] = createExportWrapper("emscripten_bind_PxDistanceJoint_getScene_0");
        var _emscripten_bind_PxDistanceJoint___destroy___0 = Module["_emscripten_bind_PxDistanceJoint___destroy___0"] = createExportWrapper("emscripten_bind_PxDistanceJoint___destroy___0");
        var _emscripten_bind_PxDistanceJointFlags_PxDistanceJointFlags_1 = Module["_emscripten_bind_PxDistanceJointFlags_PxDistanceJointFlags_1"] = createExportWrapper("emscripten_bind_PxDistanceJointFlags_PxDistanceJointFlags_1");
        var _emscripten_bind_PxDistanceJointFlags_isSet_1 = Module["_emscripten_bind_PxDistanceJointFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxDistanceJointFlags_isSet_1");
        var _emscripten_bind_PxDistanceJointFlags_set_1 = Module["_emscripten_bind_PxDistanceJointFlags_set_1"] = createExportWrapper("emscripten_bind_PxDistanceJointFlags_set_1");
        var _emscripten_bind_PxDistanceJointFlags_clear_1 = Module["_emscripten_bind_PxDistanceJointFlags_clear_1"] = createExportWrapper("emscripten_bind_PxDistanceJointFlags_clear_1");
        var _emscripten_bind_PxDistanceJointFlags___destroy___0 = Module["_emscripten_bind_PxDistanceJointFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxDistanceJointFlags___destroy___0");
        var _emscripten_bind_PxFixedJoint_setProjectionLinearTolerance_1 = Module["_emscripten_bind_PxFixedJoint_setProjectionLinearTolerance_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_setProjectionLinearTolerance_1");
        var _emscripten_bind_PxFixedJoint_getProjectionLinearTolerance_0 = Module["_emscripten_bind_PxFixedJoint_getProjectionLinearTolerance_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getProjectionLinearTolerance_0");
        var _emscripten_bind_PxFixedJoint_setProjectionAngularTolerance_1 = Module["_emscripten_bind_PxFixedJoint_setProjectionAngularTolerance_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_setProjectionAngularTolerance_1");
        var _emscripten_bind_PxFixedJoint_getProjectionAngularTolerance_0 = Module["_emscripten_bind_PxFixedJoint_getProjectionAngularTolerance_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getProjectionAngularTolerance_0");
        var _emscripten_bind_PxFixedJoint_getConcreteTypeName_0 = Module["_emscripten_bind_PxFixedJoint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getConcreteTypeName_0");
        var _emscripten_bind_PxFixedJoint_getConcreteType_0 = Module["_emscripten_bind_PxFixedJoint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getConcreteType_0");
        var _emscripten_bind_PxFixedJoint_setBaseFlag_2 = Module["_emscripten_bind_PxFixedJoint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxFixedJoint_setBaseFlag_2");
        var _emscripten_bind_PxFixedJoint_setBaseFlags_1 = Module["_emscripten_bind_PxFixedJoint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_setBaseFlags_1");
        var _emscripten_bind_PxFixedJoint_getBaseFlags_0 = Module["_emscripten_bind_PxFixedJoint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getBaseFlags_0");
        var _emscripten_bind_PxFixedJoint_isReleasable_0 = Module["_emscripten_bind_PxFixedJoint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_isReleasable_0");
        var _emscripten_bind_PxFixedJoint_setActors_2 = Module["_emscripten_bind_PxFixedJoint_setActors_2"] = createExportWrapper("emscripten_bind_PxFixedJoint_setActors_2");
        var _emscripten_bind_PxFixedJoint_setLocalPose_2 = Module["_emscripten_bind_PxFixedJoint_setLocalPose_2"] = createExportWrapper("emscripten_bind_PxFixedJoint_setLocalPose_2");
        var _emscripten_bind_PxFixedJoint_getLocalPose_1 = Module["_emscripten_bind_PxFixedJoint_getLocalPose_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_getLocalPose_1");
        var _emscripten_bind_PxFixedJoint_getRelativeTransform_0 = Module["_emscripten_bind_PxFixedJoint_getRelativeTransform_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getRelativeTransform_0");
        var _emscripten_bind_PxFixedJoint_getRelativeLinearVelocity_0 = Module["_emscripten_bind_PxFixedJoint_getRelativeLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getRelativeLinearVelocity_0");
        var _emscripten_bind_PxFixedJoint_getRelativeAngularVelocity_0 = Module["_emscripten_bind_PxFixedJoint_getRelativeAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getRelativeAngularVelocity_0");
        var _emscripten_bind_PxFixedJoint_setBreakForce_2 = Module["_emscripten_bind_PxFixedJoint_setBreakForce_2"] = createExportWrapper("emscripten_bind_PxFixedJoint_setBreakForce_2");
        var _emscripten_bind_PxFixedJoint_setConstraintFlags_1 = Module["_emscripten_bind_PxFixedJoint_setConstraintFlags_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_setConstraintFlags_1");
        var _emscripten_bind_PxFixedJoint_setConstraintFlag_2 = Module["_emscripten_bind_PxFixedJoint_setConstraintFlag_2"] = createExportWrapper("emscripten_bind_PxFixedJoint_setConstraintFlag_2");
        var _emscripten_bind_PxFixedJoint_getConstraintFlags_0 = Module["_emscripten_bind_PxFixedJoint_getConstraintFlags_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getConstraintFlags_0");
        var _emscripten_bind_PxFixedJoint_setInvMassScale0_1 = Module["_emscripten_bind_PxFixedJoint_setInvMassScale0_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_setInvMassScale0_1");
        var _emscripten_bind_PxFixedJoint_getInvMassScale0_0 = Module["_emscripten_bind_PxFixedJoint_getInvMassScale0_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getInvMassScale0_0");
        var _emscripten_bind_PxFixedJoint_setInvMassScale1_1 = Module["_emscripten_bind_PxFixedJoint_setInvMassScale1_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_setInvMassScale1_1");
        var _emscripten_bind_PxFixedJoint_getInvMassScale1_0 = Module["_emscripten_bind_PxFixedJoint_getInvMassScale1_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getInvMassScale1_0");
        var _emscripten_bind_PxFixedJoint_getConstraint_0 = Module["_emscripten_bind_PxFixedJoint_getConstraint_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getConstraint_0");
        var _emscripten_bind_PxFixedJoint_setName_1 = Module["_emscripten_bind_PxFixedJoint_setName_1"] = createExportWrapper("emscripten_bind_PxFixedJoint_setName_1");
        var _emscripten_bind_PxFixedJoint_getName_0 = Module["_emscripten_bind_PxFixedJoint_getName_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getName_0");
        var _emscripten_bind_PxFixedJoint_release_0 = Module["_emscripten_bind_PxFixedJoint_release_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_release_0");
        var _emscripten_bind_PxFixedJoint_getScene_0 = Module["_emscripten_bind_PxFixedJoint_getScene_0"] = createExportWrapper("emscripten_bind_PxFixedJoint_getScene_0");
        var _emscripten_bind_PxFixedJoint___destroy___0 = Module["_emscripten_bind_PxFixedJoint___destroy___0"] = createExportWrapper("emscripten_bind_PxFixedJoint___destroy___0");
        var _emscripten_bind_PxJointAngularLimitPair_PxJointAngularLimitPair_3 = Module["_emscripten_bind_PxJointAngularLimitPair_PxJointAngularLimitPair_3"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_PxJointAngularLimitPair_3");
        var _emscripten_bind_PxJointAngularLimitPair_isValid_0 = Module["_emscripten_bind_PxJointAngularLimitPair_isValid_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_isValid_0");
        var _emscripten_bind_PxJointAngularLimitPair_isSoft_0 = Module["_emscripten_bind_PxJointAngularLimitPair_isSoft_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_isSoft_0");
        var _emscripten_bind_PxJointAngularLimitPair_get_upper_0 = Module["_emscripten_bind_PxJointAngularLimitPair_get_upper_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_get_upper_0");
        var _emscripten_bind_PxJointAngularLimitPair_set_upper_1 = Module["_emscripten_bind_PxJointAngularLimitPair_set_upper_1"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_set_upper_1");
        var _emscripten_bind_PxJointAngularLimitPair_get_lower_0 = Module["_emscripten_bind_PxJointAngularLimitPair_get_lower_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_get_lower_0");
        var _emscripten_bind_PxJointAngularLimitPair_set_lower_1 = Module["_emscripten_bind_PxJointAngularLimitPair_set_lower_1"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_set_lower_1");
        var _emscripten_bind_PxJointAngularLimitPair_get_restitution_0 = Module["_emscripten_bind_PxJointAngularLimitPair_get_restitution_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_get_restitution_0");
        var _emscripten_bind_PxJointAngularLimitPair_set_restitution_1 = Module["_emscripten_bind_PxJointAngularLimitPair_set_restitution_1"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_set_restitution_1");
        var _emscripten_bind_PxJointAngularLimitPair_get_bounceThreshold_0 = Module["_emscripten_bind_PxJointAngularLimitPair_get_bounceThreshold_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_get_bounceThreshold_0");
        var _emscripten_bind_PxJointAngularLimitPair_set_bounceThreshold_1 = Module["_emscripten_bind_PxJointAngularLimitPair_set_bounceThreshold_1"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_set_bounceThreshold_1");
        var _emscripten_bind_PxJointAngularLimitPair_get_stiffness_0 = Module["_emscripten_bind_PxJointAngularLimitPair_get_stiffness_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_get_stiffness_0");
        var _emscripten_bind_PxJointAngularLimitPair_set_stiffness_1 = Module["_emscripten_bind_PxJointAngularLimitPair_set_stiffness_1"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_set_stiffness_1");
        var _emscripten_bind_PxJointAngularLimitPair_get_damping_0 = Module["_emscripten_bind_PxJointAngularLimitPair_get_damping_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_get_damping_0");
        var _emscripten_bind_PxJointAngularLimitPair_set_damping_1 = Module["_emscripten_bind_PxJointAngularLimitPair_set_damping_1"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_set_damping_1");
        var _emscripten_bind_PxJointAngularLimitPair_get_contactDistance_0 = Module["_emscripten_bind_PxJointAngularLimitPair_get_contactDistance_0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_get_contactDistance_0");
        var _emscripten_bind_PxJointAngularLimitPair_set_contactDistance_1 = Module["_emscripten_bind_PxJointAngularLimitPair_set_contactDistance_1"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair_set_contactDistance_1");
        var _emscripten_bind_PxJointAngularLimitPair___destroy___0 = Module["_emscripten_bind_PxJointAngularLimitPair___destroy___0"] = createExportWrapper("emscripten_bind_PxJointAngularLimitPair___destroy___0");
        var _emscripten_bind_PxJointLimitCone_PxJointLimitCone_3 = Module["_emscripten_bind_PxJointLimitCone_PxJointLimitCone_3"] = createExportWrapper("emscripten_bind_PxJointLimitCone_PxJointLimitCone_3");
        var _emscripten_bind_PxJointLimitCone_isValid_0 = Module["_emscripten_bind_PxJointLimitCone_isValid_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_isValid_0");
        var _emscripten_bind_PxJointLimitCone_isSoft_0 = Module["_emscripten_bind_PxJointLimitCone_isSoft_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_isSoft_0");
        var _emscripten_bind_PxJointLimitCone_get_yAngle_0 = Module["_emscripten_bind_PxJointLimitCone_get_yAngle_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_get_yAngle_0");
        var _emscripten_bind_PxJointLimitCone_set_yAngle_1 = Module["_emscripten_bind_PxJointLimitCone_set_yAngle_1"] = createExportWrapper("emscripten_bind_PxJointLimitCone_set_yAngle_1");
        var _emscripten_bind_PxJointLimitCone_get_zAngle_0 = Module["_emscripten_bind_PxJointLimitCone_get_zAngle_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_get_zAngle_0");
        var _emscripten_bind_PxJointLimitCone_set_zAngle_1 = Module["_emscripten_bind_PxJointLimitCone_set_zAngle_1"] = createExportWrapper("emscripten_bind_PxJointLimitCone_set_zAngle_1");
        var _emscripten_bind_PxJointLimitCone_get_restitution_0 = Module["_emscripten_bind_PxJointLimitCone_get_restitution_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_get_restitution_0");
        var _emscripten_bind_PxJointLimitCone_set_restitution_1 = Module["_emscripten_bind_PxJointLimitCone_set_restitution_1"] = createExportWrapper("emscripten_bind_PxJointLimitCone_set_restitution_1");
        var _emscripten_bind_PxJointLimitCone_get_bounceThreshold_0 = Module["_emscripten_bind_PxJointLimitCone_get_bounceThreshold_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_get_bounceThreshold_0");
        var _emscripten_bind_PxJointLimitCone_set_bounceThreshold_1 = Module["_emscripten_bind_PxJointLimitCone_set_bounceThreshold_1"] = createExportWrapper("emscripten_bind_PxJointLimitCone_set_bounceThreshold_1");
        var _emscripten_bind_PxJointLimitCone_get_stiffness_0 = Module["_emscripten_bind_PxJointLimitCone_get_stiffness_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_get_stiffness_0");
        var _emscripten_bind_PxJointLimitCone_set_stiffness_1 = Module["_emscripten_bind_PxJointLimitCone_set_stiffness_1"] = createExportWrapper("emscripten_bind_PxJointLimitCone_set_stiffness_1");
        var _emscripten_bind_PxJointLimitCone_get_damping_0 = Module["_emscripten_bind_PxJointLimitCone_get_damping_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_get_damping_0");
        var _emscripten_bind_PxJointLimitCone_set_damping_1 = Module["_emscripten_bind_PxJointLimitCone_set_damping_1"] = createExportWrapper("emscripten_bind_PxJointLimitCone_set_damping_1");
        var _emscripten_bind_PxJointLimitCone_get_contactDistance_0 = Module["_emscripten_bind_PxJointLimitCone_get_contactDistance_0"] = createExportWrapper("emscripten_bind_PxJointLimitCone_get_contactDistance_0");
        var _emscripten_bind_PxJointLimitCone_set_contactDistance_1 = Module["_emscripten_bind_PxJointLimitCone_set_contactDistance_1"] = createExportWrapper("emscripten_bind_PxJointLimitCone_set_contactDistance_1");
        var _emscripten_bind_PxJointLimitCone___destroy___0 = Module["_emscripten_bind_PxJointLimitCone___destroy___0"] = createExportWrapper("emscripten_bind_PxJointLimitCone___destroy___0");
        var _emscripten_bind_PxJointLimitPyramid_PxJointLimitPyramid_5 = Module["_emscripten_bind_PxJointLimitPyramid_PxJointLimitPyramid_5"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_PxJointLimitPyramid_5");
        var _emscripten_bind_PxJointLimitPyramid_isValid_0 = Module["_emscripten_bind_PxJointLimitPyramid_isValid_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_isValid_0");
        var _emscripten_bind_PxJointLimitPyramid_isSoft_0 = Module["_emscripten_bind_PxJointLimitPyramid_isSoft_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_isSoft_0");
        var _emscripten_bind_PxJointLimitPyramid_get_yAngleMin_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_yAngleMin_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_yAngleMin_0");
        var _emscripten_bind_PxJointLimitPyramid_set_yAngleMin_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_yAngleMin_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_yAngleMin_1");
        var _emscripten_bind_PxJointLimitPyramid_get_yAngleMax_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_yAngleMax_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_yAngleMax_0");
        var _emscripten_bind_PxJointLimitPyramid_set_yAngleMax_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_yAngleMax_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_yAngleMax_1");
        var _emscripten_bind_PxJointLimitPyramid_get_zAngleMin_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_zAngleMin_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_zAngleMin_0");
        var _emscripten_bind_PxJointLimitPyramid_set_zAngleMin_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_zAngleMin_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_zAngleMin_1");
        var _emscripten_bind_PxJointLimitPyramid_get_zAngleMax_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_zAngleMax_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_zAngleMax_0");
        var _emscripten_bind_PxJointLimitPyramid_set_zAngleMax_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_zAngleMax_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_zAngleMax_1");
        var _emscripten_bind_PxJointLimitPyramid_get_restitution_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_restitution_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_restitution_0");
        var _emscripten_bind_PxJointLimitPyramid_set_restitution_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_restitution_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_restitution_1");
        var _emscripten_bind_PxJointLimitPyramid_get_bounceThreshold_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_bounceThreshold_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_bounceThreshold_0");
        var _emscripten_bind_PxJointLimitPyramid_set_bounceThreshold_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_bounceThreshold_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_bounceThreshold_1");
        var _emscripten_bind_PxJointLimitPyramid_get_stiffness_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_stiffness_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_stiffness_0");
        var _emscripten_bind_PxJointLimitPyramid_set_stiffness_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_stiffness_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_stiffness_1");
        var _emscripten_bind_PxJointLimitPyramid_get_damping_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_damping_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_damping_0");
        var _emscripten_bind_PxJointLimitPyramid_set_damping_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_damping_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_damping_1");
        var _emscripten_bind_PxJointLimitPyramid_get_contactDistance_0 = Module["_emscripten_bind_PxJointLimitPyramid_get_contactDistance_0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_get_contactDistance_0");
        var _emscripten_bind_PxJointLimitPyramid_set_contactDistance_1 = Module["_emscripten_bind_PxJointLimitPyramid_set_contactDistance_1"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid_set_contactDistance_1");
        var _emscripten_bind_PxJointLimitPyramid___destroy___0 = Module["_emscripten_bind_PxJointLimitPyramid___destroy___0"] = createExportWrapper("emscripten_bind_PxJointLimitPyramid___destroy___0");
        var _emscripten_bind_PxJointLinearLimit_PxJointLinearLimit_2 = Module["_emscripten_bind_PxJointLinearLimit_PxJointLinearLimit_2"] = createExportWrapper("emscripten_bind_PxJointLinearLimit_PxJointLinearLimit_2");
        var _emscripten_bind_PxJointLinearLimit_get_value_0 = Module["_emscripten_bind_PxJointLinearLimit_get_value_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimit_get_value_0");
        var _emscripten_bind_PxJointLinearLimit_set_value_1 = Module["_emscripten_bind_PxJointLinearLimit_set_value_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimit_set_value_1");
        var _emscripten_bind_PxJointLinearLimit___destroy___0 = Module["_emscripten_bind_PxJointLinearLimit___destroy___0"] = createExportWrapper("emscripten_bind_PxJointLinearLimit___destroy___0");
        var _emscripten_bind_PxJointLinearLimitPair_PxJointLinearLimitPair_3 = Module["_emscripten_bind_PxJointLinearLimitPair_PxJointLinearLimitPair_3"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_PxJointLinearLimitPair_3");
        var _emscripten_bind_PxJointLinearLimitPair_isValid_0 = Module["_emscripten_bind_PxJointLinearLimitPair_isValid_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_isValid_0");
        var _emscripten_bind_PxJointLinearLimitPair_isSoft_0 = Module["_emscripten_bind_PxJointLinearLimitPair_isSoft_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_isSoft_0");
        var _emscripten_bind_PxJointLinearLimitPair_get_upper_0 = Module["_emscripten_bind_PxJointLinearLimitPair_get_upper_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_get_upper_0");
        var _emscripten_bind_PxJointLinearLimitPair_set_upper_1 = Module["_emscripten_bind_PxJointLinearLimitPair_set_upper_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_set_upper_1");
        var _emscripten_bind_PxJointLinearLimitPair_get_lower_0 = Module["_emscripten_bind_PxJointLinearLimitPair_get_lower_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_get_lower_0");
        var _emscripten_bind_PxJointLinearLimitPair_set_lower_1 = Module["_emscripten_bind_PxJointLinearLimitPair_set_lower_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_set_lower_1");
        var _emscripten_bind_PxJointLinearLimitPair_get_restitution_0 = Module["_emscripten_bind_PxJointLinearLimitPair_get_restitution_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_get_restitution_0");
        var _emscripten_bind_PxJointLinearLimitPair_set_restitution_1 = Module["_emscripten_bind_PxJointLinearLimitPair_set_restitution_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_set_restitution_1");
        var _emscripten_bind_PxJointLinearLimitPair_get_bounceThreshold_0 = Module["_emscripten_bind_PxJointLinearLimitPair_get_bounceThreshold_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_get_bounceThreshold_0");
        var _emscripten_bind_PxJointLinearLimitPair_set_bounceThreshold_1 = Module["_emscripten_bind_PxJointLinearLimitPair_set_bounceThreshold_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_set_bounceThreshold_1");
        var _emscripten_bind_PxJointLinearLimitPair_get_stiffness_0 = Module["_emscripten_bind_PxJointLinearLimitPair_get_stiffness_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_get_stiffness_0");
        var _emscripten_bind_PxJointLinearLimitPair_set_stiffness_1 = Module["_emscripten_bind_PxJointLinearLimitPair_set_stiffness_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_set_stiffness_1");
        var _emscripten_bind_PxJointLinearLimitPair_get_damping_0 = Module["_emscripten_bind_PxJointLinearLimitPair_get_damping_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_get_damping_0");
        var _emscripten_bind_PxJointLinearLimitPair_set_damping_1 = Module["_emscripten_bind_PxJointLinearLimitPair_set_damping_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_set_damping_1");
        var _emscripten_bind_PxJointLinearLimitPair_get_contactDistance_0 = Module["_emscripten_bind_PxJointLinearLimitPair_get_contactDistance_0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_get_contactDistance_0");
        var _emscripten_bind_PxJointLinearLimitPair_set_contactDistance_1 = Module["_emscripten_bind_PxJointLinearLimitPair_set_contactDistance_1"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair_set_contactDistance_1");
        var _emscripten_bind_PxJointLinearLimitPair___destroy___0 = Module["_emscripten_bind_PxJointLinearLimitPair___destroy___0"] = createExportWrapper("emscripten_bind_PxJointLinearLimitPair___destroy___0");
        var _emscripten_bind_PxPrismaticJoint_getPosition_0 = Module["_emscripten_bind_PxPrismaticJoint_getPosition_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getPosition_0");
        var _emscripten_bind_PxPrismaticJoint_getVelocity_0 = Module["_emscripten_bind_PxPrismaticJoint_getVelocity_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getVelocity_0");
        var _emscripten_bind_PxPrismaticJoint_setLimit_1 = Module["_emscripten_bind_PxPrismaticJoint_setLimit_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setLimit_1");
        var _emscripten_bind_PxPrismaticJoint_setPrismaticJointFlags_1 = Module["_emscripten_bind_PxPrismaticJoint_setPrismaticJointFlags_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setPrismaticJointFlags_1");
        var _emscripten_bind_PxPrismaticJoint_setPrismaticJointFlag_2 = Module["_emscripten_bind_PxPrismaticJoint_setPrismaticJointFlag_2"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setPrismaticJointFlag_2");
        var _emscripten_bind_PxPrismaticJoint_getPrismaticJointFlags_0 = Module["_emscripten_bind_PxPrismaticJoint_getPrismaticJointFlags_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getPrismaticJointFlags_0");
        var _emscripten_bind_PxPrismaticJoint_setProjectionLinearTolerance_1 = Module["_emscripten_bind_PxPrismaticJoint_setProjectionLinearTolerance_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setProjectionLinearTolerance_1");
        var _emscripten_bind_PxPrismaticJoint_getProjectionLinearTolerance_0 = Module["_emscripten_bind_PxPrismaticJoint_getProjectionLinearTolerance_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getProjectionLinearTolerance_0");
        var _emscripten_bind_PxPrismaticJoint_setProjectionAngularTolerance_1 = Module["_emscripten_bind_PxPrismaticJoint_setProjectionAngularTolerance_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setProjectionAngularTolerance_1");
        var _emscripten_bind_PxPrismaticJoint_getProjectionAngularTolerance_0 = Module["_emscripten_bind_PxPrismaticJoint_getProjectionAngularTolerance_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getProjectionAngularTolerance_0");
        var _emscripten_bind_PxPrismaticJoint_getConcreteTypeName_0 = Module["_emscripten_bind_PxPrismaticJoint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getConcreteTypeName_0");
        var _emscripten_bind_PxPrismaticJoint_getConcreteType_0 = Module["_emscripten_bind_PxPrismaticJoint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getConcreteType_0");
        var _emscripten_bind_PxPrismaticJoint_setBaseFlag_2 = Module["_emscripten_bind_PxPrismaticJoint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setBaseFlag_2");
        var _emscripten_bind_PxPrismaticJoint_setBaseFlags_1 = Module["_emscripten_bind_PxPrismaticJoint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setBaseFlags_1");
        var _emscripten_bind_PxPrismaticJoint_getBaseFlags_0 = Module["_emscripten_bind_PxPrismaticJoint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getBaseFlags_0");
        var _emscripten_bind_PxPrismaticJoint_isReleasable_0 = Module["_emscripten_bind_PxPrismaticJoint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_isReleasable_0");
        var _emscripten_bind_PxPrismaticJoint_setActors_2 = Module["_emscripten_bind_PxPrismaticJoint_setActors_2"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setActors_2");
        var _emscripten_bind_PxPrismaticJoint_setLocalPose_2 = Module["_emscripten_bind_PxPrismaticJoint_setLocalPose_2"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setLocalPose_2");
        var _emscripten_bind_PxPrismaticJoint_getLocalPose_1 = Module["_emscripten_bind_PxPrismaticJoint_getLocalPose_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getLocalPose_1");
        var _emscripten_bind_PxPrismaticJoint_getRelativeTransform_0 = Module["_emscripten_bind_PxPrismaticJoint_getRelativeTransform_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getRelativeTransform_0");
        var _emscripten_bind_PxPrismaticJoint_getRelativeLinearVelocity_0 = Module["_emscripten_bind_PxPrismaticJoint_getRelativeLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getRelativeLinearVelocity_0");
        var _emscripten_bind_PxPrismaticJoint_getRelativeAngularVelocity_0 = Module["_emscripten_bind_PxPrismaticJoint_getRelativeAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getRelativeAngularVelocity_0");
        var _emscripten_bind_PxPrismaticJoint_setBreakForce_2 = Module["_emscripten_bind_PxPrismaticJoint_setBreakForce_2"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setBreakForce_2");
        var _emscripten_bind_PxPrismaticJoint_setConstraintFlags_1 = Module["_emscripten_bind_PxPrismaticJoint_setConstraintFlags_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setConstraintFlags_1");
        var _emscripten_bind_PxPrismaticJoint_setConstraintFlag_2 = Module["_emscripten_bind_PxPrismaticJoint_setConstraintFlag_2"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setConstraintFlag_2");
        var _emscripten_bind_PxPrismaticJoint_getConstraintFlags_0 = Module["_emscripten_bind_PxPrismaticJoint_getConstraintFlags_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getConstraintFlags_0");
        var _emscripten_bind_PxPrismaticJoint_setInvMassScale0_1 = Module["_emscripten_bind_PxPrismaticJoint_setInvMassScale0_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setInvMassScale0_1");
        var _emscripten_bind_PxPrismaticJoint_getInvMassScale0_0 = Module["_emscripten_bind_PxPrismaticJoint_getInvMassScale0_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getInvMassScale0_0");
        var _emscripten_bind_PxPrismaticJoint_setInvMassScale1_1 = Module["_emscripten_bind_PxPrismaticJoint_setInvMassScale1_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setInvMassScale1_1");
        var _emscripten_bind_PxPrismaticJoint_getInvMassScale1_0 = Module["_emscripten_bind_PxPrismaticJoint_getInvMassScale1_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getInvMassScale1_0");
        var _emscripten_bind_PxPrismaticJoint_getConstraint_0 = Module["_emscripten_bind_PxPrismaticJoint_getConstraint_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getConstraint_0");
        var _emscripten_bind_PxPrismaticJoint_setName_1 = Module["_emscripten_bind_PxPrismaticJoint_setName_1"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_setName_1");
        var _emscripten_bind_PxPrismaticJoint_getName_0 = Module["_emscripten_bind_PxPrismaticJoint_getName_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getName_0");
        var _emscripten_bind_PxPrismaticJoint_release_0 = Module["_emscripten_bind_PxPrismaticJoint_release_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_release_0");
        var _emscripten_bind_PxPrismaticJoint_getScene_0 = Module["_emscripten_bind_PxPrismaticJoint_getScene_0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint_getScene_0");
        var _emscripten_bind_PxPrismaticJoint___destroy___0 = Module["_emscripten_bind_PxPrismaticJoint___destroy___0"] = createExportWrapper("emscripten_bind_PxPrismaticJoint___destroy___0");
        var _emscripten_bind_PxPrismaticJointFlags_PxPrismaticJointFlags_1 = Module["_emscripten_bind_PxPrismaticJointFlags_PxPrismaticJointFlags_1"] = createExportWrapper("emscripten_bind_PxPrismaticJointFlags_PxPrismaticJointFlags_1");
        var _emscripten_bind_PxPrismaticJointFlags_isSet_1 = Module["_emscripten_bind_PxPrismaticJointFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxPrismaticJointFlags_isSet_1");
        var _emscripten_bind_PxPrismaticJointFlags_set_1 = Module["_emscripten_bind_PxPrismaticJointFlags_set_1"] = createExportWrapper("emscripten_bind_PxPrismaticJointFlags_set_1");
        var _emscripten_bind_PxPrismaticJointFlags_clear_1 = Module["_emscripten_bind_PxPrismaticJointFlags_clear_1"] = createExportWrapper("emscripten_bind_PxPrismaticJointFlags_clear_1");
        var _emscripten_bind_PxPrismaticJointFlags___destroy___0 = Module["_emscripten_bind_PxPrismaticJointFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxPrismaticJointFlags___destroy___0");
        var _emscripten_bind_PxRigidActorExt_createExclusiveShape_3 = Module["_emscripten_bind_PxRigidActorExt_createExclusiveShape_3"] = createExportWrapper("emscripten_bind_PxRigidActorExt_createExclusiveShape_3");
        var _emscripten_bind_PxRigidActorExt_createExclusiveShape_4 = Module["_emscripten_bind_PxRigidActorExt_createExclusiveShape_4"] = createExportWrapper("emscripten_bind_PxRigidActorExt_createExclusiveShape_4");
        var _emscripten_bind_PxRigidActorExt___destroy___0 = Module["_emscripten_bind_PxRigidActorExt___destroy___0"] = createExportWrapper("emscripten_bind_PxRigidActorExt___destroy___0");
        var _emscripten_bind_PxRigidBodyExt_updateMassAndInertia_2 = Module["_emscripten_bind_PxRigidBodyExt_updateMassAndInertia_2"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_updateMassAndInertia_2");
        var _emscripten_bind_PxRigidBodyExt_updateMassAndInertia_3 = Module["_emscripten_bind_PxRigidBodyExt_updateMassAndInertia_3"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_updateMassAndInertia_3");
        var _emscripten_bind_PxRigidBodyExt_updateMassAndInertia_4 = Module["_emscripten_bind_PxRigidBodyExt_updateMassAndInertia_4"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_updateMassAndInertia_4");
        var _emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_2 = Module["_emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_2"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_2");
        var _emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_3 = Module["_emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_3"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_3");
        var _emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_4 = Module["_emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_4"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_4");
        var _emscripten_bind_PxRigidBodyExt_addForceAtPos_3 = Module["_emscripten_bind_PxRigidBodyExt_addForceAtPos_3"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addForceAtPos_3");
        var _emscripten_bind_PxRigidBodyExt_addForceAtPos_4 = Module["_emscripten_bind_PxRigidBodyExt_addForceAtPos_4"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addForceAtPos_4");
        var _emscripten_bind_PxRigidBodyExt_addForceAtPos_5 = Module["_emscripten_bind_PxRigidBodyExt_addForceAtPos_5"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addForceAtPos_5");
        var _emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_3 = Module["_emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_3"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_3");
        var _emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_4 = Module["_emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_4"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_4");
        var _emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_5 = Module["_emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_5"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_5");
        var _emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_3 = Module["_emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_3"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_3");
        var _emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_4 = Module["_emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_4"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_4");
        var _emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_5 = Module["_emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_5"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_5");
        var _emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_3 = Module["_emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_3"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_3");
        var _emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_4 = Module["_emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_4"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_4");
        var _emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_5 = Module["_emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_5"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_5");
        var _emscripten_bind_PxRigidBodyExt_getVelocityAtPos_2 = Module["_emscripten_bind_PxRigidBodyExt_getVelocityAtPos_2"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_getVelocityAtPos_2");
        var _emscripten_bind_PxRigidBodyExt_getLocalVelocityAtLocalPos_2 = Module["_emscripten_bind_PxRigidBodyExt_getLocalVelocityAtLocalPos_2"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_getLocalVelocityAtLocalPos_2");
        var _emscripten_bind_PxRigidBodyExt_getVelocityAtOffset_2 = Module["_emscripten_bind_PxRigidBodyExt_getVelocityAtOffset_2"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_getVelocityAtOffset_2");
        var _emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_5 = Module["_emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_5"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_5");
        var _emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_8 = Module["_emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_8"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_8");
        var _emscripten_bind_PxRigidBodyExt_computeLinearAngularImpulse_8 = Module["_emscripten_bind_PxRigidBodyExt_computeLinearAngularImpulse_8"] = createExportWrapper("emscripten_bind_PxRigidBodyExt_computeLinearAngularImpulse_8");
        var _emscripten_bind_PxRigidBodyExt___destroy___0 = Module["_emscripten_bind_PxRigidBodyExt___destroy___0"] = createExportWrapper("emscripten_bind_PxRigidBodyExt___destroy___0");
        var _emscripten_bind_PxRevoluteJoint_getAngle_0 = Module["_emscripten_bind_PxRevoluteJoint_getAngle_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getAngle_0");
        var _emscripten_bind_PxRevoluteJoint_getVelocity_0 = Module["_emscripten_bind_PxRevoluteJoint_getVelocity_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getVelocity_0");
        var _emscripten_bind_PxRevoluteJoint_setLimit_1 = Module["_emscripten_bind_PxRevoluteJoint_setLimit_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setLimit_1");
        var _emscripten_bind_PxRevoluteJoint_setDriveVelocity_1 = Module["_emscripten_bind_PxRevoluteJoint_setDriveVelocity_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setDriveVelocity_1");
        var _emscripten_bind_PxRevoluteJoint_setDriveVelocity_2 = Module["_emscripten_bind_PxRevoluteJoint_setDriveVelocity_2"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setDriveVelocity_2");
        var _emscripten_bind_PxRevoluteJoint_getDriveVelocity_0 = Module["_emscripten_bind_PxRevoluteJoint_getDriveVelocity_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getDriveVelocity_0");
        var _emscripten_bind_PxRevoluteJoint_setDriveForceLimit_1 = Module["_emscripten_bind_PxRevoluteJoint_setDriveForceLimit_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setDriveForceLimit_1");
        var _emscripten_bind_PxRevoluteJoint_getDriveForceLimit_0 = Module["_emscripten_bind_PxRevoluteJoint_getDriveForceLimit_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getDriveForceLimit_0");
        var _emscripten_bind_PxRevoluteJoint_setDriveGearRatio_1 = Module["_emscripten_bind_PxRevoluteJoint_setDriveGearRatio_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setDriveGearRatio_1");
        var _emscripten_bind_PxRevoluteJoint_getDriveGearRatio_0 = Module["_emscripten_bind_PxRevoluteJoint_getDriveGearRatio_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getDriveGearRatio_0");
        var _emscripten_bind_PxRevoluteJoint_setRevoluteJointFlags_1 = Module["_emscripten_bind_PxRevoluteJoint_setRevoluteJointFlags_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setRevoluteJointFlags_1");
        var _emscripten_bind_PxRevoluteJoint_setRevoluteJointFlag_2 = Module["_emscripten_bind_PxRevoluteJoint_setRevoluteJointFlag_2"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setRevoluteJointFlag_2");
        var _emscripten_bind_PxRevoluteJoint_getRevoluteJointFlags_0 = Module["_emscripten_bind_PxRevoluteJoint_getRevoluteJointFlags_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getRevoluteJointFlags_0");
        var _emscripten_bind_PxRevoluteJoint_setProjectionLinearTolerance_1 = Module["_emscripten_bind_PxRevoluteJoint_setProjectionLinearTolerance_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setProjectionLinearTolerance_1");
        var _emscripten_bind_PxRevoluteJoint_getProjectionLinearTolerance_0 = Module["_emscripten_bind_PxRevoluteJoint_getProjectionLinearTolerance_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getProjectionLinearTolerance_0");
        var _emscripten_bind_PxRevoluteJoint_setProjectionAngularTolerance_1 = Module["_emscripten_bind_PxRevoluteJoint_setProjectionAngularTolerance_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setProjectionAngularTolerance_1");
        var _emscripten_bind_PxRevoluteJoint_getProjectionAngularTolerance_0 = Module["_emscripten_bind_PxRevoluteJoint_getProjectionAngularTolerance_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getProjectionAngularTolerance_0");
        var _emscripten_bind_PxRevoluteJoint_getConcreteTypeName_0 = Module["_emscripten_bind_PxRevoluteJoint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getConcreteTypeName_0");
        var _emscripten_bind_PxRevoluteJoint_getConcreteType_0 = Module["_emscripten_bind_PxRevoluteJoint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getConcreteType_0");
        var _emscripten_bind_PxRevoluteJoint_setBaseFlag_2 = Module["_emscripten_bind_PxRevoluteJoint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setBaseFlag_2");
        var _emscripten_bind_PxRevoluteJoint_setBaseFlags_1 = Module["_emscripten_bind_PxRevoluteJoint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setBaseFlags_1");
        var _emscripten_bind_PxRevoluteJoint_getBaseFlags_0 = Module["_emscripten_bind_PxRevoluteJoint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getBaseFlags_0");
        var _emscripten_bind_PxRevoluteJoint_isReleasable_0 = Module["_emscripten_bind_PxRevoluteJoint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_isReleasable_0");
        var _emscripten_bind_PxRevoluteJoint_setActors_2 = Module["_emscripten_bind_PxRevoluteJoint_setActors_2"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setActors_2");
        var _emscripten_bind_PxRevoluteJoint_setLocalPose_2 = Module["_emscripten_bind_PxRevoluteJoint_setLocalPose_2"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setLocalPose_2");
        var _emscripten_bind_PxRevoluteJoint_getLocalPose_1 = Module["_emscripten_bind_PxRevoluteJoint_getLocalPose_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getLocalPose_1");
        var _emscripten_bind_PxRevoluteJoint_getRelativeTransform_0 = Module["_emscripten_bind_PxRevoluteJoint_getRelativeTransform_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getRelativeTransform_0");
        var _emscripten_bind_PxRevoluteJoint_getRelativeLinearVelocity_0 = Module["_emscripten_bind_PxRevoluteJoint_getRelativeLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getRelativeLinearVelocity_0");
        var _emscripten_bind_PxRevoluteJoint_getRelativeAngularVelocity_0 = Module["_emscripten_bind_PxRevoluteJoint_getRelativeAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getRelativeAngularVelocity_0");
        var _emscripten_bind_PxRevoluteJoint_setBreakForce_2 = Module["_emscripten_bind_PxRevoluteJoint_setBreakForce_2"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setBreakForce_2");
        var _emscripten_bind_PxRevoluteJoint_setConstraintFlags_1 = Module["_emscripten_bind_PxRevoluteJoint_setConstraintFlags_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setConstraintFlags_1");
        var _emscripten_bind_PxRevoluteJoint_setConstraintFlag_2 = Module["_emscripten_bind_PxRevoluteJoint_setConstraintFlag_2"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setConstraintFlag_2");
        var _emscripten_bind_PxRevoluteJoint_getConstraintFlags_0 = Module["_emscripten_bind_PxRevoluteJoint_getConstraintFlags_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getConstraintFlags_0");
        var _emscripten_bind_PxRevoluteJoint_setInvMassScale0_1 = Module["_emscripten_bind_PxRevoluteJoint_setInvMassScale0_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setInvMassScale0_1");
        var _emscripten_bind_PxRevoluteJoint_getInvMassScale0_0 = Module["_emscripten_bind_PxRevoluteJoint_getInvMassScale0_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getInvMassScale0_0");
        var _emscripten_bind_PxRevoluteJoint_setInvMassScale1_1 = Module["_emscripten_bind_PxRevoluteJoint_setInvMassScale1_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setInvMassScale1_1");
        var _emscripten_bind_PxRevoluteJoint_getInvMassScale1_0 = Module["_emscripten_bind_PxRevoluteJoint_getInvMassScale1_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getInvMassScale1_0");
        var _emscripten_bind_PxRevoluteJoint_getConstraint_0 = Module["_emscripten_bind_PxRevoluteJoint_getConstraint_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getConstraint_0");
        var _emscripten_bind_PxRevoluteJoint_setName_1 = Module["_emscripten_bind_PxRevoluteJoint_setName_1"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_setName_1");
        var _emscripten_bind_PxRevoluteJoint_getName_0 = Module["_emscripten_bind_PxRevoluteJoint_getName_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getName_0");
        var _emscripten_bind_PxRevoluteJoint_release_0 = Module["_emscripten_bind_PxRevoluteJoint_release_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_release_0");
        var _emscripten_bind_PxRevoluteJoint_getScene_0 = Module["_emscripten_bind_PxRevoluteJoint_getScene_0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint_getScene_0");
        var _emscripten_bind_PxRevoluteJoint___destroy___0 = Module["_emscripten_bind_PxRevoluteJoint___destroy___0"] = createExportWrapper("emscripten_bind_PxRevoluteJoint___destroy___0");
        var _emscripten_bind_PxRevoluteJointFlags_PxRevoluteJointFlags_1 = Module["_emscripten_bind_PxRevoluteJointFlags_PxRevoluteJointFlags_1"] = createExportWrapper("emscripten_bind_PxRevoluteJointFlags_PxRevoluteJointFlags_1");
        var _emscripten_bind_PxRevoluteJointFlags_isSet_1 = Module["_emscripten_bind_PxRevoluteJointFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxRevoluteJointFlags_isSet_1");
        var _emscripten_bind_PxRevoluteJointFlags_set_1 = Module["_emscripten_bind_PxRevoluteJointFlags_set_1"] = createExportWrapper("emscripten_bind_PxRevoluteJointFlags_set_1");
        var _emscripten_bind_PxRevoluteJointFlags_clear_1 = Module["_emscripten_bind_PxRevoluteJointFlags_clear_1"] = createExportWrapper("emscripten_bind_PxRevoluteJointFlags_clear_1");
        var _emscripten_bind_PxRevoluteJointFlags___destroy___0 = Module["_emscripten_bind_PxRevoluteJointFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxRevoluteJointFlags___destroy___0");
        var _emscripten_bind_PxSerialization_isSerializable_2 = Module["_emscripten_bind_PxSerialization_isSerializable_2"] = createExportWrapper("emscripten_bind_PxSerialization_isSerializable_2");
        var _emscripten_bind_PxSerialization_isSerializable_3 = Module["_emscripten_bind_PxSerialization_isSerializable_3"] = createExportWrapper("emscripten_bind_PxSerialization_isSerializable_3");
        var _emscripten_bind_PxSerialization_complete_2 = Module["_emscripten_bind_PxSerialization_complete_2"] = createExportWrapper("emscripten_bind_PxSerialization_complete_2");
        var _emscripten_bind_PxSerialization_complete_3 = Module["_emscripten_bind_PxSerialization_complete_3"] = createExportWrapper("emscripten_bind_PxSerialization_complete_3");
        var _emscripten_bind_PxSerialization_complete_4 = Module["_emscripten_bind_PxSerialization_complete_4"] = createExportWrapper("emscripten_bind_PxSerialization_complete_4");
        var _emscripten_bind_PxSerialization_createSerialObjectIds_2 = Module["_emscripten_bind_PxSerialization_createSerialObjectIds_2"] = createExportWrapper("emscripten_bind_PxSerialization_createSerialObjectIds_2");
        var _emscripten_bind_PxSerialization_createCollectionFromXml_3 = Module["_emscripten_bind_PxSerialization_createCollectionFromXml_3"] = createExportWrapper("emscripten_bind_PxSerialization_createCollectionFromXml_3");
        var _emscripten_bind_PxSerialization_createCollectionFromXml_4 = Module["_emscripten_bind_PxSerialization_createCollectionFromXml_4"] = createExportWrapper("emscripten_bind_PxSerialization_createCollectionFromXml_4");
        var _emscripten_bind_PxSerialization_createCollectionFromBinary_2 = Module["_emscripten_bind_PxSerialization_createCollectionFromBinary_2"] = createExportWrapper("emscripten_bind_PxSerialization_createCollectionFromBinary_2");
        var _emscripten_bind_PxSerialization_createCollectionFromBinary_3 = Module["_emscripten_bind_PxSerialization_createCollectionFromBinary_3"] = createExportWrapper("emscripten_bind_PxSerialization_createCollectionFromBinary_3");
        var _emscripten_bind_PxSerialization_serializeCollectionToXml_3 = Module["_emscripten_bind_PxSerialization_serializeCollectionToXml_3"] = createExportWrapper("emscripten_bind_PxSerialization_serializeCollectionToXml_3");
        var _emscripten_bind_PxSerialization_serializeCollectionToXml_4 = Module["_emscripten_bind_PxSerialization_serializeCollectionToXml_4"] = createExportWrapper("emscripten_bind_PxSerialization_serializeCollectionToXml_4");
        var _emscripten_bind_PxSerialization_serializeCollectionToXml_5 = Module["_emscripten_bind_PxSerialization_serializeCollectionToXml_5"] = createExportWrapper("emscripten_bind_PxSerialization_serializeCollectionToXml_5");
        var _emscripten_bind_PxSerialization_serializeCollectionToBinary_3 = Module["_emscripten_bind_PxSerialization_serializeCollectionToBinary_3"] = createExportWrapper("emscripten_bind_PxSerialization_serializeCollectionToBinary_3");
        var _emscripten_bind_PxSerialization_serializeCollectionToBinary_4 = Module["_emscripten_bind_PxSerialization_serializeCollectionToBinary_4"] = createExportWrapper("emscripten_bind_PxSerialization_serializeCollectionToBinary_4");
        var _emscripten_bind_PxSerialization_serializeCollectionToBinary_5 = Module["_emscripten_bind_PxSerialization_serializeCollectionToBinary_5"] = createExportWrapper("emscripten_bind_PxSerialization_serializeCollectionToBinary_5");
        var _emscripten_bind_PxSerialization_createSerializationRegistry_1 = Module["_emscripten_bind_PxSerialization_createSerializationRegistry_1"] = createExportWrapper("emscripten_bind_PxSerialization_createSerializationRegistry_1");
        var _emscripten_bind_PxSerialization___destroy___0 = Module["_emscripten_bind_PxSerialization___destroy___0"] = createExportWrapper("emscripten_bind_PxSerialization___destroy___0");
        var _emscripten_bind_PxSerializationRegistry_release_0 = Module["_emscripten_bind_PxSerializationRegistry_release_0"] = createExportWrapper("emscripten_bind_PxSerializationRegistry_release_0");
        var _emscripten_bind_PxSphericalJoint_setLimitCone_1 = Module["_emscripten_bind_PxSphericalJoint_setLimitCone_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setLimitCone_1");
        var _emscripten_bind_PxSphericalJoint_getSwingYAngle_0 = Module["_emscripten_bind_PxSphericalJoint_getSwingYAngle_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getSwingYAngle_0");
        var _emscripten_bind_PxSphericalJoint_getSwingZAngle_0 = Module["_emscripten_bind_PxSphericalJoint_getSwingZAngle_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getSwingZAngle_0");
        var _emscripten_bind_PxSphericalJoint_setSphericalJointFlags_1 = Module["_emscripten_bind_PxSphericalJoint_setSphericalJointFlags_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setSphericalJointFlags_1");
        var _emscripten_bind_PxSphericalJoint_setSphericalJointFlag_2 = Module["_emscripten_bind_PxSphericalJoint_setSphericalJointFlag_2"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setSphericalJointFlag_2");
        var _emscripten_bind_PxSphericalJoint_getSphericalJointFlags_0 = Module["_emscripten_bind_PxSphericalJoint_getSphericalJointFlags_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getSphericalJointFlags_0");
        var _emscripten_bind_PxSphericalJoint_setProjectionLinearTolerance_1 = Module["_emscripten_bind_PxSphericalJoint_setProjectionLinearTolerance_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setProjectionLinearTolerance_1");
        var _emscripten_bind_PxSphericalJoint_getProjectionLinearTolerance_0 = Module["_emscripten_bind_PxSphericalJoint_getProjectionLinearTolerance_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getProjectionLinearTolerance_0");
        var _emscripten_bind_PxSphericalJoint_getConcreteTypeName_0 = Module["_emscripten_bind_PxSphericalJoint_getConcreteTypeName_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getConcreteTypeName_0");
        var _emscripten_bind_PxSphericalJoint_getConcreteType_0 = Module["_emscripten_bind_PxSphericalJoint_getConcreteType_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getConcreteType_0");
        var _emscripten_bind_PxSphericalJoint_setBaseFlag_2 = Module["_emscripten_bind_PxSphericalJoint_setBaseFlag_2"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setBaseFlag_2");
        var _emscripten_bind_PxSphericalJoint_setBaseFlags_1 = Module["_emscripten_bind_PxSphericalJoint_setBaseFlags_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setBaseFlags_1");
        var _emscripten_bind_PxSphericalJoint_getBaseFlags_0 = Module["_emscripten_bind_PxSphericalJoint_getBaseFlags_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getBaseFlags_0");
        var _emscripten_bind_PxSphericalJoint_isReleasable_0 = Module["_emscripten_bind_PxSphericalJoint_isReleasable_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_isReleasable_0");
        var _emscripten_bind_PxSphericalJoint_setActors_2 = Module["_emscripten_bind_PxSphericalJoint_setActors_2"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setActors_2");
        var _emscripten_bind_PxSphericalJoint_setLocalPose_2 = Module["_emscripten_bind_PxSphericalJoint_setLocalPose_2"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setLocalPose_2");
        var _emscripten_bind_PxSphericalJoint_getLocalPose_1 = Module["_emscripten_bind_PxSphericalJoint_getLocalPose_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getLocalPose_1");
        var _emscripten_bind_PxSphericalJoint_getRelativeTransform_0 = Module["_emscripten_bind_PxSphericalJoint_getRelativeTransform_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getRelativeTransform_0");
        var _emscripten_bind_PxSphericalJoint_getRelativeLinearVelocity_0 = Module["_emscripten_bind_PxSphericalJoint_getRelativeLinearVelocity_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getRelativeLinearVelocity_0");
        var _emscripten_bind_PxSphericalJoint_getRelativeAngularVelocity_0 = Module["_emscripten_bind_PxSphericalJoint_getRelativeAngularVelocity_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getRelativeAngularVelocity_0");
        var _emscripten_bind_PxSphericalJoint_setBreakForce_2 = Module["_emscripten_bind_PxSphericalJoint_setBreakForce_2"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setBreakForce_2");
        var _emscripten_bind_PxSphericalJoint_setConstraintFlags_1 = Module["_emscripten_bind_PxSphericalJoint_setConstraintFlags_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setConstraintFlags_1");
        var _emscripten_bind_PxSphericalJoint_setConstraintFlag_2 = Module["_emscripten_bind_PxSphericalJoint_setConstraintFlag_2"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setConstraintFlag_2");
        var _emscripten_bind_PxSphericalJoint_getConstraintFlags_0 = Module["_emscripten_bind_PxSphericalJoint_getConstraintFlags_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getConstraintFlags_0");
        var _emscripten_bind_PxSphericalJoint_setInvMassScale0_1 = Module["_emscripten_bind_PxSphericalJoint_setInvMassScale0_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setInvMassScale0_1");
        var _emscripten_bind_PxSphericalJoint_getInvMassScale0_0 = Module["_emscripten_bind_PxSphericalJoint_getInvMassScale0_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getInvMassScale0_0");
        var _emscripten_bind_PxSphericalJoint_setInvMassScale1_1 = Module["_emscripten_bind_PxSphericalJoint_setInvMassScale1_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setInvMassScale1_1");
        var _emscripten_bind_PxSphericalJoint_getInvMassScale1_0 = Module["_emscripten_bind_PxSphericalJoint_getInvMassScale1_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getInvMassScale1_0");
        var _emscripten_bind_PxSphericalJoint_getConstraint_0 = Module["_emscripten_bind_PxSphericalJoint_getConstraint_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getConstraint_0");
        var _emscripten_bind_PxSphericalJoint_setName_1 = Module["_emscripten_bind_PxSphericalJoint_setName_1"] = createExportWrapper("emscripten_bind_PxSphericalJoint_setName_1");
        var _emscripten_bind_PxSphericalJoint_getName_0 = Module["_emscripten_bind_PxSphericalJoint_getName_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getName_0");
        var _emscripten_bind_PxSphericalJoint_release_0 = Module["_emscripten_bind_PxSphericalJoint_release_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_release_0");
        var _emscripten_bind_PxSphericalJoint_getScene_0 = Module["_emscripten_bind_PxSphericalJoint_getScene_0"] = createExportWrapper("emscripten_bind_PxSphericalJoint_getScene_0");
        var _emscripten_bind_PxSphericalJoint___destroy___0 = Module["_emscripten_bind_PxSphericalJoint___destroy___0"] = createExportWrapper("emscripten_bind_PxSphericalJoint___destroy___0");
        var _emscripten_bind_PxSphericalJointFlags_PxSphericalJointFlags_1 = Module["_emscripten_bind_PxSphericalJointFlags_PxSphericalJointFlags_1"] = createExportWrapper("emscripten_bind_PxSphericalJointFlags_PxSphericalJointFlags_1");
        var _emscripten_bind_PxSphericalJointFlags_isSet_1 = Module["_emscripten_bind_PxSphericalJointFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxSphericalJointFlags_isSet_1");
        var _emscripten_bind_PxSphericalJointFlags_set_1 = Module["_emscripten_bind_PxSphericalJointFlags_set_1"] = createExportWrapper("emscripten_bind_PxSphericalJointFlags_set_1");
        var _emscripten_bind_PxSphericalJointFlags_clear_1 = Module["_emscripten_bind_PxSphericalJointFlags_clear_1"] = createExportWrapper("emscripten_bind_PxSphericalJointFlags_clear_1");
        var _emscripten_bind_PxSphericalJointFlags___destroy___0 = Module["_emscripten_bind_PxSphericalJointFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxSphericalJointFlags___destroy___0");
        var _emscripten_bind_BatchVehicleUpdateDesc_BatchVehicleUpdateDesc_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_BatchVehicleUpdateDesc_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_BatchVehicleUpdateDesc_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_foundation_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_foundation_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_foundation_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_foundation_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_foundation_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_foundation_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_scene_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_scene_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_scene_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_scene_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_scene_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_scene_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_frictionPairs_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_frictionPairs_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_frictionPairs_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_frictionPairs_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_frictionPairs_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_frictionPairs_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_maxNbVehicles_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_maxNbVehicles_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_maxNbVehicles_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_maxNbVehicles_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_maxNbVehicles_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_maxNbVehicles_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_maxNbWheelsPerVehicle_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_maxNbWheelsPerVehicle_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_maxNbWheelsPerVehicle_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_maxNbWheelsPerVehicle_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_maxNbWheelsPerVehicle_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_maxNbWheelsPerVehicle_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_maxNbHitPointsPerWheel_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_maxNbHitPointsPerWheel_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_maxNbHitPointsPerWheel_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_maxNbHitPointsPerWheel_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_maxNbHitPointsPerWheel_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_maxNbHitPointsPerWheel_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_numWorkers_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_numWorkers_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_numWorkers_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_numWorkers_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_numWorkers_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_numWorkers_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_batchSize_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_batchSize_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_batchSize_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_batchSize_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_batchSize_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_batchSize_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_preFilterShader_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_preFilterShader_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_preFilterShader_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_preFilterShader_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_preFilterShader_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_preFilterShader_1");
        var _emscripten_bind_BatchVehicleUpdateDesc_get_postFilterShader_0 = Module["_emscripten_bind_BatchVehicleUpdateDesc_get_postFilterShader_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_get_postFilterShader_0");
        var _emscripten_bind_BatchVehicleUpdateDesc_set_postFilterShader_1 = Module["_emscripten_bind_BatchVehicleUpdateDesc_set_postFilterShader_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc_set_postFilterShader_1");
        var _emscripten_bind_BatchVehicleUpdateDesc___destroy___0 = Module["_emscripten_bind_BatchVehicleUpdateDesc___destroy___0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdateDesc___destroy___0");
        var _emscripten_bind_BatchVehicleUpdate_BatchVehicleUpdate_1 = Module["_emscripten_bind_BatchVehicleUpdate_BatchVehicleUpdate_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate_BatchVehicleUpdate_1");
        var _emscripten_bind_BatchVehicleUpdate_addVehicle_1 = Module["_emscripten_bind_BatchVehicleUpdate_addVehicle_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate_addVehicle_1");
        var _emscripten_bind_BatchVehicleUpdate_removeVehicle_1 = Module["_emscripten_bind_BatchVehicleUpdate_removeVehicle_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate_removeVehicle_1");
        var _emscripten_bind_BatchVehicleUpdate_removeAllVehicles_0 = Module["_emscripten_bind_BatchVehicleUpdate_removeAllVehicles_0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate_removeAllVehicles_0");
        var _emscripten_bind_BatchVehicleUpdate_indexOf_1 = Module["_emscripten_bind_BatchVehicleUpdate_indexOf_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate_indexOf_1");
        var _emscripten_bind_BatchVehicleUpdate_batchUpdate_1 = Module["_emscripten_bind_BatchVehicleUpdate_batchUpdate_1"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate_batchUpdate_1");
        var _emscripten_bind_BatchVehicleUpdate_getWheelQueryResult_2 = Module["_emscripten_bind_BatchVehicleUpdate_getWheelQueryResult_2"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate_getWheelQueryResult_2");
        var _emscripten_bind_BatchVehicleUpdate___destroy___0 = Module["_emscripten_bind_BatchVehicleUpdate___destroy___0"] = createExportWrapper("emscripten_bind_BatchVehicleUpdate___destroy___0");
        var _emscripten_bind_PxBoxController_getHalfHeight_0 = Module["_emscripten_bind_PxBoxController_getHalfHeight_0"] = createExportWrapper("emscripten_bind_PxBoxController_getHalfHeight_0");
        var _emscripten_bind_PxBoxController_getHalfSideExtent_0 = Module["_emscripten_bind_PxBoxController_getHalfSideExtent_0"] = createExportWrapper("emscripten_bind_PxBoxController_getHalfSideExtent_0");
        var _emscripten_bind_PxBoxController_getHalfForwardExtent_0 = Module["_emscripten_bind_PxBoxController_getHalfForwardExtent_0"] = createExportWrapper("emscripten_bind_PxBoxController_getHalfForwardExtent_0");
        var _emscripten_bind_PxBoxController_setHalfHeight_1 = Module["_emscripten_bind_PxBoxController_setHalfHeight_1"] = createExportWrapper("emscripten_bind_PxBoxController_setHalfHeight_1");
        var _emscripten_bind_PxBoxController_setHalfSideExtent_1 = Module["_emscripten_bind_PxBoxController_setHalfSideExtent_1"] = createExportWrapper("emscripten_bind_PxBoxController_setHalfSideExtent_1");
        var _emscripten_bind_PxBoxController_setHalfForwardExtent_1 = Module["_emscripten_bind_PxBoxController_setHalfForwardExtent_1"] = createExportWrapper("emscripten_bind_PxBoxController_setHalfForwardExtent_1");
        var _emscripten_bind_PxBoxController_getType_0 = Module["_emscripten_bind_PxBoxController_getType_0"] = createExportWrapper("emscripten_bind_PxBoxController_getType_0");
        var _emscripten_bind_PxBoxController_release_0 = Module["_emscripten_bind_PxBoxController_release_0"] = createExportWrapper("emscripten_bind_PxBoxController_release_0");
        var _emscripten_bind_PxBoxController_move_4 = Module["_emscripten_bind_PxBoxController_move_4"] = createExportWrapper("emscripten_bind_PxBoxController_move_4");
        var _emscripten_bind_PxBoxController_move_5 = Module["_emscripten_bind_PxBoxController_move_5"] = createExportWrapper("emscripten_bind_PxBoxController_move_5");
        var _emscripten_bind_PxBoxController_setPosition_1 = Module["_emscripten_bind_PxBoxController_setPosition_1"] = createExportWrapper("emscripten_bind_PxBoxController_setPosition_1");
        var _emscripten_bind_PxBoxController_getPosition_0 = Module["_emscripten_bind_PxBoxController_getPosition_0"] = createExportWrapper("emscripten_bind_PxBoxController_getPosition_0");
        var _emscripten_bind_PxBoxController_setFootPosition_1 = Module["_emscripten_bind_PxBoxController_setFootPosition_1"] = createExportWrapper("emscripten_bind_PxBoxController_setFootPosition_1");
        var _emscripten_bind_PxBoxController_getFootPosition_0 = Module["_emscripten_bind_PxBoxController_getFootPosition_0"] = createExportWrapper("emscripten_bind_PxBoxController_getFootPosition_0");
        var _emscripten_bind_PxBoxController_getActor_0 = Module["_emscripten_bind_PxBoxController_getActor_0"] = createExportWrapper("emscripten_bind_PxBoxController_getActor_0");
        var _emscripten_bind_PxBoxController_setStepOffset_1 = Module["_emscripten_bind_PxBoxController_setStepOffset_1"] = createExportWrapper("emscripten_bind_PxBoxController_setStepOffset_1");
        var _emscripten_bind_PxBoxController_getStepOffset_0 = Module["_emscripten_bind_PxBoxController_getStepOffset_0"] = createExportWrapper("emscripten_bind_PxBoxController_getStepOffset_0");
        var _emscripten_bind_PxBoxController_setNonWalkableMode_1 = Module["_emscripten_bind_PxBoxController_setNonWalkableMode_1"] = createExportWrapper("emscripten_bind_PxBoxController_setNonWalkableMode_1");
        var _emscripten_bind_PxBoxController_getNonWalkableMode_0 = Module["_emscripten_bind_PxBoxController_getNonWalkableMode_0"] = createExportWrapper("emscripten_bind_PxBoxController_getNonWalkableMode_0");
        var _emscripten_bind_PxBoxController_getContactOffset_0 = Module["_emscripten_bind_PxBoxController_getContactOffset_0"] = createExportWrapper("emscripten_bind_PxBoxController_getContactOffset_0");
        var _emscripten_bind_PxBoxController_setContactOffset_1 = Module["_emscripten_bind_PxBoxController_setContactOffset_1"] = createExportWrapper("emscripten_bind_PxBoxController_setContactOffset_1");
        var _emscripten_bind_PxBoxController_getUpDirection_0 = Module["_emscripten_bind_PxBoxController_getUpDirection_0"] = createExportWrapper("emscripten_bind_PxBoxController_getUpDirection_0");
        var _emscripten_bind_PxBoxController_setUpDirection_1 = Module["_emscripten_bind_PxBoxController_setUpDirection_1"] = createExportWrapper("emscripten_bind_PxBoxController_setUpDirection_1");
        var _emscripten_bind_PxBoxController_getSlopeLimit_0 = Module["_emscripten_bind_PxBoxController_getSlopeLimit_0"] = createExportWrapper("emscripten_bind_PxBoxController_getSlopeLimit_0");
        var _emscripten_bind_PxBoxController_setSlopeLimit_1 = Module["_emscripten_bind_PxBoxController_setSlopeLimit_1"] = createExportWrapper("emscripten_bind_PxBoxController_setSlopeLimit_1");
        var _emscripten_bind_PxBoxController_invalidateCache_0 = Module["_emscripten_bind_PxBoxController_invalidateCache_0"] = createExportWrapper("emscripten_bind_PxBoxController_invalidateCache_0");
        var _emscripten_bind_PxBoxController_getScene_0 = Module["_emscripten_bind_PxBoxController_getScene_0"] = createExportWrapper("emscripten_bind_PxBoxController_getScene_0");
        var _emscripten_bind_PxBoxController_getUserData_0 = Module["_emscripten_bind_PxBoxController_getUserData_0"] = createExportWrapper("emscripten_bind_PxBoxController_getUserData_0");
        var _emscripten_bind_PxBoxController_setUserData_1 = Module["_emscripten_bind_PxBoxController_setUserData_1"] = createExportWrapper("emscripten_bind_PxBoxController_setUserData_1");
        var _emscripten_bind_PxBoxController_getState_1 = Module["_emscripten_bind_PxBoxController_getState_1"] = createExportWrapper("emscripten_bind_PxBoxController_getState_1");
        var _emscripten_bind_PxBoxController_getStats_1 = Module["_emscripten_bind_PxBoxController_getStats_1"] = createExportWrapper("emscripten_bind_PxBoxController_getStats_1");
        var _emscripten_bind_PxBoxController_resize_1 = Module["_emscripten_bind_PxBoxController_resize_1"] = createExportWrapper("emscripten_bind_PxBoxController_resize_1");
        var _emscripten_bind_PxBoxControllerDesc_PxBoxControllerDesc_0 = Module["_emscripten_bind_PxBoxControllerDesc_PxBoxControllerDesc_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_PxBoxControllerDesc_0");
        var _emscripten_bind_PxBoxControllerDesc_setToDefault_0 = Module["_emscripten_bind_PxBoxControllerDesc_setToDefault_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_setToDefault_0");
        var _emscripten_bind_PxBoxControllerDesc_isValid_0 = Module["_emscripten_bind_PxBoxControllerDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_isValid_0");
        var _emscripten_bind_PxBoxControllerDesc_getType_0 = Module["_emscripten_bind_PxBoxControllerDesc_getType_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_getType_0");
        var _emscripten_bind_PxBoxControllerDesc_get_halfHeight_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_halfHeight_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_halfHeight_0");
        var _emscripten_bind_PxBoxControllerDesc_set_halfHeight_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_halfHeight_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_halfHeight_1");
        var _emscripten_bind_PxBoxControllerDesc_get_halfSideExtent_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_halfSideExtent_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_halfSideExtent_0");
        var _emscripten_bind_PxBoxControllerDesc_set_halfSideExtent_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_halfSideExtent_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_halfSideExtent_1");
        var _emscripten_bind_PxBoxControllerDesc_get_halfForwardExtent_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_halfForwardExtent_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_halfForwardExtent_0");
        var _emscripten_bind_PxBoxControllerDesc_set_halfForwardExtent_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_halfForwardExtent_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_halfForwardExtent_1");
        var _emscripten_bind_PxBoxControllerDesc_get_position_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_position_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_position_0");
        var _emscripten_bind_PxBoxControllerDesc_set_position_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_position_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_position_1");
        var _emscripten_bind_PxBoxControllerDesc_get_upDirection_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_upDirection_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_upDirection_0");
        var _emscripten_bind_PxBoxControllerDesc_set_upDirection_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_upDirection_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_upDirection_1");
        var _emscripten_bind_PxBoxControllerDesc_get_slopeLimit_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_slopeLimit_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_slopeLimit_0");
        var _emscripten_bind_PxBoxControllerDesc_set_slopeLimit_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_slopeLimit_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_slopeLimit_1");
        var _emscripten_bind_PxBoxControllerDesc_get_invisibleWallHeight_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_invisibleWallHeight_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_invisibleWallHeight_0");
        var _emscripten_bind_PxBoxControllerDesc_set_invisibleWallHeight_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_invisibleWallHeight_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_invisibleWallHeight_1");
        var _emscripten_bind_PxBoxControllerDesc_get_maxJumpHeight_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_maxJumpHeight_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_maxJumpHeight_0");
        var _emscripten_bind_PxBoxControllerDesc_set_maxJumpHeight_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_maxJumpHeight_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_maxJumpHeight_1");
        var _emscripten_bind_PxBoxControllerDesc_get_contactOffset_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_contactOffset_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_contactOffset_0");
        var _emscripten_bind_PxBoxControllerDesc_set_contactOffset_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_contactOffset_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_contactOffset_1");
        var _emscripten_bind_PxBoxControllerDesc_get_stepOffset_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_stepOffset_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_stepOffset_0");
        var _emscripten_bind_PxBoxControllerDesc_set_stepOffset_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_stepOffset_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_stepOffset_1");
        var _emscripten_bind_PxBoxControllerDesc_get_density_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_density_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_density_0");
        var _emscripten_bind_PxBoxControllerDesc_set_density_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_density_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_density_1");
        var _emscripten_bind_PxBoxControllerDesc_get_scaleCoeff_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_scaleCoeff_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_scaleCoeff_0");
        var _emscripten_bind_PxBoxControllerDesc_set_scaleCoeff_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_scaleCoeff_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_scaleCoeff_1");
        var _emscripten_bind_PxBoxControllerDesc_get_volumeGrowth_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_volumeGrowth_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_volumeGrowth_0");
        var _emscripten_bind_PxBoxControllerDesc_set_volumeGrowth_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_volumeGrowth_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_volumeGrowth_1");
        var _emscripten_bind_PxBoxControllerDesc_get_reportCallback_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_reportCallback_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_reportCallback_0");
        var _emscripten_bind_PxBoxControllerDesc_set_reportCallback_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_reportCallback_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_reportCallback_1");
        var _emscripten_bind_PxBoxControllerDesc_get_nonWalkableMode_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_nonWalkableMode_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_nonWalkableMode_0");
        var _emscripten_bind_PxBoxControllerDesc_set_nonWalkableMode_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_nonWalkableMode_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_nonWalkableMode_1");
        var _emscripten_bind_PxBoxControllerDesc_get_material_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_material_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_material_0");
        var _emscripten_bind_PxBoxControllerDesc_set_material_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_material_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_material_1");
        var _emscripten_bind_PxBoxControllerDesc_get_registerDeletionListener_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_registerDeletionListener_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_registerDeletionListener_0");
        var _emscripten_bind_PxBoxControllerDesc_set_registerDeletionListener_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_registerDeletionListener_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_registerDeletionListener_1");
        var _emscripten_bind_PxBoxControllerDesc_get_userData_0 = Module["_emscripten_bind_PxBoxControllerDesc_get_userData_0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_get_userData_0");
        var _emscripten_bind_PxBoxControllerDesc_set_userData_1 = Module["_emscripten_bind_PxBoxControllerDesc_set_userData_1"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc_set_userData_1");
        var _emscripten_bind_PxBoxControllerDesc___destroy___0 = Module["_emscripten_bind_PxBoxControllerDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxBoxControllerDesc___destroy___0");
        var _emscripten_bind_PxBoxObstacle_PxBoxObstacle_0 = Module["_emscripten_bind_PxBoxObstacle_PxBoxObstacle_0"] = createExportWrapper("emscripten_bind_PxBoxObstacle_PxBoxObstacle_0");
        var _emscripten_bind_PxBoxObstacle_getType_0 = Module["_emscripten_bind_PxBoxObstacle_getType_0"] = createExportWrapper("emscripten_bind_PxBoxObstacle_getType_0");
        var _emscripten_bind_PxBoxObstacle_get_mHalfExtents_0 = Module["_emscripten_bind_PxBoxObstacle_get_mHalfExtents_0"] = createExportWrapper("emscripten_bind_PxBoxObstacle_get_mHalfExtents_0");
        var _emscripten_bind_PxBoxObstacle_set_mHalfExtents_1 = Module["_emscripten_bind_PxBoxObstacle_set_mHalfExtents_1"] = createExportWrapper("emscripten_bind_PxBoxObstacle_set_mHalfExtents_1");
        var _emscripten_bind_PxBoxObstacle_get_mUserData_0 = Module["_emscripten_bind_PxBoxObstacle_get_mUserData_0"] = createExportWrapper("emscripten_bind_PxBoxObstacle_get_mUserData_0");
        var _emscripten_bind_PxBoxObstacle_set_mUserData_1 = Module["_emscripten_bind_PxBoxObstacle_set_mUserData_1"] = createExportWrapper("emscripten_bind_PxBoxObstacle_set_mUserData_1");
        var _emscripten_bind_PxBoxObstacle_get_mPos_0 = Module["_emscripten_bind_PxBoxObstacle_get_mPos_0"] = createExportWrapper("emscripten_bind_PxBoxObstacle_get_mPos_0");
        var _emscripten_bind_PxBoxObstacle_set_mPos_1 = Module["_emscripten_bind_PxBoxObstacle_set_mPos_1"] = createExportWrapper("emscripten_bind_PxBoxObstacle_set_mPos_1");
        var _emscripten_bind_PxBoxObstacle_get_mRot_0 = Module["_emscripten_bind_PxBoxObstacle_get_mRot_0"] = createExportWrapper("emscripten_bind_PxBoxObstacle_get_mRot_0");
        var _emscripten_bind_PxBoxObstacle_set_mRot_1 = Module["_emscripten_bind_PxBoxObstacle_set_mRot_1"] = createExportWrapper("emscripten_bind_PxBoxObstacle_set_mRot_1");
        var _emscripten_bind_PxBoxObstacle___destroy___0 = Module["_emscripten_bind_PxBoxObstacle___destroy___0"] = createExportWrapper("emscripten_bind_PxBoxObstacle___destroy___0");
        var _emscripten_bind_PxCapsuleController_getRadius_0 = Module["_emscripten_bind_PxCapsuleController_getRadius_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getRadius_0");
        var _emscripten_bind_PxCapsuleController_setRadius_1 = Module["_emscripten_bind_PxCapsuleController_setRadius_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setRadius_1");
        var _emscripten_bind_PxCapsuleController_getHeight_0 = Module["_emscripten_bind_PxCapsuleController_getHeight_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getHeight_0");
        var _emscripten_bind_PxCapsuleController_setHeight_1 = Module["_emscripten_bind_PxCapsuleController_setHeight_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setHeight_1");
        var _emscripten_bind_PxCapsuleController_getClimbingMode_0 = Module["_emscripten_bind_PxCapsuleController_getClimbingMode_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getClimbingMode_0");
        var _emscripten_bind_PxCapsuleController_setClimbingMode_1 = Module["_emscripten_bind_PxCapsuleController_setClimbingMode_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setClimbingMode_1");
        var _emscripten_bind_PxCapsuleController_getType_0 = Module["_emscripten_bind_PxCapsuleController_getType_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getType_0");
        var _emscripten_bind_PxCapsuleController_release_0 = Module["_emscripten_bind_PxCapsuleController_release_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_release_0");
        var _emscripten_bind_PxCapsuleController_move_4 = Module["_emscripten_bind_PxCapsuleController_move_4"] = createExportWrapper("emscripten_bind_PxCapsuleController_move_4");
        var _emscripten_bind_PxCapsuleController_move_5 = Module["_emscripten_bind_PxCapsuleController_move_5"] = createExportWrapper("emscripten_bind_PxCapsuleController_move_5");
        var _emscripten_bind_PxCapsuleController_setPosition_1 = Module["_emscripten_bind_PxCapsuleController_setPosition_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setPosition_1");
        var _emscripten_bind_PxCapsuleController_getPosition_0 = Module["_emscripten_bind_PxCapsuleController_getPosition_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getPosition_0");
        var _emscripten_bind_PxCapsuleController_setFootPosition_1 = Module["_emscripten_bind_PxCapsuleController_setFootPosition_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setFootPosition_1");
        var _emscripten_bind_PxCapsuleController_getFootPosition_0 = Module["_emscripten_bind_PxCapsuleController_getFootPosition_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getFootPosition_0");
        var _emscripten_bind_PxCapsuleController_getActor_0 = Module["_emscripten_bind_PxCapsuleController_getActor_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getActor_0");
        var _emscripten_bind_PxCapsuleController_setStepOffset_1 = Module["_emscripten_bind_PxCapsuleController_setStepOffset_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setStepOffset_1");
        var _emscripten_bind_PxCapsuleController_getStepOffset_0 = Module["_emscripten_bind_PxCapsuleController_getStepOffset_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getStepOffset_0");
        var _emscripten_bind_PxCapsuleController_setNonWalkableMode_1 = Module["_emscripten_bind_PxCapsuleController_setNonWalkableMode_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setNonWalkableMode_1");
        var _emscripten_bind_PxCapsuleController_getNonWalkableMode_0 = Module["_emscripten_bind_PxCapsuleController_getNonWalkableMode_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getNonWalkableMode_0");
        var _emscripten_bind_PxCapsuleController_getContactOffset_0 = Module["_emscripten_bind_PxCapsuleController_getContactOffset_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getContactOffset_0");
        var _emscripten_bind_PxCapsuleController_setContactOffset_1 = Module["_emscripten_bind_PxCapsuleController_setContactOffset_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setContactOffset_1");
        var _emscripten_bind_PxCapsuleController_getUpDirection_0 = Module["_emscripten_bind_PxCapsuleController_getUpDirection_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getUpDirection_0");
        var _emscripten_bind_PxCapsuleController_setUpDirection_1 = Module["_emscripten_bind_PxCapsuleController_setUpDirection_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setUpDirection_1");
        var _emscripten_bind_PxCapsuleController_getSlopeLimit_0 = Module["_emscripten_bind_PxCapsuleController_getSlopeLimit_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getSlopeLimit_0");
        var _emscripten_bind_PxCapsuleController_setSlopeLimit_1 = Module["_emscripten_bind_PxCapsuleController_setSlopeLimit_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setSlopeLimit_1");
        var _emscripten_bind_PxCapsuleController_invalidateCache_0 = Module["_emscripten_bind_PxCapsuleController_invalidateCache_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_invalidateCache_0");
        var _emscripten_bind_PxCapsuleController_getScene_0 = Module["_emscripten_bind_PxCapsuleController_getScene_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getScene_0");
        var _emscripten_bind_PxCapsuleController_getUserData_0 = Module["_emscripten_bind_PxCapsuleController_getUserData_0"] = createExportWrapper("emscripten_bind_PxCapsuleController_getUserData_0");
        var _emscripten_bind_PxCapsuleController_setUserData_1 = Module["_emscripten_bind_PxCapsuleController_setUserData_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_setUserData_1");
        var _emscripten_bind_PxCapsuleController_getState_1 = Module["_emscripten_bind_PxCapsuleController_getState_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_getState_1");
        var _emscripten_bind_PxCapsuleController_getStats_1 = Module["_emscripten_bind_PxCapsuleController_getStats_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_getStats_1");
        var _emscripten_bind_PxCapsuleController_resize_1 = Module["_emscripten_bind_PxCapsuleController_resize_1"] = createExportWrapper("emscripten_bind_PxCapsuleController_resize_1");
        var _emscripten_bind_PxCapsuleControllerDesc_PxCapsuleControllerDesc_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_PxCapsuleControllerDesc_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_PxCapsuleControllerDesc_0");
        var _emscripten_bind_PxCapsuleControllerDesc_setToDefault_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_setToDefault_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_setToDefault_0");
        var _emscripten_bind_PxCapsuleControllerDesc_isValid_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_isValid_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_isValid_0");
        var _emscripten_bind_PxCapsuleControllerDesc_getType_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_getType_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_getType_0");
        var _emscripten_bind_PxCapsuleControllerDesc_get_radius_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_radius_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_radius_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_radius_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_radius_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_radius_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_height_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_height_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_height_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_height_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_height_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_height_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_climbingMode_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_climbingMode_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_climbingMode_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_climbingMode_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_climbingMode_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_climbingMode_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_position_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_position_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_position_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_position_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_position_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_position_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_upDirection_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_upDirection_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_upDirection_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_upDirection_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_upDirection_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_upDirection_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_slopeLimit_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_slopeLimit_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_slopeLimit_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_slopeLimit_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_slopeLimit_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_slopeLimit_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_invisibleWallHeight_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_invisibleWallHeight_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_invisibleWallHeight_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_invisibleWallHeight_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_invisibleWallHeight_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_invisibleWallHeight_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_maxJumpHeight_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_maxJumpHeight_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_maxJumpHeight_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_maxJumpHeight_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_maxJumpHeight_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_maxJumpHeight_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_contactOffset_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_contactOffset_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_contactOffset_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_contactOffset_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_contactOffset_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_contactOffset_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_stepOffset_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_stepOffset_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_stepOffset_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_stepOffset_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_stepOffset_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_stepOffset_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_density_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_density_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_density_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_density_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_density_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_density_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_scaleCoeff_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_scaleCoeff_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_scaleCoeff_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_scaleCoeff_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_scaleCoeff_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_scaleCoeff_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_volumeGrowth_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_volumeGrowth_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_volumeGrowth_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_volumeGrowth_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_volumeGrowth_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_volumeGrowth_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_reportCallback_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_reportCallback_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_reportCallback_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_reportCallback_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_reportCallback_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_reportCallback_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_nonWalkableMode_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_nonWalkableMode_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_nonWalkableMode_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_nonWalkableMode_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_nonWalkableMode_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_nonWalkableMode_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_material_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_material_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_material_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_material_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_material_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_material_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_registerDeletionListener_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_registerDeletionListener_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_registerDeletionListener_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_registerDeletionListener_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_registerDeletionListener_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_registerDeletionListener_1");
        var _emscripten_bind_PxCapsuleControllerDesc_get_userData_0 = Module["_emscripten_bind_PxCapsuleControllerDesc_get_userData_0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_get_userData_0");
        var _emscripten_bind_PxCapsuleControllerDesc_set_userData_1 = Module["_emscripten_bind_PxCapsuleControllerDesc_set_userData_1"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc_set_userData_1");
        var _emscripten_bind_PxCapsuleControllerDesc___destroy___0 = Module["_emscripten_bind_PxCapsuleControllerDesc___destroy___0"] = createExportWrapper("emscripten_bind_PxCapsuleControllerDesc___destroy___0");
        var _emscripten_bind_PxCapsuleObstacle_PxCapsuleObstacle_0 = Module["_emscripten_bind_PxCapsuleObstacle_PxCapsuleObstacle_0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_PxCapsuleObstacle_0");
        var _emscripten_bind_PxCapsuleObstacle_getType_0 = Module["_emscripten_bind_PxCapsuleObstacle_getType_0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_getType_0");
        var _emscripten_bind_PxCapsuleObstacle_get_mHalfHeight_0 = Module["_emscripten_bind_PxCapsuleObstacle_get_mHalfHeight_0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_get_mHalfHeight_0");
        var _emscripten_bind_PxCapsuleObstacle_set_mHalfHeight_1 = Module["_emscripten_bind_PxCapsuleObstacle_set_mHalfHeight_1"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_set_mHalfHeight_1");
        var _emscripten_bind_PxCapsuleObstacle_get_mRadius_0 = Module["_emscripten_bind_PxCapsuleObstacle_get_mRadius_0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_get_mRadius_0");
        var _emscripten_bind_PxCapsuleObstacle_set_mRadius_1 = Module["_emscripten_bind_PxCapsuleObstacle_set_mRadius_1"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_set_mRadius_1");
        var _emscripten_bind_PxCapsuleObstacle_get_mUserData_0 = Module["_emscripten_bind_PxCapsuleObstacle_get_mUserData_0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_get_mUserData_0");
        var _emscripten_bind_PxCapsuleObstacle_set_mUserData_1 = Module["_emscripten_bind_PxCapsuleObstacle_set_mUserData_1"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_set_mUserData_1");
        var _emscripten_bind_PxCapsuleObstacle_get_mPos_0 = Module["_emscripten_bind_PxCapsuleObstacle_get_mPos_0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_get_mPos_0");
        var _emscripten_bind_PxCapsuleObstacle_set_mPos_1 = Module["_emscripten_bind_PxCapsuleObstacle_set_mPos_1"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_set_mPos_1");
        var _emscripten_bind_PxCapsuleObstacle_get_mRot_0 = Module["_emscripten_bind_PxCapsuleObstacle_get_mRot_0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_get_mRot_0");
        var _emscripten_bind_PxCapsuleObstacle_set_mRot_1 = Module["_emscripten_bind_PxCapsuleObstacle_set_mRot_1"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle_set_mRot_1");
        var _emscripten_bind_PxCapsuleObstacle___destroy___0 = Module["_emscripten_bind_PxCapsuleObstacle___destroy___0"] = createExportWrapper("emscripten_bind_PxCapsuleObstacle___destroy___0");
        var _emscripten_bind_PxControllerCollisionFlags_PxControllerCollisionFlags_1 = Module["_emscripten_bind_PxControllerCollisionFlags_PxControllerCollisionFlags_1"] = createExportWrapper("emscripten_bind_PxControllerCollisionFlags_PxControllerCollisionFlags_1");
        var _emscripten_bind_PxControllerCollisionFlags_isSet_1 = Module["_emscripten_bind_PxControllerCollisionFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxControllerCollisionFlags_isSet_1");
        var _emscripten_bind_PxControllerCollisionFlags_set_1 = Module["_emscripten_bind_PxControllerCollisionFlags_set_1"] = createExportWrapper("emscripten_bind_PxControllerCollisionFlags_set_1");
        var _emscripten_bind_PxControllerCollisionFlags_clear_1 = Module["_emscripten_bind_PxControllerCollisionFlags_clear_1"] = createExportWrapper("emscripten_bind_PxControllerCollisionFlags_clear_1");
        var _emscripten_bind_PxControllerCollisionFlags___destroy___0 = Module["_emscripten_bind_PxControllerCollisionFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxControllerCollisionFlags___destroy___0");
        var _emscripten_bind_PxControllerFilters_PxControllerFilters_0 = Module["_emscripten_bind_PxControllerFilters_PxControllerFilters_0"] = createExportWrapper("emscripten_bind_PxControllerFilters_PxControllerFilters_0");
        var _emscripten_bind_PxControllerFilters_PxControllerFilters_1 = Module["_emscripten_bind_PxControllerFilters_PxControllerFilters_1"] = createExportWrapper("emscripten_bind_PxControllerFilters_PxControllerFilters_1");
        var _emscripten_bind_PxControllerFilters_get_mFilterData_0 = Module["_emscripten_bind_PxControllerFilters_get_mFilterData_0"] = createExportWrapper("emscripten_bind_PxControllerFilters_get_mFilterData_0");
        var _emscripten_bind_PxControllerFilters_set_mFilterData_1 = Module["_emscripten_bind_PxControllerFilters_set_mFilterData_1"] = createExportWrapper("emscripten_bind_PxControllerFilters_set_mFilterData_1");
        var _emscripten_bind_PxControllerFilters_get_mFilterFlags_0 = Module["_emscripten_bind_PxControllerFilters_get_mFilterFlags_0"] = createExportWrapper("emscripten_bind_PxControllerFilters_get_mFilterFlags_0");
        var _emscripten_bind_PxControllerFilters_set_mFilterFlags_1 = Module["_emscripten_bind_PxControllerFilters_set_mFilterFlags_1"] = createExportWrapper("emscripten_bind_PxControllerFilters_set_mFilterFlags_1");
        var _emscripten_bind_PxControllerFilters___destroy___0 = Module["_emscripten_bind_PxControllerFilters___destroy___0"] = createExportWrapper("emscripten_bind_PxControllerFilters___destroy___0");
        var _emscripten_bind_PxControllerManager_release_0 = Module["_emscripten_bind_PxControllerManager_release_0"] = createExportWrapper("emscripten_bind_PxControllerManager_release_0");
        var _emscripten_bind_PxControllerManager_getScene_0 = Module["_emscripten_bind_PxControllerManager_getScene_0"] = createExportWrapper("emscripten_bind_PxControllerManager_getScene_0");
        var _emscripten_bind_PxControllerManager_getNbControllers_0 = Module["_emscripten_bind_PxControllerManager_getNbControllers_0"] = createExportWrapper("emscripten_bind_PxControllerManager_getNbControllers_0");
        var _emscripten_bind_PxControllerManager_getController_1 = Module["_emscripten_bind_PxControllerManager_getController_1"] = createExportWrapper("emscripten_bind_PxControllerManager_getController_1");
        var _emscripten_bind_PxControllerManager_createController_1 = Module["_emscripten_bind_PxControllerManager_createController_1"] = createExportWrapper("emscripten_bind_PxControllerManager_createController_1");
        var _emscripten_bind_PxControllerManager_purgeControllers_0 = Module["_emscripten_bind_PxControllerManager_purgeControllers_0"] = createExportWrapper("emscripten_bind_PxControllerManager_purgeControllers_0");
        var _emscripten_bind_PxControllerManager_getNbObstacleContexts_0 = Module["_emscripten_bind_PxControllerManager_getNbObstacleContexts_0"] = createExportWrapper("emscripten_bind_PxControllerManager_getNbObstacleContexts_0");
        var _emscripten_bind_PxControllerManager_getObstacleContext_1 = Module["_emscripten_bind_PxControllerManager_getObstacleContext_1"] = createExportWrapper("emscripten_bind_PxControllerManager_getObstacleContext_1");
        var _emscripten_bind_PxControllerManager_createObstacleContext_0 = Module["_emscripten_bind_PxControllerManager_createObstacleContext_0"] = createExportWrapper("emscripten_bind_PxControllerManager_createObstacleContext_0");
        var _emscripten_bind_PxControllerManager_computeInteractions_1 = Module["_emscripten_bind_PxControllerManager_computeInteractions_1"] = createExportWrapper("emscripten_bind_PxControllerManager_computeInteractions_1");
        var _emscripten_bind_PxControllerManager_setTessellation_2 = Module["_emscripten_bind_PxControllerManager_setTessellation_2"] = createExportWrapper("emscripten_bind_PxControllerManager_setTessellation_2");
        var _emscripten_bind_PxControllerManager_setOverlapRecoveryModule_1 = Module["_emscripten_bind_PxControllerManager_setOverlapRecoveryModule_1"] = createExportWrapper("emscripten_bind_PxControllerManager_setOverlapRecoveryModule_1");
        var _emscripten_bind_PxControllerManager_setPreciseSweeps_1 = Module["_emscripten_bind_PxControllerManager_setPreciseSweeps_1"] = createExportWrapper("emscripten_bind_PxControllerManager_setPreciseSweeps_1");
        var _emscripten_bind_PxControllerManager_setPreventVerticalSlidingAgainstCeiling_1 = Module["_emscripten_bind_PxControllerManager_setPreventVerticalSlidingAgainstCeiling_1"] = createExportWrapper("emscripten_bind_PxControllerManager_setPreventVerticalSlidingAgainstCeiling_1");
        var _emscripten_bind_PxControllerManager_shiftOrigin_1 = Module["_emscripten_bind_PxControllerManager_shiftOrigin_1"] = createExportWrapper("emscripten_bind_PxControllerManager_shiftOrigin_1");
        var _emscripten_bind_PxControllerObstacleHit_get_userData_0 = Module["_emscripten_bind_PxControllerObstacleHit_get_userData_0"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_get_userData_0");
        var _emscripten_bind_PxControllerObstacleHit_set_userData_1 = Module["_emscripten_bind_PxControllerObstacleHit_set_userData_1"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_set_userData_1");
        var _emscripten_bind_PxControllerObstacleHit_get_controller_0 = Module["_emscripten_bind_PxControllerObstacleHit_get_controller_0"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_get_controller_0");
        var _emscripten_bind_PxControllerObstacleHit_set_controller_1 = Module["_emscripten_bind_PxControllerObstacleHit_set_controller_1"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_set_controller_1");
        var _emscripten_bind_PxControllerObstacleHit_get_worldPos_0 = Module["_emscripten_bind_PxControllerObstacleHit_get_worldPos_0"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_get_worldPos_0");
        var _emscripten_bind_PxControllerObstacleHit_set_worldPos_1 = Module["_emscripten_bind_PxControllerObstacleHit_set_worldPos_1"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_set_worldPos_1");
        var _emscripten_bind_PxControllerObstacleHit_get_worldNormal_0 = Module["_emscripten_bind_PxControllerObstacleHit_get_worldNormal_0"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_get_worldNormal_0");
        var _emscripten_bind_PxControllerObstacleHit_set_worldNormal_1 = Module["_emscripten_bind_PxControllerObstacleHit_set_worldNormal_1"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_set_worldNormal_1");
        var _emscripten_bind_PxControllerObstacleHit_get_dir_0 = Module["_emscripten_bind_PxControllerObstacleHit_get_dir_0"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_get_dir_0");
        var _emscripten_bind_PxControllerObstacleHit_set_dir_1 = Module["_emscripten_bind_PxControllerObstacleHit_set_dir_1"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_set_dir_1");
        var _emscripten_bind_PxControllerObstacleHit_get_length_0 = Module["_emscripten_bind_PxControllerObstacleHit_get_length_0"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_get_length_0");
        var _emscripten_bind_PxControllerObstacleHit_set_length_1 = Module["_emscripten_bind_PxControllerObstacleHit_set_length_1"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit_set_length_1");
        var _emscripten_bind_PxControllerObstacleHit___destroy___0 = Module["_emscripten_bind_PxControllerObstacleHit___destroy___0"] = createExportWrapper("emscripten_bind_PxControllerObstacleHit___destroy___0");
        var _emscripten_bind_PxControllerShapeHit_get_shape_0 = Module["_emscripten_bind_PxControllerShapeHit_get_shape_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_shape_0");
        var _emscripten_bind_PxControllerShapeHit_set_shape_1 = Module["_emscripten_bind_PxControllerShapeHit_set_shape_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_shape_1");
        var _emscripten_bind_PxControllerShapeHit_get_actor_0 = Module["_emscripten_bind_PxControllerShapeHit_get_actor_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_actor_0");
        var _emscripten_bind_PxControllerShapeHit_set_actor_1 = Module["_emscripten_bind_PxControllerShapeHit_set_actor_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_actor_1");
        var _emscripten_bind_PxControllerShapeHit_get_triangleIndex_0 = Module["_emscripten_bind_PxControllerShapeHit_get_triangleIndex_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_triangleIndex_0");
        var _emscripten_bind_PxControllerShapeHit_set_triangleIndex_1 = Module["_emscripten_bind_PxControllerShapeHit_set_triangleIndex_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_triangleIndex_1");
        var _emscripten_bind_PxControllerShapeHit_get_controller_0 = Module["_emscripten_bind_PxControllerShapeHit_get_controller_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_controller_0");
        var _emscripten_bind_PxControllerShapeHit_set_controller_1 = Module["_emscripten_bind_PxControllerShapeHit_set_controller_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_controller_1");
        var _emscripten_bind_PxControllerShapeHit_get_worldPos_0 = Module["_emscripten_bind_PxControllerShapeHit_get_worldPos_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_worldPos_0");
        var _emscripten_bind_PxControllerShapeHit_set_worldPos_1 = Module["_emscripten_bind_PxControllerShapeHit_set_worldPos_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_worldPos_1");
        var _emscripten_bind_PxControllerShapeHit_get_worldNormal_0 = Module["_emscripten_bind_PxControllerShapeHit_get_worldNormal_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_worldNormal_0");
        var _emscripten_bind_PxControllerShapeHit_set_worldNormal_1 = Module["_emscripten_bind_PxControllerShapeHit_set_worldNormal_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_worldNormal_1");
        var _emscripten_bind_PxControllerShapeHit_get_dir_0 = Module["_emscripten_bind_PxControllerShapeHit_get_dir_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_dir_0");
        var _emscripten_bind_PxControllerShapeHit_set_dir_1 = Module["_emscripten_bind_PxControllerShapeHit_set_dir_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_dir_1");
        var _emscripten_bind_PxControllerShapeHit_get_length_0 = Module["_emscripten_bind_PxControllerShapeHit_get_length_0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_get_length_0");
        var _emscripten_bind_PxControllerShapeHit_set_length_1 = Module["_emscripten_bind_PxControllerShapeHit_set_length_1"] = createExportWrapper("emscripten_bind_PxControllerShapeHit_set_length_1");
        var _emscripten_bind_PxControllerShapeHit___destroy___0 = Module["_emscripten_bind_PxControllerShapeHit___destroy___0"] = createExportWrapper("emscripten_bind_PxControllerShapeHit___destroy___0");
        var _emscripten_bind_PxControllersHit_get_other_0 = Module["_emscripten_bind_PxControllersHit_get_other_0"] = createExportWrapper("emscripten_bind_PxControllersHit_get_other_0");
        var _emscripten_bind_PxControllersHit_set_other_1 = Module["_emscripten_bind_PxControllersHit_set_other_1"] = createExportWrapper("emscripten_bind_PxControllersHit_set_other_1");
        var _emscripten_bind_PxControllersHit_get_controller_0 = Module["_emscripten_bind_PxControllersHit_get_controller_0"] = createExportWrapper("emscripten_bind_PxControllersHit_get_controller_0");
        var _emscripten_bind_PxControllersHit_set_controller_1 = Module["_emscripten_bind_PxControllersHit_set_controller_1"] = createExportWrapper("emscripten_bind_PxControllersHit_set_controller_1");
        var _emscripten_bind_PxControllersHit_get_worldPos_0 = Module["_emscripten_bind_PxControllersHit_get_worldPos_0"] = createExportWrapper("emscripten_bind_PxControllersHit_get_worldPos_0");
        var _emscripten_bind_PxControllersHit_set_worldPos_1 = Module["_emscripten_bind_PxControllersHit_set_worldPos_1"] = createExportWrapper("emscripten_bind_PxControllersHit_set_worldPos_1");
        var _emscripten_bind_PxControllersHit_get_worldNormal_0 = Module["_emscripten_bind_PxControllersHit_get_worldNormal_0"] = createExportWrapper("emscripten_bind_PxControllersHit_get_worldNormal_0");
        var _emscripten_bind_PxControllersHit_set_worldNormal_1 = Module["_emscripten_bind_PxControllersHit_set_worldNormal_1"] = createExportWrapper("emscripten_bind_PxControllersHit_set_worldNormal_1");
        var _emscripten_bind_PxControllersHit_get_dir_0 = Module["_emscripten_bind_PxControllersHit_get_dir_0"] = createExportWrapper("emscripten_bind_PxControllersHit_get_dir_0");
        var _emscripten_bind_PxControllersHit_set_dir_1 = Module["_emscripten_bind_PxControllersHit_set_dir_1"] = createExportWrapper("emscripten_bind_PxControllersHit_set_dir_1");
        var _emscripten_bind_PxControllersHit_get_length_0 = Module["_emscripten_bind_PxControllersHit_get_length_0"] = createExportWrapper("emscripten_bind_PxControllersHit_get_length_0");
        var _emscripten_bind_PxControllersHit_set_length_1 = Module["_emscripten_bind_PxControllersHit_set_length_1"] = createExportWrapper("emscripten_bind_PxControllersHit_set_length_1");
        var _emscripten_bind_PxControllersHit___destroy___0 = Module["_emscripten_bind_PxControllersHit___destroy___0"] = createExportWrapper("emscripten_bind_PxControllersHit___destroy___0");
        var _emscripten_bind_PxControllerState_PxControllerState_0 = Module["_emscripten_bind_PxControllerState_PxControllerState_0"] = createExportWrapper("emscripten_bind_PxControllerState_PxControllerState_0");
        var _emscripten_bind_PxControllerState_get_deltaXP_0 = Module["_emscripten_bind_PxControllerState_get_deltaXP_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_deltaXP_0");
        var _emscripten_bind_PxControllerState_set_deltaXP_1 = Module["_emscripten_bind_PxControllerState_set_deltaXP_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_deltaXP_1");
        var _emscripten_bind_PxControllerState_get_touchedShape_0 = Module["_emscripten_bind_PxControllerState_get_touchedShape_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_touchedShape_0");
        var _emscripten_bind_PxControllerState_set_touchedShape_1 = Module["_emscripten_bind_PxControllerState_set_touchedShape_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_touchedShape_1");
        var _emscripten_bind_PxControllerState_get_touchedActor_0 = Module["_emscripten_bind_PxControllerState_get_touchedActor_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_touchedActor_0");
        var _emscripten_bind_PxControllerState_set_touchedActor_1 = Module["_emscripten_bind_PxControllerState_set_touchedActor_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_touchedActor_1");
        var _emscripten_bind_PxControllerState_get_touchedObstacleHandle_0 = Module["_emscripten_bind_PxControllerState_get_touchedObstacleHandle_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_touchedObstacleHandle_0");
        var _emscripten_bind_PxControllerState_set_touchedObstacleHandle_1 = Module["_emscripten_bind_PxControllerState_set_touchedObstacleHandle_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_touchedObstacleHandle_1");
        var _emscripten_bind_PxControllerState_get_collisionFlags_0 = Module["_emscripten_bind_PxControllerState_get_collisionFlags_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_collisionFlags_0");
        var _emscripten_bind_PxControllerState_set_collisionFlags_1 = Module["_emscripten_bind_PxControllerState_set_collisionFlags_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_collisionFlags_1");
        var _emscripten_bind_PxControllerState_get_standOnAnotherCCT_0 = Module["_emscripten_bind_PxControllerState_get_standOnAnotherCCT_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_standOnAnotherCCT_0");
        var _emscripten_bind_PxControllerState_set_standOnAnotherCCT_1 = Module["_emscripten_bind_PxControllerState_set_standOnAnotherCCT_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_standOnAnotherCCT_1");
        var _emscripten_bind_PxControllerState_get_standOnObstacle_0 = Module["_emscripten_bind_PxControllerState_get_standOnObstacle_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_standOnObstacle_0");
        var _emscripten_bind_PxControllerState_set_standOnObstacle_1 = Module["_emscripten_bind_PxControllerState_set_standOnObstacle_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_standOnObstacle_1");
        var _emscripten_bind_PxControllerState_get_isMovingUp_0 = Module["_emscripten_bind_PxControllerState_get_isMovingUp_0"] = createExportWrapper("emscripten_bind_PxControllerState_get_isMovingUp_0");
        var _emscripten_bind_PxControllerState_set_isMovingUp_1 = Module["_emscripten_bind_PxControllerState_set_isMovingUp_1"] = createExportWrapper("emscripten_bind_PxControllerState_set_isMovingUp_1");
        var _emscripten_bind_PxControllerState___destroy___0 = Module["_emscripten_bind_PxControllerState___destroy___0"] = createExportWrapper("emscripten_bind_PxControllerState___destroy___0");
        var _emscripten_bind_PxControllerStats_get_nbIterations_0 = Module["_emscripten_bind_PxControllerStats_get_nbIterations_0"] = createExportWrapper("emscripten_bind_PxControllerStats_get_nbIterations_0");
        var _emscripten_bind_PxControllerStats_set_nbIterations_1 = Module["_emscripten_bind_PxControllerStats_set_nbIterations_1"] = createExportWrapper("emscripten_bind_PxControllerStats_set_nbIterations_1");
        var _emscripten_bind_PxControllerStats_get_nbFullUpdates_0 = Module["_emscripten_bind_PxControllerStats_get_nbFullUpdates_0"] = createExportWrapper("emscripten_bind_PxControllerStats_get_nbFullUpdates_0");
        var _emscripten_bind_PxControllerStats_set_nbFullUpdates_1 = Module["_emscripten_bind_PxControllerStats_set_nbFullUpdates_1"] = createExportWrapper("emscripten_bind_PxControllerStats_set_nbFullUpdates_1");
        var _emscripten_bind_PxControllerStats_get_nbPartialUpdates_0 = Module["_emscripten_bind_PxControllerStats_get_nbPartialUpdates_0"] = createExportWrapper("emscripten_bind_PxControllerStats_get_nbPartialUpdates_0");
        var _emscripten_bind_PxControllerStats_set_nbPartialUpdates_1 = Module["_emscripten_bind_PxControllerStats_set_nbPartialUpdates_1"] = createExportWrapper("emscripten_bind_PxControllerStats_set_nbPartialUpdates_1");
        var _emscripten_bind_PxControllerStats_get_nbTessellation_0 = Module["_emscripten_bind_PxControllerStats_get_nbTessellation_0"] = createExportWrapper("emscripten_bind_PxControllerStats_get_nbTessellation_0");
        var _emscripten_bind_PxControllerStats_set_nbTessellation_1 = Module["_emscripten_bind_PxControllerStats_set_nbTessellation_1"] = createExportWrapper("emscripten_bind_PxControllerStats_set_nbTessellation_1");
        var _emscripten_bind_PxControllerStats___destroy___0 = Module["_emscripten_bind_PxControllerStats___destroy___0"] = createExportWrapper("emscripten_bind_PxControllerStats___destroy___0");
        var _emscripten_bind_PxExtendedVec3_PxExtendedVec3_0 = Module["_emscripten_bind_PxExtendedVec3_PxExtendedVec3_0"] = createExportWrapper("emscripten_bind_PxExtendedVec3_PxExtendedVec3_0");
        var _emscripten_bind_PxExtendedVec3_PxExtendedVec3_3 = Module["_emscripten_bind_PxExtendedVec3_PxExtendedVec3_3"] = createExportWrapper("emscripten_bind_PxExtendedVec3_PxExtendedVec3_3");
        var _emscripten_bind_PxExtendedVec3_get_x_0 = Module["_emscripten_bind_PxExtendedVec3_get_x_0"] = createExportWrapper("emscripten_bind_PxExtendedVec3_get_x_0");
        var _emscripten_bind_PxExtendedVec3_set_x_1 = Module["_emscripten_bind_PxExtendedVec3_set_x_1"] = createExportWrapper("emscripten_bind_PxExtendedVec3_set_x_1");
        var _emscripten_bind_PxExtendedVec3_get_y_0 = Module["_emscripten_bind_PxExtendedVec3_get_y_0"] = createExportWrapper("emscripten_bind_PxExtendedVec3_get_y_0");
        var _emscripten_bind_PxExtendedVec3_set_y_1 = Module["_emscripten_bind_PxExtendedVec3_set_y_1"] = createExportWrapper("emscripten_bind_PxExtendedVec3_set_y_1");
        var _emscripten_bind_PxExtendedVec3_get_z_0 = Module["_emscripten_bind_PxExtendedVec3_get_z_0"] = createExportWrapper("emscripten_bind_PxExtendedVec3_get_z_0");
        var _emscripten_bind_PxExtendedVec3_set_z_1 = Module["_emscripten_bind_PxExtendedVec3_set_z_1"] = createExportWrapper("emscripten_bind_PxExtendedVec3_set_z_1");
        var _emscripten_bind_PxExtendedVec3___destroy___0 = Module["_emscripten_bind_PxExtendedVec3___destroy___0"] = createExportWrapper("emscripten_bind_PxExtendedVec3___destroy___0");
        var _emscripten_bind_PxObstacleContext_release_0 = Module["_emscripten_bind_PxObstacleContext_release_0"] = createExportWrapper("emscripten_bind_PxObstacleContext_release_0");
        var _emscripten_bind_PxObstacleContext_getControllerManager_0 = Module["_emscripten_bind_PxObstacleContext_getControllerManager_0"] = createExportWrapper("emscripten_bind_PxObstacleContext_getControllerManager_0");
        var _emscripten_bind_PxObstacleContext_addObstacle_1 = Module["_emscripten_bind_PxObstacleContext_addObstacle_1"] = createExportWrapper("emscripten_bind_PxObstacleContext_addObstacle_1");
        var _emscripten_bind_PxObstacleContext_removeObstacle_1 = Module["_emscripten_bind_PxObstacleContext_removeObstacle_1"] = createExportWrapper("emscripten_bind_PxObstacleContext_removeObstacle_1");
        var _emscripten_bind_PxObstacleContext_updateObstacle_2 = Module["_emscripten_bind_PxObstacleContext_updateObstacle_2"] = createExportWrapper("emscripten_bind_PxObstacleContext_updateObstacle_2");
        var _emscripten_bind_PxObstacleContext_getNbObstacles_0 = Module["_emscripten_bind_PxObstacleContext_getNbObstacles_0"] = createExportWrapper("emscripten_bind_PxObstacleContext_getNbObstacles_0");
        var _emscripten_bind_PxObstacleContext_getObstacle_1 = Module["_emscripten_bind_PxObstacleContext_getObstacle_1"] = createExportWrapper("emscripten_bind_PxObstacleContext_getObstacle_1");
        var _emscripten_bind_PxObstacleContext_getObstacleByHandle_1 = Module["_emscripten_bind_PxObstacleContext_getObstacleByHandle_1"] = createExportWrapper("emscripten_bind_PxObstacleContext_getObstacleByHandle_1");
        var _emscripten_bind_PxObstacleContext___destroy___0 = Module["_emscripten_bind_PxObstacleContext___destroy___0"] = createExportWrapper("emscripten_bind_PxObstacleContext___destroy___0");
        var _emscripten_bind_JavaUserControllerHitReport_JavaUserControllerHitReport_0 = Module["_emscripten_bind_JavaUserControllerHitReport_JavaUserControllerHitReport_0"] = createExportWrapper("emscripten_bind_JavaUserControllerHitReport_JavaUserControllerHitReport_0");
        var _emscripten_bind_JavaUserControllerHitReport_onShapeHit_1 = Module["_emscripten_bind_JavaUserControllerHitReport_onShapeHit_1"] = createExportWrapper("emscripten_bind_JavaUserControllerHitReport_onShapeHit_1");
        var _emscripten_bind_JavaUserControllerHitReport_onControllerHit_1 = Module["_emscripten_bind_JavaUserControllerHitReport_onControllerHit_1"] = createExportWrapper("emscripten_bind_JavaUserControllerHitReport_onControllerHit_1");
        var _emscripten_bind_JavaUserControllerHitReport_onObstacleHit_1 = Module["_emscripten_bind_JavaUserControllerHitReport_onObstacleHit_1"] = createExportWrapper("emscripten_bind_JavaUserControllerHitReport_onObstacleHit_1");
        var _emscripten_bind_JavaUserControllerHitReport___destroy___0 = Module["_emscripten_bind_JavaUserControllerHitReport___destroy___0"] = createExportWrapper("emscripten_bind_JavaUserControllerHitReport___destroy___0");
        var _emscripten_bind_SupportFunctions_PxActor_getShape_2 = Module["_emscripten_bind_SupportFunctions_PxActor_getShape_2"] = createExportWrapper("emscripten_bind_SupportFunctions_PxActor_getShape_2");
        var _emscripten_bind_SupportFunctions___destroy___0 = Module["_emscripten_bind_SupportFunctions___destroy___0"] = createExportWrapper("emscripten_bind_SupportFunctions___destroy___0");
        var _emscripten_bind_PxActorPtr___destroy___0 = Module["_emscripten_bind_PxActorPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxActorPtr___destroy___0");
        var _emscripten_bind_PxMaterialPtr___destroy___0 = Module["_emscripten_bind_PxMaterialPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxMaterialPtr___destroy___0");
        var _emscripten_bind_PxMaterialConstPtr___destroy___0 = Module["_emscripten_bind_PxMaterialConstPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxMaterialConstPtr___destroy___0");
        var _emscripten_bind_PxVehicleWheelsPtr___destroy___0 = Module["_emscripten_bind_PxVehicleWheelsPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxVehicleWheelsPtr___destroy___0");
        var _emscripten_bind_PxRealPtr___destroy___0 = Module["_emscripten_bind_PxRealPtr___destroy___0"] = createExportWrapper("emscripten_bind_PxRealPtr___destroy___0");
        var _emscripten_bind_PxU8Ptr___destroy___0 = Module["_emscripten_bind_PxU8Ptr___destroy___0"] = createExportWrapper("emscripten_bind_PxU8Ptr___destroy___0");
        var _emscripten_bind_PxU16Ptr___destroy___0 = Module["_emscripten_bind_PxU16Ptr___destroy___0"] = createExportWrapper("emscripten_bind_PxU16Ptr___destroy___0");
        var _emscripten_bind_PxU32Ptr___destroy___0 = Module["_emscripten_bind_PxU32Ptr___destroy___0"] = createExportWrapper("emscripten_bind_PxU32Ptr___destroy___0");
        var _emscripten_bind_TypeHelpers_getU8At_2 = Module["_emscripten_bind_TypeHelpers_getU8At_2"] = createExportWrapper("emscripten_bind_TypeHelpers_getU8At_2");
        var _emscripten_bind_TypeHelpers_getU16At_2 = Module["_emscripten_bind_TypeHelpers_getU16At_2"] = createExportWrapper("emscripten_bind_TypeHelpers_getU16At_2");
        var _emscripten_bind_TypeHelpers_getU32At_2 = Module["_emscripten_bind_TypeHelpers_getU32At_2"] = createExportWrapper("emscripten_bind_TypeHelpers_getU32At_2");
        var _emscripten_bind_TypeHelpers_getRealAt_2 = Module["_emscripten_bind_TypeHelpers_getRealAt_2"] = createExportWrapper("emscripten_bind_TypeHelpers_getRealAt_2");
        var _emscripten_bind_TypeHelpers_getContactPairAt_2 = Module["_emscripten_bind_TypeHelpers_getContactPairAt_2"] = createExportWrapper("emscripten_bind_TypeHelpers_getContactPairAt_2");
        var _emscripten_bind_TypeHelpers_getTriggerPairAt_2 = Module["_emscripten_bind_TypeHelpers_getTriggerPairAt_2"] = createExportWrapper("emscripten_bind_TypeHelpers_getTriggerPairAt_2");
        var _emscripten_bind_TypeHelpers_getVec3At_2 = Module["_emscripten_bind_TypeHelpers_getVec3At_2"] = createExportWrapper("emscripten_bind_TypeHelpers_getVec3At_2");
        var _emscripten_bind_TypeHelpers_voidToU8Ptr_1 = Module["_emscripten_bind_TypeHelpers_voidToU8Ptr_1"] = createExportWrapper("emscripten_bind_TypeHelpers_voidToU8Ptr_1");
        var _emscripten_bind_TypeHelpers_voidToU16Ptr_1 = Module["_emscripten_bind_TypeHelpers_voidToU16Ptr_1"] = createExportWrapper("emscripten_bind_TypeHelpers_voidToU16Ptr_1");
        var _emscripten_bind_TypeHelpers_voidToU32Ptr_1 = Module["_emscripten_bind_TypeHelpers_voidToU32Ptr_1"] = createExportWrapper("emscripten_bind_TypeHelpers_voidToU32Ptr_1");
        var _emscripten_bind_TypeHelpers_voidToRealPtr_1 = Module["_emscripten_bind_TypeHelpers_voidToRealPtr_1"] = createExportWrapper("emscripten_bind_TypeHelpers_voidToRealPtr_1");
        var _emscripten_bind_TypeHelpers_articulationBaseJointToJoint_1 = Module["_emscripten_bind_TypeHelpers_articulationBaseJointToJoint_1"] = createExportWrapper("emscripten_bind_TypeHelpers_articulationBaseJointToJoint_1");
        var _emscripten_bind_TypeHelpers_voidToAny_1 = Module["_emscripten_bind_TypeHelpers_voidToAny_1"] = createExportWrapper("emscripten_bind_TypeHelpers_voidToAny_1");
        var _emscripten_bind_TypeHelpers___destroy___0 = Module["_emscripten_bind_TypeHelpers___destroy___0"] = createExportWrapper("emscripten_bind_TypeHelpers___destroy___0");
        var _emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_0 = Module["_emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_0"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_0");
        var _emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_1 = Module["_emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_1"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_1");
        var _emscripten_bind_Vector_PxMaterialConst_at_1 = Module["_emscripten_bind_Vector_PxMaterialConst_at_1"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst_at_1");
        var _emscripten_bind_Vector_PxMaterialConst_data_0 = Module["_emscripten_bind_Vector_PxMaterialConst_data_0"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst_data_0");
        var _emscripten_bind_Vector_PxMaterialConst_size_0 = Module["_emscripten_bind_Vector_PxMaterialConst_size_0"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst_size_0");
        var _emscripten_bind_Vector_PxMaterialConst_push_back_1 = Module["_emscripten_bind_Vector_PxMaterialConst_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst_push_back_1");
        var _emscripten_bind_Vector_PxMaterialConst_clear_0 = Module["_emscripten_bind_Vector_PxMaterialConst_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst_clear_0");
        var _emscripten_bind_Vector_PxMaterialConst___destroy___0 = Module["_emscripten_bind_Vector_PxMaterialConst___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxMaterialConst___destroy___0");
        var _emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_0 = Module["_emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_0"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_0");
        var _emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_1 = Module["_emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_1"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_1");
        var _emscripten_bind_Vector_PxHeightFieldSample_at_1 = Module["_emscripten_bind_Vector_PxHeightFieldSample_at_1"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample_at_1");
        var _emscripten_bind_Vector_PxHeightFieldSample_data_0 = Module["_emscripten_bind_Vector_PxHeightFieldSample_data_0"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample_data_0");
        var _emscripten_bind_Vector_PxHeightFieldSample_size_0 = Module["_emscripten_bind_Vector_PxHeightFieldSample_size_0"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample_size_0");
        var _emscripten_bind_Vector_PxHeightFieldSample_push_back_1 = Module["_emscripten_bind_Vector_PxHeightFieldSample_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample_push_back_1");
        var _emscripten_bind_Vector_PxHeightFieldSample_clear_0 = Module["_emscripten_bind_Vector_PxHeightFieldSample_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample_clear_0");
        var _emscripten_bind_Vector_PxHeightFieldSample___destroy___0 = Module["_emscripten_bind_Vector_PxHeightFieldSample___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxHeightFieldSample___destroy___0");
        var _emscripten_bind_Vector_PxReal_Vector_PxReal_0 = Module["_emscripten_bind_Vector_PxReal_Vector_PxReal_0"] = createExportWrapper("emscripten_bind_Vector_PxReal_Vector_PxReal_0");
        var _emscripten_bind_Vector_PxReal_Vector_PxReal_1 = Module["_emscripten_bind_Vector_PxReal_Vector_PxReal_1"] = createExportWrapper("emscripten_bind_Vector_PxReal_Vector_PxReal_1");
        var _emscripten_bind_Vector_PxReal_at_1 = Module["_emscripten_bind_Vector_PxReal_at_1"] = createExportWrapper("emscripten_bind_Vector_PxReal_at_1");
        var _emscripten_bind_Vector_PxReal_data_0 = Module["_emscripten_bind_Vector_PxReal_data_0"] = createExportWrapper("emscripten_bind_Vector_PxReal_data_0");
        var _emscripten_bind_Vector_PxReal_size_0 = Module["_emscripten_bind_Vector_PxReal_size_0"] = createExportWrapper("emscripten_bind_Vector_PxReal_size_0");
        var _emscripten_bind_Vector_PxReal_push_back_1 = Module["_emscripten_bind_Vector_PxReal_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxReal_push_back_1");
        var _emscripten_bind_Vector_PxReal_clear_0 = Module["_emscripten_bind_Vector_PxReal_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxReal_clear_0");
        var _emscripten_bind_Vector_PxReal___destroy___0 = Module["_emscripten_bind_Vector_PxReal___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxReal___destroy___0");
        var _emscripten_bind_Vector_PxU8_Vector_PxU8_0 = Module["_emscripten_bind_Vector_PxU8_Vector_PxU8_0"] = createExportWrapper("emscripten_bind_Vector_PxU8_Vector_PxU8_0");
        var _emscripten_bind_Vector_PxU8_Vector_PxU8_1 = Module["_emscripten_bind_Vector_PxU8_Vector_PxU8_1"] = createExportWrapper("emscripten_bind_Vector_PxU8_Vector_PxU8_1");
        var _emscripten_bind_Vector_PxU8_at_1 = Module["_emscripten_bind_Vector_PxU8_at_1"] = createExportWrapper("emscripten_bind_Vector_PxU8_at_1");
        var _emscripten_bind_Vector_PxU8_data_0 = Module["_emscripten_bind_Vector_PxU8_data_0"] = createExportWrapper("emscripten_bind_Vector_PxU8_data_0");
        var _emscripten_bind_Vector_PxU8_size_0 = Module["_emscripten_bind_Vector_PxU8_size_0"] = createExportWrapper("emscripten_bind_Vector_PxU8_size_0");
        var _emscripten_bind_Vector_PxU8_push_back_1 = Module["_emscripten_bind_Vector_PxU8_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxU8_push_back_1");
        var _emscripten_bind_Vector_PxU8_clear_0 = Module["_emscripten_bind_Vector_PxU8_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxU8_clear_0");
        var _emscripten_bind_Vector_PxU8___destroy___0 = Module["_emscripten_bind_Vector_PxU8___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxU8___destroy___0");
        var _emscripten_bind_Vector_PxU16_Vector_PxU16_0 = Module["_emscripten_bind_Vector_PxU16_Vector_PxU16_0"] = createExportWrapper("emscripten_bind_Vector_PxU16_Vector_PxU16_0");
        var _emscripten_bind_Vector_PxU16_Vector_PxU16_1 = Module["_emscripten_bind_Vector_PxU16_Vector_PxU16_1"] = createExportWrapper("emscripten_bind_Vector_PxU16_Vector_PxU16_1");
        var _emscripten_bind_Vector_PxU16_at_1 = Module["_emscripten_bind_Vector_PxU16_at_1"] = createExportWrapper("emscripten_bind_Vector_PxU16_at_1");
        var _emscripten_bind_Vector_PxU16_data_0 = Module["_emscripten_bind_Vector_PxU16_data_0"] = createExportWrapper("emscripten_bind_Vector_PxU16_data_0");
        var _emscripten_bind_Vector_PxU16_size_0 = Module["_emscripten_bind_Vector_PxU16_size_0"] = createExportWrapper("emscripten_bind_Vector_PxU16_size_0");
        var _emscripten_bind_Vector_PxU16_push_back_1 = Module["_emscripten_bind_Vector_PxU16_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxU16_push_back_1");
        var _emscripten_bind_Vector_PxU16_clear_0 = Module["_emscripten_bind_Vector_PxU16_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxU16_clear_0");
        var _emscripten_bind_Vector_PxU16___destroy___0 = Module["_emscripten_bind_Vector_PxU16___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxU16___destroy___0");
        var _emscripten_bind_Vector_PxU32_Vector_PxU32_0 = Module["_emscripten_bind_Vector_PxU32_Vector_PxU32_0"] = createExportWrapper("emscripten_bind_Vector_PxU32_Vector_PxU32_0");
        var _emscripten_bind_Vector_PxU32_Vector_PxU32_1 = Module["_emscripten_bind_Vector_PxU32_Vector_PxU32_1"] = createExportWrapper("emscripten_bind_Vector_PxU32_Vector_PxU32_1");
        var _emscripten_bind_Vector_PxU32_at_1 = Module["_emscripten_bind_Vector_PxU32_at_1"] = createExportWrapper("emscripten_bind_Vector_PxU32_at_1");
        var _emscripten_bind_Vector_PxU32_data_0 = Module["_emscripten_bind_Vector_PxU32_data_0"] = createExportWrapper("emscripten_bind_Vector_PxU32_data_0");
        var _emscripten_bind_Vector_PxU32_size_0 = Module["_emscripten_bind_Vector_PxU32_size_0"] = createExportWrapper("emscripten_bind_Vector_PxU32_size_0");
        var _emscripten_bind_Vector_PxU32_push_back_1 = Module["_emscripten_bind_Vector_PxU32_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxU32_push_back_1");
        var _emscripten_bind_Vector_PxU32_clear_0 = Module["_emscripten_bind_Vector_PxU32_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxU32_clear_0");
        var _emscripten_bind_Vector_PxU32___destroy___0 = Module["_emscripten_bind_Vector_PxU32___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxU32___destroy___0");
        var _emscripten_bind_Vector_PxVec3_Vector_PxVec3_0 = Module["_emscripten_bind_Vector_PxVec3_Vector_PxVec3_0"] = createExportWrapper("emscripten_bind_Vector_PxVec3_Vector_PxVec3_0");
        var _emscripten_bind_Vector_PxVec3_Vector_PxVec3_1 = Module["_emscripten_bind_Vector_PxVec3_Vector_PxVec3_1"] = createExportWrapper("emscripten_bind_Vector_PxVec3_Vector_PxVec3_1");
        var _emscripten_bind_Vector_PxVec3_at_1 = Module["_emscripten_bind_Vector_PxVec3_at_1"] = createExportWrapper("emscripten_bind_Vector_PxVec3_at_1");
        var _emscripten_bind_Vector_PxVec3_data_0 = Module["_emscripten_bind_Vector_PxVec3_data_0"] = createExportWrapper("emscripten_bind_Vector_PxVec3_data_0");
        var _emscripten_bind_Vector_PxVec3_size_0 = Module["_emscripten_bind_Vector_PxVec3_size_0"] = createExportWrapper("emscripten_bind_Vector_PxVec3_size_0");
        var _emscripten_bind_Vector_PxVec3_push_back_1 = Module["_emscripten_bind_Vector_PxVec3_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxVec3_push_back_1");
        var _emscripten_bind_Vector_PxVec3_clear_0 = Module["_emscripten_bind_Vector_PxVec3_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxVec3_clear_0");
        var _emscripten_bind_Vector_PxVec3___destroy___0 = Module["_emscripten_bind_Vector_PxVec3___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxVec3___destroy___0");
        var _emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_0 = Module["_emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_0");
        var _emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_1 = Module["_emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_1"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_1");
        var _emscripten_bind_Vector_PxRaycastQueryResult_at_1 = Module["_emscripten_bind_Vector_PxRaycastQueryResult_at_1"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult_at_1");
        var _emscripten_bind_Vector_PxRaycastQueryResult_data_0 = Module["_emscripten_bind_Vector_PxRaycastQueryResult_data_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult_data_0");
        var _emscripten_bind_Vector_PxRaycastQueryResult_size_0 = Module["_emscripten_bind_Vector_PxRaycastQueryResult_size_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult_size_0");
        var _emscripten_bind_Vector_PxRaycastQueryResult_push_back_1 = Module["_emscripten_bind_Vector_PxRaycastQueryResult_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult_push_back_1");
        var _emscripten_bind_Vector_PxRaycastQueryResult_clear_0 = Module["_emscripten_bind_Vector_PxRaycastQueryResult_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult_clear_0");
        var _emscripten_bind_Vector_PxRaycastQueryResult___destroy___0 = Module["_emscripten_bind_Vector_PxRaycastQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastQueryResult___destroy___0");
        var _emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_0 = Module["_emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_0");
        var _emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_1 = Module["_emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_1"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_1");
        var _emscripten_bind_Vector_PxSweepQueryResult_at_1 = Module["_emscripten_bind_Vector_PxSweepQueryResult_at_1"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult_at_1");
        var _emscripten_bind_Vector_PxSweepQueryResult_data_0 = Module["_emscripten_bind_Vector_PxSweepQueryResult_data_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult_data_0");
        var _emscripten_bind_Vector_PxSweepQueryResult_size_0 = Module["_emscripten_bind_Vector_PxSweepQueryResult_size_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult_size_0");
        var _emscripten_bind_Vector_PxSweepQueryResult_push_back_1 = Module["_emscripten_bind_Vector_PxSweepQueryResult_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult_push_back_1");
        var _emscripten_bind_Vector_PxSweepQueryResult_clear_0 = Module["_emscripten_bind_Vector_PxSweepQueryResult_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult_clear_0");
        var _emscripten_bind_Vector_PxSweepQueryResult___destroy___0 = Module["_emscripten_bind_Vector_PxSweepQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxSweepQueryResult___destroy___0");
        var _emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_0 = Module["_emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_0");
        var _emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_1 = Module["_emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_1"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_1");
        var _emscripten_bind_Vector_PxRaycastHit_at_1 = Module["_emscripten_bind_Vector_PxRaycastHit_at_1"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit_at_1");
        var _emscripten_bind_Vector_PxRaycastHit_data_0 = Module["_emscripten_bind_Vector_PxRaycastHit_data_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit_data_0");
        var _emscripten_bind_Vector_PxRaycastHit_size_0 = Module["_emscripten_bind_Vector_PxRaycastHit_size_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit_size_0");
        var _emscripten_bind_Vector_PxRaycastHit_push_back_1 = Module["_emscripten_bind_Vector_PxRaycastHit_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit_push_back_1");
        var _emscripten_bind_Vector_PxRaycastHit_clear_0 = Module["_emscripten_bind_Vector_PxRaycastHit_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit_clear_0");
        var _emscripten_bind_Vector_PxRaycastHit___destroy___0 = Module["_emscripten_bind_Vector_PxRaycastHit___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxRaycastHit___destroy___0");
        var _emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_0 = Module["_emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_0");
        var _emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_1 = Module["_emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_1"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_1");
        var _emscripten_bind_Vector_PxSweepHit_at_1 = Module["_emscripten_bind_Vector_PxSweepHit_at_1"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit_at_1");
        var _emscripten_bind_Vector_PxSweepHit_data_0 = Module["_emscripten_bind_Vector_PxSweepHit_data_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit_data_0");
        var _emscripten_bind_Vector_PxSweepHit_size_0 = Module["_emscripten_bind_Vector_PxSweepHit_size_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit_size_0");
        var _emscripten_bind_Vector_PxSweepHit_push_back_1 = Module["_emscripten_bind_Vector_PxSweepHit_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit_push_back_1");
        var _emscripten_bind_Vector_PxSweepHit_clear_0 = Module["_emscripten_bind_Vector_PxSweepHit_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit_clear_0");
        var _emscripten_bind_Vector_PxSweepHit___destroy___0 = Module["_emscripten_bind_Vector_PxSweepHit___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxSweepHit___destroy___0");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_0 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_0");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_1 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_1"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_1");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_at_1 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_at_1"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType_at_1");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_data_0 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_data_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType_data_0");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_size_0 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_size_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType_size_0");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_push_back_1 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType_push_back_1");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_clear_0 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType_clear_0");
        var _emscripten_bind_Vector_PxVehicleDrivableSurfaceType___destroy___0 = Module["_emscripten_bind_Vector_PxVehicleDrivableSurfaceType___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleDrivableSurfaceType___destroy___0");
        var _emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_0 = Module["_emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_0"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_0");
        var _emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_1 = Module["_emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_1"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_1");
        var _emscripten_bind_Vector_PxWheelQueryResult_at_1 = Module["_emscripten_bind_Vector_PxWheelQueryResult_at_1"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult_at_1");
        var _emscripten_bind_Vector_PxWheelQueryResult_data_0 = Module["_emscripten_bind_Vector_PxWheelQueryResult_data_0"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult_data_0");
        var _emscripten_bind_Vector_PxWheelQueryResult_size_0 = Module["_emscripten_bind_Vector_PxWheelQueryResult_size_0"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult_size_0");
        var _emscripten_bind_Vector_PxWheelQueryResult_push_back_1 = Module["_emscripten_bind_Vector_PxWheelQueryResult_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult_push_back_1");
        var _emscripten_bind_Vector_PxWheelQueryResult_clear_0 = Module["_emscripten_bind_Vector_PxWheelQueryResult_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult_clear_0");
        var _emscripten_bind_Vector_PxWheelQueryResult___destroy___0 = Module["_emscripten_bind_Vector_PxWheelQueryResult___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxWheelQueryResult___destroy___0");
        var _emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_0 = Module["_emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_0");
        var _emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_1 = Module["_emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_1"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_1");
        var _emscripten_bind_Vector_PxVehicleWheels_at_1 = Module["_emscripten_bind_Vector_PxVehicleWheels_at_1"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels_at_1");
        var _emscripten_bind_Vector_PxVehicleWheels_data_0 = Module["_emscripten_bind_Vector_PxVehicleWheels_data_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels_data_0");
        var _emscripten_bind_Vector_PxVehicleWheels_size_0 = Module["_emscripten_bind_Vector_PxVehicleWheels_size_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels_size_0");
        var _emscripten_bind_Vector_PxVehicleWheels_push_back_1 = Module["_emscripten_bind_Vector_PxVehicleWheels_push_back_1"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels_push_back_1");
        var _emscripten_bind_Vector_PxVehicleWheels_clear_0 = Module["_emscripten_bind_Vector_PxVehicleWheels_clear_0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels_clear_0");
        var _emscripten_bind_Vector_PxVehicleWheels___destroy___0 = Module["_emscripten_bind_Vector_PxVehicleWheels___destroy___0"] = createExportWrapper("emscripten_bind_Vector_PxVehicleWheels___destroy___0");
        var _emscripten_bind_JSPvdTransport_JSPvdTransport_0 = Module["_emscripten_bind_JSPvdTransport_JSPvdTransport_0"] = createExportWrapper("emscripten_bind_JSPvdTransport_JSPvdTransport_0");
        var _emscripten_bind_JSPvdTransport_connect_0 = Module["_emscripten_bind_JSPvdTransport_connect_0"] = createExportWrapper("emscripten_bind_JSPvdTransport_connect_0");
        var _emscripten_bind_JSPvdTransport_send_2 = Module["_emscripten_bind_JSPvdTransport_send_2"] = createExportWrapper("emscripten_bind_JSPvdTransport_send_2");
        var _emscripten_bind_JSPvdTransport___destroy___0 = Module["_emscripten_bind_JSPvdTransport___destroy___0"] = createExportWrapper("emscripten_bind_JSPvdTransport___destroy___0");
        var _emscripten_bind_PxPvdInstrumentationFlags_PxPvdInstrumentationFlags_1 = Module["_emscripten_bind_PxPvdInstrumentationFlags_PxPvdInstrumentationFlags_1"] = createExportWrapper("emscripten_bind_PxPvdInstrumentationFlags_PxPvdInstrumentationFlags_1");
        var _emscripten_bind_PxPvdInstrumentationFlags_isSet_1 = Module["_emscripten_bind_PxPvdInstrumentationFlags_isSet_1"] = createExportWrapper("emscripten_bind_PxPvdInstrumentationFlags_isSet_1");
        var _emscripten_bind_PxPvdInstrumentationFlags_set_1 = Module["_emscripten_bind_PxPvdInstrumentationFlags_set_1"] = createExportWrapper("emscripten_bind_PxPvdInstrumentationFlags_set_1");
        var _emscripten_bind_PxPvdInstrumentationFlags_clear_1 = Module["_emscripten_bind_PxPvdInstrumentationFlags_clear_1"] = createExportWrapper("emscripten_bind_PxPvdInstrumentationFlags_clear_1");
        var _emscripten_bind_PxPvdInstrumentationFlags___destroy___0 = Module["_emscripten_bind_PxPvdInstrumentationFlags___destroy___0"] = createExportWrapper("emscripten_bind_PxPvdInstrumentationFlags___destroy___0");
        var _emscripten_bind_PxPvd_connect_2 = Module["_emscripten_bind_PxPvd_connect_2"] = createExportWrapper("emscripten_bind_PxPvd_connect_2");
        var _emscripten_enum_PxActorFlagEnum_eVISUALIZATION = Module["_emscripten_enum_PxActorFlagEnum_eVISUALIZATION"] = createExportWrapper("emscripten_enum_PxActorFlagEnum_eVISUALIZATION");
        var _emscripten_enum_PxActorFlagEnum_eDISABLE_GRAVITY = Module["_emscripten_enum_PxActorFlagEnum_eDISABLE_GRAVITY"] = createExportWrapper("emscripten_enum_PxActorFlagEnum_eDISABLE_GRAVITY");
        var _emscripten_enum_PxActorFlagEnum_eSEND_SLEEP_NOTIFIES = Module["_emscripten_enum_PxActorFlagEnum_eSEND_SLEEP_NOTIFIES"] = createExportWrapper("emscripten_enum_PxActorFlagEnum_eSEND_SLEEP_NOTIFIES");
        var _emscripten_enum_PxActorFlagEnum_eDISABLE_SIMULATION = Module["_emscripten_enum_PxActorFlagEnum_eDISABLE_SIMULATION"] = createExportWrapper("emscripten_enum_PxActorFlagEnum_eDISABLE_SIMULATION");
        var _emscripten_enum_PxActorTypeEnum_eRIGID_STATIC = Module["_emscripten_enum_PxActorTypeEnum_eRIGID_STATIC"] = createExportWrapper("emscripten_enum_PxActorTypeEnum_eRIGID_STATIC");
        var _emscripten_enum_PxActorTypeEnum_eRIGID_DYNAMIC = Module["_emscripten_enum_PxActorTypeEnum_eRIGID_DYNAMIC"] = createExportWrapper("emscripten_enum_PxActorTypeEnum_eRIGID_DYNAMIC");
        var _emscripten_enum_PxActorTypeEnum_eARTICULATION_LINK = Module["_emscripten_enum_PxActorTypeEnum_eARTICULATION_LINK"] = createExportWrapper("emscripten_enum_PxActorTypeEnum_eARTICULATION_LINK");
        var _emscripten_enum_PxActorTypeEnum_eACTOR_COUNT = Module["_emscripten_enum_PxActorTypeEnum_eACTOR_COUNT"] = createExportWrapper("emscripten_enum_PxActorTypeEnum_eACTOR_COUNT");
        var _emscripten_enum_PxActorTypeEnum_eACTOR_FORCE_DWORD = Module["_emscripten_enum_PxActorTypeEnum_eACTOR_FORCE_DWORD"] = createExportWrapper("emscripten_enum_PxActorTypeEnum_eACTOR_FORCE_DWORD");
        var _emscripten_enum_PxActorTypeFlagEnum_eRIGID_STATIC = Module["_emscripten_enum_PxActorTypeFlagEnum_eRIGID_STATIC"] = createExportWrapper("emscripten_enum_PxActorTypeFlagEnum_eRIGID_STATIC");
        var _emscripten_enum_PxActorTypeFlagEnum_eRIGID_DYNAMIC = Module["_emscripten_enum_PxActorTypeFlagEnum_eRIGID_DYNAMIC"] = createExportWrapper("emscripten_enum_PxActorTypeFlagEnum_eRIGID_DYNAMIC");
        var _emscripten_enum_PxArticulationAxisEnum_eTWIST = Module["_emscripten_enum_PxArticulationAxisEnum_eTWIST"] = createExportWrapper("emscripten_enum_PxArticulationAxisEnum_eTWIST");
        var _emscripten_enum_PxArticulationAxisEnum_eSWING1 = Module["_emscripten_enum_PxArticulationAxisEnum_eSWING1"] = createExportWrapper("emscripten_enum_PxArticulationAxisEnum_eSWING1");
        var _emscripten_enum_PxArticulationAxisEnum_eSWING2 = Module["_emscripten_enum_PxArticulationAxisEnum_eSWING2"] = createExportWrapper("emscripten_enum_PxArticulationAxisEnum_eSWING2");
        var _emscripten_enum_PxArticulationAxisEnum_eX = Module["_emscripten_enum_PxArticulationAxisEnum_eX"] = createExportWrapper("emscripten_enum_PxArticulationAxisEnum_eX");
        var _emscripten_enum_PxArticulationAxisEnum_eY = Module["_emscripten_enum_PxArticulationAxisEnum_eY"] = createExportWrapper("emscripten_enum_PxArticulationAxisEnum_eY");
        var _emscripten_enum_PxArticulationAxisEnum_eZ = Module["_emscripten_enum_PxArticulationAxisEnum_eZ"] = createExportWrapper("emscripten_enum_PxArticulationAxisEnum_eZ");
        var _emscripten_enum_PxArticulationAxisEnum_eCOUNT = Module["_emscripten_enum_PxArticulationAxisEnum_eCOUNT"] = createExportWrapper("emscripten_enum_PxArticulationAxisEnum_eCOUNT");
        var _emscripten_enum_PxArticulationCacheEnum_eVELOCITY = Module["_emscripten_enum_PxArticulationCacheEnum_eVELOCITY"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_eVELOCITY");
        var _emscripten_enum_PxArticulationCacheEnum_eACCELERATION = Module["_emscripten_enum_PxArticulationCacheEnum_eACCELERATION"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_eACCELERATION");
        var _emscripten_enum_PxArticulationCacheEnum_ePOSITION = Module["_emscripten_enum_PxArticulationCacheEnum_ePOSITION"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_ePOSITION");
        var _emscripten_enum_PxArticulationCacheEnum_eFORCE = Module["_emscripten_enum_PxArticulationCacheEnum_eFORCE"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_eFORCE");
        var _emscripten_enum_PxArticulationCacheEnum_eLINKVELOCITY = Module["_emscripten_enum_PxArticulationCacheEnum_eLINKVELOCITY"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_eLINKVELOCITY");
        var _emscripten_enum_PxArticulationCacheEnum_eLINKACCELERATION = Module["_emscripten_enum_PxArticulationCacheEnum_eLINKACCELERATION"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_eLINKACCELERATION");
        var _emscripten_enum_PxArticulationCacheEnum_eROOT = Module["_emscripten_enum_PxArticulationCacheEnum_eROOT"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_eROOT");
        var _emscripten_enum_PxArticulationCacheEnum_eALL = Module["_emscripten_enum_PxArticulationCacheEnum_eALL"] = createExportWrapper("emscripten_enum_PxArticulationCacheEnum_eALL");
        var _emscripten_enum_PxArticulationDriveTypeEnum_eFORCE = Module["_emscripten_enum_PxArticulationDriveTypeEnum_eFORCE"] = createExportWrapper("emscripten_enum_PxArticulationDriveTypeEnum_eFORCE");
        var _emscripten_enum_PxArticulationDriveTypeEnum_eACCELERATION = Module["_emscripten_enum_PxArticulationDriveTypeEnum_eACCELERATION"] = createExportWrapper("emscripten_enum_PxArticulationDriveTypeEnum_eACCELERATION");
        var _emscripten_enum_PxArticulationDriveTypeEnum_eTARGET = Module["_emscripten_enum_PxArticulationDriveTypeEnum_eTARGET"] = createExportWrapper("emscripten_enum_PxArticulationDriveTypeEnum_eTARGET");
        var _emscripten_enum_PxArticulationDriveTypeEnum_eVELOCITY = Module["_emscripten_enum_PxArticulationDriveTypeEnum_eVELOCITY"] = createExportWrapper("emscripten_enum_PxArticulationDriveTypeEnum_eVELOCITY");
        var _emscripten_enum_PxArticulationDriveTypeEnum_eNONE = Module["_emscripten_enum_PxArticulationDriveTypeEnum_eNONE"] = createExportWrapper("emscripten_enum_PxArticulationDriveTypeEnum_eNONE");
        var _emscripten_enum_PxArticulationFlagEnum_eFIX_BASE = Module["_emscripten_enum_PxArticulationFlagEnum_eFIX_BASE"] = createExportWrapper("emscripten_enum_PxArticulationFlagEnum_eFIX_BASE");
        var _emscripten_enum_PxArticulationFlagEnum_eDRIVE_LIMITS_ARE_FORCES = Module["_emscripten_enum_PxArticulationFlagEnum_eDRIVE_LIMITS_ARE_FORCES"] = createExportWrapper("emscripten_enum_PxArticulationFlagEnum_eDRIVE_LIMITS_ARE_FORCES");
        var _emscripten_enum_PxArticulationJointDriveTypeEnum_eTARGET = Module["_emscripten_enum_PxArticulationJointDriveTypeEnum_eTARGET"] = createExportWrapper("emscripten_enum_PxArticulationJointDriveTypeEnum_eTARGET");
        var _emscripten_enum_PxArticulationJointDriveTypeEnum_eERROR = Module["_emscripten_enum_PxArticulationJointDriveTypeEnum_eERROR"] = createExportWrapper("emscripten_enum_PxArticulationJointDriveTypeEnum_eERROR");
        var _emscripten_enum_PxArticulationMotionEnum_eLOCKED = Module["_emscripten_enum_PxArticulationMotionEnum_eLOCKED"] = createExportWrapper("emscripten_enum_PxArticulationMotionEnum_eLOCKED");
        var _emscripten_enum_PxArticulationMotionEnum_eLIMITED = Module["_emscripten_enum_PxArticulationMotionEnum_eLIMITED"] = createExportWrapper("emscripten_enum_PxArticulationMotionEnum_eLIMITED");
        var _emscripten_enum_PxArticulationMotionEnum_eFREE = Module["_emscripten_enum_PxArticulationMotionEnum_eFREE"] = createExportWrapper("emscripten_enum_PxArticulationMotionEnum_eFREE");
        var _emscripten_enum_PxArticulationJointTypeEnum_ePRISMATIC = Module["_emscripten_enum_PxArticulationJointTypeEnum_ePRISMATIC"] = createExportWrapper("emscripten_enum_PxArticulationJointTypeEnum_ePRISMATIC");
        var _emscripten_enum_PxArticulationJointTypeEnum_eREVOLUTE = Module["_emscripten_enum_PxArticulationJointTypeEnum_eREVOLUTE"] = createExportWrapper("emscripten_enum_PxArticulationJointTypeEnum_eREVOLUTE");
        var _emscripten_enum_PxArticulationJointTypeEnum_eSPHERICAL = Module["_emscripten_enum_PxArticulationJointTypeEnum_eSPHERICAL"] = createExportWrapper("emscripten_enum_PxArticulationJointTypeEnum_eSPHERICAL");
        var _emscripten_enum_PxArticulationJointTypeEnum_eFIX = Module["_emscripten_enum_PxArticulationJointTypeEnum_eFIX"] = createExportWrapper("emscripten_enum_PxArticulationJointTypeEnum_eFIX");
        var _emscripten_enum_PxArticulationJointTypeEnum_eUNDEFINED = Module["_emscripten_enum_PxArticulationJointTypeEnum_eUNDEFINED"] = createExportWrapper("emscripten_enum_PxArticulationJointTypeEnum_eUNDEFINED");
        var _emscripten_enum_PxBroadPhaseTypeEnum_eSAP = Module["_emscripten_enum_PxBroadPhaseTypeEnum_eSAP"] = createExportWrapper("emscripten_enum_PxBroadPhaseTypeEnum_eSAP");
        var _emscripten_enum_PxBroadPhaseTypeEnum_eMBP = Module["_emscripten_enum_PxBroadPhaseTypeEnum_eMBP"] = createExportWrapper("emscripten_enum_PxBroadPhaseTypeEnum_eMBP");
        var _emscripten_enum_PxBroadPhaseTypeEnum_eABP = Module["_emscripten_enum_PxBroadPhaseTypeEnum_eABP"] = createExportWrapper("emscripten_enum_PxBroadPhaseTypeEnum_eABP");
        var _emscripten_enum_PxBroadPhaseTypeEnum_eGPU = Module["_emscripten_enum_PxBroadPhaseTypeEnum_eGPU"] = createExportWrapper("emscripten_enum_PxBroadPhaseTypeEnum_eGPU");
        var _emscripten_enum_PxBroadPhaseTypeEnum_eLAST = Module["_emscripten_enum_PxBroadPhaseTypeEnum_eLAST"] = createExportWrapper("emscripten_enum_PxBroadPhaseTypeEnum_eLAST");
        var _emscripten_enum_PxConstraintFlagEnum_eBROKEN = Module["_emscripten_enum_PxConstraintFlagEnum_eBROKEN"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eBROKEN");
        var _emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR0 = Module["_emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR0"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR0");
        var _emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR1 = Module["_emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR1"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR1");
        var _emscripten_enum_PxConstraintFlagEnum_ePROJECTION = Module["_emscripten_enum_PxConstraintFlagEnum_ePROJECTION"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_ePROJECTION");
        var _emscripten_enum_PxConstraintFlagEnum_eCOLLISION_ENABLED = Module["_emscripten_enum_PxConstraintFlagEnum_eCOLLISION_ENABLED"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eCOLLISION_ENABLED");
        var _emscripten_enum_PxConstraintFlagEnum_eVISUALIZATION = Module["_emscripten_enum_PxConstraintFlagEnum_eVISUALIZATION"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eVISUALIZATION");
        var _emscripten_enum_PxConstraintFlagEnum_eDRIVE_LIMITS_ARE_FORCES = Module["_emscripten_enum_PxConstraintFlagEnum_eDRIVE_LIMITS_ARE_FORCES"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eDRIVE_LIMITS_ARE_FORCES");
        var _emscripten_enum_PxConstraintFlagEnum_eIMPROVED_SLERP = Module["_emscripten_enum_PxConstraintFlagEnum_eIMPROVED_SLERP"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eIMPROVED_SLERP");
        var _emscripten_enum_PxConstraintFlagEnum_eDISABLE_PREPROCESSING = Module["_emscripten_enum_PxConstraintFlagEnum_eDISABLE_PREPROCESSING"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eDISABLE_PREPROCESSING");
        var _emscripten_enum_PxConstraintFlagEnum_eENABLE_EXTENDED_LIMITS = Module["_emscripten_enum_PxConstraintFlagEnum_eENABLE_EXTENDED_LIMITS"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eENABLE_EXTENDED_LIMITS");
        var _emscripten_enum_PxConstraintFlagEnum_eGPU_COMPATIBLE = Module["_emscripten_enum_PxConstraintFlagEnum_eGPU_COMPATIBLE"] = createExportWrapper("emscripten_enum_PxConstraintFlagEnum_eGPU_COMPATIBLE");
        var _emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_0 = Module["_emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_0"] = createExportWrapper("emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_0");
        var _emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_1 = Module["_emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_1"] = createExportWrapper("emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_1");
        var _emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_0 = Module["_emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_0"] = createExportWrapper("emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_0");
        var _emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_1 = Module["_emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_1"] = createExportWrapper("emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_1");
        var _emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_HAS_FIRST_TOUCH = Module["_emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_HAS_FIRST_TOUCH"] = createExportWrapper("emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_HAS_FIRST_TOUCH");
        var _emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_LOST_TOUCH = Module["_emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_LOST_TOUCH"] = createExportWrapper("emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_LOST_TOUCH");
        var _emscripten_enum_PxContactPairFlagEnum_eINTERNAL_HAS_IMPULSES = Module["_emscripten_enum_PxContactPairFlagEnum_eINTERNAL_HAS_IMPULSES"] = createExportWrapper("emscripten_enum_PxContactPairFlagEnum_eINTERNAL_HAS_IMPULSES");
        var _emscripten_enum_PxContactPairFlagEnum_eINTERNAL_CONTACTS_ARE_FLIPPED = Module["_emscripten_enum_PxContactPairFlagEnum_eINTERNAL_CONTACTS_ARE_FLIPPED"] = createExportWrapper("emscripten_enum_PxContactPairFlagEnum_eINTERNAL_CONTACTS_ARE_FLIPPED");
        var _emscripten_enum_PxForceModeEnum_eFORCE = Module["_emscripten_enum_PxForceModeEnum_eFORCE"] = createExportWrapper("emscripten_enum_PxForceModeEnum_eFORCE");
        var _emscripten_enum_PxForceModeEnum_eIMPULSE = Module["_emscripten_enum_PxForceModeEnum_eIMPULSE"] = createExportWrapper("emscripten_enum_PxForceModeEnum_eIMPULSE");
        var _emscripten_enum_PxForceModeEnum_eVELOCITY_CHANGE = Module["_emscripten_enum_PxForceModeEnum_eVELOCITY_CHANGE"] = createExportWrapper("emscripten_enum_PxForceModeEnum_eVELOCITY_CHANGE");
        var _emscripten_enum_PxForceModeEnum_eACCELERATION = Module["_emscripten_enum_PxForceModeEnum_eACCELERATION"] = createExportWrapper("emscripten_enum_PxForceModeEnum_eACCELERATION");
        var _emscripten_enum_PxFrictionTypeEnum_ePATCH = Module["_emscripten_enum_PxFrictionTypeEnum_ePATCH"] = createExportWrapper("emscripten_enum_PxFrictionTypeEnum_ePATCH");
        var _emscripten_enum_PxFrictionTypeEnum_eONE_DIRECTIONAL = Module["_emscripten_enum_PxFrictionTypeEnum_eONE_DIRECTIONAL"] = createExportWrapper("emscripten_enum_PxFrictionTypeEnum_eONE_DIRECTIONAL");
        var _emscripten_enum_PxFrictionTypeEnum_eTWO_DIRECTIONAL = Module["_emscripten_enum_PxFrictionTypeEnum_eTWO_DIRECTIONAL"] = createExportWrapper("emscripten_enum_PxFrictionTypeEnum_eTWO_DIRECTIONAL");
        var _emscripten_enum_PxFrictionTypeEnum_eFRICTION_COUNT = Module["_emscripten_enum_PxFrictionTypeEnum_eFRICTION_COUNT"] = createExportWrapper("emscripten_enum_PxFrictionTypeEnum_eFRICTION_COUNT");
        var _emscripten_enum_PxHitFlagEnum_ePOSITION = Module["_emscripten_enum_PxHitFlagEnum_ePOSITION"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_ePOSITION");
        var _emscripten_enum_PxHitFlagEnum_eNORMAL = Module["_emscripten_enum_PxHitFlagEnum_eNORMAL"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eNORMAL");
        var _emscripten_enum_PxHitFlagEnum_eUV = Module["_emscripten_enum_PxHitFlagEnum_eUV"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eUV");
        var _emscripten_enum_PxHitFlagEnum_eASSUME_NO_INITIAL_OVERLAP = Module["_emscripten_enum_PxHitFlagEnum_eASSUME_NO_INITIAL_OVERLAP"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eASSUME_NO_INITIAL_OVERLAP");
        var _emscripten_enum_PxHitFlagEnum_eMESH_MULTIPLE = Module["_emscripten_enum_PxHitFlagEnum_eMESH_MULTIPLE"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eMESH_MULTIPLE");
        var _emscripten_enum_PxHitFlagEnum_eMESH_ANY = Module["_emscripten_enum_PxHitFlagEnum_eMESH_ANY"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eMESH_ANY");
        var _emscripten_enum_PxHitFlagEnum_eMESH_BOTH_SIDES = Module["_emscripten_enum_PxHitFlagEnum_eMESH_BOTH_SIDES"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eMESH_BOTH_SIDES");
        var _emscripten_enum_PxHitFlagEnum_ePRECISE_SWEEP = Module["_emscripten_enum_PxHitFlagEnum_ePRECISE_SWEEP"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_ePRECISE_SWEEP");
        var _emscripten_enum_PxHitFlagEnum_eMTD = Module["_emscripten_enum_PxHitFlagEnum_eMTD"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eMTD");
        var _emscripten_enum_PxHitFlagEnum_eFACE_INDEX = Module["_emscripten_enum_PxHitFlagEnum_eFACE_INDEX"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eFACE_INDEX");
        var _emscripten_enum_PxHitFlagEnum_eDEFAULT = Module["_emscripten_enum_PxHitFlagEnum_eDEFAULT"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eDEFAULT");
        var _emscripten_enum_PxHitFlagEnum_eMODIFIABLE_FLAGS = Module["_emscripten_enum_PxHitFlagEnum_eMODIFIABLE_FLAGS"] = createExportWrapper("emscripten_enum_PxHitFlagEnum_eMODIFIABLE_FLAGS");
        var _emscripten_enum_PxPairFilteringModeEnum_eKEEP = Module["_emscripten_enum_PxPairFilteringModeEnum_eKEEP"] = createExportWrapper("emscripten_enum_PxPairFilteringModeEnum_eKEEP");
        var _emscripten_enum_PxPairFilteringModeEnum_eSUPPRESS = Module["_emscripten_enum_PxPairFilteringModeEnum_eSUPPRESS"] = createExportWrapper("emscripten_enum_PxPairFilteringModeEnum_eSUPPRESS");
        var _emscripten_enum_PxPairFilteringModeEnum_eKILL = Module["_emscripten_enum_PxPairFilteringModeEnum_eKILL"] = createExportWrapper("emscripten_enum_PxPairFilteringModeEnum_eKILL");
        var _emscripten_enum_PxPairFilteringModeEnum_eDEFAULT = Module["_emscripten_enum_PxPairFilteringModeEnum_eDEFAULT"] = createExportWrapper("emscripten_enum_PxPairFilteringModeEnum_eDEFAULT");
        var _emscripten_enum_PxPairFlagEnum_eSOLVE_CONTACT = Module["_emscripten_enum_PxPairFlagEnum_eSOLVE_CONTACT"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eSOLVE_CONTACT");
        var _emscripten_enum_PxPairFlagEnum_eMODIFY_CONTACTS = Module["_emscripten_enum_PxPairFlagEnum_eMODIFY_CONTACTS"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eMODIFY_CONTACTS");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_FOUND = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_FOUND"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_FOUND");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_PERSISTS = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_PERSISTS"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_PERSISTS");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_LOST = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_LOST"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_LOST");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_CCD = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_CCD"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_CCD");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_FOUND = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_FOUND"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_FOUND");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_PERSISTS = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_PERSISTS"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_PERSISTS");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_LOST = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_LOST"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_LOST");
        var _emscripten_enum_PxPairFlagEnum_eNOTIFY_CONTACT_POINTS = Module["_emscripten_enum_PxPairFlagEnum_eNOTIFY_CONTACT_POINTS"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNOTIFY_CONTACT_POINTS");
        var _emscripten_enum_PxPairFlagEnum_eDETECT_DISCRETE_CONTACT = Module["_emscripten_enum_PxPairFlagEnum_eDETECT_DISCRETE_CONTACT"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eDETECT_DISCRETE_CONTACT");
        var _emscripten_enum_PxPairFlagEnum_eDETECT_CCD_CONTACT = Module["_emscripten_enum_PxPairFlagEnum_eDETECT_CCD_CONTACT"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eDETECT_CCD_CONTACT");
        var _emscripten_enum_PxPairFlagEnum_ePRE_SOLVER_VELOCITY = Module["_emscripten_enum_PxPairFlagEnum_ePRE_SOLVER_VELOCITY"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_ePRE_SOLVER_VELOCITY");
        var _emscripten_enum_PxPairFlagEnum_ePOST_SOLVER_VELOCITY = Module["_emscripten_enum_PxPairFlagEnum_ePOST_SOLVER_VELOCITY"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_ePOST_SOLVER_VELOCITY");
        var _emscripten_enum_PxPairFlagEnum_eCONTACT_EVENT_POSE = Module["_emscripten_enum_PxPairFlagEnum_eCONTACT_EVENT_POSE"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eCONTACT_EVENT_POSE");
        var _emscripten_enum_PxPairFlagEnum_eNEXT_FREE = Module["_emscripten_enum_PxPairFlagEnum_eNEXT_FREE"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eNEXT_FREE");
        var _emscripten_enum_PxPairFlagEnum_eCONTACT_DEFAULT = Module["_emscripten_enum_PxPairFlagEnum_eCONTACT_DEFAULT"] = createExportWrapper("emscripten_enum_PxPairFlagEnum_eCONTACT_DEFAULT");
        var _emscripten_enum_PxPruningStructureTypeEnum_eNONE = Module["_emscripten_enum_PxPruningStructureTypeEnum_eNONE"] = createExportWrapper("emscripten_enum_PxPruningStructureTypeEnum_eNONE");
        var _emscripten_enum_PxPruningStructureTypeEnum_eDYNAMIC_AABB_TREE = Module["_emscripten_enum_PxPruningStructureTypeEnum_eDYNAMIC_AABB_TREE"] = createExportWrapper("emscripten_enum_PxPruningStructureTypeEnum_eDYNAMIC_AABB_TREE");
        var _emscripten_enum_PxPruningStructureTypeEnum_eSTATIC_AABB_TREE = Module["_emscripten_enum_PxPruningStructureTypeEnum_eSTATIC_AABB_TREE"] = createExportWrapper("emscripten_enum_PxPruningStructureTypeEnum_eSTATIC_AABB_TREE");
        var _emscripten_enum_PxPruningStructureTypeEnum_eLAST = Module["_emscripten_enum_PxPruningStructureTypeEnum_eLAST"] = createExportWrapper("emscripten_enum_PxPruningStructureTypeEnum_eLAST");
        var _emscripten_enum_PxQueryFlagEnum_eSTATIC = Module["_emscripten_enum_PxQueryFlagEnum_eSTATIC"] = createExportWrapper("emscripten_enum_PxQueryFlagEnum_eSTATIC");
        var _emscripten_enum_PxQueryFlagEnum_eDYNAMIC = Module["_emscripten_enum_PxQueryFlagEnum_eDYNAMIC"] = createExportWrapper("emscripten_enum_PxQueryFlagEnum_eDYNAMIC");
        var _emscripten_enum_PxQueryFlagEnum_ePREFILTER = Module["_emscripten_enum_PxQueryFlagEnum_ePREFILTER"] = createExportWrapper("emscripten_enum_PxQueryFlagEnum_ePREFILTER");
        var _emscripten_enum_PxQueryFlagEnum_ePOSTFILTER = Module["_emscripten_enum_PxQueryFlagEnum_ePOSTFILTER"] = createExportWrapper("emscripten_enum_PxQueryFlagEnum_ePOSTFILTER");
        var _emscripten_enum_PxQueryFlagEnum_eANY_HIT = Module["_emscripten_enum_PxQueryFlagEnum_eANY_HIT"] = createExportWrapper("emscripten_enum_PxQueryFlagEnum_eANY_HIT");
        var _emscripten_enum_PxQueryFlagEnum_eNO_BLOCK = Module["_emscripten_enum_PxQueryFlagEnum_eNO_BLOCK"] = createExportWrapper("emscripten_enum_PxQueryFlagEnum_eNO_BLOCK");
        var _emscripten_enum_PxRigidBodyFlagEnum_eKINEMATIC = Module["_emscripten_enum_PxRigidBodyFlagEnum_eKINEMATIC"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eKINEMATIC");
        var _emscripten_enum_PxRigidBodyFlagEnum_eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = Module["_emscripten_enum_PxRigidBodyFlagEnum_eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES");
        var _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD = Module["_emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD");
        var _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_FRICTION = Module["_emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_FRICTION"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_FRICTION");
        var _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_POSE_INTEGRATION_PREVIEW = Module["_emscripten_enum_PxRigidBodyFlagEnum_eENABLE_POSE_INTEGRATION_PREVIEW"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eENABLE_POSE_INTEGRATION_PREVIEW");
        var _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_SPECULATIVE_CCD = Module["_emscripten_enum_PxRigidBodyFlagEnum_eENABLE_SPECULATIVE_CCD"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eENABLE_SPECULATIVE_CCD");
        var _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_MAX_CONTACT_IMPULSE = Module["_emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_MAX_CONTACT_IMPULSE"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_MAX_CONTACT_IMPULSE");
        var _emscripten_enum_PxRigidBodyFlagEnum_eRETAIN_ACCELERATIONS = Module["_emscripten_enum_PxRigidBodyFlagEnum_eRETAIN_ACCELERATIONS"] = createExportWrapper("emscripten_enum_PxRigidBodyFlagEnum_eRETAIN_ACCELERATIONS");
        var _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_X = Module["_emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_X"] = createExportWrapper("emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_X");
        var _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Y = Module["_emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Y"] = createExportWrapper("emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Y");
        var _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Z = Module["_emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Z"] = createExportWrapper("emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Z");
        var _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_X = Module["_emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_X"] = createExportWrapper("emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_X");
        var _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Y = Module["_emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Y"] = createExportWrapper("emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Y");
        var _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Z = Module["_emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Z"] = createExportWrapper("emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Z");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_ACTIVE_ACTORS = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_ACTIVE_ACTORS"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_ACTIVE_ACTORS");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_CCD = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_CCD"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_CCD");
        var _emscripten_enum_PxSceneFlagEnum_eDISABLE_CCD_RESWEEP = Module["_emscripten_enum_PxSceneFlagEnum_eDISABLE_CCD_RESWEEP"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eDISABLE_CCD_RESWEEP");
        var _emscripten_enum_PxSceneFlagEnum_eADAPTIVE_FORCE = Module["_emscripten_enum_PxSceneFlagEnum_eADAPTIVE_FORCE"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eADAPTIVE_FORCE");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_PCM = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_PCM"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_PCM");
        var _emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = Module["_emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_REPORT_BUFFER_RESIZE"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_REPORT_BUFFER_RESIZE");
        var _emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_CACHE = Module["_emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_CACHE"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_CACHE");
        var _emscripten_enum_PxSceneFlagEnum_eREQUIRE_RW_LOCK = Module["_emscripten_enum_PxSceneFlagEnum_eREQUIRE_RW_LOCK"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eREQUIRE_RW_LOCK");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_STABILIZATION = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_STABILIZATION"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_STABILIZATION");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_AVERAGE_POINT = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_AVERAGE_POINT"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_AVERAGE_POINT");
        var _emscripten_enum_PxSceneFlagEnum_eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS = Module["_emscripten_enum_PxSceneFlagEnum_eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_GPU_DYNAMICS = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_GPU_DYNAMICS"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_GPU_DYNAMICS");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_ENHANCED_DETERMINISM = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_ENHANCED_DETERMINISM"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_ENHANCED_DETERMINISM");
        var _emscripten_enum_PxSceneFlagEnum_eENABLE_FRICTION_EVERY_ITERATION = Module["_emscripten_enum_PxSceneFlagEnum_eENABLE_FRICTION_EVERY_ITERATION"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eENABLE_FRICTION_EVERY_ITERATION");
        var _emscripten_enum_PxSceneFlagEnum_eMUTABLE_FLAGS = Module["_emscripten_enum_PxSceneFlagEnum_eMUTABLE_FLAGS"] = createExportWrapper("emscripten_enum_PxSceneFlagEnum_eMUTABLE_FLAGS");
        var _emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_ENABLED = Module["_emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_ENABLED"] = createExportWrapper("emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_ENABLED");
        var _emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_DISABLED = Module["_emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_DISABLED"] = createExportWrapper("emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_DISABLED");
        var _emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_DISABLED_COMMIT_DISABLED = Module["_emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_DISABLED_COMMIT_DISABLED"] = createExportWrapper("emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_DISABLED_COMMIT_DISABLED");
        var _emscripten_enum_PxShapeFlagEnum_eSIMULATION_SHAPE = Module["_emscripten_enum_PxShapeFlagEnum_eSIMULATION_SHAPE"] = createExportWrapper("emscripten_enum_PxShapeFlagEnum_eSIMULATION_SHAPE");
        var _emscripten_enum_PxShapeFlagEnum_eSCENE_QUERY_SHAPE = Module["_emscripten_enum_PxShapeFlagEnum_eSCENE_QUERY_SHAPE"] = createExportWrapper("emscripten_enum_PxShapeFlagEnum_eSCENE_QUERY_SHAPE");
        var _emscripten_enum_PxShapeFlagEnum_eTRIGGER_SHAPE = Module["_emscripten_enum_PxShapeFlagEnum_eTRIGGER_SHAPE"] = createExportWrapper("emscripten_enum_PxShapeFlagEnum_eTRIGGER_SHAPE");
        var _emscripten_enum_PxShapeFlagEnum_eVISUALIZATION = Module["_emscripten_enum_PxShapeFlagEnum_eVISUALIZATION"] = createExportWrapper("emscripten_enum_PxShapeFlagEnum_eVISUALIZATION");
        var _emscripten_enum_PxSolverTypeEnum_ePGS = Module["_emscripten_enum_PxSolverTypeEnum_ePGS"] = createExportWrapper("emscripten_enum_PxSolverTypeEnum_ePGS");
        var _emscripten_enum_PxSolverTypeEnum_eTGS = Module["_emscripten_enum_PxSolverTypeEnum_eTGS"] = createExportWrapper("emscripten_enum_PxSolverTypeEnum_eTGS");
        var _emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_TRIGGER = Module["_emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_TRIGGER"] = createExportWrapper("emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_TRIGGER");
        var _emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_OTHER = Module["_emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_OTHER"] = createExportWrapper("emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_OTHER");
        var _emscripten_enum_PxTriggerPairFlagEnum_eNEXT_FREE = Module["_emscripten_enum_PxTriggerPairFlagEnum_eNEXT_FREE"] = createExportWrapper("emscripten_enum_PxTriggerPairFlagEnum_eNEXT_FREE");
        var _emscripten_enum_PxVehicleClutchAccuracyModeEnum_eESTIMATE = Module["_emscripten_enum_PxVehicleClutchAccuracyModeEnum_eESTIMATE"] = createExportWrapper("emscripten_enum_PxVehicleClutchAccuracyModeEnum_eESTIMATE");
        var _emscripten_enum_PxVehicleClutchAccuracyModeEnum_eBEST_POSSIBLE = Module["_emscripten_enum_PxVehicleClutchAccuracyModeEnum_eBEST_POSSIBLE"] = createExportWrapper("emscripten_enum_PxVehicleClutchAccuracyModeEnum_eBEST_POSSIBLE");
        var _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_4WD = Module["_emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_4WD"] = createExportWrapper("emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_4WD");
        var _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_FRONTWD = Module["_emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_FRONTWD"] = createExportWrapper("emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_FRONTWD");
        var _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_REARWD = Module["_emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_REARWD"] = createExportWrapper("emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_REARWD");
        var _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_4WD = Module["_emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_4WD"] = createExportWrapper("emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_4WD");
        var _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_FRONTWD = Module["_emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_FRONTWD"] = createExportWrapper("emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_FRONTWD");
        var _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_REARWD = Module["_emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_REARWD"] = createExportWrapper("emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_REARWD");
        var _emscripten_enum_PxVehicleDifferential4WDataEnum_eMAX_NB_DIFF_TYPES = Module["_emscripten_enum_PxVehicleDifferential4WDataEnum_eMAX_NB_DIFF_TYPES"] = createExportWrapper("emscripten_enum_PxVehicleDifferential4WDataEnum_eMAX_NB_DIFF_TYPES");
        var _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_ACCEL = Module["_emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_ACCEL"] = createExportWrapper("emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_ACCEL");
        var _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_BRAKE = Module["_emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_BRAKE"] = createExportWrapper("emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_BRAKE");
        var _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_HANDBRAKE = Module["_emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_HANDBRAKE"] = createExportWrapper("emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_HANDBRAKE");
        var _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_LEFT = Module["_emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_LEFT"] = createExportWrapper("emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_LEFT");
        var _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_RIGHT = Module["_emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_RIGHT"] = createExportWrapper("emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_RIGHT");
        var _emscripten_enum_PxVehicleDrive4WControlEnum_eMAX_NB_DRIVE4W_ANALOG_INPUTS = Module["_emscripten_enum_PxVehicleDrive4WControlEnum_eMAX_NB_DRIVE4W_ANALOG_INPUTS"] = createExportWrapper("emscripten_enum_PxVehicleDrive4WControlEnum_eMAX_NB_DRIVE4W_ANALOG_INPUTS");
        var _emscripten_enum_PxVehicleDriveTankControlModelEnum_eSTANDARD = Module["_emscripten_enum_PxVehicleDriveTankControlModelEnum_eSTANDARD"] = createExportWrapper("emscripten_enum_PxVehicleDriveTankControlModelEnum_eSTANDARD");
        var _emscripten_enum_PxVehicleDriveTankControlModelEnum_eSPECIAL = Module["_emscripten_enum_PxVehicleDriveTankControlModelEnum_eSPECIAL"] = createExportWrapper("emscripten_enum_PxVehicleDriveTankControlModelEnum_eSPECIAL");
        var _emscripten_enum_PxVehicleGearEnum_eREVERSE = Module["_emscripten_enum_PxVehicleGearEnum_eREVERSE"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eREVERSE");
        var _emscripten_enum_PxVehicleGearEnum_eNEUTRAL = Module["_emscripten_enum_PxVehicleGearEnum_eNEUTRAL"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eNEUTRAL");
        var _emscripten_enum_PxVehicleGearEnum_eFIRST = Module["_emscripten_enum_PxVehicleGearEnum_eFIRST"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eFIRST");
        var _emscripten_enum_PxVehicleGearEnum_eSECOND = Module["_emscripten_enum_PxVehicleGearEnum_eSECOND"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eSECOND");
        var _emscripten_enum_PxVehicleGearEnum_eTHIRD = Module["_emscripten_enum_PxVehicleGearEnum_eTHIRD"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTHIRD");
        var _emscripten_enum_PxVehicleGearEnum_eFOURTH = Module["_emscripten_enum_PxVehicleGearEnum_eFOURTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eFOURTH");
        var _emscripten_enum_PxVehicleGearEnum_eFIFTH = Module["_emscripten_enum_PxVehicleGearEnum_eFIFTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eFIFTH");
        var _emscripten_enum_PxVehicleGearEnum_eSIXTH = Module["_emscripten_enum_PxVehicleGearEnum_eSIXTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eSIXTH");
        var _emscripten_enum_PxVehicleGearEnum_eSEVENTH = Module["_emscripten_enum_PxVehicleGearEnum_eSEVENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eSEVENTH");
        var _emscripten_enum_PxVehicleGearEnum_eEIGHTH = Module["_emscripten_enum_PxVehicleGearEnum_eEIGHTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eEIGHTH");
        var _emscripten_enum_PxVehicleGearEnum_eNINTH = Module["_emscripten_enum_PxVehicleGearEnum_eNINTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eNINTH");
        var _emscripten_enum_PxVehicleGearEnum_eTENTH = Module["_emscripten_enum_PxVehicleGearEnum_eTENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTENTH");
        var _emscripten_enum_PxVehicleGearEnum_eELEVENTH = Module["_emscripten_enum_PxVehicleGearEnum_eELEVENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eELEVENTH");
        var _emscripten_enum_PxVehicleGearEnum_eTWELFTH = Module["_emscripten_enum_PxVehicleGearEnum_eTWELFTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWELFTH");
        var _emscripten_enum_PxVehicleGearEnum_eTHIRTEENTH = Module["_emscripten_enum_PxVehicleGearEnum_eTHIRTEENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTHIRTEENTH");
        var _emscripten_enum_PxVehicleGearEnum_eFOURTEENTH = Module["_emscripten_enum_PxVehicleGearEnum_eFOURTEENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eFOURTEENTH");
        var _emscripten_enum_PxVehicleGearEnum_eFIFTEENTH = Module["_emscripten_enum_PxVehicleGearEnum_eFIFTEENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eFIFTEENTH");
        var _emscripten_enum_PxVehicleGearEnum_eSIXTEENTH = Module["_emscripten_enum_PxVehicleGearEnum_eSIXTEENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eSIXTEENTH");
        var _emscripten_enum_PxVehicleGearEnum_eSEVENTEENTH = Module["_emscripten_enum_PxVehicleGearEnum_eSEVENTEENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eSEVENTEENTH");
        var _emscripten_enum_PxVehicleGearEnum_eEIGHTEENTH = Module["_emscripten_enum_PxVehicleGearEnum_eEIGHTEENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eEIGHTEENTH");
        var _emscripten_enum_PxVehicleGearEnum_eNINETEENTH = Module["_emscripten_enum_PxVehicleGearEnum_eNINETEENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eNINETEENTH");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTIETH = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTIETH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTIETH");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYFIRST = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYFIRST"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYFIRST");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYSECOND = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYSECOND"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYSECOND");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYTHIRD = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYTHIRD"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYTHIRD");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYFOURTH = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYFOURTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYFOURTH");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYFIFTH = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYFIFTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYFIFTH");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYSIXTH = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYSIXTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYSIXTH");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYSEVENTH = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYSEVENTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYSEVENTH");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYEIGHTH = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYEIGHTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYEIGHTH");
        var _emscripten_enum_PxVehicleGearEnum_eTWENTYNINTH = Module["_emscripten_enum_PxVehicleGearEnum_eTWENTYNINTH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTWENTYNINTH");
        var _emscripten_enum_PxVehicleGearEnum_eTHIRTIETH = Module["_emscripten_enum_PxVehicleGearEnum_eTHIRTIETH"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eTHIRTIETH");
        var _emscripten_enum_PxVehicleGearEnum_eGEARSRATIO_COUNT = Module["_emscripten_enum_PxVehicleGearEnum_eGEARSRATIO_COUNT"] = createExportWrapper("emscripten_enum_PxVehicleGearEnum_eGEARSRATIO_COUNT");
        var _emscripten_enum_PxVehicleUpdateModeEnum_eVELOCITY_CHANGE = Module["_emscripten_enum_PxVehicleUpdateModeEnum_eVELOCITY_CHANGE"] = createExportWrapper("emscripten_enum_PxVehicleUpdateModeEnum_eVELOCITY_CHANGE");
        var _emscripten_enum_PxVehicleUpdateModeEnum_eACCELERATION = Module["_emscripten_enum_PxVehicleUpdateModeEnum_eACCELERATION"] = createExportWrapper("emscripten_enum_PxVehicleUpdateModeEnum_eACCELERATION");
        var _emscripten_enum_PxVehicleWheelsSimFlagEnum_eLIMIT_SUSPENSION_EXPANSION_VELOCITY = Module["_emscripten_enum_PxVehicleWheelsSimFlagEnum_eLIMIT_SUSPENSION_EXPANSION_VELOCITY"] = createExportWrapper("emscripten_enum_PxVehicleWheelsSimFlagEnum_eLIMIT_SUSPENSION_EXPANSION_VELOCITY");
        var _emscripten_enum_VehicleSurfaceTypeMask_DRIVABLE_SURFACE = Module["_emscripten_enum_VehicleSurfaceTypeMask_DRIVABLE_SURFACE"] = createExportWrapper("emscripten_enum_VehicleSurfaceTypeMask_DRIVABLE_SURFACE");
        var _emscripten_enum_VehicleSurfaceTypeMask_UNDRIVABLE_SURFACE = Module["_emscripten_enum_VehicleSurfaceTypeMask_UNDRIVABLE_SURFACE"] = createExportWrapper("emscripten_enum_VehicleSurfaceTypeMask_UNDRIVABLE_SURFACE");
        var _emscripten_enum_PxConvexMeshGeometryFlagEnum_eTIGHT_BOUNDS = Module["_emscripten_enum_PxConvexMeshGeometryFlagEnum_eTIGHT_BOUNDS"] = createExportWrapper("emscripten_enum_PxConvexMeshGeometryFlagEnum_eTIGHT_BOUNDS");
        var _emscripten_enum_PxGeometryTypeEnum_eSPHERE = Module["_emscripten_enum_PxGeometryTypeEnum_eSPHERE"] = createExportWrapper("emscripten_enum_PxGeometryTypeEnum_eSPHERE");
        var _emscripten_enum_PxGeometryTypeEnum_ePLANE = Module["_emscripten_enum_PxGeometryTypeEnum_ePLANE"] = createExportWrapper("emscripten_enum_PxGeometryTypeEnum_ePLANE");
        var _emscripten_enum_PxGeometryTypeEnum_eCAPSULE = Module["_emscripten_enum_PxGeometryTypeEnum_eCAPSULE"] = createExportWrapper("emscripten_enum_PxGeometryTypeEnum_eCAPSULE");
        var _emscripten_enum_PxGeometryTypeEnum_eBOX = Module["_emscripten_enum_PxGeometryTypeEnum_eBOX"] = createExportWrapper("emscripten_enum_PxGeometryTypeEnum_eBOX");
        var _emscripten_enum_PxGeometryTypeEnum_eCONVEXMESH = Module["_emscripten_enum_PxGeometryTypeEnum_eCONVEXMESH"] = createExportWrapper("emscripten_enum_PxGeometryTypeEnum_eCONVEXMESH");
        var _emscripten_enum_PxGeometryTypeEnum_eTRIANGLEMESH = Module["_emscripten_enum_PxGeometryTypeEnum_eTRIANGLEMESH"] = createExportWrapper("emscripten_enum_PxGeometryTypeEnum_eTRIANGLEMESH");
        var _emscripten_enum_PxGeometryTypeEnum_eHEIGHTFIELD = Module["_emscripten_enum_PxGeometryTypeEnum_eHEIGHTFIELD"] = createExportWrapper("emscripten_enum_PxGeometryTypeEnum_eHEIGHTFIELD");
        var _emscripten_enum_PxHeightFieldFlagEnum_eNO_BOUNDARY_EDGES = Module["_emscripten_enum_PxHeightFieldFlagEnum_eNO_BOUNDARY_EDGES"] = createExportWrapper("emscripten_enum_PxHeightFieldFlagEnum_eNO_BOUNDARY_EDGES");
        var _emscripten_enum_PxHeightFieldFormatEnum_eS16_TM = Module["_emscripten_enum_PxHeightFieldFormatEnum_eS16_TM"] = createExportWrapper("emscripten_enum_PxHeightFieldFormatEnum_eS16_TM");
        var _emscripten_enum_PxMeshFlagEnum_eFLIPNORMALS = Module["_emscripten_enum_PxMeshFlagEnum_eFLIPNORMALS"] = createExportWrapper("emscripten_enum_PxMeshFlagEnum_eFLIPNORMALS");
        var _emscripten_enum_PxMeshFlagEnum_e16_BIT_INDICES = Module["_emscripten_enum_PxMeshFlagEnum_e16_BIT_INDICES"] = createExportWrapper("emscripten_enum_PxMeshFlagEnum_e16_BIT_INDICES");
        var _emscripten_enum_PxMeshGeometryFlagEnum_eDOUBLE_SIDED = Module["_emscripten_enum_PxMeshGeometryFlagEnum_eDOUBLE_SIDED"] = createExportWrapper("emscripten_enum_PxMeshGeometryFlagEnum_eDOUBLE_SIDED");
        var _emscripten_enum_PxTriangleMeshFlagEnum_e16_BIT_INDICES = Module["_emscripten_enum_PxTriangleMeshFlagEnum_e16_BIT_INDICES"] = createExportWrapper("emscripten_enum_PxTriangleMeshFlagEnum_e16_BIT_INDICES");
        var _emscripten_enum_PxTriangleMeshFlagEnum_eADJACENCY_INFO = Module["_emscripten_enum_PxTriangleMeshFlagEnum_eADJACENCY_INFO"] = createExportWrapper("emscripten_enum_PxTriangleMeshFlagEnum_eADJACENCY_INFO");
        var _emscripten_enum_PxConvexFlagEnum_e16_BIT_INDICES = Module["_emscripten_enum_PxConvexFlagEnum_e16_BIT_INDICES"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_e16_BIT_INDICES");
        var _emscripten_enum_PxConvexFlagEnum_eCOMPUTE_CONVEX = Module["_emscripten_enum_PxConvexFlagEnum_eCOMPUTE_CONVEX"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_eCOMPUTE_CONVEX");
        var _emscripten_enum_PxConvexFlagEnum_eCHECK_ZERO_AREA_TRIANGLES = Module["_emscripten_enum_PxConvexFlagEnum_eCHECK_ZERO_AREA_TRIANGLES"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_eCHECK_ZERO_AREA_TRIANGLES");
        var _emscripten_enum_PxConvexFlagEnum_eQUANTIZE_INPUT = Module["_emscripten_enum_PxConvexFlagEnum_eQUANTIZE_INPUT"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_eQUANTIZE_INPUT");
        var _emscripten_enum_PxConvexFlagEnum_eDISABLE_MESH_VALIDATION = Module["_emscripten_enum_PxConvexFlagEnum_eDISABLE_MESH_VALIDATION"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_eDISABLE_MESH_VALIDATION");
        var _emscripten_enum_PxConvexFlagEnum_ePLANE_SHIFTING = Module["_emscripten_enum_PxConvexFlagEnum_ePLANE_SHIFTING"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_ePLANE_SHIFTING");
        var _emscripten_enum_PxConvexFlagEnum_eFAST_INERTIA_COMPUTATION = Module["_emscripten_enum_PxConvexFlagEnum_eFAST_INERTIA_COMPUTATION"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_eFAST_INERTIA_COMPUTATION");
        var _emscripten_enum_PxConvexFlagEnum_eGPU_COMPATIBLE = Module["_emscripten_enum_PxConvexFlagEnum_eGPU_COMPATIBLE"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_eGPU_COMPATIBLE");
        var _emscripten_enum_PxConvexFlagEnum_eSHIFT_VERTICES = Module["_emscripten_enum_PxConvexFlagEnum_eSHIFT_VERTICES"] = createExportWrapper("emscripten_enum_PxConvexFlagEnum_eSHIFT_VERTICES");
        var _emscripten_enum_PxConvexMeshCookingTypeEnum_eQUICKHULL = Module["_emscripten_enum_PxConvexMeshCookingTypeEnum_eQUICKHULL"] = createExportWrapper("emscripten_enum_PxConvexMeshCookingTypeEnum_eQUICKHULL");
        var _emscripten_enum_PxMeshCookingHintEnum_eSIM_PERFORMANCE = Module["_emscripten_enum_PxMeshCookingHintEnum_eSIM_PERFORMANCE"] = createExportWrapper("emscripten_enum_PxMeshCookingHintEnum_eSIM_PERFORMANCE");
        var _emscripten_enum_PxMeshCookingHintEnum_eCOOKING_PERFORMANCE = Module["_emscripten_enum_PxMeshCookingHintEnum_eCOOKING_PERFORMANCE"] = createExportWrapper("emscripten_enum_PxMeshCookingHintEnum_eCOOKING_PERFORMANCE");
        var _emscripten_enum_PxMeshPreprocessingFlagEnum_eWELD_VERTICES = Module["_emscripten_enum_PxMeshPreprocessingFlagEnum_eWELD_VERTICES"] = createExportWrapper("emscripten_enum_PxMeshPreprocessingFlagEnum_eWELD_VERTICES");
        var _emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_CLEAN_MESH = Module["_emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_CLEAN_MESH"] = createExportWrapper("emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_CLEAN_MESH");
        var _emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_ACTIVE_EDGES_PRECOMPUTE = Module["_emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_ACTIVE_EDGES_PRECOMPUTE"] = createExportWrapper("emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_ACTIVE_EDGES_PRECOMPUTE");
        var _emscripten_enum_PxMeshPreprocessingFlagEnum_eFORCE_32BIT_INDICES = Module["_emscripten_enum_PxMeshPreprocessingFlagEnum_eFORCE_32BIT_INDICES"] = createExportWrapper("emscripten_enum_PxMeshPreprocessingFlagEnum_eFORCE_32BIT_INDICES");
        var _emscripten_enum_PxMeshMidPhaseEnum_eBVH33 = Module["_emscripten_enum_PxMeshMidPhaseEnum_eBVH33"] = createExportWrapper("emscripten_enum_PxMeshMidPhaseEnum_eBVH33");
        var _emscripten_enum_PxMeshMidPhaseEnum_eBVH34 = Module["_emscripten_enum_PxMeshMidPhaseEnum_eBVH34"] = createExportWrapper("emscripten_enum_PxMeshMidPhaseEnum_eBVH34");
        var _emscripten_enum_PxBaseFlagEnum_eOWNS_MEMORY = Module["_emscripten_enum_PxBaseFlagEnum_eOWNS_MEMORY"] = createExportWrapper("emscripten_enum_PxBaseFlagEnum_eOWNS_MEMORY");
        var _emscripten_enum_PxBaseFlagEnum_eIS_RELEASABLE = Module["_emscripten_enum_PxBaseFlagEnum_eIS_RELEASABLE"] = createExportWrapper("emscripten_enum_PxBaseFlagEnum_eIS_RELEASABLE");
        var _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_GPU = Module["_emscripten_enum_PxCudaBufferMemorySpaceEnum_T_GPU"] = createExportWrapper("emscripten_enum_PxCudaBufferMemorySpaceEnum_T_GPU");
        var _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_PINNED_HOST = Module["_emscripten_enum_PxCudaBufferMemorySpaceEnum_T_PINNED_HOST"] = createExportWrapper("emscripten_enum_PxCudaBufferMemorySpaceEnum_T_PINNED_HOST");
        var _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_WRITE_COMBINED = Module["_emscripten_enum_PxCudaBufferMemorySpaceEnum_T_WRITE_COMBINED"] = createExportWrapper("emscripten_enum_PxCudaBufferMemorySpaceEnum_T_WRITE_COMBINED");
        var _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_HOST = Module["_emscripten_enum_PxCudaBufferMemorySpaceEnum_T_HOST"] = createExportWrapper("emscripten_enum_PxCudaBufferMemorySpaceEnum_T_HOST");
        var _emscripten_enum_PxCudaInteropModeEnum_NO_INTEROP = Module["_emscripten_enum_PxCudaInteropModeEnum_NO_INTEROP"] = createExportWrapper("emscripten_enum_PxCudaInteropModeEnum_NO_INTEROP");
        var _emscripten_enum_PxCudaInteropModeEnum_D3D10_INTEROP = Module["_emscripten_enum_PxCudaInteropModeEnum_D3D10_INTEROP"] = createExportWrapper("emscripten_enum_PxCudaInteropModeEnum_D3D10_INTEROP");
        var _emscripten_enum_PxCudaInteropModeEnum_D3D11_INTEROP = Module["_emscripten_enum_PxCudaInteropModeEnum_D3D11_INTEROP"] = createExportWrapper("emscripten_enum_PxCudaInteropModeEnum_D3D11_INTEROP");
        var _emscripten_enum_PxCudaInteropModeEnum_OGL_INTEROP = Module["_emscripten_enum_PxCudaInteropModeEnum_OGL_INTEROP"] = createExportWrapper("emscripten_enum_PxCudaInteropModeEnum_OGL_INTEROP");
        var _emscripten_enum_PxErrorCodeEnum_eNO_ERROR = Module["_emscripten_enum_PxErrorCodeEnum_eNO_ERROR"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eNO_ERROR");
        var _emscripten_enum_PxErrorCodeEnum_eDEBUG_INFO = Module["_emscripten_enum_PxErrorCodeEnum_eDEBUG_INFO"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eDEBUG_INFO");
        var _emscripten_enum_PxErrorCodeEnum_eDEBUG_WARNING = Module["_emscripten_enum_PxErrorCodeEnum_eDEBUG_WARNING"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eDEBUG_WARNING");
        var _emscripten_enum_PxErrorCodeEnum_eINVALID_PARAMETER = Module["_emscripten_enum_PxErrorCodeEnum_eINVALID_PARAMETER"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eINVALID_PARAMETER");
        var _emscripten_enum_PxErrorCodeEnum_eINVALID_OPERATION = Module["_emscripten_enum_PxErrorCodeEnum_eINVALID_OPERATION"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eINVALID_OPERATION");
        var _emscripten_enum_PxErrorCodeEnum_eOUT_OF_MEMORY = Module["_emscripten_enum_PxErrorCodeEnum_eOUT_OF_MEMORY"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eOUT_OF_MEMORY");
        var _emscripten_enum_PxErrorCodeEnum_eINTERNAL_ERROR = Module["_emscripten_enum_PxErrorCodeEnum_eINTERNAL_ERROR"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eINTERNAL_ERROR");
        var _emscripten_enum_PxErrorCodeEnum_eABORT = Module["_emscripten_enum_PxErrorCodeEnum_eABORT"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eABORT");
        var _emscripten_enum_PxErrorCodeEnum_ePERF_WARNING = Module["_emscripten_enum_PxErrorCodeEnum_ePERF_WARNING"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_ePERF_WARNING");
        var _emscripten_enum_PxErrorCodeEnum_eMASK_ALL = Module["_emscripten_enum_PxErrorCodeEnum_eMASK_ALL"] = createExportWrapper("emscripten_enum_PxErrorCodeEnum_eMASK_ALL");
        var _emscripten_enum_PxIDENTITYEnum_PxIdentity = Module["_emscripten_enum_PxIDENTITYEnum_PxIdentity"] = createExportWrapper("emscripten_enum_PxIDENTITYEnum_PxIdentity");
        var _emscripten_enum_PxD6AxisEnum_eX = Module["_emscripten_enum_PxD6AxisEnum_eX"] = createExportWrapper("emscripten_enum_PxD6AxisEnum_eX");
        var _emscripten_enum_PxD6AxisEnum_eY = Module["_emscripten_enum_PxD6AxisEnum_eY"] = createExportWrapper("emscripten_enum_PxD6AxisEnum_eY");
        var _emscripten_enum_PxD6AxisEnum_eZ = Module["_emscripten_enum_PxD6AxisEnum_eZ"] = createExportWrapper("emscripten_enum_PxD6AxisEnum_eZ");
        var _emscripten_enum_PxD6AxisEnum_eTWIST = Module["_emscripten_enum_PxD6AxisEnum_eTWIST"] = createExportWrapper("emscripten_enum_PxD6AxisEnum_eTWIST");
        var _emscripten_enum_PxD6AxisEnum_eSWING1 = Module["_emscripten_enum_PxD6AxisEnum_eSWING1"] = createExportWrapper("emscripten_enum_PxD6AxisEnum_eSWING1");
        var _emscripten_enum_PxD6AxisEnum_eSWING2 = Module["_emscripten_enum_PxD6AxisEnum_eSWING2"] = createExportWrapper("emscripten_enum_PxD6AxisEnum_eSWING2");
        var _emscripten_enum_PxD6AxisEnum_eCOUNT = Module["_emscripten_enum_PxD6AxisEnum_eCOUNT"] = createExportWrapper("emscripten_enum_PxD6AxisEnum_eCOUNT");
        var _emscripten_enum_PxD6DriveEnum_eX = Module["_emscripten_enum_PxD6DriveEnum_eX"] = createExportWrapper("emscripten_enum_PxD6DriveEnum_eX");
        var _emscripten_enum_PxD6DriveEnum_eY = Module["_emscripten_enum_PxD6DriveEnum_eY"] = createExportWrapper("emscripten_enum_PxD6DriveEnum_eY");
        var _emscripten_enum_PxD6DriveEnum_eZ = Module["_emscripten_enum_PxD6DriveEnum_eZ"] = createExportWrapper("emscripten_enum_PxD6DriveEnum_eZ");
        var _emscripten_enum_PxD6DriveEnum_eSWING = Module["_emscripten_enum_PxD6DriveEnum_eSWING"] = createExportWrapper("emscripten_enum_PxD6DriveEnum_eSWING");
        var _emscripten_enum_PxD6DriveEnum_eTWIST = Module["_emscripten_enum_PxD6DriveEnum_eTWIST"] = createExportWrapper("emscripten_enum_PxD6DriveEnum_eTWIST");
        var _emscripten_enum_PxD6DriveEnum_eSLERP = Module["_emscripten_enum_PxD6DriveEnum_eSLERP"] = createExportWrapper("emscripten_enum_PxD6DriveEnum_eSLERP");
        var _emscripten_enum_PxD6DriveEnum_eCOUNT = Module["_emscripten_enum_PxD6DriveEnum_eCOUNT"] = createExportWrapper("emscripten_enum_PxD6DriveEnum_eCOUNT");
        var _emscripten_enum_PxD6JointDriveFlagEnum_eACCELERATION = Module["_emscripten_enum_PxD6JointDriveFlagEnum_eACCELERATION"] = createExportWrapper("emscripten_enum_PxD6JointDriveFlagEnum_eACCELERATION");
        var _emscripten_enum_PxD6MotionEnum_eLOCKED = Module["_emscripten_enum_PxD6MotionEnum_eLOCKED"] = createExportWrapper("emscripten_enum_PxD6MotionEnum_eLOCKED");
        var _emscripten_enum_PxD6MotionEnum_eLIMITED = Module["_emscripten_enum_PxD6MotionEnum_eLIMITED"] = createExportWrapper("emscripten_enum_PxD6MotionEnum_eLIMITED");
        var _emscripten_enum_PxD6MotionEnum_eFREE = Module["_emscripten_enum_PxD6MotionEnum_eFREE"] = createExportWrapper("emscripten_enum_PxD6MotionEnum_eFREE");
        var _emscripten_enum_PxDistanceJointFlagEnum_eMAX_DISTANCE_ENABLED = Module["_emscripten_enum_PxDistanceJointFlagEnum_eMAX_DISTANCE_ENABLED"] = createExportWrapper("emscripten_enum_PxDistanceJointFlagEnum_eMAX_DISTANCE_ENABLED");
        var _emscripten_enum_PxDistanceJointFlagEnum_eMIN_DISTANCE_ENABLED = Module["_emscripten_enum_PxDistanceJointFlagEnum_eMIN_DISTANCE_ENABLED"] = createExportWrapper("emscripten_enum_PxDistanceJointFlagEnum_eMIN_DISTANCE_ENABLED");
        var _emscripten_enum_PxDistanceJointFlagEnum_eSPRING_ENABLED = Module["_emscripten_enum_PxDistanceJointFlagEnum_eSPRING_ENABLED"] = createExportWrapper("emscripten_enum_PxDistanceJointFlagEnum_eSPRING_ENABLED");
        var _emscripten_enum_PxJointActorIndexEnum_eACTOR0 = Module["_emscripten_enum_PxJointActorIndexEnum_eACTOR0"] = createExportWrapper("emscripten_enum_PxJointActorIndexEnum_eACTOR0");
        var _emscripten_enum_PxJointActorIndexEnum_eACTOR1 = Module["_emscripten_enum_PxJointActorIndexEnum_eACTOR1"] = createExportWrapper("emscripten_enum_PxJointActorIndexEnum_eACTOR1");
        var _emscripten_enum_PxJointActorIndexEnum_COUNT = Module["_emscripten_enum_PxJointActorIndexEnum_COUNT"] = createExportWrapper("emscripten_enum_PxJointActorIndexEnum_COUNT");
        var _emscripten_enum_PxPrismaticJointFlagEnum_eLIMIT_ENABLED = Module["_emscripten_enum_PxPrismaticJointFlagEnum_eLIMIT_ENABLED"] = createExportWrapper("emscripten_enum_PxPrismaticJointFlagEnum_eLIMIT_ENABLED");
        var _emscripten_enum_PxRevoluteJointFlagEnum_eLIMIT_ENABLED = Module["_emscripten_enum_PxRevoluteJointFlagEnum_eLIMIT_ENABLED"] = createExportWrapper("emscripten_enum_PxRevoluteJointFlagEnum_eLIMIT_ENABLED");
        var _emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_ENABLED = Module["_emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_ENABLED"] = createExportWrapper("emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_ENABLED");
        var _emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_FREESPIN = Module["_emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_FREESPIN"] = createExportWrapper("emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_FREESPIN");
        var _emscripten_enum_PxSphericalJointFlagEnum_eLIMIT_ENABLED = Module["_emscripten_enum_PxSphericalJointFlagEnum_eLIMIT_ENABLED"] = createExportWrapper("emscripten_enum_PxSphericalJointFlagEnum_eLIMIT_ENABLED");
        var _emscripten_enum_PxCapsuleClimbingModeEnum_eEASY = Module["_emscripten_enum_PxCapsuleClimbingModeEnum_eEASY"] = createExportWrapper("emscripten_enum_PxCapsuleClimbingModeEnum_eEASY");
        var _emscripten_enum_PxCapsuleClimbingModeEnum_eCONSTRAINED = Module["_emscripten_enum_PxCapsuleClimbingModeEnum_eCONSTRAINED"] = createExportWrapper("emscripten_enum_PxCapsuleClimbingModeEnum_eCONSTRAINED");
        var _emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_SIDES = Module["_emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_SIDES"] = createExportWrapper("emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_SIDES");
        var _emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_UP = Module["_emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_UP"] = createExportWrapper("emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_UP");
        var _emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_DOWN = Module["_emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_DOWN"] = createExportWrapper("emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_DOWN");
        var _emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING = Module["_emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING"] = createExportWrapper("emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING");
        var _emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING_AND_FORCE_SLIDING = Module["_emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING_AND_FORCE_SLIDING"] = createExportWrapper("emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING_AND_FORCE_SLIDING");
        var _emscripten_enum_PxControllerShapeTypeEnum_eBOX = Module["_emscripten_enum_PxControllerShapeTypeEnum_eBOX"] = createExportWrapper("emscripten_enum_PxControllerShapeTypeEnum_eBOX");
        var _emscripten_enum_PxControllerShapeTypeEnum_eCAPSULE = Module["_emscripten_enum_PxControllerShapeTypeEnum_eCAPSULE"] = createExportWrapper("emscripten_enum_PxControllerShapeTypeEnum_eCAPSULE");
        var _emscripten_enum_PxPvdInstrumentationFlagEnum_eDEBUG = Module["_emscripten_enum_PxPvdInstrumentationFlagEnum_eDEBUG"] = createExportWrapper("emscripten_enum_PxPvdInstrumentationFlagEnum_eDEBUG");
        var _emscripten_enum_PxPvdInstrumentationFlagEnum_ePROFILE = Module["_emscripten_enum_PxPvdInstrumentationFlagEnum_ePROFILE"] = createExportWrapper("emscripten_enum_PxPvdInstrumentationFlagEnum_ePROFILE");
        var _emscripten_enum_PxPvdInstrumentationFlagEnum_eMEMORY = Module["_emscripten_enum_PxPvdInstrumentationFlagEnum_eMEMORY"] = createExportWrapper("emscripten_enum_PxPvdInstrumentationFlagEnum_eMEMORY");
        var _emscripten_enum_PxPvdInstrumentationFlagEnum_eALL = Module["_emscripten_enum_PxPvdInstrumentationFlagEnum_eALL"] = createExportWrapper("emscripten_enum_PxPvdInstrumentationFlagEnum_eALL");
        var _free = Module["_free"] = createExportWrapper("free");
        var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");
        var _htonl = Module["_htonl"] = createExportWrapper("htonl");
        var _htons = Module["_htons"] = createExportWrapper("htons");
        var _ntohs = Module["_ntohs"] = createExportWrapper("ntohs");
        var _malloc = Module["_malloc"] = createExportWrapper("malloc");
        var stackSave = Module["stackSave"] = createExportWrapper("stackSave");
        var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");
        var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");
        var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");
        var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = createExportWrapper("emscripten_main_thread_process_queued_calls");
        var dynCall_ji = Module["dynCall_ji"] = createExportWrapper("dynCall_ji");
        var dynCall_iifiiiijii = Module["dynCall_iifiiiijii"] = createExportWrapper("dynCall_iifiiiijii");
        var dynCall_vifijii = Module["dynCall_vifijii"] = createExportWrapper("dynCall_vifijii");
        var dynCall_viij = Module["dynCall_viij"] = createExportWrapper("dynCall_viij");
        var dynCall_vij = Module["dynCall_vij"] = createExportWrapper("dynCall_vij");
        var dynCall_iij = Module["dynCall_iij"] = createExportWrapper("dynCall_iij");
        var dynCall_jii = Module["dynCall_jii"] = createExportWrapper("dynCall_jii");
        var dynCall_viiji = Module["dynCall_viiji"] = createExportWrapper("dynCall_viiji");
        var dynCall_viijijj = Module["dynCall_viijijj"] = createExportWrapper("dynCall_viijijj");
        var dynCall_viijj = Module["dynCall_viijj"] = createExportWrapper("dynCall_viijj");
        var dynCall_iiiij = Module["dynCall_iiiij"] = createExportWrapper("dynCall_iiiij");
        var dynCall_viiiij = Module["dynCall_viiiij"] = createExportWrapper("dynCall_viiiij");
        var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");
        if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString"))
          Module["intArrayFromString"] = function() {
            abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString"))
          Module["intArrayToString"] = function() {
            abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ccall"))
          Module["ccall"] = function() {
            abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "cwrap"))
          Module["cwrap"] = function() {
            abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setValue"))
          Module["setValue"] = function() {
            abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getValue"))
          Module["getValue"] = function() {
            abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "allocate"))
          Module["allocate"] = function() {
            abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString"))
          Module["UTF8ArrayToString"] = function() {
            abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString"))
          Module["UTF8ToString"] = function() {
            abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array"))
          Module["stringToUTF8Array"] = function() {
            abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8"))
          Module["stringToUTF8"] = function() {
            abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8"))
          Module["lengthBytesUTF8"] = function() {
            abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackTrace"))
          Module["stackTrace"] = function() {
            abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun"))
          Module["addOnPreRun"] = function() {
            abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnInit"))
          Module["addOnInit"] = function() {
            abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain"))
          Module["addOnPreMain"] = function() {
            abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnExit"))
          Module["addOnExit"] = function() {
            abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun"))
          Module["addOnPostRun"] = function() {
            abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory"))
          Module["writeStringToMemory"] = function() {
            abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory"))
          Module["writeArrayToMemory"] = function() {
            abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory"))
          Module["writeAsciiToMemory"] = function() {
            abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency"))
          Module["addRunDependency"] = function() {
            abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency"))
          Module["removeRunDependency"] = function() {
            abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder"))
          Module["FS_createFolder"] = function() {
            abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath"))
          Module["FS_createPath"] = function() {
            abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile"))
          Module["FS_createDataFile"] = function() {
            abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile"))
          Module["FS_createPreloadedFile"] = function() {
            abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile"))
          Module["FS_createLazyFile"] = function() {
            abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink"))
          Module["FS_createLink"] = function() {
            abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice"))
          Module["FS_createDevice"] = function() {
            abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink"))
          Module["FS_unlink"] = function() {
            abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getLEB"))
          Module["getLEB"] = function() {
            abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables"))
          Module["getFunctionTables"] = function() {
            abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables"))
          Module["alignFunctionTables"] = function() {
            abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions"))
          Module["registerFunctions"] = function() {
            abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "addFunction"))
          Module["addFunction"] = function() {
            abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "removeFunction"))
          Module["removeFunction"] = function() {
            abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper"))
          Module["getFuncWrapper"] = function() {
            abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint"))
          Module["prettyPrint"] = function() {
            abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt"))
          Module["makeBigInt"] = function() {
            abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "dynCall"))
          Module["dynCall"] = function() {
            abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting"))
          Module["getCompilerSetting"] = function() {
            abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "print"))
          Module["print"] = function() {
            abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "printErr"))
          Module["printErr"] = function() {
            abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0"))
          Module["getTempRet0"] = function() {
            abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0"))
          Module["setTempRet0"] = function() {
            abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "callMain"))
          Module["callMain"] = function() {
            abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "abort"))
          Module["abort"] = function() {
            abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8"))
          Module["stringToNewUTF8"] = function() {
            abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory"))
          Module["abortOnCannotGrowMemory"] = function() {
            abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer"))
          Module["emscripten_realloc_buffer"] = function() {
            abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ENV"))
          Module["ENV"] = function() {
            abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES"))
          Module["ERRNO_CODES"] = function() {
            abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES"))
          Module["ERRNO_MESSAGES"] = function() {
            abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setErrNo"))
          Module["setErrNo"] = function() {
            abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "DNS"))
          Module["DNS"] = function() {
            abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getHostByName"))
          Module["getHostByName"] = function() {
            abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES"))
          Module["GAI_ERRNO_MESSAGES"] = function() {
            abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "Protocols"))
          Module["Protocols"] = function() {
            abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "Sockets"))
          Module["Sockets"] = function() {
            abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice"))
          Module["getRandomDevice"] = function() {
            abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "traverseStack"))
          Module["traverseStack"] = function() {
            abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE"))
          Module["UNWIND_CACHE"] = function() {
            abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc"))
          Module["withBuiltinMalloc"] = function() {
            abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray"))
          Module["readAsmConstArgsArray"] = function() {
            abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs"))
          Module["readAsmConstArgs"] = function() {
            abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM"))
          Module["mainThreadEM_ASM"] = function() {
            abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q"))
          Module["jstoi_q"] = function() {
            abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s"))
          Module["jstoi_s"] = function() {
            abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName"))
          Module["getExecutableName"] = function() {
            abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "listenOnce"))
          Module["listenOnce"] = function() {
            abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext"))
          Module["autoResumeAudioContext"] = function() {
            abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy"))
          Module["dynCallLegacy"] = function() {
            abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller"))
          Module["getDynCaller"] = function() {
            abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "dynCall"))
          Module["dynCall"] = function() {
            abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks"))
          Module["callRuntimeCallbacks"] = function() {
            abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow"))
          Module["abortStackOverflow"] = function() {
            abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative"))
          Module["reallyNegative"] = function() {
            abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "unSign"))
          Module["unSign"] = function() {
            abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "reSign"))
          Module["reSign"] = function() {
            abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "formatString"))
          Module["formatString"] = function() {
            abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "PATH"))
          Module["PATH"] = function() {
            abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS"))
          Module["PATH_FS"] = function() {
            abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS"))
          Module["SYSCALLS"] = function() {
            abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2"))
          Module["syscallMmap2"] = function() {
            abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap"))
          Module["syscallMunmap"] = function() {
            abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM"))
          Module["flush_NO_FILESYSTEM"] = function() {
            abort("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "JSEvents"))
          Module["JSEvents"] = function() {
            abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets"))
          Module["specialHTMLTargets"] = function() {
            abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString"))
          Module["maybeCStringToJsString"] = function() {
            abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget"))
          Module["findEventTarget"] = function() {
            abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget"))
          Module["findCanvasEventTarget"] = function() {
            abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate"))
          Module["polyfillSetImmediate"] = function() {
            abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "demangle"))
          Module["demangle"] = function() {
            abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "demangleAll"))
          Module["demangleAll"] = function() {
            abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace"))
          Module["jsStackTrace"] = function() {
            abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackTrace"))
          Module["stackTrace"] = function() {
            abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings"))
          Module["getEnvStrings"] = function() {
            abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock"))
          Module["checkWasiClock"] = function() {
            abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64"))
          Module["writeI53ToI64"] = function() {
            abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped"))
          Module["writeI53ToI64Clamped"] = function() {
            abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling"))
          Module["writeI53ToI64Signaling"] = function() {
            abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped"))
          Module["writeI53ToU64Clamped"] = function() {
            abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling"))
          Module["writeI53ToU64Signaling"] = function() {
            abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64"))
          Module["readI53FromI64"] = function() {
            abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64"))
          Module["readI53FromU64"] = function() {
            abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53"))
          Module["convertI32PairToI53"] = function() {
            abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53"))
          Module["convertU32PairToI53"] = function() {
            abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast"))
          Module["exceptionLast"] = function() {
            abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught"))
          Module["exceptionCaught"] = function() {
            abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs"))
          Module["ExceptionInfoAttrs"] = function() {
            abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo"))
          Module["ExceptionInfo"] = function() {
            abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo"))
          Module["CatchInfo"] = function() {
            abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef"))
          Module["exception_addRef"] = function() {
            abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef"))
          Module["exception_decRef"] = function() {
            abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "Browser"))
          Module["Browser"] = function() {
            abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers"))
          Module["funcWrappers"] = function() {
            abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper"))
          Module["getFuncWrapper"] = function() {
            abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop"))
          Module["setMainLoop"] = function() {
            abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray"))
          Module["tempFixedLengthArray"] = function() {
            abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers"))
          Module["miniTempWebGLFloatBuffers"] = function() {
            abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType"))
          Module["heapObjectForWebGLType"] = function() {
            abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap"))
          Module["heapAccessShiftForWebGLHeap"] = function() {
            abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GL"))
          Module["GL"] = function() {
            abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet"))
          Module["emscriptenWebGLGet"] = function() {
            abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize"))
          Module["computeUnpackAlignedImageSize"] = function() {
            abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData"))
          Module["emscriptenWebGLGetTexPixelData"] = function() {
            abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform"))
          Module["emscriptenWebGLGetUniform"] = function() {
            abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib"))
          Module["emscriptenWebGLGetVertexAttrib"] = function() {
            abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray"))
          Module["writeGLArray"] = function() {
            abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "AL"))
          Module["AL"] = function() {
            abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode"))
          Module["SDL_unicode"] = function() {
            abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext"))
          Module["SDL_ttfContext"] = function() {
            abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio"))
          Module["SDL_audio"] = function() {
            abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL"))
          Module["SDL"] = function() {
            abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx"))
          Module["SDL_gfx"] = function() {
            abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLUT"))
          Module["GLUT"] = function() {
            abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "EGL"))
          Module["EGL"] = function() {
            abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window"))
          Module["GLFW_Window"] = function() {
            abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLFW"))
          Module["GLFW"] = function() {
            abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "GLEW"))
          Module["GLEW"] = function() {
            abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "IDBStore"))
          Module["IDBStore"] = function() {
            abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError"))
          Module["runAndAbortIfError"] = function() {
            abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "warnOnce"))
          Module["warnOnce"] = function() {
            abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackSave"))
          Module["stackSave"] = function() {
            abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackRestore"))
          Module["stackRestore"] = function() {
            abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc"))
          Module["stackAlloc"] = function() {
            abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString"))
          Module["AsciiToString"] = function() {
            abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii"))
          Module["stringToAscii"] = function() {
            abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString"))
          Module["UTF16ToString"] = function() {
            abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16"))
          Module["stringToUTF16"] = function() {
            abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16"))
          Module["lengthBytesUTF16"] = function() {
            abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString"))
          Module["UTF32ToString"] = function() {
            abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32"))
          Module["stringToUTF32"] = function() {
            abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32"))
          Module["lengthBytesUTF32"] = function() {
            abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8"))
          Module["allocateUTF8"] = function() {
            abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack"))
          Module["allocateUTF8OnStack"] = function() {
            abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          };
        Module["writeStackCookie"] = writeStackCookie;
        Module["checkStackCookie"] = checkStackCookie;
        if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL"))
          Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() {
            abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          } });
        if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK"))
          Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() {
            abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)");
          } });
        var calledRun;
        function ExitStatus(status) {
          this.name = "ExitStatus";
          this.message = "Program terminated with exit(" + status + ")";
          this.status = status;
        }
        var calledMain = false;
        dependenciesFulfilled = function runCaller() {
          if (!calledRun)
            run();
          if (!calledRun)
            dependenciesFulfilled = runCaller;
        };
        function run(args) {
          args = args || arguments_;
          if (runDependencies > 0) {
            return;
          }
          writeStackCookie();
          preRun();
          if (runDependencies > 0)
            return;
          function doRun() {
            if (calledRun)
              return;
            calledRun = true;
            Module["calledRun"] = true;
            if (ABORT)
              return;
            initRuntime();
            preMain();
            readyPromiseResolve(Module);
            if (Module["onRuntimeInitialized"])
              Module["onRuntimeInitialized"]();
            assert(!Module["_main"], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
            postRun();
          }
          if (Module["setStatus"]) {
            Module["setStatus"]("Running...");
            setTimeout(function() {
              setTimeout(function() {
                Module["setStatus"]("");
              }, 1);
              doRun();
            }, 1);
          } else {
            doRun();
          }
          checkStackCookie();
        }
        Module["run"] = run;
        function checkUnflushedContent() {
          var print = out;
          var printErr = err;
          var has = false;
          out = err = function(x) {
            has = true;
          };
          try {
            var flush = flush_NO_FILESYSTEM;
            if (flush)
              flush();
          } catch (e) {
          }
          out = print;
          err = printErr;
          if (has) {
            warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.");
            warnOnce("(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)");
          }
        }
        function exit(status, implicit) {
          checkUnflushedContent();
          if (implicit && noExitRuntime && status === 0) {
            return;
          }
          if (noExitRuntime) {
            if (!implicit) {
              var msg = "program exited (with status: " + status + "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
              readyPromiseReject(msg);
              err(msg);
            }
          } else {
            EXITSTATUS = status;
            exitRuntime();
            if (Module["onExit"])
              Module["onExit"](status);
            ABORT = true;
          }
          quit_(status, new ExitStatus(status));
        }
        if (Module["preInit"]) {
          if (typeof Module["preInit"] == "function")
            Module["preInit"] = [Module["preInit"]];
          while (Module["preInit"].length > 0) {
            Module["preInit"].pop()();
          }
        }
        noExitRuntime = true;
        run();
        function WrapperObject() {
        }
        WrapperObject.prototype = Object.create(WrapperObject.prototype);
        WrapperObject.prototype.constructor = WrapperObject;
        WrapperObject.prototype.__class__ = WrapperObject;
        WrapperObject.__cache__ = {};
        Module["WrapperObject"] = WrapperObject;
        function getCache(__class__) {
          return (__class__ || WrapperObject).__cache__;
        }
        Module["getCache"] = getCache;
        function wrapPointer(ptr, __class__) {
          var cache = getCache(__class__);
          var ret = cache[ptr];
          if (ret)
            return ret;
          ret = Object.create((__class__ || WrapperObject).prototype);
          ret.ptr = ptr;
          return cache[ptr] = ret;
        }
        Module["wrapPointer"] = wrapPointer;
        function castObject(obj, __class__) {
          return wrapPointer(obj.ptr, __class__);
        }
        Module["castObject"] = castObject;
        Module["NULL"] = wrapPointer(0);
        function destroy(obj) {
          if (!obj["__destroy__"])
            throw "Error: Cannot destroy object. (Did you create it yourself?)";
          obj["__destroy__"]();
          delete getCache(obj.__class__)[obj.ptr];
        }
        Module["destroy"] = destroy;
        function compare(obj1, obj2) {
          return obj1.ptr === obj2.ptr;
        }
        Module["compare"] = compare;
        function getPointer(obj) {
          return obj.ptr;
        }
        Module["getPointer"] = getPointer;
        function getClass(obj) {
          return obj.__class__;
        }
        Module["getClass"] = getClass;
        var ensureCache = {
          buffer: 0,
          size: 0,
          pos: 0,
          temps: [],
          needed: 0,
          prepare: function() {
            if (ensureCache.needed) {
              for (var i = 0; i < ensureCache.temps.length; i++) {
                Module["_free"](ensureCache.temps[i]);
              }
              ensureCache.temps.length = 0;
              Module["_free"](ensureCache.buffer);
              ensureCache.buffer = 0;
              ensureCache.size += ensureCache.needed;
              ensureCache.needed = 0;
            }
            if (!ensureCache.buffer) {
              ensureCache.size += 128;
              ensureCache.buffer = Module["_malloc"](ensureCache.size);
              assert(ensureCache.buffer);
            }
            ensureCache.pos = 0;
          },
          alloc: function(array, view) {
            assert(ensureCache.buffer);
            var bytes = view.BYTES_PER_ELEMENT;
            var len = array.length * bytes;
            len = len + 7 & -8;
            var ret;
            if (ensureCache.pos + len >= ensureCache.size) {
              assert(len > 0);
              ensureCache.needed += len;
              ret = Module["_malloc"](len);
              ensureCache.temps.push(ret);
            } else {
              ret = ensureCache.buffer + ensureCache.pos;
              ensureCache.pos += len;
            }
            return ret;
          },
          copy: function(array, view, offset) {
            offset >>>= 0;
            var bytes = view.BYTES_PER_ELEMENT;
            switch (bytes) {
              case 2:
                offset >>>= 1;
                break;
              case 4:
                offset >>>= 2;
                break;
              case 8:
                offset >>>= 3;
                break;
            }
            for (var i = 0; i < array.length; i++) {
              view[offset + i] = array[i];
            }
          }
        };
        function ensureString(value) {
          if (typeof value === "string") {
            var intArray = intArrayFromString(value);
            var offset = ensureCache.alloc(intArray, HEAP8);
            ensureCache.copy(intArray, HEAP8, offset);
            return offset;
          }
          return value;
        }
        function ensureInt8(value) {
          if (typeof value === "object") {
            var offset = ensureCache.alloc(value, HEAP8);
            ensureCache.copy(value, HEAP8, offset);
            return offset;
          }
          return value;
        }
        function ensureInt16(value) {
          if (typeof value === "object") {
            var offset = ensureCache.alloc(value, HEAP16);
            ensureCache.copy(value, HEAP16, offset);
            return offset;
          }
          return value;
        }
        function ensureInt32(value) {
          if (typeof value === "object") {
            var offset = ensureCache.alloc(value, HEAP32);
            ensureCache.copy(value, HEAP32, offset);
            return offset;
          }
          return value;
        }
        function ensureFloat32(value) {
          if (typeof value === "object") {
            var offset = ensureCache.alloc(value, HEAPF32);
            ensureCache.copy(value, HEAPF32, offset);
            return offset;
          }
          return value;
        }
        function ensureFloat64(value) {
          if (typeof value === "object") {
            var offset = ensureCache.alloc(value, HEAPF64);
            ensureCache.copy(value, HEAPF64, offset);
            return offset;
          }
          return value;
        }
        function PxBase() {
          throw "cannot construct a PxBase, no constructor in IDL";
        }
        PxBase.prototype = Object.create(WrapperObject.prototype);
        PxBase.prototype.constructor = PxBase;
        PxBase.prototype.__class__ = PxBase;
        PxBase.__cache__ = {};
        Module["PxBase"] = PxBase;
        PxBase.prototype["release"] = PxBase.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBase_release_0(self2);
        };
        ;
        PxBase.prototype["getConcreteTypeName"] = PxBase.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxBase_getConcreteTypeName_0(self2));
        };
        ;
        PxBase.prototype["getConcreteType"] = PxBase.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBase_getConcreteType_0(self2);
        };
        ;
        PxBase.prototype["setBaseFlag"] = PxBase.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxBase_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxBase.prototype["setBaseFlags"] = PxBase.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxBase_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxBase.prototype["getBaseFlags"] = PxBase.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBase_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxBase.prototype["isReleasable"] = PxBase.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBase_isReleasable_0(self2);
        };
        ;
        function PxActor() {
          throw "cannot construct a PxActor, no constructor in IDL";
        }
        PxActor.prototype = Object.create(PxBase.prototype);
        PxActor.prototype.constructor = PxActor;
        PxActor.prototype.__class__ = PxActor;
        PxActor.__cache__ = {};
        Module["PxActor"] = PxActor;
        PxActor.prototype["getType"] = PxActor.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxActor_getType_0(self2);
        };
        ;
        PxActor.prototype["getScene"] = PxActor.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxActor_getScene_0(self2), PxScene);
        };
        ;
        PxActor.prototype["setName"] = PxActor.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxActor_setName_1(self2, name);
        };
        ;
        PxActor.prototype["getName"] = PxActor.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxActor_getName_0(self2));
        };
        ;
        PxActor.prototype["getWorldBounds"] = PxActor.prototype.getWorldBounds = function(inflation) {
          var self2 = this.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (inflation === void 0) {
            return wrapPointer(_emscripten_bind_PxActor_getWorldBounds_0(self2), PxBounds3);
          }
          return wrapPointer(_emscripten_bind_PxActor_getWorldBounds_1(self2, inflation), PxBounds3);
        };
        ;
        PxActor.prototype["setActorFlags"] = PxActor.prototype.setActorFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxActor_setActorFlags_1(self2, flags);
        };
        ;
        PxActor.prototype["getActorFlags"] = PxActor.prototype.getActorFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxActor_getActorFlags_0(self2), PxActorFlags);
        };
        ;
        PxActor.prototype["setDominanceGroup"] = PxActor.prototype.setDominanceGroup = function(dominanceGroup) {
          var self2 = this.ptr;
          if (dominanceGroup && typeof dominanceGroup === "object")
            dominanceGroup = dominanceGroup.ptr;
          _emscripten_bind_PxActor_setDominanceGroup_1(self2, dominanceGroup);
        };
        ;
        PxActor.prototype["getDominanceGroup"] = PxActor.prototype.getDominanceGroup = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxActor_getDominanceGroup_0(self2);
        };
        ;
        PxActor.prototype["setOwnerClient"] = PxActor.prototype.setOwnerClient = function(inClient) {
          var self2 = this.ptr;
          if (inClient && typeof inClient === "object")
            inClient = inClient.ptr;
          _emscripten_bind_PxActor_setOwnerClient_1(self2, inClient);
        };
        ;
        PxActor.prototype["getOwnerClient"] = PxActor.prototype.getOwnerClient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxActor_getOwnerClient_0(self2);
        };
        ;
        PxActor.prototype["release"] = PxActor.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxActor_release_0(self2);
        };
        ;
        PxActor.prototype["getConcreteTypeName"] = PxActor.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxActor_getConcreteTypeName_0(self2));
        };
        ;
        PxActor.prototype["getConcreteType"] = PxActor.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxActor_getConcreteType_0(self2);
        };
        ;
        PxActor.prototype["setBaseFlag"] = PxActor.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxActor_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxActor.prototype["setBaseFlags"] = PxActor.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxActor_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxActor.prototype["getBaseFlags"] = PxActor.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxActor_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxActor.prototype["isReleasable"] = PxActor.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxActor_isReleasable_0(self2);
        };
        ;
        PxActor.prototype["get_userData"] = PxActor.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxActor_get_userData_0(self2), VoidPtr);
        };
        PxActor.prototype["set_userData"] = PxActor.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxActor_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxActor.prototype, "userData", { get: PxActor.prototype.get_userData, set: PxActor.prototype.set_userData });
        function PxActorShape() {
          throw "cannot construct a PxActorShape, no constructor in IDL";
        }
        PxActorShape.prototype = Object.create(WrapperObject.prototype);
        PxActorShape.prototype.constructor = PxActorShape;
        PxActorShape.prototype.__class__ = PxActorShape;
        PxActorShape.__cache__ = {};
        Module["PxActorShape"] = PxActorShape;
        PxActorShape.prototype["get_actor"] = PxActorShape.prototype.get_actor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxActorShape_get_actor_0(self2), PxRigidActor);
        };
        PxActorShape.prototype["set_actor"] = PxActorShape.prototype.set_actor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxActorShape_set_actor_1(self2, arg0);
        };
        Object.defineProperty(PxActorShape.prototype, "actor", { get: PxActorShape.prototype.get_actor, set: PxActorShape.prototype.set_actor });
        PxActorShape.prototype["get_shape"] = PxActorShape.prototype.get_shape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxActorShape_get_shape_0(self2), PxShape);
        };
        PxActorShape.prototype["set_shape"] = PxActorShape.prototype.set_shape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxActorShape_set_shape_1(self2, arg0);
        };
        Object.defineProperty(PxActorShape.prototype, "shape", { get: PxActorShape.prototype.get_shape, set: PxActorShape.prototype.set_shape });
        PxActorShape.prototype["__destroy__"] = PxActorShape.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxActorShape___destroy___0(self2);
        };
        function PxQueryHit() {
          throw "cannot construct a PxQueryHit, no constructor in IDL";
        }
        PxQueryHit.prototype = Object.create(PxActorShape.prototype);
        PxQueryHit.prototype.constructor = PxQueryHit;
        PxQueryHit.prototype.__class__ = PxQueryHit;
        PxQueryHit.__cache__ = {};
        Module["PxQueryHit"] = PxQueryHit;
        PxQueryHit.prototype["get_faceIndex"] = PxQueryHit.prototype.get_faceIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxQueryHit_get_faceIndex_0(self2);
        };
        PxQueryHit.prototype["set_faceIndex"] = PxQueryHit.prototype.set_faceIndex = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQueryHit_set_faceIndex_1(self2, arg0);
        };
        Object.defineProperty(PxQueryHit.prototype, "faceIndex", { get: PxQueryHit.prototype.get_faceIndex, set: PxQueryHit.prototype.set_faceIndex });
        PxQueryHit.prototype["get_actor"] = PxQueryHit.prototype.get_actor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxQueryHit_get_actor_0(self2), PxRigidActor);
        };
        PxQueryHit.prototype["set_actor"] = PxQueryHit.prototype.set_actor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQueryHit_set_actor_1(self2, arg0);
        };
        Object.defineProperty(PxQueryHit.prototype, "actor", { get: PxQueryHit.prototype.get_actor, set: PxQueryHit.prototype.set_actor });
        PxQueryHit.prototype["get_shape"] = PxQueryHit.prototype.get_shape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxQueryHit_get_shape_0(self2), PxShape);
        };
        PxQueryHit.prototype["set_shape"] = PxQueryHit.prototype.set_shape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQueryHit_set_shape_1(self2, arg0);
        };
        Object.defineProperty(PxQueryHit.prototype, "shape", { get: PxQueryHit.prototype.get_shape, set: PxQueryHit.prototype.set_shape });
        PxQueryHit.prototype["__destroy__"] = PxQueryHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxQueryHit___destroy___0(self2);
        };
        function PxRigidActor() {
          throw "cannot construct a PxRigidActor, no constructor in IDL";
        }
        PxRigidActor.prototype = Object.create(PxActor.prototype);
        PxRigidActor.prototype.constructor = PxRigidActor;
        PxRigidActor.prototype.__class__ = PxRigidActor;
        PxRigidActor.__cache__ = {};
        Module["PxRigidActor"] = PxRigidActor;
        PxRigidActor.prototype["getGlobalPose"] = PxRigidActor.prototype.getGlobalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidActor_getGlobalPose_0(self2), PxTransform);
        };
        ;
        PxRigidActor.prototype["setGlobalPose"] = PxRigidActor.prototype.setGlobalPose = function(pose, autowake) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidActor_setGlobalPose_1(self2, pose);
            return;
          }
          _emscripten_bind_PxRigidActor_setGlobalPose_2(self2, pose, autowake);
        };
        ;
        PxRigidActor.prototype["attachShape"] = PxRigidActor.prototype.attachShape = function(shape) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          return !!_emscripten_bind_PxRigidActor_attachShape_1(self2, shape);
        };
        ;
        PxRigidActor.prototype["detachShape"] = PxRigidActor.prototype.detachShape = function(shape, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxRigidActor_detachShape_1(self2, shape);
            return;
          }
          _emscripten_bind_PxRigidActor_detachShape_2(self2, shape, wakeOnLostTouch);
        };
        ;
        PxRigidActor.prototype["getNbShapes"] = PxRigidActor.prototype.getNbShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidActor_getNbShapes_0(self2);
        };
        ;
        PxRigidActor.prototype["getType"] = PxRigidActor.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidActor_getType_0(self2);
        };
        ;
        PxRigidActor.prototype["getScene"] = PxRigidActor.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidActor_getScene_0(self2), PxScene);
        };
        ;
        PxRigidActor.prototype["setName"] = PxRigidActor.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxRigidActor_setName_1(self2, name);
        };
        ;
        PxRigidActor.prototype["getName"] = PxRigidActor.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidActor_getName_0(self2));
        };
        ;
        PxRigidActor.prototype["getWorldBounds"] = PxRigidActor.prototype.getWorldBounds = function(inflation) {
          var self2 = this.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (inflation === void 0) {
            return wrapPointer(_emscripten_bind_PxRigidActor_getWorldBounds_0(self2), PxBounds3);
          }
          return wrapPointer(_emscripten_bind_PxRigidActor_getWorldBounds_1(self2, inflation), PxBounds3);
        };
        ;
        PxRigidActor.prototype["setActorFlags"] = PxRigidActor.prototype.setActorFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxRigidActor_setActorFlags_1(self2, flags);
        };
        ;
        PxRigidActor.prototype["getActorFlags"] = PxRigidActor.prototype.getActorFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidActor_getActorFlags_0(self2), PxActorFlags);
        };
        ;
        PxRigidActor.prototype["setDominanceGroup"] = PxRigidActor.prototype.setDominanceGroup = function(dominanceGroup) {
          var self2 = this.ptr;
          if (dominanceGroup && typeof dominanceGroup === "object")
            dominanceGroup = dominanceGroup.ptr;
          _emscripten_bind_PxRigidActor_setDominanceGroup_1(self2, dominanceGroup);
        };
        ;
        PxRigidActor.prototype["getDominanceGroup"] = PxRigidActor.prototype.getDominanceGroup = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidActor_getDominanceGroup_0(self2);
        };
        ;
        PxRigidActor.prototype["setOwnerClient"] = PxRigidActor.prototype.setOwnerClient = function(inClient) {
          var self2 = this.ptr;
          if (inClient && typeof inClient === "object")
            inClient = inClient.ptr;
          _emscripten_bind_PxRigidActor_setOwnerClient_1(self2, inClient);
        };
        ;
        PxRigidActor.prototype["getOwnerClient"] = PxRigidActor.prototype.getOwnerClient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidActor_getOwnerClient_0(self2);
        };
        ;
        PxRigidActor.prototype["release"] = PxRigidActor.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidActor_release_0(self2);
        };
        ;
        PxRigidActor.prototype["getConcreteTypeName"] = PxRigidActor.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidActor_getConcreteTypeName_0(self2));
        };
        ;
        PxRigidActor.prototype["getConcreteType"] = PxRigidActor.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidActor_getConcreteType_0(self2);
        };
        ;
        PxRigidActor.prototype["setBaseFlag"] = PxRigidActor.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRigidActor_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxRigidActor.prototype["setBaseFlags"] = PxRigidActor.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxRigidActor_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxRigidActor.prototype["getBaseFlags"] = PxRigidActor.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidActor_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxRigidActor.prototype["isReleasable"] = PxRigidActor.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRigidActor_isReleasable_0(self2);
        };
        ;
        PxRigidActor.prototype["get_userData"] = PxRigidActor.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidActor_get_userData_0(self2), VoidPtr);
        };
        PxRigidActor.prototype["set_userData"] = PxRigidActor.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRigidActor_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxRigidActor.prototype, "userData", { get: PxRigidActor.prototype.get_userData, set: PxRigidActor.prototype.set_userData });
        function PxSimulationEventCallback() {
          throw "cannot construct a PxSimulationEventCallback, no constructor in IDL";
        }
        PxSimulationEventCallback.prototype = Object.create(WrapperObject.prototype);
        PxSimulationEventCallback.prototype.constructor = PxSimulationEventCallback;
        PxSimulationEventCallback.prototype.__class__ = PxSimulationEventCallback;
        PxSimulationEventCallback.__cache__ = {};
        Module["PxSimulationEventCallback"] = PxSimulationEventCallback;
        PxSimulationEventCallback.prototype["__destroy__"] = PxSimulationEventCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSimulationEventCallback___destroy___0(self2);
        };
        function PxVehicleWheels() {
          throw "cannot construct a PxVehicleWheels, no constructor in IDL";
        }
        PxVehicleWheels.prototype = Object.create(PxBase.prototype);
        PxVehicleWheels.prototype.constructor = PxVehicleWheels;
        PxVehicleWheels.prototype.__class__ = PxVehicleWheels;
        PxVehicleWheels.__cache__ = {};
        Module["PxVehicleWheels"] = PxVehicleWheels;
        PxVehicleWheels.prototype["getVehicleType"] = PxVehicleWheels.prototype.getVehicleType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheels_getVehicleType_0(self2);
        };
        ;
        PxVehicleWheels.prototype["getRigidDynamicActor"] = PxVehicleWheels.prototype.getRigidDynamicActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheels_getRigidDynamicActor_0(self2), PxRigidDynamic);
        };
        ;
        PxVehicleWheels.prototype["computeForwardSpeed"] = PxVehicleWheels.prototype.computeForwardSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheels_computeForwardSpeed_0(self2);
        };
        ;
        PxVehicleWheels.prototype["computeSidewaysSpeed"] = PxVehicleWheels.prototype.computeSidewaysSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheels_computeSidewaysSpeed_0(self2);
        };
        ;
        PxVehicleWheels.prototype["getNbNonDrivenWheels"] = PxVehicleWheels.prototype.getNbNonDrivenWheels = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheels_getNbNonDrivenWheels_0(self2);
        };
        ;
        PxVehicleWheels.prototype["getConcreteTypeName"] = PxVehicleWheels.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxVehicleWheels_getConcreteTypeName_0(self2));
        };
        ;
        PxVehicleWheels.prototype["getConcreteType"] = PxVehicleWheels.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheels_getConcreteType_0(self2);
        };
        ;
        PxVehicleWheels.prototype["setBaseFlag"] = PxVehicleWheels.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleWheels_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxVehicleWheels.prototype["setBaseFlags"] = PxVehicleWheels.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxVehicleWheels_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxVehicleWheels.prototype["getBaseFlags"] = PxVehicleWheels.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheels_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxVehicleWheels.prototype["isReleasable"] = PxVehicleWheels.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleWheels_isReleasable_0(self2);
        };
        ;
        PxVehicleWheels.prototype["get_mWheelsSimData"] = PxVehicleWheels.prototype.get_mWheelsSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheels_get_mWheelsSimData_0(self2), PxVehicleWheelsSimData);
        };
        PxVehicleWheels.prototype["set_mWheelsSimData"] = PxVehicleWheels.prototype.set_mWheelsSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheels_set_mWheelsSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheels.prototype, "mWheelsSimData", { get: PxVehicleWheels.prototype.get_mWheelsSimData, set: PxVehicleWheels.prototype.set_mWheelsSimData });
        PxVehicleWheels.prototype["get_mWheelsDynData"] = PxVehicleWheels.prototype.get_mWheelsDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheels_get_mWheelsDynData_0(self2), PxVehicleWheelsDynData);
        };
        PxVehicleWheels.prototype["set_mWheelsDynData"] = PxVehicleWheels.prototype.set_mWheelsDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheels_set_mWheelsDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheels.prototype, "mWheelsDynData", { get: PxVehicleWheels.prototype.get_mWheelsDynData, set: PxVehicleWheels.prototype.set_mWheelsDynData });
        function PxPvdTransport() {
          throw "cannot construct a PxPvdTransport, no constructor in IDL";
        }
        PxPvdTransport.prototype = Object.create(WrapperObject.prototype);
        PxPvdTransport.prototype.constructor = PxPvdTransport;
        PxPvdTransport.prototype.__class__ = PxPvdTransport;
        PxPvdTransport.__cache__ = {};
        Module["PxPvdTransport"] = PxPvdTransport;
        PxPvdTransport.prototype["connect"] = PxPvdTransport.prototype.connect = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxPvdTransport_connect_0(self2);
        };
        ;
        PxPvdTransport.prototype["disconnect"] = PxPvdTransport.prototype.disconnect = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPvdTransport_disconnect_0(self2);
        };
        ;
        PxPvdTransport.prototype["isConnected"] = PxPvdTransport.prototype.isConnected = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxPvdTransport_isConnected_0(self2);
        };
        ;
        function PxArticulationBase() {
          throw "cannot construct a PxArticulationBase, no constructor in IDL";
        }
        PxArticulationBase.prototype = Object.create(PxBase.prototype);
        PxArticulationBase.prototype.constructor = PxArticulationBase;
        PxArticulationBase.prototype.__class__ = PxArticulationBase;
        PxArticulationBase.__cache__ = {};
        Module["PxArticulationBase"] = PxArticulationBase;
        PxArticulationBase.prototype["getScene"] = PxArticulationBase.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationBase_getScene_0(self2), PxScene);
        };
        ;
        PxArticulationBase.prototype["setSolverIterationCounts"] = PxArticulationBase.prototype.setSolverIterationCounts = function(minPositionIters, minVelocityIters) {
          var self2 = this.ptr;
          if (minPositionIters && typeof minPositionIters === "object")
            minPositionIters = minPositionIters.ptr;
          if (minVelocityIters && typeof minVelocityIters === "object")
            minVelocityIters = minVelocityIters.ptr;
          _emscripten_bind_PxArticulationBase_setSolverIterationCounts_2(self2, minPositionIters, minVelocityIters);
        };
        ;
        PxArticulationBase.prototype["isSleeping"] = PxArticulationBase.prototype.isSleeping = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationBase_isSleeping_0(self2);
        };
        ;
        PxArticulationBase.prototype["setSleepThreshold"] = PxArticulationBase.prototype.setSleepThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxArticulationBase_setSleepThreshold_1(self2, threshold);
        };
        ;
        PxArticulationBase.prototype["getSleepThreshold"] = PxArticulationBase.prototype.getSleepThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationBase_getSleepThreshold_0(self2);
        };
        ;
        PxArticulationBase.prototype["setStabilizationThreshold"] = PxArticulationBase.prototype.setStabilizationThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxArticulationBase_setStabilizationThreshold_1(self2, threshold);
        };
        ;
        PxArticulationBase.prototype["getStabilizationThreshold"] = PxArticulationBase.prototype.getStabilizationThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationBase_getStabilizationThreshold_0(self2);
        };
        ;
        PxArticulationBase.prototype["setWakeCounter"] = PxArticulationBase.prototype.setWakeCounter = function(wakeCounterValue) {
          var self2 = this.ptr;
          if (wakeCounterValue && typeof wakeCounterValue === "object")
            wakeCounterValue = wakeCounterValue.ptr;
          _emscripten_bind_PxArticulationBase_setWakeCounter_1(self2, wakeCounterValue);
        };
        ;
        PxArticulationBase.prototype["getWakeCounter"] = PxArticulationBase.prototype.getWakeCounter = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationBase_getWakeCounter_0(self2);
        };
        ;
        PxArticulationBase.prototype["wakeUp"] = PxArticulationBase.prototype.wakeUp = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationBase_wakeUp_0(self2);
        };
        ;
        PxArticulationBase.prototype["putToSleep"] = PxArticulationBase.prototype.putToSleep = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationBase_putToSleep_0(self2);
        };
        ;
        PxArticulationBase.prototype["createLink"] = PxArticulationBase.prototype.createLink = function(parent, pose) {
          var self2 = this.ptr;
          if (parent && typeof parent === "object")
            parent = parent.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationBase_createLink_2(self2, parent, pose), PxArticulationLink);
        };
        ;
        PxArticulationBase.prototype["getNbLinks"] = PxArticulationBase.prototype.getNbLinks = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationBase_getNbLinks_0(self2);
        };
        ;
        PxArticulationBase.prototype["setName"] = PxArticulationBase.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxArticulationBase_setName_1(self2, name);
        };
        ;
        PxArticulationBase.prototype["getName"] = PxArticulationBase.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationBase_getName_0(self2));
        };
        ;
        PxArticulationBase.prototype["getWorldBounds"] = PxArticulationBase.prototype.getWorldBounds = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationBase_getWorldBounds_0(self2), PxBounds3);
        };
        ;
        PxArticulationBase.prototype["getAggregate"] = PxArticulationBase.prototype.getAggregate = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationBase_getAggregate_0(self2), PxAggregate);
        };
        ;
        PxArticulationBase.prototype["release"] = PxArticulationBase.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationBase_release_0(self2);
        };
        ;
        PxArticulationBase.prototype["getConcreteTypeName"] = PxArticulationBase.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationBase_getConcreteTypeName_0(self2));
        };
        ;
        PxArticulationBase.prototype["getConcreteType"] = PxArticulationBase.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationBase_getConcreteType_0(self2);
        };
        ;
        PxArticulationBase.prototype["setBaseFlag"] = PxArticulationBase.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationBase_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxArticulationBase.prototype["setBaseFlags"] = PxArticulationBase.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulationBase_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxArticulationBase.prototype["getBaseFlags"] = PxArticulationBase.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationBase_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxArticulationBase.prototype["isReleasable"] = PxArticulationBase.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationBase_isReleasable_0(self2);
        };
        ;
        function PxArticulationJointBase() {
          throw "cannot construct a PxArticulationJointBase, no constructor in IDL";
        }
        PxArticulationJointBase.prototype = Object.create(PxBase.prototype);
        PxArticulationJointBase.prototype.constructor = PxArticulationJointBase;
        PxArticulationJointBase.prototype.__class__ = PxArticulationJointBase;
        PxArticulationJointBase.__cache__ = {};
        Module["PxArticulationJointBase"] = PxArticulationJointBase;
        PxArticulationJointBase.prototype["getParentArticulationLink"] = PxArticulationJointBase.prototype.getParentArticulationLink = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointBase_getParentArticulationLink_0(self2), PxArticulationLink);
        };
        ;
        PxArticulationJointBase.prototype["setParentPose"] = PxArticulationJointBase.prototype.setParentPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxArticulationJointBase_setParentPose_1(self2, pose);
        };
        ;
        PxArticulationJointBase.prototype["getParentPose"] = PxArticulationJointBase.prototype.getParentPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointBase_getParentPose_0(self2), PxTransform);
        };
        ;
        PxArticulationJointBase.prototype["getChildArticulationLink"] = PxArticulationJointBase.prototype.getChildArticulationLink = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointBase_getChildArticulationLink_0(self2), PxArticulationLink);
        };
        ;
        PxArticulationJointBase.prototype["setChildPose"] = PxArticulationJointBase.prototype.setChildPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxArticulationJointBase_setChildPose_1(self2, pose);
        };
        ;
        PxArticulationJointBase.prototype["getChildPose"] = PxArticulationJointBase.prototype.getChildPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointBase_getChildPose_0(self2), PxTransform);
        };
        ;
        PxArticulationJointBase.prototype["release"] = PxArticulationJointBase.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationJointBase_release_0(self2);
        };
        ;
        PxArticulationJointBase.prototype["getConcreteTypeName"] = PxArticulationJointBase.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationJointBase_getConcreteTypeName_0(self2));
        };
        ;
        PxArticulationJointBase.prototype["getConcreteType"] = PxArticulationJointBase.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJointBase_getConcreteType_0(self2);
        };
        ;
        PxArticulationJointBase.prototype["setBaseFlag"] = PxArticulationJointBase.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationJointBase_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxArticulationJointBase.prototype["setBaseFlags"] = PxArticulationJointBase.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulationJointBase_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxArticulationJointBase.prototype["getBaseFlags"] = PxArticulationJointBase.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointBase_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxArticulationJointBase.prototype["isReleasable"] = PxArticulationJointBase.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationJointBase_isReleasable_0(self2);
        };
        ;
        function PxLocationHit() {
          throw "cannot construct a PxLocationHit, no constructor in IDL";
        }
        PxLocationHit.prototype = Object.create(PxQueryHit.prototype);
        PxLocationHit.prototype.constructor = PxLocationHit;
        PxLocationHit.prototype.__class__ = PxLocationHit;
        PxLocationHit.__cache__ = {};
        Module["PxLocationHit"] = PxLocationHit;
        PxLocationHit.prototype["get_flags"] = PxLocationHit.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxLocationHit_get_flags_0(self2), PxHitFlags);
        };
        PxLocationHit.prototype["set_flags"] = PxLocationHit.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxLocationHit_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxLocationHit.prototype, "flags", { get: PxLocationHit.prototype.get_flags, set: PxLocationHit.prototype.set_flags });
        PxLocationHit.prototype["get_position"] = PxLocationHit.prototype.get_position = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxLocationHit_get_position_0(self2), PxVec3);
        };
        PxLocationHit.prototype["set_position"] = PxLocationHit.prototype.set_position = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxLocationHit_set_position_1(self2, arg0);
        };
        Object.defineProperty(PxLocationHit.prototype, "position", { get: PxLocationHit.prototype.get_position, set: PxLocationHit.prototype.set_position });
        PxLocationHit.prototype["get_normal"] = PxLocationHit.prototype.get_normal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxLocationHit_get_normal_0(self2), PxVec3);
        };
        PxLocationHit.prototype["set_normal"] = PxLocationHit.prototype.set_normal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxLocationHit_set_normal_1(self2, arg0);
        };
        Object.defineProperty(PxLocationHit.prototype, "normal", { get: PxLocationHit.prototype.get_normal, set: PxLocationHit.prototype.set_normal });
        PxLocationHit.prototype["get_distance"] = PxLocationHit.prototype.get_distance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxLocationHit_get_distance_0(self2);
        };
        PxLocationHit.prototype["set_distance"] = PxLocationHit.prototype.set_distance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxLocationHit_set_distance_1(self2, arg0);
        };
        Object.defineProperty(PxLocationHit.prototype, "distance", { get: PxLocationHit.prototype.get_distance, set: PxLocationHit.prototype.set_distance });
        PxLocationHit.prototype["get_actor"] = PxLocationHit.prototype.get_actor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxLocationHit_get_actor_0(self2), PxRigidActor);
        };
        PxLocationHit.prototype["set_actor"] = PxLocationHit.prototype.set_actor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxLocationHit_set_actor_1(self2, arg0);
        };
        Object.defineProperty(PxLocationHit.prototype, "actor", { get: PxLocationHit.prototype.get_actor, set: PxLocationHit.prototype.set_actor });
        PxLocationHit.prototype["get_shape"] = PxLocationHit.prototype.get_shape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxLocationHit_get_shape_0(self2), PxShape);
        };
        PxLocationHit.prototype["set_shape"] = PxLocationHit.prototype.set_shape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxLocationHit_set_shape_1(self2, arg0);
        };
        Object.defineProperty(PxLocationHit.prototype, "shape", { get: PxLocationHit.prototype.get_shape, set: PxLocationHit.prototype.set_shape });
        PxLocationHit.prototype["get_faceIndex"] = PxLocationHit.prototype.get_faceIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxLocationHit_get_faceIndex_0(self2);
        };
        PxLocationHit.prototype["set_faceIndex"] = PxLocationHit.prototype.set_faceIndex = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxLocationHit_set_faceIndex_1(self2, arg0);
        };
        Object.defineProperty(PxLocationHit.prototype, "faceIndex", { get: PxLocationHit.prototype.get_faceIndex, set: PxLocationHit.prototype.set_faceIndex });
        PxLocationHit.prototype["__destroy__"] = PxLocationHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxLocationHit___destroy___0(self2);
        };
        function PxOverlapCallback() {
          throw "cannot construct a PxOverlapCallback, no constructor in IDL";
        }
        PxOverlapCallback.prototype = Object.create(WrapperObject.prototype);
        PxOverlapCallback.prototype.constructor = PxOverlapCallback;
        PxOverlapCallback.prototype.__class__ = PxOverlapCallback;
        PxOverlapCallback.__cache__ = {};
        Module["PxOverlapCallback"] = PxOverlapCallback;
        PxOverlapCallback.prototype["hasAnyHits"] = PxOverlapCallback.prototype.hasAnyHits = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxOverlapCallback_hasAnyHits_0(self2);
        };
        ;
        PxOverlapCallback.prototype["__destroy__"] = PxOverlapCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxOverlapCallback___destroy___0(self2);
        };
        function PxRaycastCallback() {
          throw "cannot construct a PxRaycastCallback, no constructor in IDL";
        }
        PxRaycastCallback.prototype = Object.create(WrapperObject.prototype);
        PxRaycastCallback.prototype.constructor = PxRaycastCallback;
        PxRaycastCallback.prototype.__class__ = PxRaycastCallback;
        PxRaycastCallback.__cache__ = {};
        Module["PxRaycastCallback"] = PxRaycastCallback;
        PxRaycastCallback.prototype["hasAnyHits"] = PxRaycastCallback.prototype.hasAnyHits = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRaycastCallback_hasAnyHits_0(self2);
        };
        ;
        PxRaycastCallback.prototype["__destroy__"] = PxRaycastCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRaycastCallback___destroy___0(self2);
        };
        function PxRigidBody() {
          throw "cannot construct a PxRigidBody, no constructor in IDL";
        }
        PxRigidBody.prototype = Object.create(PxRigidActor.prototype);
        PxRigidBody.prototype.constructor = PxRigidBody;
        PxRigidBody.prototype.__class__ = PxRigidBody;
        PxRigidBody.__cache__ = {};
        Module["PxRigidBody"] = PxRigidBody;
        PxRigidBody.prototype["setCMassLocalPose"] = PxRigidBody.prototype.setCMassLocalPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxRigidBody_setCMassLocalPose_1(self2, pose);
        };
        ;
        PxRigidBody.prototype["getCMassLocalPose"] = PxRigidBody.prototype.getCMassLocalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getCMassLocalPose_0(self2), PxTransform);
        };
        ;
        PxRigidBody.prototype["setMass"] = PxRigidBody.prototype.setMass = function(mass) {
          var self2 = this.ptr;
          if (mass && typeof mass === "object")
            mass = mass.ptr;
          _emscripten_bind_PxRigidBody_setMass_1(self2, mass);
        };
        ;
        PxRigidBody.prototype["getMass"] = PxRigidBody.prototype.getMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getMass_0(self2);
        };
        ;
        PxRigidBody.prototype["getInvMass"] = PxRigidBody.prototype.getInvMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getInvMass_0(self2);
        };
        ;
        PxRigidBody.prototype["setMassSpaceInertiaTensor"] = PxRigidBody.prototype.setMassSpaceInertiaTensor = function(m) {
          var self2 = this.ptr;
          if (m && typeof m === "object")
            m = m.ptr;
          _emscripten_bind_PxRigidBody_setMassSpaceInertiaTensor_1(self2, m);
        };
        ;
        PxRigidBody.prototype["getMassSpaceInertiaTensor"] = PxRigidBody.prototype.getMassSpaceInertiaTensor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getMassSpaceInertiaTensor_0(self2), PxVec3);
        };
        ;
        PxRigidBody.prototype["getMassSpaceInvInertiaTensor"] = PxRigidBody.prototype.getMassSpaceInvInertiaTensor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getMassSpaceInvInertiaTensor_0(self2), PxVec3);
        };
        ;
        PxRigidBody.prototype["setLinearDamping"] = PxRigidBody.prototype.setLinearDamping = function(linDamp) {
          var self2 = this.ptr;
          if (linDamp && typeof linDamp === "object")
            linDamp = linDamp.ptr;
          _emscripten_bind_PxRigidBody_setLinearDamping_1(self2, linDamp);
        };
        ;
        PxRigidBody.prototype["getLinearDamping"] = PxRigidBody.prototype.getLinearDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getLinearDamping_0(self2);
        };
        ;
        PxRigidBody.prototype["setAngularDamping"] = PxRigidBody.prototype.setAngularDamping = function(angDamp) {
          var self2 = this.ptr;
          if (angDamp && typeof angDamp === "object")
            angDamp = angDamp.ptr;
          _emscripten_bind_PxRigidBody_setAngularDamping_1(self2, angDamp);
        };
        ;
        PxRigidBody.prototype["getAngularDamping"] = PxRigidBody.prototype.getAngularDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getAngularDamping_0(self2);
        };
        ;
        PxRigidBody.prototype["getLinearVelocity"] = PxRigidBody.prototype.getLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxRigidBody.prototype["setLinearVelocity"] = PxRigidBody.prototype.setLinearVelocity = function(linVel, autowake) {
          var self2 = this.ptr;
          if (linVel && typeof linVel === "object")
            linVel = linVel.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidBody_setLinearVelocity_1(self2, linVel);
            return;
          }
          _emscripten_bind_PxRigidBody_setLinearVelocity_2(self2, linVel, autowake);
        };
        ;
        PxRigidBody.prototype["getAngularVelocity"] = PxRigidBody.prototype.getAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxRigidBody.prototype["setAngularVelocity"] = PxRigidBody.prototype.setAngularVelocity = function(angVel, autowake) {
          var self2 = this.ptr;
          if (angVel && typeof angVel === "object")
            angVel = angVel.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidBody_setAngularVelocity_1(self2, angVel);
            return;
          }
          _emscripten_bind_PxRigidBody_setAngularVelocity_2(self2, angVel, autowake);
        };
        ;
        PxRigidBody.prototype["getMaxLinearVelocity"] = PxRigidBody.prototype.getMaxLinearVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getMaxLinearVelocity_0(self2);
        };
        ;
        PxRigidBody.prototype["setMaxLinearVelocity"] = PxRigidBody.prototype.setMaxLinearVelocity = function(maxLinVel) {
          var self2 = this.ptr;
          if (maxLinVel && typeof maxLinVel === "object")
            maxLinVel = maxLinVel.ptr;
          _emscripten_bind_PxRigidBody_setMaxLinearVelocity_1(self2, maxLinVel);
        };
        ;
        PxRigidBody.prototype["getMaxAngularVelocity"] = PxRigidBody.prototype.getMaxAngularVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getMaxAngularVelocity_0(self2);
        };
        ;
        PxRigidBody.prototype["setMaxAngularVelocity"] = PxRigidBody.prototype.setMaxAngularVelocity = function(maxAngVel) {
          var self2 = this.ptr;
          if (maxAngVel && typeof maxAngVel === "object")
            maxAngVel = maxAngVel.ptr;
          _emscripten_bind_PxRigidBody_setMaxAngularVelocity_1(self2, maxAngVel);
        };
        ;
        PxRigidBody.prototype["addForce"] = PxRigidBody.prototype.addForce = function(force, mode, autowake) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidBody_addForce_1(self2, force);
            return;
          }
          if (autowake === void 0) {
            _emscripten_bind_PxRigidBody_addForce_2(self2, force, mode);
            return;
          }
          _emscripten_bind_PxRigidBody_addForce_3(self2, force, mode, autowake);
        };
        ;
        PxRigidBody.prototype["addTorque"] = PxRigidBody.prototype.addTorque = function(torque, mode, autowake) {
          var self2 = this.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidBody_addTorque_1(self2, torque);
            return;
          }
          if (autowake === void 0) {
            _emscripten_bind_PxRigidBody_addTorque_2(self2, torque, mode);
            return;
          }
          _emscripten_bind_PxRigidBody_addTorque_3(self2, torque, mode, autowake);
        };
        ;
        PxRigidBody.prototype["clearForce"] = PxRigidBody.prototype.clearForce = function(mode) {
          var self2 = this.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          _emscripten_bind_PxRigidBody_clearForce_1(self2, mode);
        };
        ;
        PxRigidBody.prototype["clearTorque"] = PxRigidBody.prototype.clearTorque = function(mode) {
          var self2 = this.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          _emscripten_bind_PxRigidBody_clearTorque_1(self2, mode);
        };
        ;
        PxRigidBody.prototype["setForceAndTorque"] = PxRigidBody.prototype.setForceAndTorque = function(force, torque, mode) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidBody_setForceAndTorque_2(self2, force, torque);
            return;
          }
          _emscripten_bind_PxRigidBody_setForceAndTorque_3(self2, force, torque, mode);
        };
        ;
        PxRigidBody.prototype["setRigidBodyFlag"] = PxRigidBody.prototype.setRigidBodyFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRigidBody_setRigidBodyFlag_2(self2, flag, value);
        };
        ;
        PxRigidBody.prototype["setRigidBodyFlags"] = PxRigidBody.prototype.setRigidBodyFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxRigidBody_setRigidBodyFlags_1(self2, inFlags);
        };
        ;
        PxRigidBody.prototype["getRigidBodyFlags"] = PxRigidBody.prototype.getRigidBodyFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getRigidBodyFlags_0(self2), PxRigidBodyFlags);
        };
        ;
        PxRigidBody.prototype["setMinCCDAdvanceCoefficient"] = PxRigidBody.prototype.setMinCCDAdvanceCoefficient = function(advanceCoefficient) {
          var self2 = this.ptr;
          if (advanceCoefficient && typeof advanceCoefficient === "object")
            advanceCoefficient = advanceCoefficient.ptr;
          _emscripten_bind_PxRigidBody_setMinCCDAdvanceCoefficient_1(self2, advanceCoefficient);
        };
        ;
        PxRigidBody.prototype["getMinCCDAdvanceCoefficient"] = PxRigidBody.prototype.getMinCCDAdvanceCoefficient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getMinCCDAdvanceCoefficient_0(self2);
        };
        ;
        PxRigidBody.prototype["setMaxDepenetrationVelocity"] = PxRigidBody.prototype.setMaxDepenetrationVelocity = function(biasClamp) {
          var self2 = this.ptr;
          if (biasClamp && typeof biasClamp === "object")
            biasClamp = biasClamp.ptr;
          _emscripten_bind_PxRigidBody_setMaxDepenetrationVelocity_1(self2, biasClamp);
        };
        ;
        PxRigidBody.prototype["getMaxDepenetrationVelocity"] = PxRigidBody.prototype.getMaxDepenetrationVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getMaxDepenetrationVelocity_0(self2);
        };
        ;
        PxRigidBody.prototype["setMaxContactImpulse"] = PxRigidBody.prototype.setMaxContactImpulse = function(maxImpulse) {
          var self2 = this.ptr;
          if (maxImpulse && typeof maxImpulse === "object")
            maxImpulse = maxImpulse.ptr;
          _emscripten_bind_PxRigidBody_setMaxContactImpulse_1(self2, maxImpulse);
        };
        ;
        PxRigidBody.prototype["getMaxContactImpulse"] = PxRigidBody.prototype.getMaxContactImpulse = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getMaxContactImpulse_0(self2);
        };
        ;
        PxRigidBody.prototype["getInternalIslandNodeIndex"] = PxRigidBody.prototype.getInternalIslandNodeIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getInternalIslandNodeIndex_0(self2);
        };
        ;
        PxRigidBody.prototype["getType"] = PxRigidBody.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getType_0(self2);
        };
        ;
        PxRigidBody.prototype["getScene"] = PxRigidBody.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getScene_0(self2), PxScene);
        };
        ;
        PxRigidBody.prototype["setName"] = PxRigidBody.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxRigidBody_setName_1(self2, name);
        };
        ;
        PxRigidBody.prototype["getName"] = PxRigidBody.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidBody_getName_0(self2));
        };
        ;
        PxRigidBody.prototype["getWorldBounds"] = PxRigidBody.prototype.getWorldBounds = function(inflation) {
          var self2 = this.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (inflation === void 0) {
            return wrapPointer(_emscripten_bind_PxRigidBody_getWorldBounds_0(self2), PxBounds3);
          }
          return wrapPointer(_emscripten_bind_PxRigidBody_getWorldBounds_1(self2, inflation), PxBounds3);
        };
        ;
        PxRigidBody.prototype["setActorFlags"] = PxRigidBody.prototype.setActorFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxRigidBody_setActorFlags_1(self2, flags);
        };
        ;
        PxRigidBody.prototype["getActorFlags"] = PxRigidBody.prototype.getActorFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getActorFlags_0(self2), PxActorFlags);
        };
        ;
        PxRigidBody.prototype["setDominanceGroup"] = PxRigidBody.prototype.setDominanceGroup = function(dominanceGroup) {
          var self2 = this.ptr;
          if (dominanceGroup && typeof dominanceGroup === "object")
            dominanceGroup = dominanceGroup.ptr;
          _emscripten_bind_PxRigidBody_setDominanceGroup_1(self2, dominanceGroup);
        };
        ;
        PxRigidBody.prototype["getDominanceGroup"] = PxRigidBody.prototype.getDominanceGroup = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getDominanceGroup_0(self2);
        };
        ;
        PxRigidBody.prototype["setOwnerClient"] = PxRigidBody.prototype.setOwnerClient = function(inClient) {
          var self2 = this.ptr;
          if (inClient && typeof inClient === "object")
            inClient = inClient.ptr;
          _emscripten_bind_PxRigidBody_setOwnerClient_1(self2, inClient);
        };
        ;
        PxRigidBody.prototype["getOwnerClient"] = PxRigidBody.prototype.getOwnerClient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getOwnerClient_0(self2);
        };
        ;
        PxRigidBody.prototype["release"] = PxRigidBody.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidBody_release_0(self2);
        };
        ;
        PxRigidBody.prototype["getConcreteTypeName"] = PxRigidBody.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidBody_getConcreteTypeName_0(self2));
        };
        ;
        PxRigidBody.prototype["getConcreteType"] = PxRigidBody.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getConcreteType_0(self2);
        };
        ;
        PxRigidBody.prototype["setBaseFlag"] = PxRigidBody.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRigidBody_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxRigidBody.prototype["setBaseFlags"] = PxRigidBody.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxRigidBody_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxRigidBody.prototype["getBaseFlags"] = PxRigidBody.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxRigidBody.prototype["isReleasable"] = PxRigidBody.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRigidBody_isReleasable_0(self2);
        };
        ;
        PxRigidBody.prototype["getGlobalPose"] = PxRigidBody.prototype.getGlobalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_getGlobalPose_0(self2), PxTransform);
        };
        ;
        PxRigidBody.prototype["setGlobalPose"] = PxRigidBody.prototype.setGlobalPose = function(pose, autowake) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidBody_setGlobalPose_1(self2, pose);
            return;
          }
          _emscripten_bind_PxRigidBody_setGlobalPose_2(self2, pose, autowake);
        };
        ;
        PxRigidBody.prototype["attachShape"] = PxRigidBody.prototype.attachShape = function(shape) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          return !!_emscripten_bind_PxRigidBody_attachShape_1(self2, shape);
        };
        ;
        PxRigidBody.prototype["detachShape"] = PxRigidBody.prototype.detachShape = function(shape, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxRigidBody_detachShape_1(self2, shape);
            return;
          }
          _emscripten_bind_PxRigidBody_detachShape_2(self2, shape, wakeOnLostTouch);
        };
        ;
        PxRigidBody.prototype["getNbShapes"] = PxRigidBody.prototype.getNbShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidBody_getNbShapes_0(self2);
        };
        ;
        PxRigidBody.prototype["get_userData"] = PxRigidBody.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBody_get_userData_0(self2), VoidPtr);
        };
        PxRigidBody.prototype["set_userData"] = PxRigidBody.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRigidBody_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxRigidBody.prototype, "userData", { get: PxRigidBody.prototype.get_userData, set: PxRigidBody.prototype.set_userData });
        function SimpleSimulationEventCallback() {
          throw "cannot construct a SimpleSimulationEventCallback, no constructor in IDL";
        }
        SimpleSimulationEventCallback.prototype = Object.create(PxSimulationEventCallback.prototype);
        SimpleSimulationEventCallback.prototype.constructor = SimpleSimulationEventCallback;
        SimpleSimulationEventCallback.prototype.__class__ = SimpleSimulationEventCallback;
        SimpleSimulationEventCallback.__cache__ = {};
        Module["SimpleSimulationEventCallback"] = SimpleSimulationEventCallback;
        SimpleSimulationEventCallback.prototype["onConstraintBreak"] = SimpleSimulationEventCallback.prototype.onConstraintBreak = function(constraints, count) {
          var self2 = this.ptr;
          if (constraints && typeof constraints === "object")
            constraints = constraints.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_SimpleSimulationEventCallback_onConstraintBreak_2(self2, constraints, count);
        };
        ;
        SimpleSimulationEventCallback.prototype["onWake"] = SimpleSimulationEventCallback.prototype.onWake = function(actors, count) {
          var self2 = this.ptr;
          if (actors && typeof actors === "object")
            actors = actors.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_SimpleSimulationEventCallback_onWake_2(self2, actors, count);
        };
        ;
        SimpleSimulationEventCallback.prototype["onSleep"] = SimpleSimulationEventCallback.prototype.onSleep = function(actors, count) {
          var self2 = this.ptr;
          if (actors && typeof actors === "object")
            actors = actors.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_SimpleSimulationEventCallback_onSleep_2(self2, actors, count);
        };
        ;
        SimpleSimulationEventCallback.prototype["onContact"] = SimpleSimulationEventCallback.prototype.onContact = function(pairHeader, pairs, nbPairs) {
          var self2 = this.ptr;
          if (pairHeader && typeof pairHeader === "object")
            pairHeader = pairHeader.ptr;
          if (pairs && typeof pairs === "object")
            pairs = pairs.ptr;
          if (nbPairs && typeof nbPairs === "object")
            nbPairs = nbPairs.ptr;
          _emscripten_bind_SimpleSimulationEventCallback_onContact_3(self2, pairHeader, pairs, nbPairs);
        };
        ;
        SimpleSimulationEventCallback.prototype["onTrigger"] = SimpleSimulationEventCallback.prototype.onTrigger = function(pairs, count) {
          var self2 = this.ptr;
          if (pairs && typeof pairs === "object")
            pairs = pairs.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_SimpleSimulationEventCallback_onTrigger_2(self2, pairs, count);
        };
        ;
        SimpleSimulationEventCallback.prototype["__destroy__"] = SimpleSimulationEventCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_SimpleSimulationEventCallback___destroy___0(self2);
        };
        function PxSweepCallback() {
          throw "cannot construct a PxSweepCallback, no constructor in IDL";
        }
        PxSweepCallback.prototype = Object.create(WrapperObject.prototype);
        PxSweepCallback.prototype.constructor = PxSweepCallback;
        PxSweepCallback.prototype.__class__ = PxSweepCallback;
        PxSweepCallback.__cache__ = {};
        Module["PxSweepCallback"] = PxSweepCallback;
        PxSweepCallback.prototype["hasAnyHits"] = PxSweepCallback.prototype.hasAnyHits = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSweepCallback_hasAnyHits_0(self2);
        };
        ;
        PxSweepCallback.prototype["__destroy__"] = PxSweepCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSweepCallback___destroy___0(self2);
        };
        function PxVehicleDrive() {
          throw "cannot construct a PxVehicleDrive, no constructor in IDL";
        }
        PxVehicleDrive.prototype = Object.create(PxVehicleWheels.prototype);
        PxVehicleDrive.prototype.constructor = PxVehicleDrive;
        PxVehicleDrive.prototype.__class__ = PxVehicleDrive;
        PxVehicleDrive.__cache__ = {};
        Module["PxVehicleDrive"] = PxVehicleDrive;
        PxVehicleDrive.prototype["getConcreteTypeName"] = PxVehicleDrive.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxVehicleDrive_getConcreteTypeName_0(self2));
        };
        ;
        PxVehicleDrive.prototype["getConcreteType"] = PxVehicleDrive.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive_getConcreteType_0(self2);
        };
        ;
        PxVehicleDrive.prototype["setBaseFlag"] = PxVehicleDrive.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleDrive_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxVehicleDrive.prototype["setBaseFlags"] = PxVehicleDrive.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxVehicleDrive_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxVehicleDrive.prototype["getBaseFlags"] = PxVehicleDrive.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxVehicleDrive.prototype["isReleasable"] = PxVehicleDrive.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDrive_isReleasable_0(self2);
        };
        ;
        PxVehicleDrive.prototype["getVehicleType"] = PxVehicleDrive.prototype.getVehicleType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive_getVehicleType_0(self2);
        };
        ;
        PxVehicleDrive.prototype["getRigidDynamicActor"] = PxVehicleDrive.prototype.getRigidDynamicActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive_getRigidDynamicActor_0(self2), PxRigidDynamic);
        };
        ;
        PxVehicleDrive.prototype["computeForwardSpeed"] = PxVehicleDrive.prototype.computeForwardSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive_computeForwardSpeed_0(self2);
        };
        ;
        PxVehicleDrive.prototype["computeSidewaysSpeed"] = PxVehicleDrive.prototype.computeSidewaysSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive_computeSidewaysSpeed_0(self2);
        };
        ;
        PxVehicleDrive.prototype["getNbNonDrivenWheels"] = PxVehicleDrive.prototype.getNbNonDrivenWheels = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive_getNbNonDrivenWheels_0(self2);
        };
        ;
        PxVehicleDrive.prototype["get_mDriveDynData"] = PxVehicleDrive.prototype.get_mDriveDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive_get_mDriveDynData_0(self2), PxVehicleDriveDynData);
        };
        PxVehicleDrive.prototype["set_mDriveDynData"] = PxVehicleDrive.prototype.set_mDriveDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrive_set_mDriveDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrive.prototype, "mDriveDynData", { get: PxVehicleDrive.prototype.get_mDriveDynData, set: PxVehicleDrive.prototype.set_mDriveDynData });
        PxVehicleDrive.prototype["get_mWheelsSimData"] = PxVehicleDrive.prototype.get_mWheelsSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive_get_mWheelsSimData_0(self2), PxVehicleWheelsSimData);
        };
        PxVehicleDrive.prototype["set_mWheelsSimData"] = PxVehicleDrive.prototype.set_mWheelsSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrive_set_mWheelsSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrive.prototype, "mWheelsSimData", { get: PxVehicleDrive.prototype.get_mWheelsSimData, set: PxVehicleDrive.prototype.set_mWheelsSimData });
        PxVehicleDrive.prototype["get_mWheelsDynData"] = PxVehicleDrive.prototype.get_mWheelsDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive_get_mWheelsDynData_0(self2), PxVehicleWheelsDynData);
        };
        PxVehicleDrive.prototype["set_mWheelsDynData"] = PxVehicleDrive.prototype.set_mWheelsDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrive_set_mWheelsDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrive.prototype, "mWheelsDynData", { get: PxVehicleDrive.prototype.get_mWheelsDynData, set: PxVehicleDrive.prototype.set_mWheelsDynData });
        function PxVehicleDriveSimData() {
          this.ptr = _emscripten_bind_PxVehicleDriveSimData_PxVehicleDriveSimData_0();
          getCache(PxVehicleDriveSimData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleDriveSimData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleDriveSimData.prototype.constructor = PxVehicleDriveSimData;
        PxVehicleDriveSimData.prototype.__class__ = PxVehicleDriveSimData;
        PxVehicleDriveSimData.__cache__ = {};
        Module["PxVehicleDriveSimData"] = PxVehicleDriveSimData;
        PxVehicleDriveSimData.prototype["getEngineData"] = PxVehicleDriveSimData.prototype.getEngineData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData_getEngineData_0(self2), PxVehicleEngineData);
        };
        ;
        PxVehicleDriveSimData.prototype["setEngineData"] = PxVehicleDriveSimData.prototype.setEngineData = function(engine) {
          var self2 = this.ptr;
          if (engine && typeof engine === "object")
            engine = engine.ptr;
          _emscripten_bind_PxVehicleDriveSimData_setEngineData_1(self2, engine);
        };
        ;
        PxVehicleDriveSimData.prototype["getGearsData"] = PxVehicleDriveSimData.prototype.getGearsData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData_getGearsData_0(self2), PxVehicleGearsData);
        };
        ;
        PxVehicleDriveSimData.prototype["setGearsData"] = PxVehicleDriveSimData.prototype.setGearsData = function(gears) {
          var self2 = this.ptr;
          if (gears && typeof gears === "object")
            gears = gears.ptr;
          _emscripten_bind_PxVehicleDriveSimData_setGearsData_1(self2, gears);
        };
        ;
        PxVehicleDriveSimData.prototype["getClutchData"] = PxVehicleDriveSimData.prototype.getClutchData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData_getClutchData_0(self2), PxVehicleClutchData);
        };
        ;
        PxVehicleDriveSimData.prototype["setClutchData"] = PxVehicleDriveSimData.prototype.setClutchData = function(clutch) {
          var self2 = this.ptr;
          if (clutch && typeof clutch === "object")
            clutch = clutch.ptr;
          _emscripten_bind_PxVehicleDriveSimData_setClutchData_1(self2, clutch);
        };
        ;
        PxVehicleDriveSimData.prototype["getAutoBoxData"] = PxVehicleDriveSimData.prototype.getAutoBoxData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData_getAutoBoxData_0(self2), PxVehicleAutoBoxData);
        };
        ;
        PxVehicleDriveSimData.prototype["setAutoBoxData"] = PxVehicleDriveSimData.prototype.setAutoBoxData = function(clutch) {
          var self2 = this.ptr;
          if (clutch && typeof clutch === "object")
            clutch = clutch.ptr;
          _emscripten_bind_PxVehicleDriveSimData_setAutoBoxData_1(self2, clutch);
        };
        ;
        PxVehicleDriveSimData.prototype["__destroy__"] = PxVehicleDriveSimData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveSimData___destroy___0(self2);
        };
        function PxGeometry() {
          throw "cannot construct a PxGeometry, no constructor in IDL";
        }
        PxGeometry.prototype = Object.create(WrapperObject.prototype);
        PxGeometry.prototype.constructor = PxGeometry;
        PxGeometry.prototype.__class__ = PxGeometry;
        PxGeometry.__cache__ = {};
        Module["PxGeometry"] = PxGeometry;
        PxGeometry.prototype["getType"] = PxGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxGeometry_getType_0(self2);
        };
        ;
        PxGeometry.prototype["__destroy__"] = PxGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxGeometry___destroy___0(self2);
        };
        function PxSimpleTriangleMesh() {
          this.ptr = _emscripten_bind_PxSimpleTriangleMesh_PxSimpleTriangleMesh_0();
          getCache(PxSimpleTriangleMesh)[this.ptr] = this;
        }
        ;
        ;
        PxSimpleTriangleMesh.prototype = Object.create(WrapperObject.prototype);
        PxSimpleTriangleMesh.prototype.constructor = PxSimpleTriangleMesh;
        PxSimpleTriangleMesh.prototype.__class__ = PxSimpleTriangleMesh;
        PxSimpleTriangleMesh.__cache__ = {};
        Module["PxSimpleTriangleMesh"] = PxSimpleTriangleMesh;
        PxSimpleTriangleMesh.prototype["setToDefault"] = PxSimpleTriangleMesh.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSimpleTriangleMesh_setToDefault_0(self2);
        };
        ;
        PxSimpleTriangleMesh.prototype["isValid"] = PxSimpleTriangleMesh.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSimpleTriangleMesh_isValid_0(self2);
        };
        ;
        PxSimpleTriangleMesh.prototype["get_points"] = PxSimpleTriangleMesh.prototype.get_points = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSimpleTriangleMesh_get_points_0(self2), PxBoundedData);
        };
        PxSimpleTriangleMesh.prototype["set_points"] = PxSimpleTriangleMesh.prototype.set_points = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimpleTriangleMesh_set_points_1(self2, arg0);
        };
        Object.defineProperty(PxSimpleTriangleMesh.prototype, "points", { get: PxSimpleTriangleMesh.prototype.get_points, set: PxSimpleTriangleMesh.prototype.set_points });
        PxSimpleTriangleMesh.prototype["get_triangles"] = PxSimpleTriangleMesh.prototype.get_triangles = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSimpleTriangleMesh_get_triangles_0(self2), PxBoundedData);
        };
        PxSimpleTriangleMesh.prototype["set_triangles"] = PxSimpleTriangleMesh.prototype.set_triangles = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimpleTriangleMesh_set_triangles_1(self2, arg0);
        };
        Object.defineProperty(PxSimpleTriangleMesh.prototype, "triangles", { get: PxSimpleTriangleMesh.prototype.get_triangles, set: PxSimpleTriangleMesh.prototype.set_triangles });
        PxSimpleTriangleMesh.prototype["get_flags"] = PxSimpleTriangleMesh.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSimpleTriangleMesh_get_flags_0(self2), PxMeshFlags);
        };
        PxSimpleTriangleMesh.prototype["set_flags"] = PxSimpleTriangleMesh.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimpleTriangleMesh_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxSimpleTriangleMesh.prototype, "flags", { get: PxSimpleTriangleMesh.prototype.get_flags, set: PxSimpleTriangleMesh.prototype.set_flags });
        PxSimpleTriangleMesh.prototype["__destroy__"] = PxSimpleTriangleMesh.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSimpleTriangleMesh___destroy___0(self2);
        };
        function PxCpuDispatcher() {
          throw "cannot construct a PxCpuDispatcher, no constructor in IDL";
        }
        PxCpuDispatcher.prototype = Object.create(WrapperObject.prototype);
        PxCpuDispatcher.prototype.constructor = PxCpuDispatcher;
        PxCpuDispatcher.prototype.__class__ = PxCpuDispatcher;
        PxCpuDispatcher.__cache__ = {};
        Module["PxCpuDispatcher"] = PxCpuDispatcher;
        PxCpuDispatcher.prototype["__destroy__"] = PxCpuDispatcher.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCpuDispatcher___destroy___0(self2);
        };
        function PxErrorCallback() {
          throw "cannot construct a PxErrorCallback, no constructor in IDL";
        }
        PxErrorCallback.prototype = Object.create(WrapperObject.prototype);
        PxErrorCallback.prototype.constructor = PxErrorCallback;
        PxErrorCallback.prototype.__class__ = PxErrorCallback;
        PxErrorCallback.__cache__ = {};
        Module["PxErrorCallback"] = PxErrorCallback;
        PxErrorCallback.prototype["reportError"] = PxErrorCallback.prototype.reportError = function(code, message, file, line) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (code && typeof code === "object")
            code = code.ptr;
          if (message && typeof message === "object")
            message = message.ptr;
          else
            message = ensureString(message);
          if (file && typeof file === "object")
            file = file.ptr;
          else
            file = ensureString(file);
          if (line && typeof line === "object")
            line = line.ptr;
          _emscripten_bind_PxErrorCallback_reportError_4(self2, code, message, file, line);
        };
        ;
        PxErrorCallback.prototype["__destroy__"] = PxErrorCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxErrorCallback___destroy___0(self2);
        };
        function PxInputData() {
          throw "cannot construct a PxInputData, no constructor in IDL";
        }
        PxInputData.prototype = Object.create(WrapperObject.prototype);
        PxInputData.prototype.constructor = PxInputData;
        PxInputData.prototype.__class__ = PxInputData;
        PxInputData.__cache__ = {};
        Module["PxInputData"] = PxInputData;
        PxInputData.prototype["__destroy__"] = PxInputData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxInputData___destroy___0(self2);
        };
        function PxOutputStream() {
          throw "cannot construct a PxOutputStream, no constructor in IDL";
        }
        PxOutputStream.prototype = Object.create(WrapperObject.prototype);
        PxOutputStream.prototype.constructor = PxOutputStream;
        PxOutputStream.prototype.__class__ = PxOutputStream;
        PxOutputStream.__cache__ = {};
        Module["PxOutputStream"] = PxOutputStream;
        PxOutputStream.prototype["__destroy__"] = PxOutputStream.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxOutputStream___destroy___0(self2);
        };
        function PxJoint() {
          throw "cannot construct a PxJoint, no constructor in IDL";
        }
        PxJoint.prototype = Object.create(PxBase.prototype);
        PxJoint.prototype.constructor = PxJoint;
        PxJoint.prototype.__class__ = PxJoint;
        PxJoint.__cache__ = {};
        Module["PxJoint"] = PxJoint;
        PxJoint.prototype["setActors"] = PxJoint.prototype.setActors = function(actor0, actor1) {
          var self2 = this.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          _emscripten_bind_PxJoint_setActors_2(self2, actor0, actor1);
        };
        ;
        PxJoint.prototype["setLocalPose"] = PxJoint.prototype.setLocalPose = function(actor, localPose) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (localPose && typeof localPose === "object")
            localPose = localPose.ptr;
          _emscripten_bind_PxJoint_setLocalPose_2(self2, actor, localPose);
        };
        ;
        PxJoint.prototype["getLocalPose"] = PxJoint.prototype.getLocalPose = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getLocalPose_1(self2, actor), PxTransform);
        };
        ;
        PxJoint.prototype["getRelativeTransform"] = PxJoint.prototype.getRelativeTransform = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getRelativeTransform_0(self2), PxTransform);
        };
        ;
        PxJoint.prototype["getRelativeLinearVelocity"] = PxJoint.prototype.getRelativeLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getRelativeLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxJoint.prototype["getRelativeAngularVelocity"] = PxJoint.prototype.getRelativeAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getRelativeAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxJoint.prototype["setBreakForce"] = PxJoint.prototype.setBreakForce = function(force, torque) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          _emscripten_bind_PxJoint_setBreakForce_2(self2, force, torque);
        };
        ;
        PxJoint.prototype["setConstraintFlags"] = PxJoint.prototype.setConstraintFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxJoint_setConstraintFlags_1(self2, flags);
        };
        ;
        PxJoint.prototype["setConstraintFlag"] = PxJoint.prototype.setConstraintFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxJoint_setConstraintFlag_2(self2, flag, value);
        };
        ;
        PxJoint.prototype["getConstraintFlags"] = PxJoint.prototype.getConstraintFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getConstraintFlags_0(self2), PxConstraintFlags);
        };
        ;
        PxJoint.prototype["setInvMassScale0"] = PxJoint.prototype.setInvMassScale0 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxJoint_setInvMassScale0_1(self2, invMassScale);
        };
        ;
        PxJoint.prototype["getInvMassScale0"] = PxJoint.prototype.getInvMassScale0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJoint_getInvMassScale0_0(self2);
        };
        ;
        PxJoint.prototype["setInvMassScale1"] = PxJoint.prototype.setInvMassScale1 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxJoint_setInvMassScale1_1(self2, invMassScale);
        };
        ;
        PxJoint.prototype["getInvMassScale1"] = PxJoint.prototype.getInvMassScale1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJoint_getInvMassScale1_0(self2);
        };
        ;
        PxJoint.prototype["getConstraint"] = PxJoint.prototype.getConstraint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getConstraint_0(self2), PxConstraint);
        };
        ;
        PxJoint.prototype["setName"] = PxJoint.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxJoint_setName_1(self2, name);
        };
        ;
        PxJoint.prototype["getName"] = PxJoint.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxJoint_getName_0(self2));
        };
        ;
        PxJoint.prototype["release"] = PxJoint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxJoint_release_0(self2);
        };
        ;
        PxJoint.prototype["getScene"] = PxJoint.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getScene_0(self2), PxScene);
        };
        ;
        PxJoint.prototype["getConcreteTypeName"] = PxJoint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxJoint_getConcreteTypeName_0(self2));
        };
        ;
        PxJoint.prototype["getConcreteType"] = PxJoint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJoint_getConcreteType_0(self2);
        };
        ;
        PxJoint.prototype["setBaseFlag"] = PxJoint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxJoint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxJoint.prototype["setBaseFlags"] = PxJoint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxJoint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxJoint.prototype["getBaseFlags"] = PxJoint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxJoint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxJoint.prototype["isReleasable"] = PxJoint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJoint_isReleasable_0(self2);
        };
        ;
        function PxJointLimitParameters() {
          throw "cannot construct a PxJointLimitParameters, no constructor in IDL";
        }
        PxJointLimitParameters.prototype = Object.create(WrapperObject.prototype);
        PxJointLimitParameters.prototype.constructor = PxJointLimitParameters;
        PxJointLimitParameters.prototype.__class__ = PxJointLimitParameters;
        PxJointLimitParameters.__cache__ = {};
        Module["PxJointLimitParameters"] = PxJointLimitParameters;
        PxJointLimitParameters.prototype["isValid"] = PxJointLimitParameters.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLimitParameters_isValid_0(self2);
        };
        ;
        PxJointLimitParameters.prototype["isSoft"] = PxJointLimitParameters.prototype.isSoft = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLimitParameters_isSoft_0(self2);
        };
        ;
        PxJointLimitParameters.prototype["get_restitution"] = PxJointLimitParameters.prototype.get_restitution = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitParameters_get_restitution_0(self2);
        };
        PxJointLimitParameters.prototype["set_restitution"] = PxJointLimitParameters.prototype.set_restitution = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitParameters_set_restitution_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitParameters.prototype, "restitution", { get: PxJointLimitParameters.prototype.get_restitution, set: PxJointLimitParameters.prototype.set_restitution });
        PxJointLimitParameters.prototype["get_bounceThreshold"] = PxJointLimitParameters.prototype.get_bounceThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitParameters_get_bounceThreshold_0(self2);
        };
        PxJointLimitParameters.prototype["set_bounceThreshold"] = PxJointLimitParameters.prototype.set_bounceThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitParameters_set_bounceThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitParameters.prototype, "bounceThreshold", { get: PxJointLimitParameters.prototype.get_bounceThreshold, set: PxJointLimitParameters.prototype.set_bounceThreshold });
        PxJointLimitParameters.prototype["get_stiffness"] = PxJointLimitParameters.prototype.get_stiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitParameters_get_stiffness_0(self2);
        };
        PxJointLimitParameters.prototype["set_stiffness"] = PxJointLimitParameters.prototype.set_stiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitParameters_set_stiffness_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitParameters.prototype, "stiffness", { get: PxJointLimitParameters.prototype.get_stiffness, set: PxJointLimitParameters.prototype.set_stiffness });
        PxJointLimitParameters.prototype["get_damping"] = PxJointLimitParameters.prototype.get_damping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitParameters_get_damping_0(self2);
        };
        PxJointLimitParameters.prototype["set_damping"] = PxJointLimitParameters.prototype.set_damping = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitParameters_set_damping_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitParameters.prototype, "damping", { get: PxJointLimitParameters.prototype.get_damping, set: PxJointLimitParameters.prototype.set_damping });
        PxJointLimitParameters.prototype["get_contactDistance"] = PxJointLimitParameters.prototype.get_contactDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitParameters_get_contactDistance_0(self2);
        };
        PxJointLimitParameters.prototype["set_contactDistance"] = PxJointLimitParameters.prototype.set_contactDistance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitParameters_set_contactDistance_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitParameters.prototype, "contactDistance", { get: PxJointLimitParameters.prototype.get_contactDistance, set: PxJointLimitParameters.prototype.set_contactDistance });
        function PxSpring(stiffness, damping) {
          if (stiffness && typeof stiffness === "object")
            stiffness = stiffness.ptr;
          if (damping && typeof damping === "object")
            damping = damping.ptr;
          this.ptr = _emscripten_bind_PxSpring_PxSpring_2(stiffness, damping);
          getCache(PxSpring)[this.ptr] = this;
        }
        ;
        ;
        PxSpring.prototype = Object.create(WrapperObject.prototype);
        PxSpring.prototype.constructor = PxSpring;
        PxSpring.prototype.__class__ = PxSpring;
        PxSpring.__cache__ = {};
        Module["PxSpring"] = PxSpring;
        PxSpring.prototype["get_stiffness"] = PxSpring.prototype.get_stiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSpring_get_stiffness_0(self2);
        };
        PxSpring.prototype["set_stiffness"] = PxSpring.prototype.set_stiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSpring_set_stiffness_1(self2, arg0);
        };
        Object.defineProperty(PxSpring.prototype, "stiffness", { get: PxSpring.prototype.get_stiffness, set: PxSpring.prototype.set_stiffness });
        PxSpring.prototype["get_damping"] = PxSpring.prototype.get_damping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSpring_get_damping_0(self2);
        };
        PxSpring.prototype["set_damping"] = PxSpring.prototype.set_damping = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSpring_set_damping_1(self2, arg0);
        };
        Object.defineProperty(PxSpring.prototype, "damping", { get: PxSpring.prototype.get_damping, set: PxSpring.prototype.set_damping });
        PxSpring.prototype["__destroy__"] = PxSpring.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSpring___destroy___0(self2);
        };
        function PxController() {
          throw "cannot construct a PxController, no constructor in IDL";
        }
        PxController.prototype = Object.create(WrapperObject.prototype);
        PxController.prototype.constructor = PxController;
        PxController.prototype.__class__ = PxController;
        PxController.__cache__ = {};
        Module["PxController"] = PxController;
        PxController.prototype["getType"] = PxController.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxController_getType_0(self2);
        };
        ;
        PxController.prototype["release"] = PxController.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxController_release_0(self2);
        };
        ;
        PxController.prototype["move"] = PxController.prototype.move = function(disp, minDist, elapsedTime, filters, obstacles) {
          var self2 = this.ptr;
          if (disp && typeof disp === "object")
            disp = disp.ptr;
          if (minDist && typeof minDist === "object")
            minDist = minDist.ptr;
          if (elapsedTime && typeof elapsedTime === "object")
            elapsedTime = elapsedTime.ptr;
          if (filters && typeof filters === "object")
            filters = filters.ptr;
          if (obstacles && typeof obstacles === "object")
            obstacles = obstacles.ptr;
          if (obstacles === void 0) {
            return wrapPointer(_emscripten_bind_PxController_move_4(self2, disp, minDist, elapsedTime, filters), PxControllerCollisionFlags);
          }
          return wrapPointer(_emscripten_bind_PxController_move_5(self2, disp, minDist, elapsedTime, filters, obstacles), PxControllerCollisionFlags);
        };
        ;
        PxController.prototype["setPosition"] = PxController.prototype.setPosition = function(position) {
          var self2 = this.ptr;
          if (position && typeof position === "object")
            position = position.ptr;
          return !!_emscripten_bind_PxController_setPosition_1(self2, position);
        };
        ;
        PxController.prototype["getPosition"] = PxController.prototype.getPosition = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxController_getPosition_0(self2), PxExtendedVec3);
        };
        ;
        PxController.prototype["setFootPosition"] = PxController.prototype.setFootPosition = function(position) {
          var self2 = this.ptr;
          if (position && typeof position === "object")
            position = position.ptr;
          return !!_emscripten_bind_PxController_setFootPosition_1(self2, position);
        };
        ;
        PxController.prototype["getFootPosition"] = PxController.prototype.getFootPosition = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxController_getFootPosition_0(self2), PxExtendedVec3);
        };
        ;
        PxController.prototype["getActor"] = PxController.prototype.getActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxController_getActor_0(self2), PxRigidDynamic);
        };
        ;
        PxController.prototype["setStepOffset"] = PxController.prototype.setStepOffset = function(offset) {
          var self2 = this.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxController_setStepOffset_1(self2, offset);
        };
        ;
        PxController.prototype["getStepOffset"] = PxController.prototype.getStepOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxController_getStepOffset_0(self2);
        };
        ;
        PxController.prototype["setNonWalkableMode"] = PxController.prototype.setNonWalkableMode = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxController_setNonWalkableMode_1(self2, flag);
        };
        ;
        PxController.prototype["getNonWalkableMode"] = PxController.prototype.getNonWalkableMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxController_getNonWalkableMode_0(self2);
        };
        ;
        PxController.prototype["getContactOffset"] = PxController.prototype.getContactOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxController_getContactOffset_0(self2);
        };
        ;
        PxController.prototype["setContactOffset"] = PxController.prototype.setContactOffset = function(offset) {
          var self2 = this.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxController_setContactOffset_1(self2, offset);
        };
        ;
        PxController.prototype["getUpDirection"] = PxController.prototype.getUpDirection = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxController_getUpDirection_0(self2), PxVec3);
        };
        ;
        PxController.prototype["setUpDirection"] = PxController.prototype.setUpDirection = function(up) {
          var self2 = this.ptr;
          if (up && typeof up === "object")
            up = up.ptr;
          _emscripten_bind_PxController_setUpDirection_1(self2, up);
        };
        ;
        PxController.prototype["getSlopeLimit"] = PxController.prototype.getSlopeLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxController_getSlopeLimit_0(self2);
        };
        ;
        PxController.prototype["setSlopeLimit"] = PxController.prototype.setSlopeLimit = function(slopeLimit) {
          var self2 = this.ptr;
          if (slopeLimit && typeof slopeLimit === "object")
            slopeLimit = slopeLimit.ptr;
          _emscripten_bind_PxController_setSlopeLimit_1(self2, slopeLimit);
        };
        ;
        PxController.prototype["invalidateCache"] = PxController.prototype.invalidateCache = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxController_invalidateCache_0(self2);
        };
        ;
        PxController.prototype["getScene"] = PxController.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxController_getScene_0(self2), PxScene);
        };
        ;
        PxController.prototype["getUserData"] = PxController.prototype.getUserData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxController_getUserData_0(self2), VoidPtr);
        };
        ;
        PxController.prototype["setUserData"] = PxController.prototype.setUserData = function(userData) {
          var self2 = this.ptr;
          if (userData && typeof userData === "object")
            userData = userData.ptr;
          _emscripten_bind_PxController_setUserData_1(self2, userData);
        };
        ;
        PxController.prototype["getState"] = PxController.prototype.getState = function(state) {
          var self2 = this.ptr;
          if (state && typeof state === "object")
            state = state.ptr;
          _emscripten_bind_PxController_getState_1(self2, state);
        };
        ;
        PxController.prototype["getStats"] = PxController.prototype.getStats = function(stats) {
          var self2 = this.ptr;
          if (stats && typeof stats === "object")
            stats = stats.ptr;
          _emscripten_bind_PxController_getStats_1(self2, stats);
        };
        ;
        PxController.prototype["resize"] = PxController.prototype.resize = function(height) {
          var self2 = this.ptr;
          if (height && typeof height === "object")
            height = height.ptr;
          _emscripten_bind_PxController_resize_1(self2, height);
        };
        ;
        function PxControllerDesc() {
          throw "cannot construct a PxControllerDesc, no constructor in IDL";
        }
        PxControllerDesc.prototype = Object.create(WrapperObject.prototype);
        PxControllerDesc.prototype.constructor = PxControllerDesc;
        PxControllerDesc.prototype.__class__ = PxControllerDesc;
        PxControllerDesc.__cache__ = {};
        Module["PxControllerDesc"] = PxControllerDesc;
        PxControllerDesc.prototype["isValid"] = PxControllerDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxControllerDesc_isValid_0(self2);
        };
        ;
        PxControllerDesc.prototype["getType"] = PxControllerDesc.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_getType_0(self2);
        };
        ;
        PxControllerDesc.prototype["get_position"] = PxControllerDesc.prototype.get_position = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerDesc_get_position_0(self2), PxExtendedVec3);
        };
        PxControllerDesc.prototype["set_position"] = PxControllerDesc.prototype.set_position = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_position_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "position", { get: PxControllerDesc.prototype.get_position, set: PxControllerDesc.prototype.set_position });
        PxControllerDesc.prototype["get_upDirection"] = PxControllerDesc.prototype.get_upDirection = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerDesc_get_upDirection_0(self2), PxVec3);
        };
        PxControllerDesc.prototype["set_upDirection"] = PxControllerDesc.prototype.set_upDirection = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_upDirection_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "upDirection", { get: PxControllerDesc.prototype.get_upDirection, set: PxControllerDesc.prototype.set_upDirection });
        PxControllerDesc.prototype["get_slopeLimit"] = PxControllerDesc.prototype.get_slopeLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_slopeLimit_0(self2);
        };
        PxControllerDesc.prototype["set_slopeLimit"] = PxControllerDesc.prototype.set_slopeLimit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_slopeLimit_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "slopeLimit", { get: PxControllerDesc.prototype.get_slopeLimit, set: PxControllerDesc.prototype.set_slopeLimit });
        PxControllerDesc.prototype["get_invisibleWallHeight"] = PxControllerDesc.prototype.get_invisibleWallHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_invisibleWallHeight_0(self2);
        };
        PxControllerDesc.prototype["set_invisibleWallHeight"] = PxControllerDesc.prototype.set_invisibleWallHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_invisibleWallHeight_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "invisibleWallHeight", { get: PxControllerDesc.prototype.get_invisibleWallHeight, set: PxControllerDesc.prototype.set_invisibleWallHeight });
        PxControllerDesc.prototype["get_maxJumpHeight"] = PxControllerDesc.prototype.get_maxJumpHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_maxJumpHeight_0(self2);
        };
        PxControllerDesc.prototype["set_maxJumpHeight"] = PxControllerDesc.prototype.set_maxJumpHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_maxJumpHeight_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "maxJumpHeight", { get: PxControllerDesc.prototype.get_maxJumpHeight, set: PxControllerDesc.prototype.set_maxJumpHeight });
        PxControllerDesc.prototype["get_contactOffset"] = PxControllerDesc.prototype.get_contactOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_contactOffset_0(self2);
        };
        PxControllerDesc.prototype["set_contactOffset"] = PxControllerDesc.prototype.set_contactOffset = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_contactOffset_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "contactOffset", { get: PxControllerDesc.prototype.get_contactOffset, set: PxControllerDesc.prototype.set_contactOffset });
        PxControllerDesc.prototype["get_stepOffset"] = PxControllerDesc.prototype.get_stepOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_stepOffset_0(self2);
        };
        PxControllerDesc.prototype["set_stepOffset"] = PxControllerDesc.prototype.set_stepOffset = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_stepOffset_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "stepOffset", { get: PxControllerDesc.prototype.get_stepOffset, set: PxControllerDesc.prototype.set_stepOffset });
        PxControllerDesc.prototype["get_density"] = PxControllerDesc.prototype.get_density = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_density_0(self2);
        };
        PxControllerDesc.prototype["set_density"] = PxControllerDesc.prototype.set_density = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_density_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "density", { get: PxControllerDesc.prototype.get_density, set: PxControllerDesc.prototype.set_density });
        PxControllerDesc.prototype["get_scaleCoeff"] = PxControllerDesc.prototype.get_scaleCoeff = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_scaleCoeff_0(self2);
        };
        PxControllerDesc.prototype["set_scaleCoeff"] = PxControllerDesc.prototype.set_scaleCoeff = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_scaleCoeff_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "scaleCoeff", { get: PxControllerDesc.prototype.get_scaleCoeff, set: PxControllerDesc.prototype.set_scaleCoeff });
        PxControllerDesc.prototype["get_volumeGrowth"] = PxControllerDesc.prototype.get_volumeGrowth = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_volumeGrowth_0(self2);
        };
        PxControllerDesc.prototype["set_volumeGrowth"] = PxControllerDesc.prototype.set_volumeGrowth = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_volumeGrowth_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "volumeGrowth", { get: PxControllerDesc.prototype.get_volumeGrowth, set: PxControllerDesc.prototype.set_volumeGrowth });
        PxControllerDesc.prototype["get_reportCallback"] = PxControllerDesc.prototype.get_reportCallback = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerDesc_get_reportCallback_0(self2), PxUserControllerHitReport);
        };
        PxControllerDesc.prototype["set_reportCallback"] = PxControllerDesc.prototype.set_reportCallback = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_reportCallback_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "reportCallback", { get: PxControllerDesc.prototype.get_reportCallback, set: PxControllerDesc.prototype.set_reportCallback });
        PxControllerDesc.prototype["get_nonWalkableMode"] = PxControllerDesc.prototype.get_nonWalkableMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerDesc_get_nonWalkableMode_0(self2);
        };
        PxControllerDesc.prototype["set_nonWalkableMode"] = PxControllerDesc.prototype.set_nonWalkableMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_nonWalkableMode_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "nonWalkableMode", { get: PxControllerDesc.prototype.get_nonWalkableMode, set: PxControllerDesc.prototype.set_nonWalkableMode });
        PxControllerDesc.prototype["get_material"] = PxControllerDesc.prototype.get_material = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerDesc_get_material_0(self2), PxMaterial);
        };
        PxControllerDesc.prototype["set_material"] = PxControllerDesc.prototype.set_material = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_material_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "material", { get: PxControllerDesc.prototype.get_material, set: PxControllerDesc.prototype.set_material });
        PxControllerDesc.prototype["get_registerDeletionListener"] = PxControllerDesc.prototype.get_registerDeletionListener = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxControllerDesc_get_registerDeletionListener_0(self2);
        };
        PxControllerDesc.prototype["set_registerDeletionListener"] = PxControllerDesc.prototype.set_registerDeletionListener = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_registerDeletionListener_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "registerDeletionListener", { get: PxControllerDesc.prototype.get_registerDeletionListener, set: PxControllerDesc.prototype.set_registerDeletionListener });
        PxControllerDesc.prototype["get_userData"] = PxControllerDesc.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerDesc_get_userData_0(self2), VoidPtr);
        };
        PxControllerDesc.prototype["set_userData"] = PxControllerDesc.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerDesc_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxControllerDesc.prototype, "userData", { get: PxControllerDesc.prototype.get_userData, set: PxControllerDesc.prototype.set_userData });
        function PxControllerHit() {
          throw "cannot construct a PxControllerHit, no constructor in IDL";
        }
        PxControllerHit.prototype = Object.create(WrapperObject.prototype);
        PxControllerHit.prototype.constructor = PxControllerHit;
        PxControllerHit.prototype.__class__ = PxControllerHit;
        PxControllerHit.__cache__ = {};
        Module["PxControllerHit"] = PxControllerHit;
        PxControllerHit.prototype["get_controller"] = PxControllerHit.prototype.get_controller = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerHit_get_controller_0(self2), PxController);
        };
        PxControllerHit.prototype["set_controller"] = PxControllerHit.prototype.set_controller = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerHit_set_controller_1(self2, arg0);
        };
        Object.defineProperty(PxControllerHit.prototype, "controller", { get: PxControllerHit.prototype.get_controller, set: PxControllerHit.prototype.set_controller });
        PxControllerHit.prototype["get_worldPos"] = PxControllerHit.prototype.get_worldPos = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerHit_get_worldPos_0(self2), PxExtendedVec3);
        };
        PxControllerHit.prototype["set_worldPos"] = PxControllerHit.prototype.set_worldPos = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerHit_set_worldPos_1(self2, arg0);
        };
        Object.defineProperty(PxControllerHit.prototype, "worldPos", { get: PxControllerHit.prototype.get_worldPos, set: PxControllerHit.prototype.set_worldPos });
        PxControllerHit.prototype["get_worldNormal"] = PxControllerHit.prototype.get_worldNormal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerHit_get_worldNormal_0(self2), PxVec3);
        };
        PxControllerHit.prototype["set_worldNormal"] = PxControllerHit.prototype.set_worldNormal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerHit_set_worldNormal_1(self2, arg0);
        };
        Object.defineProperty(PxControllerHit.prototype, "worldNormal", { get: PxControllerHit.prototype.get_worldNormal, set: PxControllerHit.prototype.set_worldNormal });
        PxControllerHit.prototype["get_dir"] = PxControllerHit.prototype.get_dir = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerHit_get_dir_0(self2), PxVec3);
        };
        PxControllerHit.prototype["set_dir"] = PxControllerHit.prototype.set_dir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerHit_set_dir_1(self2, arg0);
        };
        Object.defineProperty(PxControllerHit.prototype, "dir", { get: PxControllerHit.prototype.get_dir, set: PxControllerHit.prototype.set_dir });
        PxControllerHit.prototype["get_length"] = PxControllerHit.prototype.get_length = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerHit_get_length_0(self2);
        };
        PxControllerHit.prototype["set_length"] = PxControllerHit.prototype.set_length = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerHit_set_length_1(self2, arg0);
        };
        Object.defineProperty(PxControllerHit.prototype, "length", { get: PxControllerHit.prototype.get_length, set: PxControllerHit.prototype.set_length });
        PxControllerHit.prototype["__destroy__"] = PxControllerHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerHit___destroy___0(self2);
        };
        function PxObstacle() {
          throw "cannot construct a PxObstacle, no constructor in IDL";
        }
        PxObstacle.prototype = Object.create(WrapperObject.prototype);
        PxObstacle.prototype.constructor = PxObstacle;
        PxObstacle.prototype.__class__ = PxObstacle;
        PxObstacle.__cache__ = {};
        Module["PxObstacle"] = PxObstacle;
        PxObstacle.prototype["getType"] = PxObstacle.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxObstacle_getType_0(self2);
        };
        ;
        PxObstacle.prototype["get_mUserData"] = PxObstacle.prototype.get_mUserData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxObstacle_get_mUserData_0(self2), VoidPtr);
        };
        PxObstacle.prototype["set_mUserData"] = PxObstacle.prototype.set_mUserData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxObstacle_set_mUserData_1(self2, arg0);
        };
        Object.defineProperty(PxObstacle.prototype, "mUserData", { get: PxObstacle.prototype.get_mUserData, set: PxObstacle.prototype.set_mUserData });
        PxObstacle.prototype["get_mPos"] = PxObstacle.prototype.get_mPos = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxObstacle_get_mPos_0(self2), PxExtendedVec3);
        };
        PxObstacle.prototype["set_mPos"] = PxObstacle.prototype.set_mPos = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxObstacle_set_mPos_1(self2, arg0);
        };
        Object.defineProperty(PxObstacle.prototype, "mPos", { get: PxObstacle.prototype.get_mPos, set: PxObstacle.prototype.set_mPos });
        PxObstacle.prototype["get_mRot"] = PxObstacle.prototype.get_mRot = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxObstacle_get_mRot_0(self2), PxQuat);
        };
        PxObstacle.prototype["set_mRot"] = PxObstacle.prototype.set_mRot = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxObstacle_set_mRot_1(self2, arg0);
        };
        Object.defineProperty(PxObstacle.prototype, "mRot", { get: PxObstacle.prototype.get_mRot, set: PxObstacle.prototype.set_mRot });
        PxObstacle.prototype["__destroy__"] = PxObstacle.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxObstacle___destroy___0(self2);
        };
        function PxUserControllerHitReport() {
          throw "cannot construct a PxUserControllerHitReport, no constructor in IDL";
        }
        PxUserControllerHitReport.prototype = Object.create(WrapperObject.prototype);
        PxUserControllerHitReport.prototype.constructor = PxUserControllerHitReport;
        PxUserControllerHitReport.prototype.__class__ = PxUserControllerHitReport;
        PxUserControllerHitReport.__cache__ = {};
        Module["PxUserControllerHitReport"] = PxUserControllerHitReport;
        PxUserControllerHitReport.prototype["onShapeHit"] = PxUserControllerHitReport.prototype.onShapeHit = function(hit) {
          var self2 = this.ptr;
          if (hit && typeof hit === "object")
            hit = hit.ptr;
          _emscripten_bind_PxUserControllerHitReport_onShapeHit_1(self2, hit);
        };
        ;
        PxUserControllerHitReport.prototype["onControllerHit"] = PxUserControllerHitReport.prototype.onControllerHit = function(hit) {
          var self2 = this.ptr;
          if (hit && typeof hit === "object")
            hit = hit.ptr;
          _emscripten_bind_PxUserControllerHitReport_onControllerHit_1(self2, hit);
        };
        ;
        PxUserControllerHitReport.prototype["onObstacleHit"] = PxUserControllerHitReport.prototype.onObstacleHit = function(hit) {
          var self2 = this.ptr;
          if (hit && typeof hit === "object")
            hit = hit.ptr;
          _emscripten_bind_PxUserControllerHitReport_onObstacleHit_1(self2, hit);
        };
        ;
        function PxU8ConstPtr() {
          throw "cannot construct a PxU8ConstPtr, no constructor in IDL";
        }
        PxU8ConstPtr.prototype = Object.create(WrapperObject.prototype);
        PxU8ConstPtr.prototype.constructor = PxU8ConstPtr;
        PxU8ConstPtr.prototype.__class__ = PxU8ConstPtr;
        PxU8ConstPtr.__cache__ = {};
        Module["PxU8ConstPtr"] = PxU8ConstPtr;
        PxU8ConstPtr.prototype["__destroy__"] = PxU8ConstPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxU8ConstPtr___destroy___0(self2);
        };
        function PxU16ConstPtr() {
          throw "cannot construct a PxU16ConstPtr, no constructor in IDL";
        }
        PxU16ConstPtr.prototype = Object.create(WrapperObject.prototype);
        PxU16ConstPtr.prototype.constructor = PxU16ConstPtr;
        PxU16ConstPtr.prototype.__class__ = PxU16ConstPtr;
        PxU16ConstPtr.__cache__ = {};
        Module["PxU16ConstPtr"] = PxU16ConstPtr;
        PxU16ConstPtr.prototype["__destroy__"] = PxU16ConstPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxU16ConstPtr___destroy___0(self2);
        };
        function PxU32ConstPtr() {
          throw "cannot construct a PxU32ConstPtr, no constructor in IDL";
        }
        PxU32ConstPtr.prototype = Object.create(WrapperObject.prototype);
        PxU32ConstPtr.prototype.constructor = PxU32ConstPtr;
        PxU32ConstPtr.prototype.__class__ = PxU32ConstPtr;
        PxU32ConstPtr.__cache__ = {};
        Module["PxU32ConstPtr"] = PxU32ConstPtr;
        PxU32ConstPtr.prototype["__destroy__"] = PxU32ConstPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxU32ConstPtr___destroy___0(self2);
        };
        function SimplePvdTransport() {
          throw "cannot construct a SimplePvdTransport, no constructor in IDL";
        }
        SimplePvdTransport.prototype = Object.create(PxPvdTransport.prototype);
        SimplePvdTransport.prototype.constructor = SimplePvdTransport;
        SimplePvdTransport.prototype.__class__ = SimplePvdTransport;
        SimplePvdTransport.__cache__ = {};
        Module["SimplePvdTransport"] = SimplePvdTransport;
        SimplePvdTransport.prototype["connect"] = SimplePvdTransport.prototype.connect = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_SimplePvdTransport_connect_0(self2);
        };
        ;
        SimplePvdTransport.prototype["send"] = SimplePvdTransport.prototype.send = function(inBytes, inLength) {
          var self2 = this.ptr;
          if (inBytes && typeof inBytes === "object")
            inBytes = inBytes.ptr;
          if (inLength && typeof inLength === "object")
            inLength = inLength.ptr;
          _emscripten_bind_SimplePvdTransport_send_2(self2, inBytes, inLength);
        };
        ;
        SimplePvdTransport.prototype["disconnect"] = SimplePvdTransport.prototype.disconnect = function() {
          var self2 = this.ptr;
          _emscripten_bind_SimplePvdTransport_disconnect_0(self2);
        };
        ;
        SimplePvdTransport.prototype["isConnected"] = SimplePvdTransport.prototype.isConnected = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_SimplePvdTransport_isConnected_0(self2);
        };
        ;
        SimplePvdTransport.prototype["__destroy__"] = SimplePvdTransport.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_SimplePvdTransport___destroy___0(self2);
        };
        function VoidPtr() {
          throw "cannot construct a VoidPtr, no constructor in IDL";
        }
        VoidPtr.prototype = Object.create(WrapperObject.prototype);
        VoidPtr.prototype.constructor = VoidPtr;
        VoidPtr.prototype.__class__ = VoidPtr;
        VoidPtr.__cache__ = {};
        Module["VoidPtr"] = VoidPtr;
        VoidPtr.prototype["__destroy__"] = VoidPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_VoidPtr___destroy___0(self2);
        };
        function PxTopLevelFunctions() {
          throw "cannot construct a PxTopLevelFunctions, no constructor in IDL";
        }
        PxTopLevelFunctions.prototype = Object.create(WrapperObject.prototype);
        PxTopLevelFunctions.prototype.constructor = PxTopLevelFunctions;
        PxTopLevelFunctions.prototype.__class__ = PxTopLevelFunctions;
        PxTopLevelFunctions.__cache__ = {};
        Module["PxTopLevelFunctions"] = PxTopLevelFunctions;
        PxTopLevelFunctions.prototype["DefaultFilterShader"] = PxTopLevelFunctions.prototype.DefaultFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_DefaultFilterShader_0(self2), PxSimulationFilterShader);
        };
        ;
        PxTopLevelFunctions.prototype["CreateControllerManager"] = PxTopLevelFunctions.prototype.CreateControllerManager = function(scene, lockingEnabled) {
          var self2 = this.ptr;
          if (scene && typeof scene === "object")
            scene = scene.ptr;
          if (lockingEnabled && typeof lockingEnabled === "object")
            lockingEnabled = lockingEnabled.ptr;
          if (lockingEnabled === void 0) {
            return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreateControllerManager_1(self2, scene), PxControllerManager);
          }
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreateControllerManager_2(self2, scene, lockingEnabled), PxControllerManager);
        };
        ;
        PxTopLevelFunctions.prototype["CreateCooking"] = PxTopLevelFunctions.prototype.CreateCooking = function(version, foundation, scale) {
          var self2 = this.ptr;
          if (version && typeof version === "object")
            version = version.ptr;
          if (foundation && typeof foundation === "object")
            foundation = foundation.ptr;
          if (scale && typeof scale === "object")
            scale = scale.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreateCooking_3(self2, version, foundation, scale), PxCooking);
        };
        ;
        PxTopLevelFunctions.prototype["CreateFoundation"] = PxTopLevelFunctions.prototype.CreateFoundation = function(version, allocator, errorCallback) {
          var self2 = this.ptr;
          if (version && typeof version === "object")
            version = version.ptr;
          if (allocator && typeof allocator === "object")
            allocator = allocator.ptr;
          if (errorCallback && typeof errorCallback === "object")
            errorCallback = errorCallback.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreateFoundation_3(self2, version, allocator, errorCallback), PxFoundation);
        };
        ;
        PxTopLevelFunctions.prototype["CreatePhysics"] = PxTopLevelFunctions.prototype.CreatePhysics = function(version, foundation, params, pvd) {
          var self2 = this.ptr;
          if (version && typeof version === "object")
            version = version.ptr;
          if (foundation && typeof foundation === "object")
            foundation = foundation.ptr;
          if (params && typeof params === "object")
            params = params.ptr;
          if (pvd && typeof pvd === "object")
            pvd = pvd.ptr;
          if (pvd === void 0) {
            return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreatePhysics_3(self2, version, foundation, params), PxPhysics);
          }
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreatePhysics_4(self2, version, foundation, params, pvd), PxPhysics);
        };
        ;
        PxTopLevelFunctions.prototype["DefaultCpuDispatcherCreate"] = PxTopLevelFunctions.prototype.DefaultCpuDispatcherCreate = function(numThreads) {
          var self2 = this.ptr;
          if (numThreads && typeof numThreads === "object")
            numThreads = numThreads.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_DefaultCpuDispatcherCreate_1(self2, numThreads), PxDefaultCpuDispatcher);
        };
        ;
        PxTopLevelFunctions.prototype["InitExtensions"] = PxTopLevelFunctions.prototype.InitExtensions = function(physics) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          return !!_emscripten_bind_PxTopLevelFunctions_InitExtensions_1(self2, physics);
        };
        ;
        PxTopLevelFunctions.prototype["CreateCudaContextManager"] = PxTopLevelFunctions.prototype.CreateCudaContextManager = function(foundation, desc) {
          var self2 = this.ptr;
          if (foundation && typeof foundation === "object")
            foundation = foundation.ptr;
          if (desc && typeof desc === "object")
            desc = desc.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreateCudaContextManager_2(self2, foundation, desc), PxCudaContextManager);
        };
        ;
        PxTopLevelFunctions.prototype["CreatePvd"] = PxTopLevelFunctions.prototype.CreatePvd = function(foundation) {
          var self2 = this.ptr;
          if (foundation && typeof foundation === "object")
            foundation = foundation.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_CreatePvd_1(self2, foundation), PxPvd);
        };
        ;
        PxTopLevelFunctions.prototype["D6JointCreate"] = PxTopLevelFunctions.prototype.D6JointCreate = function(physics, actor0, localFrame0, actor1, localFrame1) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (localFrame0 && typeof localFrame0 === "object")
            localFrame0 = localFrame0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          if (localFrame1 && typeof localFrame1 === "object")
            localFrame1 = localFrame1.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_D6JointCreate_5(self2, physics, actor0, localFrame0, actor1, localFrame1), PxD6Joint);
        };
        ;
        PxTopLevelFunctions.prototype["DistanceJointCreate"] = PxTopLevelFunctions.prototype.DistanceJointCreate = function(physics, actor0, localFrame0, actor1, localFrame1) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (localFrame0 && typeof localFrame0 === "object")
            localFrame0 = localFrame0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          if (localFrame1 && typeof localFrame1 === "object")
            localFrame1 = localFrame1.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_DistanceJointCreate_5(self2, physics, actor0, localFrame0, actor1, localFrame1), PxDistanceJoint);
        };
        ;
        PxTopLevelFunctions.prototype["FixedJointCreate"] = PxTopLevelFunctions.prototype.FixedJointCreate = function(physics, actor0, localFrame0, actor1, localFrame1) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (localFrame0 && typeof localFrame0 === "object")
            localFrame0 = localFrame0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          if (localFrame1 && typeof localFrame1 === "object")
            localFrame1 = localFrame1.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_FixedJointCreate_5(self2, physics, actor0, localFrame0, actor1, localFrame1), PxFixedJoint);
        };
        ;
        PxTopLevelFunctions.prototype["PrismaticJointCreate"] = PxTopLevelFunctions.prototype.PrismaticJointCreate = function(physics, actor0, localFrame0, actor1, localFrame1) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (localFrame0 && typeof localFrame0 === "object")
            localFrame0 = localFrame0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          if (localFrame1 && typeof localFrame1 === "object")
            localFrame1 = localFrame1.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_PrismaticJointCreate_5(self2, physics, actor0, localFrame0, actor1, localFrame1), PxPrismaticJoint);
        };
        ;
        PxTopLevelFunctions.prototype["RevoluteJointCreate"] = PxTopLevelFunctions.prototype.RevoluteJointCreate = function(physics, actor0, localFrame0, actor1, localFrame1) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (localFrame0 && typeof localFrame0 === "object")
            localFrame0 = localFrame0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          if (localFrame1 && typeof localFrame1 === "object")
            localFrame1 = localFrame1.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_RevoluteJointCreate_5(self2, physics, actor0, localFrame0, actor1, localFrame1), PxRevoluteJoint);
        };
        ;
        PxTopLevelFunctions.prototype["SphericalJointCreate"] = PxTopLevelFunctions.prototype.SphericalJointCreate = function(physics, actor0, localFrame0, actor1, localFrame1) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (localFrame0 && typeof localFrame0 === "object")
            localFrame0 = localFrame0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          if (localFrame1 && typeof localFrame1 === "object")
            localFrame1 = localFrame1.ptr;
          return wrapPointer(_emscripten_bind_PxTopLevelFunctions_SphericalJointCreate_5(self2, physics, actor0, localFrame0, actor1, localFrame1), PxSphericalJoint);
        };
        ;
        PxTopLevelFunctions.prototype["get_PHYSICS_VERSION"] = PxTopLevelFunctions.prototype.get_PHYSICS_VERSION = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTopLevelFunctions_get_PHYSICS_VERSION_0(self2);
        };
        Object.defineProperty(PxTopLevelFunctions.prototype, "PHYSICS_VERSION", { get: PxTopLevelFunctions.prototype.get_PHYSICS_VERSION });
        PxTopLevelFunctions.prototype["__destroy__"] = PxTopLevelFunctions.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTopLevelFunctions___destroy___0(self2);
        };
        function PxActorFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxActorFlags_PxActorFlags_1(flags);
          getCache(PxActorFlags)[this.ptr] = this;
        }
        ;
        ;
        PxActorFlags.prototype = Object.create(WrapperObject.prototype);
        PxActorFlags.prototype.constructor = PxActorFlags;
        PxActorFlags.prototype.__class__ = PxActorFlags;
        PxActorFlags.__cache__ = {};
        Module["PxActorFlags"] = PxActorFlags;
        PxActorFlags.prototype["isSet"] = PxActorFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxActorFlags_isSet_1(self2, flag);
        };
        ;
        PxActorFlags.prototype["set"] = PxActorFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxActorFlags_set_1(self2, flag);
        };
        ;
        PxActorFlags.prototype["clear"] = PxActorFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxActorFlags_clear_1(self2, flag);
        };
        ;
        PxActorFlags.prototype["__destroy__"] = PxActorFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxActorFlags___destroy___0(self2);
        };
        function PxActorTypeFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxActorTypeFlags_PxActorTypeFlags_1(flags);
          getCache(PxActorTypeFlags)[this.ptr] = this;
        }
        ;
        ;
        PxActorTypeFlags.prototype = Object.create(WrapperObject.prototype);
        PxActorTypeFlags.prototype.constructor = PxActorTypeFlags;
        PxActorTypeFlags.prototype.__class__ = PxActorTypeFlags;
        PxActorTypeFlags.__cache__ = {};
        Module["PxActorTypeFlags"] = PxActorTypeFlags;
        PxActorTypeFlags.prototype["isSet"] = PxActorTypeFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxActorTypeFlags_isSet_1(self2, flag);
        };
        ;
        PxActorTypeFlags.prototype["set"] = PxActorTypeFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxActorTypeFlags_set_1(self2, flag);
        };
        ;
        PxActorTypeFlags.prototype["clear"] = PxActorTypeFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxActorTypeFlags_clear_1(self2, flag);
        };
        ;
        PxActorTypeFlags.prototype["__destroy__"] = PxActorTypeFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxActorTypeFlags___destroy___0(self2);
        };
        function PxAggregate() {
          throw "cannot construct a PxAggregate, no constructor in IDL";
        }
        PxAggregate.prototype = Object.create(PxBase.prototype);
        PxAggregate.prototype.constructor = PxAggregate;
        PxAggregate.prototype.__class__ = PxAggregate;
        PxAggregate.__cache__ = {};
        Module["PxAggregate"] = PxAggregate;
        PxAggregate.prototype["addActor"] = PxAggregate.prototype.addActor = function(actor, bvhStructure) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (bvhStructure && typeof bvhStructure === "object")
            bvhStructure = bvhStructure.ptr;
          if (bvhStructure === void 0) {
            return !!_emscripten_bind_PxAggregate_addActor_1(self2, actor);
          }
          return !!_emscripten_bind_PxAggregate_addActor_2(self2, actor, bvhStructure);
        };
        ;
        PxAggregate.prototype["removeActor"] = PxAggregate.prototype.removeActor = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          return !!_emscripten_bind_PxAggregate_removeActor_1(self2, actor);
        };
        ;
        PxAggregate.prototype["addArticulation"] = PxAggregate.prototype.addArticulation = function(articulation) {
          var self2 = this.ptr;
          if (articulation && typeof articulation === "object")
            articulation = articulation.ptr;
          return !!_emscripten_bind_PxAggregate_addArticulation_1(self2, articulation);
        };
        ;
        PxAggregate.prototype["removeArticulation"] = PxAggregate.prototype.removeArticulation = function(articulation) {
          var self2 = this.ptr;
          if (articulation && typeof articulation === "object")
            articulation = articulation.ptr;
          return !!_emscripten_bind_PxAggregate_removeArticulation_1(self2, articulation);
        };
        ;
        PxAggregate.prototype["getNbActors"] = PxAggregate.prototype.getNbActors = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxAggregate_getNbActors_0(self2);
        };
        ;
        PxAggregate.prototype["getMaxNbActors"] = PxAggregate.prototype.getMaxNbActors = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxAggregate_getMaxNbActors_0(self2);
        };
        ;
        PxAggregate.prototype["getScene"] = PxAggregate.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxAggregate_getScene_0(self2), PxScene);
        };
        ;
        PxAggregate.prototype["getSelfCollision"] = PxAggregate.prototype.getSelfCollision = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxAggregate_getSelfCollision_0(self2);
        };
        ;
        PxAggregate.prototype["release"] = PxAggregate.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxAggregate_release_0(self2);
        };
        ;
        PxAggregate.prototype["getConcreteTypeName"] = PxAggregate.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxAggregate_getConcreteTypeName_0(self2));
        };
        ;
        PxAggregate.prototype["getConcreteType"] = PxAggregate.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxAggregate_getConcreteType_0(self2);
        };
        ;
        PxAggregate.prototype["setBaseFlag"] = PxAggregate.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxAggregate_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxAggregate.prototype["setBaseFlags"] = PxAggregate.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxAggregate_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxAggregate.prototype["getBaseFlags"] = PxAggregate.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxAggregate_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxAggregate.prototype["isReleasable"] = PxAggregate.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxAggregate_isReleasable_0(self2);
        };
        ;
        function PxArticulation() {
          throw "cannot construct a PxArticulation, no constructor in IDL";
        }
        PxArticulation.prototype = Object.create(PxArticulationBase.prototype);
        PxArticulation.prototype.constructor = PxArticulation;
        PxArticulation.prototype.__class__ = PxArticulation;
        PxArticulation.__cache__ = {};
        Module["PxArticulation"] = PxArticulation;
        PxArticulation.prototype["setMaxProjectionIterations"] = PxArticulation.prototype.setMaxProjectionIterations = function(iterations) {
          var self2 = this.ptr;
          if (iterations && typeof iterations === "object")
            iterations = iterations.ptr;
          _emscripten_bind_PxArticulation_setMaxProjectionIterations_1(self2, iterations);
        };
        ;
        PxArticulation.prototype["getMaxProjectionIterations"] = PxArticulation.prototype.getMaxProjectionIterations = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getMaxProjectionIterations_0(self2);
        };
        ;
        PxArticulation.prototype["setSeparationTolerance"] = PxArticulation.prototype.setSeparationTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxArticulation_setSeparationTolerance_1(self2, tolerance);
        };
        ;
        PxArticulation.prototype["getSeparationTolerance"] = PxArticulation.prototype.getSeparationTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getSeparationTolerance_0(self2);
        };
        ;
        PxArticulation.prototype["setInternalDriveIterations"] = PxArticulation.prototype.setInternalDriveIterations = function(iterations) {
          var self2 = this.ptr;
          if (iterations && typeof iterations === "object")
            iterations = iterations.ptr;
          _emscripten_bind_PxArticulation_setInternalDriveIterations_1(self2, iterations);
        };
        ;
        PxArticulation.prototype["getInternalDriveIterations"] = PxArticulation.prototype.getInternalDriveIterations = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getInternalDriveIterations_0(self2);
        };
        ;
        PxArticulation.prototype["setExternalDriveIterations"] = PxArticulation.prototype.setExternalDriveIterations = function(iterations) {
          var self2 = this.ptr;
          if (iterations && typeof iterations === "object")
            iterations = iterations.ptr;
          _emscripten_bind_PxArticulation_setExternalDriveIterations_1(self2, iterations);
        };
        ;
        PxArticulation.prototype["getExternalDriveIterations"] = PxArticulation.prototype.getExternalDriveIterations = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getExternalDriveIterations_0(self2);
        };
        ;
        PxArticulation.prototype["createDriveCache"] = PxArticulation.prototype.createDriveCache = function(compliance, driveIterations) {
          var self2 = this.ptr;
          if (compliance && typeof compliance === "object")
            compliance = compliance.ptr;
          if (driveIterations && typeof driveIterations === "object")
            driveIterations = driveIterations.ptr;
          return wrapPointer(_emscripten_bind_PxArticulation_createDriveCache_2(self2, compliance, driveIterations), PxArticulationDriveCache);
        };
        ;
        PxArticulation.prototype["updateDriveCache"] = PxArticulation.prototype.updateDriveCache = function(driveCache, compliance, driveIterations) {
          var self2 = this.ptr;
          if (driveCache && typeof driveCache === "object")
            driveCache = driveCache.ptr;
          if (compliance && typeof compliance === "object")
            compliance = compliance.ptr;
          if (driveIterations && typeof driveIterations === "object")
            driveIterations = driveIterations.ptr;
          _emscripten_bind_PxArticulation_updateDriveCache_3(self2, driveCache, compliance, driveIterations);
        };
        ;
        PxArticulation.prototype["releaseDriveCache"] = PxArticulation.prototype.releaseDriveCache = function(driveCache) {
          var self2 = this.ptr;
          if (driveCache && typeof driveCache === "object")
            driveCache = driveCache.ptr;
          _emscripten_bind_PxArticulation_releaseDriveCache_1(self2, driveCache);
        };
        ;
        PxArticulation.prototype["applyImpulse"] = PxArticulation.prototype.applyImpulse = function(link, driveCache, linearImpulse, angularImpulse) {
          var self2 = this.ptr;
          if (link && typeof link === "object")
            link = link.ptr;
          if (driveCache && typeof driveCache === "object")
            driveCache = driveCache.ptr;
          if (linearImpulse && typeof linearImpulse === "object")
            linearImpulse = linearImpulse.ptr;
          if (angularImpulse && typeof angularImpulse === "object")
            angularImpulse = angularImpulse.ptr;
          _emscripten_bind_PxArticulation_applyImpulse_4(self2, link, driveCache, linearImpulse, angularImpulse);
        };
        ;
        PxArticulation.prototype["computeImpulseResponse"] = PxArticulation.prototype.computeImpulseResponse = function(link, linearResponse, angularResponse, driveCache, linearImpulse, angularImpulse) {
          var self2 = this.ptr;
          if (link && typeof link === "object")
            link = link.ptr;
          if (linearResponse && typeof linearResponse === "object")
            linearResponse = linearResponse.ptr;
          if (angularResponse && typeof angularResponse === "object")
            angularResponse = angularResponse.ptr;
          if (driveCache && typeof driveCache === "object")
            driveCache = driveCache.ptr;
          if (linearImpulse && typeof linearImpulse === "object")
            linearImpulse = linearImpulse.ptr;
          if (angularImpulse && typeof angularImpulse === "object")
            angularImpulse = angularImpulse.ptr;
          _emscripten_bind_PxArticulation_computeImpulseResponse_6(self2, link, linearResponse, angularResponse, driveCache, linearImpulse, angularImpulse);
        };
        ;
        PxArticulation.prototype["getScene"] = PxArticulation.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulation_getScene_0(self2), PxScene);
        };
        ;
        PxArticulation.prototype["setSolverIterationCounts"] = PxArticulation.prototype.setSolverIterationCounts = function(minPositionIters, minVelocityIters) {
          var self2 = this.ptr;
          if (minPositionIters && typeof minPositionIters === "object")
            minPositionIters = minPositionIters.ptr;
          if (minVelocityIters && typeof minVelocityIters === "object")
            minVelocityIters = minVelocityIters.ptr;
          _emscripten_bind_PxArticulation_setSolverIterationCounts_2(self2, minPositionIters, minVelocityIters);
        };
        ;
        PxArticulation.prototype["isSleeping"] = PxArticulation.prototype.isSleeping = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulation_isSleeping_0(self2);
        };
        ;
        PxArticulation.prototype["setSleepThreshold"] = PxArticulation.prototype.setSleepThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxArticulation_setSleepThreshold_1(self2, threshold);
        };
        ;
        PxArticulation.prototype["getSleepThreshold"] = PxArticulation.prototype.getSleepThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getSleepThreshold_0(self2);
        };
        ;
        PxArticulation.prototype["setStabilizationThreshold"] = PxArticulation.prototype.setStabilizationThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxArticulation_setStabilizationThreshold_1(self2, threshold);
        };
        ;
        PxArticulation.prototype["getStabilizationThreshold"] = PxArticulation.prototype.getStabilizationThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getStabilizationThreshold_0(self2);
        };
        ;
        PxArticulation.prototype["setWakeCounter"] = PxArticulation.prototype.setWakeCounter = function(wakeCounterValue) {
          var self2 = this.ptr;
          if (wakeCounterValue && typeof wakeCounterValue === "object")
            wakeCounterValue = wakeCounterValue.ptr;
          _emscripten_bind_PxArticulation_setWakeCounter_1(self2, wakeCounterValue);
        };
        ;
        PxArticulation.prototype["getWakeCounter"] = PxArticulation.prototype.getWakeCounter = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getWakeCounter_0(self2);
        };
        ;
        PxArticulation.prototype["wakeUp"] = PxArticulation.prototype.wakeUp = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulation_wakeUp_0(self2);
        };
        ;
        PxArticulation.prototype["putToSleep"] = PxArticulation.prototype.putToSleep = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulation_putToSleep_0(self2);
        };
        ;
        PxArticulation.prototype["createLink"] = PxArticulation.prototype.createLink = function(parent, pose) {
          var self2 = this.ptr;
          if (parent && typeof parent === "object")
            parent = parent.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          return wrapPointer(_emscripten_bind_PxArticulation_createLink_2(self2, parent, pose), PxArticulationLink);
        };
        ;
        PxArticulation.prototype["getNbLinks"] = PxArticulation.prototype.getNbLinks = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getNbLinks_0(self2);
        };
        ;
        PxArticulation.prototype["setName"] = PxArticulation.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxArticulation_setName_1(self2, name);
        };
        ;
        PxArticulation.prototype["getName"] = PxArticulation.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulation_getName_0(self2));
        };
        ;
        PxArticulation.prototype["getWorldBounds"] = PxArticulation.prototype.getWorldBounds = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulation_getWorldBounds_0(self2), PxBounds3);
        };
        ;
        PxArticulation.prototype["getAggregate"] = PxArticulation.prototype.getAggregate = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulation_getAggregate_0(self2), PxAggregate);
        };
        ;
        PxArticulation.prototype["release"] = PxArticulation.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulation_release_0(self2);
        };
        ;
        PxArticulation.prototype["getConcreteTypeName"] = PxArticulation.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulation_getConcreteTypeName_0(self2));
        };
        ;
        PxArticulation.prototype["getConcreteType"] = PxArticulation.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulation_getConcreteType_0(self2);
        };
        ;
        PxArticulation.prototype["setBaseFlag"] = PxArticulation.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulation_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxArticulation.prototype["setBaseFlags"] = PxArticulation.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulation_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxArticulation.prototype["getBaseFlags"] = PxArticulation.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulation_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxArticulation.prototype["isReleasable"] = PxArticulation.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulation_isReleasable_0(self2);
        };
        ;
        function PxArticulationCache() {
          throw "cannot construct a PxArticulationCache, no constructor in IDL";
        }
        PxArticulationCache.prototype = Object.create(WrapperObject.prototype);
        PxArticulationCache.prototype.constructor = PxArticulationCache;
        PxArticulationCache.prototype.__class__ = PxArticulationCache;
        PxArticulationCache.__cache__ = {};
        Module["PxArticulationCache"] = PxArticulationCache;
        function PxArticulationCacheFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxArticulationCacheFlags_PxArticulationCacheFlags_1(flags);
          getCache(PxArticulationCacheFlags)[this.ptr] = this;
        }
        ;
        ;
        PxArticulationCacheFlags.prototype = Object.create(WrapperObject.prototype);
        PxArticulationCacheFlags.prototype.constructor = PxArticulationCacheFlags;
        PxArticulationCacheFlags.prototype.__class__ = PxArticulationCacheFlags;
        PxArticulationCacheFlags.__cache__ = {};
        Module["PxArticulationCacheFlags"] = PxArticulationCacheFlags;
        PxArticulationCacheFlags.prototype["isSet"] = PxArticulationCacheFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxArticulationCacheFlags_isSet_1(self2, flag);
        };
        ;
        PxArticulationCacheFlags.prototype["set"] = PxArticulationCacheFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxArticulationCacheFlags_set_1(self2, flag);
        };
        ;
        PxArticulationCacheFlags.prototype["clear"] = PxArticulationCacheFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxArticulationCacheFlags_clear_1(self2, flag);
        };
        ;
        PxArticulationCacheFlags.prototype["__destroy__"] = PxArticulationCacheFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationCacheFlags___destroy___0(self2);
        };
        function PxArticulationDriveCache() {
          throw "cannot construct a PxArticulationDriveCache, no constructor in IDL";
        }
        PxArticulationDriveCache.prototype = Object.create(WrapperObject.prototype);
        PxArticulationDriveCache.prototype.constructor = PxArticulationDriveCache;
        PxArticulationDriveCache.prototype.__class__ = PxArticulationDriveCache;
        PxArticulationDriveCache.__cache__ = {};
        Module["PxArticulationDriveCache"] = PxArticulationDriveCache;
        function PxArticulationFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxArticulationFlags_PxArticulationFlags_1(flags);
          getCache(PxArticulationFlags)[this.ptr] = this;
        }
        ;
        ;
        PxArticulationFlags.prototype = Object.create(WrapperObject.prototype);
        PxArticulationFlags.prototype.constructor = PxArticulationFlags;
        PxArticulationFlags.prototype.__class__ = PxArticulationFlags;
        PxArticulationFlags.__cache__ = {};
        Module["PxArticulationFlags"] = PxArticulationFlags;
        PxArticulationFlags.prototype["isSet"] = PxArticulationFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxArticulationFlags_isSet_1(self2, flag);
        };
        ;
        PxArticulationFlags.prototype["set"] = PxArticulationFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxArticulationFlags_set_1(self2, flag);
        };
        ;
        PxArticulationFlags.prototype["clear"] = PxArticulationFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxArticulationFlags_clear_1(self2, flag);
        };
        ;
        PxArticulationFlags.prototype["__destroy__"] = PxArticulationFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationFlags___destroy___0(self2);
        };
        function PxArticulationJoint() {
          throw "cannot construct a PxArticulationJoint, no constructor in IDL";
        }
        PxArticulationJoint.prototype = Object.create(PxArticulationJointBase.prototype);
        PxArticulationJoint.prototype.constructor = PxArticulationJoint;
        PxArticulationJoint.prototype.__class__ = PxArticulationJoint;
        PxArticulationJoint.__cache__ = {};
        Module["PxArticulationJoint"] = PxArticulationJoint;
        PxArticulationJoint.prototype["setTargetOrientation"] = PxArticulationJoint.prototype.setTargetOrientation = function(orientation) {
          var self2 = this.ptr;
          if (orientation && typeof orientation === "object")
            orientation = orientation.ptr;
          _emscripten_bind_PxArticulationJoint_setTargetOrientation_1(self2, orientation);
        };
        ;
        PxArticulationJoint.prototype["getTargetOrientation"] = PxArticulationJoint.prototype.getTargetOrientation = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJoint_getTargetOrientation_0(self2), PxQuat);
        };
        ;
        PxArticulationJoint.prototype["setTargetVelocity"] = PxArticulationJoint.prototype.setTargetVelocity = function(velocity) {
          var self2 = this.ptr;
          if (velocity && typeof velocity === "object")
            velocity = velocity.ptr;
          _emscripten_bind_PxArticulationJoint_setTargetVelocity_1(self2, velocity);
        };
        ;
        PxArticulationJoint.prototype["getTargetVelocity"] = PxArticulationJoint.prototype.getTargetVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJoint_getTargetVelocity_0(self2), PxVec3);
        };
        ;
        PxArticulationJoint.prototype["setDriveType"] = PxArticulationJoint.prototype.setDriveType = function(driveType) {
          var self2 = this.ptr;
          if (driveType && typeof driveType === "object")
            driveType = driveType.ptr;
          _emscripten_bind_PxArticulationJoint_setDriveType_1(self2, driveType);
        };
        ;
        PxArticulationJoint.prototype["getDriveType"] = PxArticulationJoint.prototype.getDriveType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getDriveType_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setStiffness"] = PxArticulationJoint.prototype.setStiffness = function(spring) {
          var self2 = this.ptr;
          if (spring && typeof spring === "object")
            spring = spring.ptr;
          _emscripten_bind_PxArticulationJoint_setStiffness_1(self2, spring);
        };
        ;
        PxArticulationJoint.prototype["getStiffness"] = PxArticulationJoint.prototype.getStiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getStiffness_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setDamping"] = PxArticulationJoint.prototype.setDamping = function(damping) {
          var self2 = this.ptr;
          if (damping && typeof damping === "object")
            damping = damping.ptr;
          _emscripten_bind_PxArticulationJoint_setDamping_1(self2, damping);
        };
        ;
        PxArticulationJoint.prototype["getDamping"] = PxArticulationJoint.prototype.getDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getDamping_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setInternalCompliance"] = PxArticulationJoint.prototype.setInternalCompliance = function(compliance) {
          var self2 = this.ptr;
          if (compliance && typeof compliance === "object")
            compliance = compliance.ptr;
          _emscripten_bind_PxArticulationJoint_setInternalCompliance_1(self2, compliance);
        };
        ;
        PxArticulationJoint.prototype["getInternalCompliance"] = PxArticulationJoint.prototype.getInternalCompliance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getInternalCompliance_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setExternalCompliance"] = PxArticulationJoint.prototype.setExternalCompliance = function(compliance) {
          var self2 = this.ptr;
          if (compliance && typeof compliance === "object")
            compliance = compliance.ptr;
          _emscripten_bind_PxArticulationJoint_setExternalCompliance_1(self2, compliance);
        };
        ;
        PxArticulationJoint.prototype["getExternalCompliance"] = PxArticulationJoint.prototype.getExternalCompliance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getExternalCompliance_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setSwingLimit"] = PxArticulationJoint.prototype.setSwingLimit = function(zLimit, yLimit) {
          var self2 = this.ptr;
          if (zLimit && typeof zLimit === "object")
            zLimit = zLimit.ptr;
          if (yLimit && typeof yLimit === "object")
            yLimit = yLimit.ptr;
          _emscripten_bind_PxArticulationJoint_setSwingLimit_2(self2, zLimit, yLimit);
        };
        ;
        PxArticulationJoint.prototype["setTangentialStiffness"] = PxArticulationJoint.prototype.setTangentialStiffness = function(spring) {
          var self2 = this.ptr;
          if (spring && typeof spring === "object")
            spring = spring.ptr;
          _emscripten_bind_PxArticulationJoint_setTangentialStiffness_1(self2, spring);
        };
        ;
        PxArticulationJoint.prototype["getTangentialStiffness"] = PxArticulationJoint.prototype.getTangentialStiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getTangentialStiffness_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setTangentialDamping"] = PxArticulationJoint.prototype.setTangentialDamping = function(damping) {
          var self2 = this.ptr;
          if (damping && typeof damping === "object")
            damping = damping.ptr;
          _emscripten_bind_PxArticulationJoint_setTangentialDamping_1(self2, damping);
        };
        ;
        PxArticulationJoint.prototype["getTangentialDamping"] = PxArticulationJoint.prototype.getTangentialDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getTangentialDamping_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setSwingLimitContactDistance"] = PxArticulationJoint.prototype.setSwingLimitContactDistance = function(contactDistance) {
          var self2 = this.ptr;
          if (contactDistance && typeof contactDistance === "object")
            contactDistance = contactDistance.ptr;
          _emscripten_bind_PxArticulationJoint_setSwingLimitContactDistance_1(self2, contactDistance);
        };
        ;
        PxArticulationJoint.prototype["getSwingLimitContactDistance"] = PxArticulationJoint.prototype.getSwingLimitContactDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getSwingLimitContactDistance_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setSwingLimitEnabled"] = PxArticulationJoint.prototype.setSwingLimitEnabled = function(enabled) {
          var self2 = this.ptr;
          if (enabled && typeof enabled === "object")
            enabled = enabled.ptr;
          _emscripten_bind_PxArticulationJoint_setSwingLimitEnabled_1(self2, enabled);
        };
        ;
        PxArticulationJoint.prototype["getSwingLimitEnabled"] = PxArticulationJoint.prototype.getSwingLimitEnabled = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationJoint_getSwingLimitEnabled_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setTwistLimit"] = PxArticulationJoint.prototype.setTwistLimit = function(lower, upper) {
          var self2 = this.ptr;
          if (lower && typeof lower === "object")
            lower = lower.ptr;
          if (upper && typeof upper === "object")
            upper = upper.ptr;
          _emscripten_bind_PxArticulationJoint_setTwistLimit_2(self2, lower, upper);
        };
        ;
        PxArticulationJoint.prototype["setTwistLimitEnabled"] = PxArticulationJoint.prototype.setTwistLimitEnabled = function(enabled) {
          var self2 = this.ptr;
          if (enabled && typeof enabled === "object")
            enabled = enabled.ptr;
          _emscripten_bind_PxArticulationJoint_setTwistLimitEnabled_1(self2, enabled);
        };
        ;
        PxArticulationJoint.prototype["getTwistLimitEnabled"] = PxArticulationJoint.prototype.getTwistLimitEnabled = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationJoint_getTwistLimitEnabled_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setTwistLimitContactDistance"] = PxArticulationJoint.prototype.setTwistLimitContactDistance = function(contactDistance) {
          var self2 = this.ptr;
          if (contactDistance && typeof contactDistance === "object")
            contactDistance = contactDistance.ptr;
          _emscripten_bind_PxArticulationJoint_setTwistLimitContactDistance_1(self2, contactDistance);
        };
        ;
        PxArticulationJoint.prototype["getTwistLimitContactDistance"] = PxArticulationJoint.prototype.getTwistLimitContactDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getTwistLimitContactDistance_0(self2);
        };
        ;
        PxArticulationJoint.prototype["getParentArticulationLink"] = PxArticulationJoint.prototype.getParentArticulationLink = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJoint_getParentArticulationLink_0(self2), PxArticulationLink);
        };
        ;
        PxArticulationJoint.prototype["setParentPose"] = PxArticulationJoint.prototype.setParentPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxArticulationJoint_setParentPose_1(self2, pose);
        };
        ;
        PxArticulationJoint.prototype["getParentPose"] = PxArticulationJoint.prototype.getParentPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJoint_getParentPose_0(self2), PxTransform);
        };
        ;
        PxArticulationJoint.prototype["getChildArticulationLink"] = PxArticulationJoint.prototype.getChildArticulationLink = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJoint_getChildArticulationLink_0(self2), PxArticulationLink);
        };
        ;
        PxArticulationJoint.prototype["setChildPose"] = PxArticulationJoint.prototype.setChildPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxArticulationJoint_setChildPose_1(self2, pose);
        };
        ;
        PxArticulationJoint.prototype["getChildPose"] = PxArticulationJoint.prototype.getChildPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJoint_getChildPose_0(self2), PxTransform);
        };
        ;
        PxArticulationJoint.prototype["release"] = PxArticulationJoint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationJoint_release_0(self2);
        };
        ;
        PxArticulationJoint.prototype["getConcreteTypeName"] = PxArticulationJoint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationJoint_getConcreteTypeName_0(self2));
        };
        ;
        PxArticulationJoint.prototype["getConcreteType"] = PxArticulationJoint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJoint_getConcreteType_0(self2);
        };
        ;
        PxArticulationJoint.prototype["setBaseFlag"] = PxArticulationJoint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationJoint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxArticulationJoint.prototype["setBaseFlags"] = PxArticulationJoint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulationJoint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxArticulationJoint.prototype["getBaseFlags"] = PxArticulationJoint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJoint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxArticulationJoint.prototype["isReleasable"] = PxArticulationJoint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationJoint_isReleasable_0(self2);
        };
        ;
        function PxArticulationJointReducedCoordinate() {
          throw "cannot construct a PxArticulationJointReducedCoordinate, no constructor in IDL";
        }
        PxArticulationJointReducedCoordinate.prototype = Object.create(PxArticulationJointBase.prototype);
        PxArticulationJointReducedCoordinate.prototype.constructor = PxArticulationJointReducedCoordinate;
        PxArticulationJointReducedCoordinate.prototype.__class__ = PxArticulationJointReducedCoordinate;
        PxArticulationJointReducedCoordinate.__cache__ = {};
        Module["PxArticulationJointReducedCoordinate"] = PxArticulationJointReducedCoordinate;
        PxArticulationJointReducedCoordinate.prototype["setJointType"] = PxArticulationJointReducedCoordinate.prototype.setJointType = function(jointType) {
          var self2 = this.ptr;
          if (jointType && typeof jointType === "object")
            jointType = jointType.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setJointType_1(self2, jointType);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getJointType"] = PxArticulationJointReducedCoordinate.prototype.getJointType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJointReducedCoordinate_getJointType_0(self2);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setMotion"] = PxArticulationJointReducedCoordinate.prototype.setMotion = function(axis, motion) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          if (motion && typeof motion === "object")
            motion = motion.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setMotion_2(self2, axis, motion);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getMotion"] = PxArticulationJointReducedCoordinate.prototype.getMotion = function(axis) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          return _emscripten_bind_PxArticulationJointReducedCoordinate_getMotion_1(self2, axis);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setLimit"] = PxArticulationJointReducedCoordinate.prototype.setLimit = function(axis, lowLimit, highLimit) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          if (lowLimit && typeof lowLimit === "object")
            lowLimit = lowLimit.ptr;
          if (highLimit && typeof highLimit === "object")
            highLimit = highLimit.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setLimit_3(self2, axis, lowLimit, highLimit);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setDrive"] = PxArticulationJointReducedCoordinate.prototype.setDrive = function(axis, stiffness, damping, maxForce, driveType) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          if (stiffness && typeof stiffness === "object")
            stiffness = stiffness.ptr;
          if (damping && typeof damping === "object")
            damping = damping.ptr;
          if (maxForce && typeof maxForce === "object")
            maxForce = maxForce.ptr;
          if (driveType && typeof driveType === "object")
            driveType = driveType.ptr;
          if (driveType === void 0) {
            _emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_4(self2, axis, stiffness, damping, maxForce);
            return;
          }
          _emscripten_bind_PxArticulationJointReducedCoordinate_setDrive_5(self2, axis, stiffness, damping, maxForce, driveType);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setDriveTarget"] = PxArticulationJointReducedCoordinate.prototype.setDriveTarget = function(axis, target) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          if (target && typeof target === "object")
            target = target.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setDriveTarget_2(self2, axis, target);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setDriveVelocity"] = PxArticulationJointReducedCoordinate.prototype.setDriveVelocity = function(axis, targetVel) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          if (targetVel && typeof targetVel === "object")
            targetVel = targetVel.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setDriveVelocity_2(self2, axis, targetVel);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getDriveTarget"] = PxArticulationJointReducedCoordinate.prototype.getDriveTarget = function(axis) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          return _emscripten_bind_PxArticulationJointReducedCoordinate_getDriveTarget_1(self2, axis);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getDriveVelocity"] = PxArticulationJointReducedCoordinate.prototype.getDriveVelocity = function(axis) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          return _emscripten_bind_PxArticulationJointReducedCoordinate_getDriveVelocity_1(self2, axis);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setFrictionCoefficient"] = PxArticulationJointReducedCoordinate.prototype.setFrictionCoefficient = function(coefficient) {
          var self2 = this.ptr;
          if (coefficient && typeof coefficient === "object")
            coefficient = coefficient.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setFrictionCoefficient_1(self2, coefficient);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getFrictionCoefficient"] = PxArticulationJointReducedCoordinate.prototype.getFrictionCoefficient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJointReducedCoordinate_getFrictionCoefficient_0(self2);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setMaxJointVelocity"] = PxArticulationJointReducedCoordinate.prototype.setMaxJointVelocity = function(maxJointV) {
          var self2 = this.ptr;
          if (maxJointV && typeof maxJointV === "object")
            maxJointV = maxJointV.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setMaxJointVelocity_1(self2, maxJointV);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getMaxJointVelocity"] = PxArticulationJointReducedCoordinate.prototype.getMaxJointVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJointReducedCoordinate_getMaxJointVelocity_0(self2);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getParentArticulationLink"] = PxArticulationJointReducedCoordinate.prototype.getParentArticulationLink = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointReducedCoordinate_getParentArticulationLink_0(self2), PxArticulationLink);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setParentPose"] = PxArticulationJointReducedCoordinate.prototype.setParentPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setParentPose_1(self2, pose);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getParentPose"] = PxArticulationJointReducedCoordinate.prototype.getParentPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointReducedCoordinate_getParentPose_0(self2), PxTransform);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getChildArticulationLink"] = PxArticulationJointReducedCoordinate.prototype.getChildArticulationLink = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointReducedCoordinate_getChildArticulationLink_0(self2), PxArticulationLink);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setChildPose"] = PxArticulationJointReducedCoordinate.prototype.setChildPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setChildPose_1(self2, pose);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getChildPose"] = PxArticulationJointReducedCoordinate.prototype.getChildPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointReducedCoordinate_getChildPose_0(self2), PxTransform);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["release"] = PxArticulationJointReducedCoordinate.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_release_0(self2);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getConcreteTypeName"] = PxArticulationJointReducedCoordinate.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteTypeName_0(self2));
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getConcreteType"] = PxArticulationJointReducedCoordinate.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationJointReducedCoordinate_getConcreteType_0(self2);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setBaseFlag"] = PxArticulationJointReducedCoordinate.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["setBaseFlags"] = PxArticulationJointReducedCoordinate.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulationJointReducedCoordinate_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["getBaseFlags"] = PxArticulationJointReducedCoordinate.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationJointReducedCoordinate_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxArticulationJointReducedCoordinate.prototype["isReleasable"] = PxArticulationJointReducedCoordinate.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationJointReducedCoordinate_isReleasable_0(self2);
        };
        ;
        function PxArticulationLink() {
          throw "cannot construct a PxArticulationLink, no constructor in IDL";
        }
        PxArticulationLink.prototype = Object.create(PxRigidBody.prototype);
        PxArticulationLink.prototype.constructor = PxArticulationLink;
        PxArticulationLink.prototype.__class__ = PxArticulationLink;
        PxArticulationLink.__cache__ = {};
        Module["PxArticulationLink"] = PxArticulationLink;
        PxArticulationLink.prototype["getArticulation"] = PxArticulationLink.prototype.getArticulation = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getArticulation_0(self2), PxArticulationBase);
        };
        ;
        PxArticulationLink.prototype["getInboundJoint"] = PxArticulationLink.prototype.getInboundJoint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getInboundJoint_0(self2), PxArticulationJointBase);
        };
        ;
        PxArticulationLink.prototype["getInboundJointDof"] = PxArticulationLink.prototype.getInboundJointDof = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getInboundJointDof_0(self2);
        };
        ;
        PxArticulationLink.prototype["getNbChildren"] = PxArticulationLink.prototype.getNbChildren = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getNbChildren_0(self2);
        };
        ;
        PxArticulationLink.prototype["getLinkIndex"] = PxArticulationLink.prototype.getLinkIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getLinkIndex_0(self2);
        };
        ;
        PxArticulationLink.prototype["getType"] = PxArticulationLink.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getType_0(self2);
        };
        ;
        PxArticulationLink.prototype["getScene"] = PxArticulationLink.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getScene_0(self2), PxScene);
        };
        ;
        PxArticulationLink.prototype["setName"] = PxArticulationLink.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxArticulationLink_setName_1(self2, name);
        };
        ;
        PxArticulationLink.prototype["getName"] = PxArticulationLink.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationLink_getName_0(self2));
        };
        ;
        PxArticulationLink.prototype["getWorldBounds"] = PxArticulationLink.prototype.getWorldBounds = function(inflation) {
          var self2 = this.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (inflation === void 0) {
            return wrapPointer(_emscripten_bind_PxArticulationLink_getWorldBounds_0(self2), PxBounds3);
          }
          return wrapPointer(_emscripten_bind_PxArticulationLink_getWorldBounds_1(self2, inflation), PxBounds3);
        };
        ;
        PxArticulationLink.prototype["setActorFlags"] = PxArticulationLink.prototype.setActorFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxArticulationLink_setActorFlags_1(self2, flags);
        };
        ;
        PxArticulationLink.prototype["getActorFlags"] = PxArticulationLink.prototype.getActorFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getActorFlags_0(self2), PxActorFlags);
        };
        ;
        PxArticulationLink.prototype["setDominanceGroup"] = PxArticulationLink.prototype.setDominanceGroup = function(dominanceGroup) {
          var self2 = this.ptr;
          if (dominanceGroup && typeof dominanceGroup === "object")
            dominanceGroup = dominanceGroup.ptr;
          _emscripten_bind_PxArticulationLink_setDominanceGroup_1(self2, dominanceGroup);
        };
        ;
        PxArticulationLink.prototype["getDominanceGroup"] = PxArticulationLink.prototype.getDominanceGroup = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getDominanceGroup_0(self2);
        };
        ;
        PxArticulationLink.prototype["setOwnerClient"] = PxArticulationLink.prototype.setOwnerClient = function(inClient) {
          var self2 = this.ptr;
          if (inClient && typeof inClient === "object")
            inClient = inClient.ptr;
          _emscripten_bind_PxArticulationLink_setOwnerClient_1(self2, inClient);
        };
        ;
        PxArticulationLink.prototype["getOwnerClient"] = PxArticulationLink.prototype.getOwnerClient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getOwnerClient_0(self2);
        };
        ;
        PxArticulationLink.prototype["release"] = PxArticulationLink.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationLink_release_0(self2);
        };
        ;
        PxArticulationLink.prototype["getConcreteTypeName"] = PxArticulationLink.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationLink_getConcreteTypeName_0(self2));
        };
        ;
        PxArticulationLink.prototype["getConcreteType"] = PxArticulationLink.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getConcreteType_0(self2);
        };
        ;
        PxArticulationLink.prototype["setBaseFlag"] = PxArticulationLink.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationLink_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxArticulationLink.prototype["setBaseFlags"] = PxArticulationLink.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulationLink_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxArticulationLink.prototype["getBaseFlags"] = PxArticulationLink.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxArticulationLink.prototype["isReleasable"] = PxArticulationLink.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationLink_isReleasable_0(self2);
        };
        ;
        PxArticulationLink.prototype["getGlobalPose"] = PxArticulationLink.prototype.getGlobalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getGlobalPose_0(self2), PxTransform);
        };
        ;
        PxArticulationLink.prototype["setGlobalPose"] = PxArticulationLink.prototype.setGlobalPose = function(pose, autowake) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxArticulationLink_setGlobalPose_1(self2, pose);
            return;
          }
          _emscripten_bind_PxArticulationLink_setGlobalPose_2(self2, pose, autowake);
        };
        ;
        PxArticulationLink.prototype["attachShape"] = PxArticulationLink.prototype.attachShape = function(shape) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          return !!_emscripten_bind_PxArticulationLink_attachShape_1(self2, shape);
        };
        ;
        PxArticulationLink.prototype["detachShape"] = PxArticulationLink.prototype.detachShape = function(shape, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxArticulationLink_detachShape_1(self2, shape);
            return;
          }
          _emscripten_bind_PxArticulationLink_detachShape_2(self2, shape, wakeOnLostTouch);
        };
        ;
        PxArticulationLink.prototype["getNbShapes"] = PxArticulationLink.prototype.getNbShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getNbShapes_0(self2);
        };
        ;
        PxArticulationLink.prototype["setCMassLocalPose"] = PxArticulationLink.prototype.setCMassLocalPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxArticulationLink_setCMassLocalPose_1(self2, pose);
        };
        ;
        PxArticulationLink.prototype["getCMassLocalPose"] = PxArticulationLink.prototype.getCMassLocalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getCMassLocalPose_0(self2), PxTransform);
        };
        ;
        PxArticulationLink.prototype["setMass"] = PxArticulationLink.prototype.setMass = function(mass) {
          var self2 = this.ptr;
          if (mass && typeof mass === "object")
            mass = mass.ptr;
          _emscripten_bind_PxArticulationLink_setMass_1(self2, mass);
        };
        ;
        PxArticulationLink.prototype["getMass"] = PxArticulationLink.prototype.getMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getMass_0(self2);
        };
        ;
        PxArticulationLink.prototype["getInvMass"] = PxArticulationLink.prototype.getInvMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getInvMass_0(self2);
        };
        ;
        PxArticulationLink.prototype["setMassSpaceInertiaTensor"] = PxArticulationLink.prototype.setMassSpaceInertiaTensor = function(m) {
          var self2 = this.ptr;
          if (m && typeof m === "object")
            m = m.ptr;
          _emscripten_bind_PxArticulationLink_setMassSpaceInertiaTensor_1(self2, m);
        };
        ;
        PxArticulationLink.prototype["getMassSpaceInertiaTensor"] = PxArticulationLink.prototype.getMassSpaceInertiaTensor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getMassSpaceInertiaTensor_0(self2), PxVec3);
        };
        ;
        PxArticulationLink.prototype["getMassSpaceInvInertiaTensor"] = PxArticulationLink.prototype.getMassSpaceInvInertiaTensor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getMassSpaceInvInertiaTensor_0(self2), PxVec3);
        };
        ;
        PxArticulationLink.prototype["setLinearDamping"] = PxArticulationLink.prototype.setLinearDamping = function(linDamp) {
          var self2 = this.ptr;
          if (linDamp && typeof linDamp === "object")
            linDamp = linDamp.ptr;
          _emscripten_bind_PxArticulationLink_setLinearDamping_1(self2, linDamp);
        };
        ;
        PxArticulationLink.prototype["getLinearDamping"] = PxArticulationLink.prototype.getLinearDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getLinearDamping_0(self2);
        };
        ;
        PxArticulationLink.prototype["setAngularDamping"] = PxArticulationLink.prototype.setAngularDamping = function(angDamp) {
          var self2 = this.ptr;
          if (angDamp && typeof angDamp === "object")
            angDamp = angDamp.ptr;
          _emscripten_bind_PxArticulationLink_setAngularDamping_1(self2, angDamp);
        };
        ;
        PxArticulationLink.prototype["getAngularDamping"] = PxArticulationLink.prototype.getAngularDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getAngularDamping_0(self2);
        };
        ;
        PxArticulationLink.prototype["getLinearVelocity"] = PxArticulationLink.prototype.getLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxArticulationLink.prototype["setLinearVelocity"] = PxArticulationLink.prototype.setLinearVelocity = function(linVel, autowake) {
          var self2 = this.ptr;
          if (linVel && typeof linVel === "object")
            linVel = linVel.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxArticulationLink_setLinearVelocity_1(self2, linVel);
            return;
          }
          _emscripten_bind_PxArticulationLink_setLinearVelocity_2(self2, linVel, autowake);
        };
        ;
        PxArticulationLink.prototype["getAngularVelocity"] = PxArticulationLink.prototype.getAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxArticulationLink.prototype["setAngularVelocity"] = PxArticulationLink.prototype.setAngularVelocity = function(angVel, autowake) {
          var self2 = this.ptr;
          if (angVel && typeof angVel === "object")
            angVel = angVel.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxArticulationLink_setAngularVelocity_1(self2, angVel);
            return;
          }
          _emscripten_bind_PxArticulationLink_setAngularVelocity_2(self2, angVel, autowake);
        };
        ;
        PxArticulationLink.prototype["getMaxLinearVelocity"] = PxArticulationLink.prototype.getMaxLinearVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getMaxLinearVelocity_0(self2);
        };
        ;
        PxArticulationLink.prototype["setMaxLinearVelocity"] = PxArticulationLink.prototype.setMaxLinearVelocity = function(maxLinVel) {
          var self2 = this.ptr;
          if (maxLinVel && typeof maxLinVel === "object")
            maxLinVel = maxLinVel.ptr;
          _emscripten_bind_PxArticulationLink_setMaxLinearVelocity_1(self2, maxLinVel);
        };
        ;
        PxArticulationLink.prototype["getMaxAngularVelocity"] = PxArticulationLink.prototype.getMaxAngularVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getMaxAngularVelocity_0(self2);
        };
        ;
        PxArticulationLink.prototype["setMaxAngularVelocity"] = PxArticulationLink.prototype.setMaxAngularVelocity = function(maxAngVel) {
          var self2 = this.ptr;
          if (maxAngVel && typeof maxAngVel === "object")
            maxAngVel = maxAngVel.ptr;
          _emscripten_bind_PxArticulationLink_setMaxAngularVelocity_1(self2, maxAngVel);
        };
        ;
        PxArticulationLink.prototype["addForce"] = PxArticulationLink.prototype.addForce = function(force, mode, autowake) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxArticulationLink_addForce_1(self2, force);
            return;
          }
          if (autowake === void 0) {
            _emscripten_bind_PxArticulationLink_addForce_2(self2, force, mode);
            return;
          }
          _emscripten_bind_PxArticulationLink_addForce_3(self2, force, mode, autowake);
        };
        ;
        PxArticulationLink.prototype["addTorque"] = PxArticulationLink.prototype.addTorque = function(torque, mode, autowake) {
          var self2 = this.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxArticulationLink_addTorque_1(self2, torque);
            return;
          }
          if (autowake === void 0) {
            _emscripten_bind_PxArticulationLink_addTorque_2(self2, torque, mode);
            return;
          }
          _emscripten_bind_PxArticulationLink_addTorque_3(self2, torque, mode, autowake);
        };
        ;
        PxArticulationLink.prototype["clearForce"] = PxArticulationLink.prototype.clearForce = function(mode) {
          var self2 = this.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          _emscripten_bind_PxArticulationLink_clearForce_1(self2, mode);
        };
        ;
        PxArticulationLink.prototype["clearTorque"] = PxArticulationLink.prototype.clearTorque = function(mode) {
          var self2 = this.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          _emscripten_bind_PxArticulationLink_clearTorque_1(self2, mode);
        };
        ;
        PxArticulationLink.prototype["setForceAndTorque"] = PxArticulationLink.prototype.setForceAndTorque = function(force, torque, mode) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxArticulationLink_setForceAndTorque_2(self2, force, torque);
            return;
          }
          _emscripten_bind_PxArticulationLink_setForceAndTorque_3(self2, force, torque, mode);
        };
        ;
        PxArticulationLink.prototype["setRigidBodyFlag"] = PxArticulationLink.prototype.setRigidBodyFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationLink_setRigidBodyFlag_2(self2, flag, value);
        };
        ;
        PxArticulationLink.prototype["setRigidBodyFlags"] = PxArticulationLink.prototype.setRigidBodyFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulationLink_setRigidBodyFlags_1(self2, inFlags);
        };
        ;
        PxArticulationLink.prototype["getRigidBodyFlags"] = PxArticulationLink.prototype.getRigidBodyFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_getRigidBodyFlags_0(self2), PxRigidBodyFlags);
        };
        ;
        PxArticulationLink.prototype["setMinCCDAdvanceCoefficient"] = PxArticulationLink.prototype.setMinCCDAdvanceCoefficient = function(advanceCoefficient) {
          var self2 = this.ptr;
          if (advanceCoefficient && typeof advanceCoefficient === "object")
            advanceCoefficient = advanceCoefficient.ptr;
          _emscripten_bind_PxArticulationLink_setMinCCDAdvanceCoefficient_1(self2, advanceCoefficient);
        };
        ;
        PxArticulationLink.prototype["getMinCCDAdvanceCoefficient"] = PxArticulationLink.prototype.getMinCCDAdvanceCoefficient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getMinCCDAdvanceCoefficient_0(self2);
        };
        ;
        PxArticulationLink.prototype["setMaxDepenetrationVelocity"] = PxArticulationLink.prototype.setMaxDepenetrationVelocity = function(biasClamp) {
          var self2 = this.ptr;
          if (biasClamp && typeof biasClamp === "object")
            biasClamp = biasClamp.ptr;
          _emscripten_bind_PxArticulationLink_setMaxDepenetrationVelocity_1(self2, biasClamp);
        };
        ;
        PxArticulationLink.prototype["getMaxDepenetrationVelocity"] = PxArticulationLink.prototype.getMaxDepenetrationVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getMaxDepenetrationVelocity_0(self2);
        };
        ;
        PxArticulationLink.prototype["setMaxContactImpulse"] = PxArticulationLink.prototype.setMaxContactImpulse = function(maxImpulse) {
          var self2 = this.ptr;
          if (maxImpulse && typeof maxImpulse === "object")
            maxImpulse = maxImpulse.ptr;
          _emscripten_bind_PxArticulationLink_setMaxContactImpulse_1(self2, maxImpulse);
        };
        ;
        PxArticulationLink.prototype["getMaxContactImpulse"] = PxArticulationLink.prototype.getMaxContactImpulse = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getMaxContactImpulse_0(self2);
        };
        ;
        PxArticulationLink.prototype["getInternalIslandNodeIndex"] = PxArticulationLink.prototype.getInternalIslandNodeIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationLink_getInternalIslandNodeIndex_0(self2);
        };
        ;
        PxArticulationLink.prototype["get_userData"] = PxArticulationLink.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationLink_get_userData_0(self2), VoidPtr);
        };
        PxArticulationLink.prototype["set_userData"] = PxArticulationLink.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxArticulationLink_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxArticulationLink.prototype, "userData", { get: PxArticulationLink.prototype.get_userData, set: PxArticulationLink.prototype.set_userData });
        function PxArticulationReducedCoordinate() {
          throw "cannot construct a PxArticulationReducedCoordinate, no constructor in IDL";
        }
        PxArticulationReducedCoordinate.prototype = Object.create(PxArticulationBase.prototype);
        PxArticulationReducedCoordinate.prototype.constructor = PxArticulationReducedCoordinate;
        PxArticulationReducedCoordinate.prototype.__class__ = PxArticulationReducedCoordinate;
        PxArticulationReducedCoordinate.__cache__ = {};
        Module["PxArticulationReducedCoordinate"] = PxArticulationReducedCoordinate;
        PxArticulationReducedCoordinate.prototype["setArticulationFlags"] = PxArticulationReducedCoordinate.prototype.setArticulationFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlags_1(self2, flags);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setArticulationFlag"] = PxArticulationReducedCoordinate.prototype.setArticulationFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setArticulationFlag_2(self2, flag, value);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getArticulationFlags"] = PxArticulationReducedCoordinate.prototype.getArticulationFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_getArticulationFlags_0(self2), PxArticulationFlags);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getDofs"] = PxArticulationReducedCoordinate.prototype.getDofs = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getDofs_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["createCache"] = PxArticulationReducedCoordinate.prototype.createCache = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_createCache_0(self2), PxArticulationCache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getCacheDataSize"] = PxArticulationReducedCoordinate.prototype.getCacheDataSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getCacheDataSize_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["zeroCache"] = PxArticulationReducedCoordinate.prototype.zeroCache = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_zeroCache_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["applyCache"] = PxArticulationReducedCoordinate.prototype.applyCache = function(cache, flag, autowake) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxArticulationReducedCoordinate_applyCache_2(self2, cache, flag);
            return;
          }
          _emscripten_bind_PxArticulationReducedCoordinate_applyCache_3(self2, cache, flag, autowake);
        };
        ;
        PxArticulationReducedCoordinate.prototype["copyInternalStateToCache"] = PxArticulationReducedCoordinate.prototype.copyInternalStateToCache = function(cache, flag) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_copyInternalStateToCache_2(self2, cache, flag);
        };
        ;
        PxArticulationReducedCoordinate.prototype["releaseCache"] = PxArticulationReducedCoordinate.prototype.releaseCache = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_releaseCache_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["packJointData"] = PxArticulationReducedCoordinate.prototype.packJointData = function(maximum, reduced) {
          var self2 = this.ptr;
          if (maximum && typeof maximum === "object")
            maximum = maximum.ptr;
          if (reduced && typeof reduced === "object")
            reduced = reduced.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_packJointData_2(self2, maximum, reduced);
        };
        ;
        PxArticulationReducedCoordinate.prototype["unpackJointData"] = PxArticulationReducedCoordinate.prototype.unpackJointData = function(reduced, maximum) {
          var self2 = this.ptr;
          if (reduced && typeof reduced === "object")
            reduced = reduced.ptr;
          if (maximum && typeof maximum === "object")
            maximum = maximum.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_unpackJointData_2(self2, reduced, maximum);
        };
        ;
        PxArticulationReducedCoordinate.prototype["commonInit"] = PxArticulationReducedCoordinate.prototype.commonInit = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_commonInit_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeGeneralizedGravityForce"] = PxArticulationReducedCoordinate.prototype.computeGeneralizedGravityForce = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedGravityForce_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeCoriolisAndCentrifugalForce"] = PxArticulationReducedCoordinate.prototype.computeCoriolisAndCentrifugalForce = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeGeneralizedExternalForce"] = PxArticulationReducedCoordinate.prototype.computeGeneralizedExternalForce = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedExternalForce_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeJointAcceleration"] = PxArticulationReducedCoordinate.prototype.computeJointAcceleration = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeJointAcceleration_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeJointForce"] = PxArticulationReducedCoordinate.prototype.computeJointForce = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeJointForce_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeCoefficientMatrix"] = PxArticulationReducedCoordinate.prototype.computeCoefficientMatrix = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeCoefficientMatrix_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeLambda"] = PxArticulationReducedCoordinate.prototype.computeLambda = function(cache, initialState, jointTorque, maxIter) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          if (initialState && typeof initialState === "object")
            initialState = initialState.ptr;
          if (jointTorque && typeof jointTorque === "object")
            jointTorque = jointTorque.ptr;
          if (maxIter && typeof maxIter === "object")
            maxIter = maxIter.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeLambda_4(self2, cache, initialState, jointTorque, maxIter);
        };
        ;
        PxArticulationReducedCoordinate.prototype["computeGeneralizedMassMatrix"] = PxArticulationReducedCoordinate.prototype.computeGeneralizedMassMatrix = function(cache) {
          var self2 = this.ptr;
          if (cache && typeof cache === "object")
            cache = cache.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_computeGeneralizedMassMatrix_1(self2, cache);
        };
        ;
        PxArticulationReducedCoordinate.prototype["addLoopJoint"] = PxArticulationReducedCoordinate.prototype.addLoopJoint = function(joint) {
          var self2 = this.ptr;
          if (joint && typeof joint === "object")
            joint = joint.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_addLoopJoint_1(self2, joint);
        };
        ;
        PxArticulationReducedCoordinate.prototype["removeLoopJoint"] = PxArticulationReducedCoordinate.prototype.removeLoopJoint = function(joint) {
          var self2 = this.ptr;
          if (joint && typeof joint === "object")
            joint = joint.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_removeLoopJoint_1(self2, joint);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getNbLoopJoints"] = PxArticulationReducedCoordinate.prototype.getNbLoopJoints = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getNbLoopJoints_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getCoefficientMatrixSize"] = PxArticulationReducedCoordinate.prototype.getCoefficientMatrixSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getCoefficientMatrixSize_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["teleportRootLink"] = PxArticulationReducedCoordinate.prototype.teleportRootLink = function(pose, autowake) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_teleportRootLink_2(self2, pose, autowake);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getLinkVelocity"] = PxArticulationReducedCoordinate.prototype.getLinkVelocity = function(linkId) {
          var self2 = this.ptr;
          if (linkId && typeof linkId === "object")
            linkId = linkId.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_getLinkVelocity_1(self2, linkId), PxSpatialVelocity);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getLinkAcceleration"] = PxArticulationReducedCoordinate.prototype.getLinkAcceleration = function(linkId) {
          var self2 = this.ptr;
          if (linkId && typeof linkId === "object")
            linkId = linkId.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_getLinkAcceleration_1(self2, linkId), PxSpatialVelocity);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getScene"] = PxArticulationReducedCoordinate.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_getScene_0(self2), PxScene);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setSolverIterationCounts"] = PxArticulationReducedCoordinate.prototype.setSolverIterationCounts = function(minPositionIters, minVelocityIters) {
          var self2 = this.ptr;
          if (minPositionIters && typeof minPositionIters === "object")
            minPositionIters = minPositionIters.ptr;
          if (minVelocityIters && typeof minVelocityIters === "object")
            minVelocityIters = minVelocityIters.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setSolverIterationCounts_2(self2, minPositionIters, minVelocityIters);
        };
        ;
        PxArticulationReducedCoordinate.prototype["isSleeping"] = PxArticulationReducedCoordinate.prototype.isSleeping = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationReducedCoordinate_isSleeping_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setSleepThreshold"] = PxArticulationReducedCoordinate.prototype.setSleepThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setSleepThreshold_1(self2, threshold);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getSleepThreshold"] = PxArticulationReducedCoordinate.prototype.getSleepThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getSleepThreshold_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setStabilizationThreshold"] = PxArticulationReducedCoordinate.prototype.setStabilizationThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setStabilizationThreshold_1(self2, threshold);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getStabilizationThreshold"] = PxArticulationReducedCoordinate.prototype.getStabilizationThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getStabilizationThreshold_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setWakeCounter"] = PxArticulationReducedCoordinate.prototype.setWakeCounter = function(wakeCounterValue) {
          var self2 = this.ptr;
          if (wakeCounterValue && typeof wakeCounterValue === "object")
            wakeCounterValue = wakeCounterValue.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setWakeCounter_1(self2, wakeCounterValue);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getWakeCounter"] = PxArticulationReducedCoordinate.prototype.getWakeCounter = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getWakeCounter_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["wakeUp"] = PxArticulationReducedCoordinate.prototype.wakeUp = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_wakeUp_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["putToSleep"] = PxArticulationReducedCoordinate.prototype.putToSleep = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_putToSleep_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["createLink"] = PxArticulationReducedCoordinate.prototype.createLink = function(parent, pose) {
          var self2 = this.ptr;
          if (parent && typeof parent === "object")
            parent = parent.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_createLink_2(self2, parent, pose), PxArticulationLink);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getNbLinks"] = PxArticulationReducedCoordinate.prototype.getNbLinks = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getNbLinks_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setName"] = PxArticulationReducedCoordinate.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxArticulationReducedCoordinate_setName_1(self2, name);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getName"] = PxArticulationReducedCoordinate.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationReducedCoordinate_getName_0(self2));
        };
        ;
        PxArticulationReducedCoordinate.prototype["getWorldBounds"] = PxArticulationReducedCoordinate.prototype.getWorldBounds = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_getWorldBounds_0(self2), PxBounds3);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getAggregate"] = PxArticulationReducedCoordinate.prototype.getAggregate = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_getAggregate_0(self2), PxAggregate);
        };
        ;
        PxArticulationReducedCoordinate.prototype["release"] = PxArticulationReducedCoordinate.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_release_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getConcreteTypeName"] = PxArticulationReducedCoordinate.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxArticulationReducedCoordinate_getConcreteTypeName_0(self2));
        };
        ;
        PxArticulationReducedCoordinate.prototype["getConcreteType"] = PxArticulationReducedCoordinate.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxArticulationReducedCoordinate_getConcreteType_0(self2);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setBaseFlag"] = PxArticulationReducedCoordinate.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxArticulationReducedCoordinate.prototype["setBaseFlags"] = PxArticulationReducedCoordinate.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxArticulationReducedCoordinate_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxArticulationReducedCoordinate.prototype["getBaseFlags"] = PxArticulationReducedCoordinate.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxArticulationReducedCoordinate_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxArticulationReducedCoordinate.prototype["isReleasable"] = PxArticulationReducedCoordinate.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxArticulationReducedCoordinate_isReleasable_0(self2);
        };
        ;
        function PxBatchQuery() {
          throw "cannot construct a PxBatchQuery, no constructor in IDL";
        }
        PxBatchQuery.prototype = Object.create(WrapperObject.prototype);
        PxBatchQuery.prototype.constructor = PxBatchQuery;
        PxBatchQuery.prototype.__class__ = PxBatchQuery;
        PxBatchQuery.__cache__ = {};
        Module["PxBatchQuery"] = PxBatchQuery;
        PxBatchQuery.prototype["execute"] = PxBatchQuery.prototype.execute = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBatchQuery_execute_0(self2);
        };
        ;
        PxBatchQuery.prototype["getPreFilterShader"] = PxBatchQuery.prototype.getPreFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQuery_getPreFilterShader_0(self2), PxBatchQueryPreFilterShader);
        };
        ;
        PxBatchQuery.prototype["getPostFilterShader"] = PxBatchQuery.prototype.getPostFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQuery_getPostFilterShader_0(self2), PxBatchQueryPostFilterShader);
        };
        ;
        PxBatchQuery.prototype["getFilterShaderData"] = PxBatchQuery.prototype.getFilterShaderData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBatchQuery_getFilterShaderData_0(self2);
        };
        ;
        PxBatchQuery.prototype["getFilterShaderDataSize"] = PxBatchQuery.prototype.getFilterShaderDataSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBatchQuery_getFilterShaderDataSize_0(self2);
        };
        ;
        PxBatchQuery.prototype["setUserMemory"] = PxBatchQuery.prototype.setUserMemory = function(userMemory) {
          var self2 = this.ptr;
          if (userMemory && typeof userMemory === "object")
            userMemory = userMemory.ptr;
          _emscripten_bind_PxBatchQuery_setUserMemory_1(self2, userMemory);
        };
        ;
        PxBatchQuery.prototype["getUserMemory"] = PxBatchQuery.prototype.getUserMemory = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQuery_getUserMemory_0(self2), PxBatchQueryMemory);
        };
        ;
        PxBatchQuery.prototype["release"] = PxBatchQuery.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBatchQuery_release_0(self2);
        };
        ;
        function PxBatchQueryDesc(maxRaycastsPerExecute, maxSweepsPerExecute, maxOverlapsPerExecute) {
          if (maxRaycastsPerExecute && typeof maxRaycastsPerExecute === "object")
            maxRaycastsPerExecute = maxRaycastsPerExecute.ptr;
          if (maxSweepsPerExecute && typeof maxSweepsPerExecute === "object")
            maxSweepsPerExecute = maxSweepsPerExecute.ptr;
          if (maxOverlapsPerExecute && typeof maxOverlapsPerExecute === "object")
            maxOverlapsPerExecute = maxOverlapsPerExecute.ptr;
          this.ptr = _emscripten_bind_PxBatchQueryDesc_PxBatchQueryDesc_3(maxRaycastsPerExecute, maxSweepsPerExecute, maxOverlapsPerExecute);
          getCache(PxBatchQueryDesc)[this.ptr] = this;
        }
        ;
        ;
        PxBatchQueryDesc.prototype = Object.create(WrapperObject.prototype);
        PxBatchQueryDesc.prototype.constructor = PxBatchQueryDesc;
        PxBatchQueryDesc.prototype.__class__ = PxBatchQueryDesc;
        PxBatchQueryDesc.__cache__ = {};
        Module["PxBatchQueryDesc"] = PxBatchQueryDesc;
        PxBatchQueryDesc.prototype["isValid"] = PxBatchQueryDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBatchQueryDesc_isValid_0(self2);
        };
        ;
        PxBatchQueryDesc.prototype["get_filterShaderData"] = PxBatchQueryDesc.prototype.get_filterShaderData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBatchQueryDesc_get_filterShaderData_0(self2);
        };
        PxBatchQueryDesc.prototype["set_filterShaderData"] = PxBatchQueryDesc.prototype.set_filterShaderData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryDesc_set_filterShaderData_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryDesc.prototype, "filterShaderData", { get: PxBatchQueryDesc.prototype.get_filterShaderData, set: PxBatchQueryDesc.prototype.set_filterShaderData });
        PxBatchQueryDesc.prototype["get_filterShaderDataSize"] = PxBatchQueryDesc.prototype.get_filterShaderDataSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBatchQueryDesc_get_filterShaderDataSize_0(self2);
        };
        PxBatchQueryDesc.prototype["set_filterShaderDataSize"] = PxBatchQueryDesc.prototype.set_filterShaderDataSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryDesc_set_filterShaderDataSize_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryDesc.prototype, "filterShaderDataSize", { get: PxBatchQueryDesc.prototype.get_filterShaderDataSize, set: PxBatchQueryDesc.prototype.set_filterShaderDataSize });
        PxBatchQueryDesc.prototype["get_preFilterShader"] = PxBatchQueryDesc.prototype.get_preFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryDesc_get_preFilterShader_0(self2), PxBatchQueryPreFilterShader);
        };
        PxBatchQueryDesc.prototype["set_preFilterShader"] = PxBatchQueryDesc.prototype.set_preFilterShader = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryDesc_set_preFilterShader_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryDesc.prototype, "preFilterShader", { get: PxBatchQueryDesc.prototype.get_preFilterShader, set: PxBatchQueryDesc.prototype.set_preFilterShader });
        PxBatchQueryDesc.prototype["get_postFilterShader"] = PxBatchQueryDesc.prototype.get_postFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryDesc_get_postFilterShader_0(self2), PxBatchQueryPostFilterShader);
        };
        PxBatchQueryDesc.prototype["set_postFilterShader"] = PxBatchQueryDesc.prototype.set_postFilterShader = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryDesc_set_postFilterShader_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryDesc.prototype, "postFilterShader", { get: PxBatchQueryDesc.prototype.get_postFilterShader, set: PxBatchQueryDesc.prototype.set_postFilterShader });
        PxBatchQueryDesc.prototype["get_queryMemory"] = PxBatchQueryDesc.prototype.get_queryMemory = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryDesc_get_queryMemory_0(self2), PxBatchQueryMemory);
        };
        PxBatchQueryDesc.prototype["set_queryMemory"] = PxBatchQueryDesc.prototype.set_queryMemory = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryDesc_set_queryMemory_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryDesc.prototype, "queryMemory", { get: PxBatchQueryDesc.prototype.get_queryMemory, set: PxBatchQueryDesc.prototype.set_queryMemory });
        PxBatchQueryDesc.prototype["__destroy__"] = PxBatchQueryDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBatchQueryDesc___destroy___0(self2);
        };
        function PxBatchQueryMemory() {
          throw "cannot construct a PxBatchQueryMemory, no constructor in IDL";
        }
        PxBatchQueryMemory.prototype = Object.create(WrapperObject.prototype);
        PxBatchQueryMemory.prototype.constructor = PxBatchQueryMemory;
        PxBatchQueryMemory.prototype.__class__ = PxBatchQueryMemory;
        PxBatchQueryMemory.__cache__ = {};
        Module["PxBatchQueryMemory"] = PxBatchQueryMemory;
        PxBatchQueryMemory.prototype["get_userRaycastResultBuffer"] = PxBatchQueryMemory.prototype.get_userRaycastResultBuffer = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryMemory_get_userRaycastResultBuffer_0(self2), PxRaycastQueryResult);
        };
        PxBatchQueryMemory.prototype["set_userRaycastResultBuffer"] = PxBatchQueryMemory.prototype.set_userRaycastResultBuffer = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_userRaycastResultBuffer_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "userRaycastResultBuffer", { get: PxBatchQueryMemory.prototype.get_userRaycastResultBuffer, set: PxBatchQueryMemory.prototype.set_userRaycastResultBuffer });
        PxBatchQueryMemory.prototype["get_userRaycastTouchBuffer"] = PxBatchQueryMemory.prototype.get_userRaycastTouchBuffer = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryMemory_get_userRaycastTouchBuffer_0(self2), PxRaycastHit);
        };
        PxBatchQueryMemory.prototype["set_userRaycastTouchBuffer"] = PxBatchQueryMemory.prototype.set_userRaycastTouchBuffer = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_userRaycastTouchBuffer_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "userRaycastTouchBuffer", { get: PxBatchQueryMemory.prototype.get_userRaycastTouchBuffer, set: PxBatchQueryMemory.prototype.set_userRaycastTouchBuffer });
        PxBatchQueryMemory.prototype["get_userSweepResultBuffer"] = PxBatchQueryMemory.prototype.get_userSweepResultBuffer = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryMemory_get_userSweepResultBuffer_0(self2), PxSweepQueryResult);
        };
        PxBatchQueryMemory.prototype["set_userSweepResultBuffer"] = PxBatchQueryMemory.prototype.set_userSweepResultBuffer = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_userSweepResultBuffer_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "userSweepResultBuffer", { get: PxBatchQueryMemory.prototype.get_userSweepResultBuffer, set: PxBatchQueryMemory.prototype.set_userSweepResultBuffer });
        PxBatchQueryMemory.prototype["get_userSweepTouchBuffer"] = PxBatchQueryMemory.prototype.get_userSweepTouchBuffer = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryMemory_get_userSweepTouchBuffer_0(self2), PxSweepHit);
        };
        PxBatchQueryMemory.prototype["set_userSweepTouchBuffer"] = PxBatchQueryMemory.prototype.set_userSweepTouchBuffer = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_userSweepTouchBuffer_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "userSweepTouchBuffer", { get: PxBatchQueryMemory.prototype.get_userSweepTouchBuffer, set: PxBatchQueryMemory.prototype.set_userSweepTouchBuffer });
        PxBatchQueryMemory.prototype["get_userOverlapResultBuffer"] = PxBatchQueryMemory.prototype.get_userOverlapResultBuffer = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryMemory_get_userOverlapResultBuffer_0(self2), PxOverlapQueryResult);
        };
        PxBatchQueryMemory.prototype["set_userOverlapResultBuffer"] = PxBatchQueryMemory.prototype.set_userOverlapResultBuffer = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_userOverlapResultBuffer_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "userOverlapResultBuffer", { get: PxBatchQueryMemory.prototype.get_userOverlapResultBuffer, set: PxBatchQueryMemory.prototype.set_userOverlapResultBuffer });
        PxBatchQueryMemory.prototype["get_userOverlapTouchBuffer"] = PxBatchQueryMemory.prototype.get_userOverlapTouchBuffer = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBatchQueryMemory_get_userOverlapTouchBuffer_0(self2), PxOverlapHit);
        };
        PxBatchQueryMemory.prototype["set_userOverlapTouchBuffer"] = PxBatchQueryMemory.prototype.set_userOverlapTouchBuffer = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_userOverlapTouchBuffer_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "userOverlapTouchBuffer", { get: PxBatchQueryMemory.prototype.get_userOverlapTouchBuffer, set: PxBatchQueryMemory.prototype.set_userOverlapTouchBuffer });
        PxBatchQueryMemory.prototype["get_raycastTouchBufferSize"] = PxBatchQueryMemory.prototype.get_raycastTouchBufferSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBatchQueryMemory_get_raycastTouchBufferSize_0(self2);
        };
        PxBatchQueryMemory.prototype["set_raycastTouchBufferSize"] = PxBatchQueryMemory.prototype.set_raycastTouchBufferSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_raycastTouchBufferSize_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "raycastTouchBufferSize", { get: PxBatchQueryMemory.prototype.get_raycastTouchBufferSize, set: PxBatchQueryMemory.prototype.set_raycastTouchBufferSize });
        PxBatchQueryMemory.prototype["get_sweepTouchBufferSize"] = PxBatchQueryMemory.prototype.get_sweepTouchBufferSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBatchQueryMemory_get_sweepTouchBufferSize_0(self2);
        };
        PxBatchQueryMemory.prototype["set_sweepTouchBufferSize"] = PxBatchQueryMemory.prototype.set_sweepTouchBufferSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_sweepTouchBufferSize_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "sweepTouchBufferSize", { get: PxBatchQueryMemory.prototype.get_sweepTouchBufferSize, set: PxBatchQueryMemory.prototype.set_sweepTouchBufferSize });
        PxBatchQueryMemory.prototype["get_overlapTouchBufferSize"] = PxBatchQueryMemory.prototype.get_overlapTouchBufferSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBatchQueryMemory_get_overlapTouchBufferSize_0(self2);
        };
        PxBatchQueryMemory.prototype["set_overlapTouchBufferSize"] = PxBatchQueryMemory.prototype.set_overlapTouchBufferSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBatchQueryMemory_set_overlapTouchBufferSize_1(self2, arg0);
        };
        Object.defineProperty(PxBatchQueryMemory.prototype, "overlapTouchBufferSize", { get: PxBatchQueryMemory.prototype.get_overlapTouchBufferSize, set: PxBatchQueryMemory.prototype.set_overlapTouchBufferSize });
        PxBatchQueryMemory.prototype["__destroy__"] = PxBatchQueryMemory.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBatchQueryMemory___destroy___0(self2);
        };
        function PxBatchQueryPostFilterShader() {
          throw "cannot construct a PxBatchQueryPostFilterShader, no constructor in IDL";
        }
        PxBatchQueryPostFilterShader.prototype = Object.create(WrapperObject.prototype);
        PxBatchQueryPostFilterShader.prototype.constructor = PxBatchQueryPostFilterShader;
        PxBatchQueryPostFilterShader.prototype.__class__ = PxBatchQueryPostFilterShader;
        PxBatchQueryPostFilterShader.__cache__ = {};
        Module["PxBatchQueryPostFilterShader"] = PxBatchQueryPostFilterShader;
        PxBatchQueryPostFilterShader.prototype["__destroy__"] = PxBatchQueryPostFilterShader.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBatchQueryPostFilterShader___destroy___0(self2);
        };
        function PxBatchQueryPreFilterShader() {
          throw "cannot construct a PxBatchQueryPreFilterShader, no constructor in IDL";
        }
        PxBatchQueryPreFilterShader.prototype = Object.create(WrapperObject.prototype);
        PxBatchQueryPreFilterShader.prototype.constructor = PxBatchQueryPreFilterShader;
        PxBatchQueryPreFilterShader.prototype.__class__ = PxBatchQueryPreFilterShader;
        PxBatchQueryPreFilterShader.__cache__ = {};
        Module["PxBatchQueryPreFilterShader"] = PxBatchQueryPreFilterShader;
        PxBatchQueryPreFilterShader.prototype["__destroy__"] = PxBatchQueryPreFilterShader.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBatchQueryPreFilterShader___destroy___0(self2);
        };
        function PxBroadPhaseCaps() {
          this.ptr = _emscripten_bind_PxBroadPhaseCaps_PxBroadPhaseCaps_0();
          getCache(PxBroadPhaseCaps)[this.ptr] = this;
        }
        ;
        ;
        PxBroadPhaseCaps.prototype = Object.create(WrapperObject.prototype);
        PxBroadPhaseCaps.prototype.constructor = PxBroadPhaseCaps;
        PxBroadPhaseCaps.prototype.__class__ = PxBroadPhaseCaps;
        PxBroadPhaseCaps.__cache__ = {};
        Module["PxBroadPhaseCaps"] = PxBroadPhaseCaps;
        PxBroadPhaseCaps.prototype["get_maxNbRegions"] = PxBroadPhaseCaps.prototype.get_maxNbRegions = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBroadPhaseCaps_get_maxNbRegions_0(self2);
        };
        PxBroadPhaseCaps.prototype["set_maxNbRegions"] = PxBroadPhaseCaps.prototype.set_maxNbRegions = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseCaps_set_maxNbRegions_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseCaps.prototype, "maxNbRegions", { get: PxBroadPhaseCaps.prototype.get_maxNbRegions, set: PxBroadPhaseCaps.prototype.set_maxNbRegions });
        PxBroadPhaseCaps.prototype["get_maxNbObjects"] = PxBroadPhaseCaps.prototype.get_maxNbObjects = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBroadPhaseCaps_get_maxNbObjects_0(self2);
        };
        PxBroadPhaseCaps.prototype["set_maxNbObjects"] = PxBroadPhaseCaps.prototype.set_maxNbObjects = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseCaps_set_maxNbObjects_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseCaps.prototype, "maxNbObjects", { get: PxBroadPhaseCaps.prototype.get_maxNbObjects, set: PxBroadPhaseCaps.prototype.set_maxNbObjects });
        PxBroadPhaseCaps.prototype["get_needsPredefinedBounds"] = PxBroadPhaseCaps.prototype.get_needsPredefinedBounds = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBroadPhaseCaps_get_needsPredefinedBounds_0(self2);
        };
        PxBroadPhaseCaps.prototype["set_needsPredefinedBounds"] = PxBroadPhaseCaps.prototype.set_needsPredefinedBounds = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseCaps_set_needsPredefinedBounds_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseCaps.prototype, "needsPredefinedBounds", { get: PxBroadPhaseCaps.prototype.get_needsPredefinedBounds, set: PxBroadPhaseCaps.prototype.set_needsPredefinedBounds });
        PxBroadPhaseCaps.prototype["__destroy__"] = PxBroadPhaseCaps.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBroadPhaseCaps___destroy___0(self2);
        };
        function PxBroadPhaseRegion() {
          this.ptr = _emscripten_bind_PxBroadPhaseRegion_PxBroadPhaseRegion_0();
          getCache(PxBroadPhaseRegion)[this.ptr] = this;
        }
        ;
        ;
        PxBroadPhaseRegion.prototype = Object.create(WrapperObject.prototype);
        PxBroadPhaseRegion.prototype.constructor = PxBroadPhaseRegion;
        PxBroadPhaseRegion.prototype.__class__ = PxBroadPhaseRegion;
        PxBroadPhaseRegion.__cache__ = {};
        Module["PxBroadPhaseRegion"] = PxBroadPhaseRegion;
        PxBroadPhaseRegion.prototype["get_bounds"] = PxBroadPhaseRegion.prototype.get_bounds = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBroadPhaseRegion_get_bounds_0(self2), PxBounds3);
        };
        PxBroadPhaseRegion.prototype["set_bounds"] = PxBroadPhaseRegion.prototype.set_bounds = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseRegion_set_bounds_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseRegion.prototype, "bounds", { get: PxBroadPhaseRegion.prototype.get_bounds, set: PxBroadPhaseRegion.prototype.set_bounds });
        PxBroadPhaseRegion.prototype["get_userData"] = PxBroadPhaseRegion.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBroadPhaseRegion_get_userData_0(self2), VoidPtr);
        };
        PxBroadPhaseRegion.prototype["set_userData"] = PxBroadPhaseRegion.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseRegion_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseRegion.prototype, "userData", { get: PxBroadPhaseRegion.prototype.get_userData, set: PxBroadPhaseRegion.prototype.set_userData });
        PxBroadPhaseRegion.prototype["__destroy__"] = PxBroadPhaseRegion.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBroadPhaseRegion___destroy___0(self2);
        };
        function PxBroadPhaseRegionInfo() {
          this.ptr = _emscripten_bind_PxBroadPhaseRegionInfo_PxBroadPhaseRegionInfo_0();
          getCache(PxBroadPhaseRegionInfo)[this.ptr] = this;
        }
        ;
        ;
        PxBroadPhaseRegionInfo.prototype = Object.create(WrapperObject.prototype);
        PxBroadPhaseRegionInfo.prototype.constructor = PxBroadPhaseRegionInfo;
        PxBroadPhaseRegionInfo.prototype.__class__ = PxBroadPhaseRegionInfo;
        PxBroadPhaseRegionInfo.__cache__ = {};
        Module["PxBroadPhaseRegionInfo"] = PxBroadPhaseRegionInfo;
        PxBroadPhaseRegionInfo.prototype["get_region"] = PxBroadPhaseRegionInfo.prototype.get_region = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBroadPhaseRegionInfo_get_region_0(self2), PxBroadPhaseRegion);
        };
        PxBroadPhaseRegionInfo.prototype["set_region"] = PxBroadPhaseRegionInfo.prototype.set_region = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseRegionInfo_set_region_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseRegionInfo.prototype, "region", { get: PxBroadPhaseRegionInfo.prototype.get_region, set: PxBroadPhaseRegionInfo.prototype.set_region });
        PxBroadPhaseRegionInfo.prototype["get_nbStaticObjects"] = PxBroadPhaseRegionInfo.prototype.get_nbStaticObjects = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBroadPhaseRegionInfo_get_nbStaticObjects_0(self2);
        };
        PxBroadPhaseRegionInfo.prototype["set_nbStaticObjects"] = PxBroadPhaseRegionInfo.prototype.set_nbStaticObjects = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseRegionInfo_set_nbStaticObjects_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseRegionInfo.prototype, "nbStaticObjects", { get: PxBroadPhaseRegionInfo.prototype.get_nbStaticObjects, set: PxBroadPhaseRegionInfo.prototype.set_nbStaticObjects });
        PxBroadPhaseRegionInfo.prototype["get_nbDynamicObjects"] = PxBroadPhaseRegionInfo.prototype.get_nbDynamicObjects = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBroadPhaseRegionInfo_get_nbDynamicObjects_0(self2);
        };
        PxBroadPhaseRegionInfo.prototype["set_nbDynamicObjects"] = PxBroadPhaseRegionInfo.prototype.set_nbDynamicObjects = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseRegionInfo_set_nbDynamicObjects_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseRegionInfo.prototype, "nbDynamicObjects", { get: PxBroadPhaseRegionInfo.prototype.get_nbDynamicObjects, set: PxBroadPhaseRegionInfo.prototype.set_nbDynamicObjects });
        PxBroadPhaseRegionInfo.prototype["get_active"] = PxBroadPhaseRegionInfo.prototype.get_active = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBroadPhaseRegionInfo_get_active_0(self2);
        };
        PxBroadPhaseRegionInfo.prototype["set_active"] = PxBroadPhaseRegionInfo.prototype.set_active = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseRegionInfo_set_active_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseRegionInfo.prototype, "active", { get: PxBroadPhaseRegionInfo.prototype.get_active, set: PxBroadPhaseRegionInfo.prototype.set_active });
        PxBroadPhaseRegionInfo.prototype["get_overlap"] = PxBroadPhaseRegionInfo.prototype.get_overlap = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBroadPhaseRegionInfo_get_overlap_0(self2);
        };
        PxBroadPhaseRegionInfo.prototype["set_overlap"] = PxBroadPhaseRegionInfo.prototype.set_overlap = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBroadPhaseRegionInfo_set_overlap_1(self2, arg0);
        };
        Object.defineProperty(PxBroadPhaseRegionInfo.prototype, "overlap", { get: PxBroadPhaseRegionInfo.prototype.get_overlap, set: PxBroadPhaseRegionInfo.prototype.set_overlap });
        PxBroadPhaseRegionInfo.prototype["__destroy__"] = PxBroadPhaseRegionInfo.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBroadPhaseRegionInfo___destroy___0(self2);
        };
        function PxConstraint() {
          throw "cannot construct a PxConstraint, no constructor in IDL";
        }
        PxConstraint.prototype = Object.create(PxBase.prototype);
        PxConstraint.prototype.constructor = PxConstraint;
        PxConstraint.prototype.__class__ = PxConstraint;
        PxConstraint.__cache__ = {};
        Module["PxConstraint"] = PxConstraint;
        PxConstraint.prototype["release"] = PxConstraint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConstraint_release_0(self2);
        };
        ;
        PxConstraint.prototype["getScene"] = PxConstraint.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConstraint_getScene_0(self2), PxScene);
        };
        ;
        PxConstraint.prototype["setActors"] = PxConstraint.prototype.setActors = function(actor0, actor1) {
          var self2 = this.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          _emscripten_bind_PxConstraint_setActors_2(self2, actor0, actor1);
        };
        ;
        PxConstraint.prototype["markDirty"] = PxConstraint.prototype.markDirty = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConstraint_markDirty_0(self2);
        };
        ;
        PxConstraint.prototype["setFlags"] = PxConstraint.prototype.setFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxConstraint_setFlags_1(self2, flags);
        };
        ;
        PxConstraint.prototype["getFlags"] = PxConstraint.prototype.getFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConstraint_getFlags_0(self2), PxConstraintFlags);
        };
        ;
        PxConstraint.prototype["setFlag"] = PxConstraint.prototype.setFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxConstraint_setFlag_2(self2, flag, value);
        };
        ;
        PxConstraint.prototype["getForce"] = PxConstraint.prototype.getForce = function(linear, angular) {
          var self2 = this.ptr;
          if (linear && typeof linear === "object")
            linear = linear.ptr;
          if (angular && typeof angular === "object")
            angular = angular.ptr;
          _emscripten_bind_PxConstraint_getForce_2(self2, linear, angular);
        };
        ;
        PxConstraint.prototype["isValid"] = PxConstraint.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxConstraint_isValid_0(self2);
        };
        ;
        PxConstraint.prototype["setBreakForce"] = PxConstraint.prototype.setBreakForce = function(linear, angular) {
          var self2 = this.ptr;
          if (linear && typeof linear === "object")
            linear = linear.ptr;
          if (angular && typeof angular === "object")
            angular = angular.ptr;
          _emscripten_bind_PxConstraint_setBreakForce_2(self2, linear, angular);
        };
        ;
        PxConstraint.prototype["setMinResponseThreshold"] = PxConstraint.prototype.setMinResponseThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxConstraint_setMinResponseThreshold_1(self2, threshold);
        };
        ;
        PxConstraint.prototype["getMinResponseThreshold"] = PxConstraint.prototype.getMinResponseThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConstraint_getMinResponseThreshold_0(self2);
        };
        ;
        PxConstraint.prototype["getConcreteTypeName"] = PxConstraint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxConstraint_getConcreteTypeName_0(self2));
        };
        ;
        PxConstraint.prototype["getConcreteType"] = PxConstraint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConstraint_getConcreteType_0(self2);
        };
        ;
        PxConstraint.prototype["setBaseFlag"] = PxConstraint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxConstraint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxConstraint.prototype["setBaseFlags"] = PxConstraint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxConstraint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxConstraint.prototype["getBaseFlags"] = PxConstraint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConstraint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxConstraint.prototype["isReleasable"] = PxConstraint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxConstraint_isReleasable_0(self2);
        };
        ;
        function PxConstraintFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxConstraintFlags_PxConstraintFlags_1(flags);
          getCache(PxConstraintFlags)[this.ptr] = this;
        }
        ;
        ;
        PxConstraintFlags.prototype = Object.create(WrapperObject.prototype);
        PxConstraintFlags.prototype.constructor = PxConstraintFlags;
        PxConstraintFlags.prototype.__class__ = PxConstraintFlags;
        PxConstraintFlags.__cache__ = {};
        Module["PxConstraintFlags"] = PxConstraintFlags;
        PxConstraintFlags.prototype["isSet"] = PxConstraintFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxConstraintFlags_isSet_1(self2, flag);
        };
        ;
        PxConstraintFlags.prototype["set"] = PxConstraintFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxConstraintFlags_set_1(self2, flag);
        };
        ;
        PxConstraintFlags.prototype["clear"] = PxConstraintFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxConstraintFlags_clear_1(self2, flag);
        };
        ;
        PxConstraintFlags.prototype["__destroy__"] = PxConstraintFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConstraintFlags___destroy___0(self2);
        };
        function PxConstraintInfo() {
          throw "cannot construct a PxConstraintInfo, no constructor in IDL";
        }
        PxConstraintInfo.prototype = Object.create(WrapperObject.prototype);
        PxConstraintInfo.prototype.constructor = PxConstraintInfo;
        PxConstraintInfo.prototype.__class__ = PxConstraintInfo;
        PxConstraintInfo.__cache__ = {};
        Module["PxConstraintInfo"] = PxConstraintInfo;
        PxConstraintInfo.prototype["get_constraint"] = PxConstraintInfo.prototype.get_constraint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConstraintInfo_get_constraint_0(self2), PxConstraint);
        };
        PxConstraintInfo.prototype["set_constraint"] = PxConstraintInfo.prototype.set_constraint = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxConstraintInfo_set_constraint_1(self2, arg0);
        };
        Object.defineProperty(PxConstraintInfo.prototype, "constraint", { get: PxConstraintInfo.prototype.get_constraint, set: PxConstraintInfo.prototype.set_constraint });
        PxConstraintInfo.prototype["get_externalReference"] = PxConstraintInfo.prototype.get_externalReference = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConstraintInfo_get_externalReference_0(self2), VoidPtr);
        };
        PxConstraintInfo.prototype["set_externalReference"] = PxConstraintInfo.prototype.set_externalReference = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxConstraintInfo_set_externalReference_1(self2, arg0);
        };
        Object.defineProperty(PxConstraintInfo.prototype, "externalReference", { get: PxConstraintInfo.prototype.get_externalReference, set: PxConstraintInfo.prototype.set_externalReference });
        PxConstraintInfo.prototype["get_type"] = PxConstraintInfo.prototype.get_type = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConstraintInfo_get_type_0(self2);
        };
        PxConstraintInfo.prototype["set_type"] = PxConstraintInfo.prototype.set_type = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxConstraintInfo_set_type_1(self2, arg0);
        };
        Object.defineProperty(PxConstraintInfo.prototype, "type", { get: PxConstraintInfo.prototype.get_type, set: PxConstraintInfo.prototype.set_type });
        PxConstraintInfo.prototype["__destroy__"] = PxConstraintInfo.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConstraintInfo___destroy___0(self2);
        };
        function PxContactPairHeaderFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxContactPairHeaderFlags_PxContactPairHeaderFlags_1(flags);
          getCache(PxContactPairHeaderFlags)[this.ptr] = this;
        }
        ;
        ;
        PxContactPairHeaderFlags.prototype = Object.create(WrapperObject.prototype);
        PxContactPairHeaderFlags.prototype.constructor = PxContactPairHeaderFlags;
        PxContactPairHeaderFlags.prototype.__class__ = PxContactPairHeaderFlags;
        PxContactPairHeaderFlags.__cache__ = {};
        Module["PxContactPairHeaderFlags"] = PxContactPairHeaderFlags;
        PxContactPairHeaderFlags.prototype["isSet"] = PxContactPairHeaderFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxContactPairHeaderFlags_isSet_1(self2, flag);
        };
        ;
        PxContactPairHeaderFlags.prototype["set"] = PxContactPairHeaderFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxContactPairHeaderFlags_set_1(self2, flag);
        };
        ;
        PxContactPairHeaderFlags.prototype["clear"] = PxContactPairHeaderFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxContactPairHeaderFlags_clear_1(self2, flag);
        };
        ;
        PxContactPairHeaderFlags.prototype["__destroy__"] = PxContactPairHeaderFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxContactPairHeaderFlags___destroy___0(self2);
        };
        function PxContactPair() {
          throw "cannot construct a PxContactPair, no constructor in IDL";
        }
        PxContactPair.prototype = Object.create(WrapperObject.prototype);
        PxContactPair.prototype.constructor = PxContactPair;
        PxContactPair.prototype.__class__ = PxContactPair;
        PxContactPair.__cache__ = {};
        Module["PxContactPair"] = PxContactPair;
        PxContactPair.prototype["get_shapes"] = PxContactPair.prototype.get_shapes = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return wrapPointer(_emscripten_bind_PxContactPair_get_shapes_1(self2, arg0), PxShape);
        };
        PxContactPair.prototype["set_shapes"] = PxContactPair.prototype.set_shapes = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxContactPair_set_shapes_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxContactPair.prototype, "shapes", { get: PxContactPair.prototype.get_shapes, set: PxContactPair.prototype.set_shapes });
        PxContactPair.prototype["get_contactCount"] = PxContactPair.prototype.get_contactCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxContactPair_get_contactCount_0(self2);
        };
        PxContactPair.prototype["set_contactCount"] = PxContactPair.prototype.set_contactCount = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxContactPair_set_contactCount_1(self2, arg0);
        };
        Object.defineProperty(PxContactPair.prototype, "contactCount", { get: PxContactPair.prototype.get_contactCount, set: PxContactPair.prototype.set_contactCount });
        PxContactPair.prototype["get_patchCount"] = PxContactPair.prototype.get_patchCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxContactPair_get_patchCount_0(self2);
        };
        PxContactPair.prototype["set_patchCount"] = PxContactPair.prototype.set_patchCount = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxContactPair_set_patchCount_1(self2, arg0);
        };
        Object.defineProperty(PxContactPair.prototype, "patchCount", { get: PxContactPair.prototype.get_patchCount, set: PxContactPair.prototype.set_patchCount });
        PxContactPair.prototype["get_flags"] = PxContactPair.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxContactPair_get_flags_0(self2), PxContactPairFlags);
        };
        PxContactPair.prototype["set_flags"] = PxContactPair.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxContactPair_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxContactPair.prototype, "flags", { get: PxContactPair.prototype.get_flags, set: PxContactPair.prototype.set_flags });
        PxContactPair.prototype["get_events"] = PxContactPair.prototype.get_events = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxContactPair_get_events_0(self2), PxPairFlags);
        };
        PxContactPair.prototype["set_events"] = PxContactPair.prototype.set_events = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxContactPair_set_events_1(self2, arg0);
        };
        Object.defineProperty(PxContactPair.prototype, "events", { get: PxContactPair.prototype.get_events, set: PxContactPair.prototype.set_events });
        PxContactPair.prototype["__destroy__"] = PxContactPair.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxContactPair___destroy___0(self2);
        };
        function PxContactPairFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxContactPairFlags_PxContactPairFlags_1(flags);
          getCache(PxContactPairFlags)[this.ptr] = this;
        }
        ;
        ;
        PxContactPairFlags.prototype = Object.create(WrapperObject.prototype);
        PxContactPairFlags.prototype.constructor = PxContactPairFlags;
        PxContactPairFlags.prototype.__class__ = PxContactPairFlags;
        PxContactPairFlags.__cache__ = {};
        Module["PxContactPairFlags"] = PxContactPairFlags;
        PxContactPairFlags.prototype["isSet"] = PxContactPairFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxContactPairFlags_isSet_1(self2, flag);
        };
        ;
        PxContactPairFlags.prototype["set"] = PxContactPairFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxContactPairFlags_set_1(self2, flag);
        };
        ;
        PxContactPairFlags.prototype["clear"] = PxContactPairFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxContactPairFlags_clear_1(self2, flag);
        };
        ;
        PxContactPairFlags.prototype["__destroy__"] = PxContactPairFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxContactPairFlags___destroy___0(self2);
        };
        function PxContactPairHeader() {
          throw "cannot construct a PxContactPairHeader, no constructor in IDL";
        }
        PxContactPairHeader.prototype = Object.create(WrapperObject.prototype);
        PxContactPairHeader.prototype.constructor = PxContactPairHeader;
        PxContactPairHeader.prototype.__class__ = PxContactPairHeader;
        PxContactPairHeader.__cache__ = {};
        Module["PxContactPairHeader"] = PxContactPairHeader;
        PxContactPairHeader.prototype["get_actors"] = PxContactPairHeader.prototype.get_actors = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return wrapPointer(_emscripten_bind_PxContactPairHeader_get_actors_1(self2, arg0), PxRigidActor);
        };
        PxContactPairHeader.prototype["set_actors"] = PxContactPairHeader.prototype.set_actors = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxContactPairHeader_set_actors_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxContactPairHeader.prototype, "actors", { get: PxContactPairHeader.prototype.get_actors, set: PxContactPairHeader.prototype.set_actors });
        PxContactPairHeader.prototype["get_flags"] = PxContactPairHeader.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxContactPairHeader_get_flags_0(self2), PxContactPairHeaderFlags);
        };
        PxContactPairHeader.prototype["set_flags"] = PxContactPairHeader.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxContactPairHeader_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxContactPairHeader.prototype, "flags", { get: PxContactPairHeader.prototype.get_flags, set: PxContactPairHeader.prototype.set_flags });
        PxContactPairHeader.prototype["get_pairs"] = PxContactPairHeader.prototype.get_pairs = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxContactPairHeader_get_pairs_0(self2), PxContactPair);
        };
        PxContactPairHeader.prototype["set_pairs"] = PxContactPairHeader.prototype.set_pairs = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxContactPairHeader_set_pairs_1(self2, arg0);
        };
        Object.defineProperty(PxContactPairHeader.prototype, "pairs", { get: PxContactPairHeader.prototype.get_pairs, set: PxContactPairHeader.prototype.set_pairs });
        PxContactPairHeader.prototype["get_nbPairs"] = PxContactPairHeader.prototype.get_nbPairs = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxContactPairHeader_get_nbPairs_0(self2);
        };
        PxContactPairHeader.prototype["set_nbPairs"] = PxContactPairHeader.prototype.set_nbPairs = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxContactPairHeader_set_nbPairs_1(self2, arg0);
        };
        Object.defineProperty(PxContactPairHeader.prototype, "nbPairs", { get: PxContactPairHeader.prototype.get_nbPairs, set: PxContactPairHeader.prototype.set_nbPairs });
        PxContactPairHeader.prototype["__destroy__"] = PxContactPairHeader.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxContactPairHeader___destroy___0(self2);
        };
        function PxDominanceGroupPair(a, b) {
          if (a && typeof a === "object")
            a = a.ptr;
          if (b && typeof b === "object")
            b = b.ptr;
          this.ptr = _emscripten_bind_PxDominanceGroupPair_PxDominanceGroupPair_2(a, b);
          getCache(PxDominanceGroupPair)[this.ptr] = this;
        }
        ;
        ;
        PxDominanceGroupPair.prototype = Object.create(WrapperObject.prototype);
        PxDominanceGroupPair.prototype.constructor = PxDominanceGroupPair;
        PxDominanceGroupPair.prototype.__class__ = PxDominanceGroupPair;
        PxDominanceGroupPair.__cache__ = {};
        Module["PxDominanceGroupPair"] = PxDominanceGroupPair;
        PxDominanceGroupPair.prototype["get_dominance0"] = PxDominanceGroupPair.prototype.get_dominance0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDominanceGroupPair_get_dominance0_0(self2);
        };
        PxDominanceGroupPair.prototype["set_dominance0"] = PxDominanceGroupPair.prototype.set_dominance0 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxDominanceGroupPair_set_dominance0_1(self2, arg0);
        };
        Object.defineProperty(PxDominanceGroupPair.prototype, "dominance0", { get: PxDominanceGroupPair.prototype.get_dominance0, set: PxDominanceGroupPair.prototype.set_dominance0 });
        PxDominanceGroupPair.prototype["get_dominance1"] = PxDominanceGroupPair.prototype.get_dominance1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDominanceGroupPair_get_dominance1_0(self2);
        };
        PxDominanceGroupPair.prototype["set_dominance1"] = PxDominanceGroupPair.prototype.set_dominance1 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxDominanceGroupPair_set_dominance1_1(self2, arg0);
        };
        Object.defineProperty(PxDominanceGroupPair.prototype, "dominance1", { get: PxDominanceGroupPair.prototype.get_dominance1, set: PxDominanceGroupPair.prototype.set_dominance1 });
        PxDominanceGroupPair.prototype["__destroy__"] = PxDominanceGroupPair.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDominanceGroupPair___destroy___0(self2);
        };
        function PxgDynamicsMemoryConfig() {
          this.ptr = _emscripten_bind_PxgDynamicsMemoryConfig_PxgDynamicsMemoryConfig_0();
          getCache(PxgDynamicsMemoryConfig)[this.ptr] = this;
        }
        ;
        ;
        PxgDynamicsMemoryConfig.prototype = Object.create(WrapperObject.prototype);
        PxgDynamicsMemoryConfig.prototype.constructor = PxgDynamicsMemoryConfig;
        PxgDynamicsMemoryConfig.prototype.__class__ = PxgDynamicsMemoryConfig;
        PxgDynamicsMemoryConfig.__cache__ = {};
        Module["PxgDynamicsMemoryConfig"] = PxgDynamicsMemoryConfig;
        PxgDynamicsMemoryConfig.prototype["get_constraintBufferCapacity"] = PxgDynamicsMemoryConfig.prototype.get_constraintBufferCapacity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_constraintBufferCapacity_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_constraintBufferCapacity"] = PxgDynamicsMemoryConfig.prototype.set_constraintBufferCapacity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_constraintBufferCapacity_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "constraintBufferCapacity", { get: PxgDynamicsMemoryConfig.prototype.get_constraintBufferCapacity, set: PxgDynamicsMemoryConfig.prototype.set_constraintBufferCapacity });
        PxgDynamicsMemoryConfig.prototype["get_contactBufferCapacity"] = PxgDynamicsMemoryConfig.prototype.get_contactBufferCapacity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_contactBufferCapacity_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_contactBufferCapacity"] = PxgDynamicsMemoryConfig.prototype.set_contactBufferCapacity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_contactBufferCapacity_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "contactBufferCapacity", { get: PxgDynamicsMemoryConfig.prototype.get_contactBufferCapacity, set: PxgDynamicsMemoryConfig.prototype.set_contactBufferCapacity });
        PxgDynamicsMemoryConfig.prototype["get_tempBufferCapacity"] = PxgDynamicsMemoryConfig.prototype.get_tempBufferCapacity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_tempBufferCapacity_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_tempBufferCapacity"] = PxgDynamicsMemoryConfig.prototype.set_tempBufferCapacity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_tempBufferCapacity_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "tempBufferCapacity", { get: PxgDynamicsMemoryConfig.prototype.get_tempBufferCapacity, set: PxgDynamicsMemoryConfig.prototype.set_tempBufferCapacity });
        PxgDynamicsMemoryConfig.prototype["get_contactStreamSize"] = PxgDynamicsMemoryConfig.prototype.get_contactStreamSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_contactStreamSize_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_contactStreamSize"] = PxgDynamicsMemoryConfig.prototype.set_contactStreamSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_contactStreamSize_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "contactStreamSize", { get: PxgDynamicsMemoryConfig.prototype.get_contactStreamSize, set: PxgDynamicsMemoryConfig.prototype.set_contactStreamSize });
        PxgDynamicsMemoryConfig.prototype["get_patchStreamSize"] = PxgDynamicsMemoryConfig.prototype.get_patchStreamSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_patchStreamSize_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_patchStreamSize"] = PxgDynamicsMemoryConfig.prototype.set_patchStreamSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_patchStreamSize_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "patchStreamSize", { get: PxgDynamicsMemoryConfig.prototype.get_patchStreamSize, set: PxgDynamicsMemoryConfig.prototype.set_patchStreamSize });
        PxgDynamicsMemoryConfig.prototype["get_forceStreamCapacity"] = PxgDynamicsMemoryConfig.prototype.get_forceStreamCapacity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_forceStreamCapacity_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_forceStreamCapacity"] = PxgDynamicsMemoryConfig.prototype.set_forceStreamCapacity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_forceStreamCapacity_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "forceStreamCapacity", { get: PxgDynamicsMemoryConfig.prototype.get_forceStreamCapacity, set: PxgDynamicsMemoryConfig.prototype.set_forceStreamCapacity });
        PxgDynamicsMemoryConfig.prototype["get_heapCapacity"] = PxgDynamicsMemoryConfig.prototype.get_heapCapacity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_heapCapacity_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_heapCapacity"] = PxgDynamicsMemoryConfig.prototype.set_heapCapacity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_heapCapacity_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "heapCapacity", { get: PxgDynamicsMemoryConfig.prototype.get_heapCapacity, set: PxgDynamicsMemoryConfig.prototype.set_heapCapacity });
        PxgDynamicsMemoryConfig.prototype["get_foundLostPairsCapacity"] = PxgDynamicsMemoryConfig.prototype.get_foundLostPairsCapacity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxgDynamicsMemoryConfig_get_foundLostPairsCapacity_0(self2);
        };
        PxgDynamicsMemoryConfig.prototype["set_foundLostPairsCapacity"] = PxgDynamicsMemoryConfig.prototype.set_foundLostPairsCapacity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig_set_foundLostPairsCapacity_1(self2, arg0);
        };
        Object.defineProperty(PxgDynamicsMemoryConfig.prototype, "foundLostPairsCapacity", { get: PxgDynamicsMemoryConfig.prototype.get_foundLostPairsCapacity, set: PxgDynamicsMemoryConfig.prototype.set_foundLostPairsCapacity });
        PxgDynamicsMemoryConfig.prototype["__destroy__"] = PxgDynamicsMemoryConfig.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxgDynamicsMemoryConfig___destroy___0(self2);
        };
        function PxFilterData(w0, w1, w2, w3) {
          if (w0 && typeof w0 === "object")
            w0 = w0.ptr;
          if (w1 && typeof w1 === "object")
            w1 = w1.ptr;
          if (w2 && typeof w2 === "object")
            w2 = w2.ptr;
          if (w3 && typeof w3 === "object")
            w3 = w3.ptr;
          if (w0 === void 0) {
            this.ptr = _emscripten_bind_PxFilterData_PxFilterData_0();
            getCache(PxFilterData)[this.ptr] = this;
            return;
          }
          if (w1 === void 0) {
            this.ptr = _emscripten_bind_PxFilterData_PxFilterData_1(w0);
            getCache(PxFilterData)[this.ptr] = this;
            return;
          }
          if (w2 === void 0) {
            this.ptr = _emscripten_bind_PxFilterData_PxFilterData_2(w0, w1);
            getCache(PxFilterData)[this.ptr] = this;
            return;
          }
          if (w3 === void 0) {
            this.ptr = _emscripten_bind_PxFilterData_PxFilterData_3(w0, w1, w2);
            getCache(PxFilterData)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxFilterData_PxFilterData_4(w0, w1, w2, w3);
          getCache(PxFilterData)[this.ptr] = this;
        }
        ;
        ;
        PxFilterData.prototype = Object.create(WrapperObject.prototype);
        PxFilterData.prototype.constructor = PxFilterData;
        PxFilterData.prototype.__class__ = PxFilterData;
        PxFilterData.__cache__ = {};
        Module["PxFilterData"] = PxFilterData;
        PxFilterData.prototype["get_word0"] = PxFilterData.prototype.get_word0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFilterData_get_word0_0(self2);
        };
        PxFilterData.prototype["set_word0"] = PxFilterData.prototype.set_word0 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxFilterData_set_word0_1(self2, arg0);
        };
        Object.defineProperty(PxFilterData.prototype, "word0", { get: PxFilterData.prototype.get_word0, set: PxFilterData.prototype.set_word0 });
        PxFilterData.prototype["get_word1"] = PxFilterData.prototype.get_word1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFilterData_get_word1_0(self2);
        };
        PxFilterData.prototype["set_word1"] = PxFilterData.prototype.set_word1 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxFilterData_set_word1_1(self2, arg0);
        };
        Object.defineProperty(PxFilterData.prototype, "word1", { get: PxFilterData.prototype.get_word1, set: PxFilterData.prototype.set_word1 });
        PxFilterData.prototype["get_word2"] = PxFilterData.prototype.get_word2 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFilterData_get_word2_0(self2);
        };
        PxFilterData.prototype["set_word2"] = PxFilterData.prototype.set_word2 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxFilterData_set_word2_1(self2, arg0);
        };
        Object.defineProperty(PxFilterData.prototype, "word2", { get: PxFilterData.prototype.get_word2, set: PxFilterData.prototype.set_word2 });
        PxFilterData.prototype["get_word3"] = PxFilterData.prototype.get_word3 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFilterData_get_word3_0(self2);
        };
        PxFilterData.prototype["set_word3"] = PxFilterData.prototype.set_word3 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxFilterData_set_word3_1(self2, arg0);
        };
        Object.defineProperty(PxFilterData.prototype, "word3", { get: PxFilterData.prototype.get_word3, set: PxFilterData.prototype.set_word3 });
        PxFilterData.prototype["__destroy__"] = PxFilterData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxFilterData___destroy___0(self2);
        };
        function PxHitFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxHitFlags_PxHitFlags_1(flags);
          getCache(PxHitFlags)[this.ptr] = this;
        }
        ;
        ;
        PxHitFlags.prototype = Object.create(WrapperObject.prototype);
        PxHitFlags.prototype.constructor = PxHitFlags;
        PxHitFlags.prototype.__class__ = PxHitFlags;
        PxHitFlags.__cache__ = {};
        Module["PxHitFlags"] = PxHitFlags;
        PxHitFlags.prototype["isSet"] = PxHitFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxHitFlags_isSet_1(self2, flag);
        };
        ;
        PxHitFlags.prototype["set"] = PxHitFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxHitFlags_set_1(self2, flag);
        };
        ;
        PxHitFlags.prototype["clear"] = PxHitFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxHitFlags_clear_1(self2, flag);
        };
        ;
        PxHitFlags.prototype["__destroy__"] = PxHitFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHitFlags___destroy___0(self2);
        };
        function PxOverlapBuffer10() {
          this.ptr = _emscripten_bind_PxOverlapBuffer10_PxOverlapBuffer10_0();
          getCache(PxOverlapBuffer10)[this.ptr] = this;
        }
        ;
        ;
        PxOverlapBuffer10.prototype = Object.create(PxOverlapCallback.prototype);
        PxOverlapBuffer10.prototype.constructor = PxOverlapBuffer10;
        PxOverlapBuffer10.prototype.__class__ = PxOverlapBuffer10;
        PxOverlapBuffer10.__cache__ = {};
        Module["PxOverlapBuffer10"] = PxOverlapBuffer10;
        PxOverlapBuffer10.prototype["getNbAnyHits"] = PxOverlapBuffer10.prototype.getNbAnyHits = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapBuffer10_getNbAnyHits_0(self2);
        };
        ;
        PxOverlapBuffer10.prototype["getAnyHit"] = PxOverlapBuffer10.prototype.getAnyHit = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapBuffer10_getAnyHit_1(self2, index), PxOverlapHit);
        };
        ;
        PxOverlapBuffer10.prototype["getNbTouches"] = PxOverlapBuffer10.prototype.getNbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapBuffer10_getNbTouches_0(self2);
        };
        ;
        PxOverlapBuffer10.prototype["getTouches"] = PxOverlapBuffer10.prototype.getTouches = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapBuffer10_getTouches_0(self2), PxOverlapHit);
        };
        ;
        PxOverlapBuffer10.prototype["getTouch"] = PxOverlapBuffer10.prototype.getTouch = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapBuffer10_getTouch_1(self2, index), PxOverlapHit);
        };
        ;
        PxOverlapBuffer10.prototype["getMaxNbTouches"] = PxOverlapBuffer10.prototype.getMaxNbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapBuffer10_getMaxNbTouches_0(self2);
        };
        ;
        PxOverlapBuffer10.prototype["hasAnyHits"] = PxOverlapBuffer10.prototype.hasAnyHits = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxOverlapBuffer10_hasAnyHits_0(self2);
        };
        ;
        PxOverlapBuffer10.prototype["get_block"] = PxOverlapBuffer10.prototype.get_block = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapBuffer10_get_block_0(self2), PxOverlapHit);
        };
        PxOverlapBuffer10.prototype["set_block"] = PxOverlapBuffer10.prototype.set_block = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapBuffer10_set_block_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapBuffer10.prototype, "block", { get: PxOverlapBuffer10.prototype.get_block, set: PxOverlapBuffer10.prototype.set_block });
        PxOverlapBuffer10.prototype["get_hasBlock"] = PxOverlapBuffer10.prototype.get_hasBlock = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxOverlapBuffer10_get_hasBlock_0(self2);
        };
        PxOverlapBuffer10.prototype["set_hasBlock"] = PxOverlapBuffer10.prototype.set_hasBlock = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapBuffer10_set_hasBlock_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapBuffer10.prototype, "hasBlock", { get: PxOverlapBuffer10.prototype.get_hasBlock, set: PxOverlapBuffer10.prototype.set_hasBlock });
        PxOverlapBuffer10.prototype["__destroy__"] = PxOverlapBuffer10.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxOverlapBuffer10___destroy___0(self2);
        };
        function PxOverlapHit() {
          throw "cannot construct a PxOverlapHit, no constructor in IDL";
        }
        PxOverlapHit.prototype = Object.create(PxQueryHit.prototype);
        PxOverlapHit.prototype.constructor = PxOverlapHit;
        PxOverlapHit.prototype.__class__ = PxOverlapHit;
        PxOverlapHit.__cache__ = {};
        Module["PxOverlapHit"] = PxOverlapHit;
        PxOverlapHit.prototype["get_actor"] = PxOverlapHit.prototype.get_actor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapHit_get_actor_0(self2), PxRigidActor);
        };
        PxOverlapHit.prototype["set_actor"] = PxOverlapHit.prototype.set_actor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapHit_set_actor_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapHit.prototype, "actor", { get: PxOverlapHit.prototype.get_actor, set: PxOverlapHit.prototype.set_actor });
        PxOverlapHit.prototype["get_shape"] = PxOverlapHit.prototype.get_shape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapHit_get_shape_0(self2), PxShape);
        };
        PxOverlapHit.prototype["set_shape"] = PxOverlapHit.prototype.set_shape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapHit_set_shape_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapHit.prototype, "shape", { get: PxOverlapHit.prototype.get_shape, set: PxOverlapHit.prototype.set_shape });
        PxOverlapHit.prototype["get_faceIndex"] = PxOverlapHit.prototype.get_faceIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapHit_get_faceIndex_0(self2);
        };
        PxOverlapHit.prototype["set_faceIndex"] = PxOverlapHit.prototype.set_faceIndex = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapHit_set_faceIndex_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapHit.prototype, "faceIndex", { get: PxOverlapHit.prototype.get_faceIndex, set: PxOverlapHit.prototype.set_faceIndex });
        PxOverlapHit.prototype["__destroy__"] = PxOverlapHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxOverlapHit___destroy___0(self2);
        };
        function PxOverlapQueryResult() {
          throw "cannot construct a PxOverlapQueryResult, no constructor in IDL";
        }
        PxOverlapQueryResult.prototype = Object.create(WrapperObject.prototype);
        PxOverlapQueryResult.prototype.constructor = PxOverlapQueryResult;
        PxOverlapQueryResult.prototype.__class__ = PxOverlapQueryResult;
        PxOverlapQueryResult.__cache__ = {};
        Module["PxOverlapQueryResult"] = PxOverlapQueryResult;
        PxOverlapQueryResult.prototype["getNbAnyHits"] = PxOverlapQueryResult.prototype.getNbAnyHits = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapQueryResult_getNbAnyHits_0(self2);
        };
        ;
        PxOverlapQueryResult.prototype["getAnyHit"] = PxOverlapQueryResult.prototype.getAnyHit = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapQueryResult_getAnyHit_1(self2, index), PxOverlapHit);
        };
        ;
        PxOverlapQueryResult.prototype["get_block"] = PxOverlapQueryResult.prototype.get_block = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapQueryResult_get_block_0(self2), PxOverlapHit);
        };
        PxOverlapQueryResult.prototype["set_block"] = PxOverlapQueryResult.prototype.set_block = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapQueryResult_set_block_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapQueryResult.prototype, "block", { get: PxOverlapQueryResult.prototype.get_block, set: PxOverlapQueryResult.prototype.set_block });
        PxOverlapQueryResult.prototype["get_touches"] = PxOverlapQueryResult.prototype.get_touches = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxOverlapQueryResult_get_touches_0(self2), PxOverlapHit);
        };
        PxOverlapQueryResult.prototype["set_touches"] = PxOverlapQueryResult.prototype.set_touches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapQueryResult_set_touches_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapQueryResult.prototype, "touches", { get: PxOverlapQueryResult.prototype.get_touches, set: PxOverlapQueryResult.prototype.set_touches });
        PxOverlapQueryResult.prototype["get_nbTouches"] = PxOverlapQueryResult.prototype.get_nbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapQueryResult_get_nbTouches_0(self2);
        };
        PxOverlapQueryResult.prototype["set_nbTouches"] = PxOverlapQueryResult.prototype.set_nbTouches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapQueryResult_set_nbTouches_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapQueryResult.prototype, "nbTouches", { get: PxOverlapQueryResult.prototype.get_nbTouches, set: PxOverlapQueryResult.prototype.set_nbTouches });
        PxOverlapQueryResult.prototype["get_userData"] = PxOverlapQueryResult.prototype.get_userData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapQueryResult_get_userData_0(self2);
        };
        PxOverlapQueryResult.prototype["set_userData"] = PxOverlapQueryResult.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapQueryResult_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapQueryResult.prototype, "userData", { get: PxOverlapQueryResult.prototype.get_userData, set: PxOverlapQueryResult.prototype.set_userData });
        PxOverlapQueryResult.prototype["get_queryStatus"] = PxOverlapQueryResult.prototype.get_queryStatus = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxOverlapQueryResult_get_queryStatus_0(self2);
        };
        PxOverlapQueryResult.prototype["set_queryStatus"] = PxOverlapQueryResult.prototype.set_queryStatus = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapQueryResult_set_queryStatus_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapQueryResult.prototype, "queryStatus", { get: PxOverlapQueryResult.prototype.get_queryStatus, set: PxOverlapQueryResult.prototype.set_queryStatus });
        PxOverlapQueryResult.prototype["get_hasBlock"] = PxOverlapQueryResult.prototype.get_hasBlock = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxOverlapQueryResult_get_hasBlock_0(self2);
        };
        PxOverlapQueryResult.prototype["set_hasBlock"] = PxOverlapQueryResult.prototype.set_hasBlock = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxOverlapQueryResult_set_hasBlock_1(self2, arg0);
        };
        Object.defineProperty(PxOverlapQueryResult.prototype, "hasBlock", { get: PxOverlapQueryResult.prototype.get_hasBlock, set: PxOverlapQueryResult.prototype.set_hasBlock });
        PxOverlapQueryResult.prototype["__destroy__"] = PxOverlapQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxOverlapQueryResult___destroy___0(self2);
        };
        function PxMaterial() {
          throw "cannot construct a PxMaterial, no constructor in IDL";
        }
        PxMaterial.prototype = Object.create(PxBase.prototype);
        PxMaterial.prototype.constructor = PxMaterial;
        PxMaterial.prototype.__class__ = PxMaterial;
        PxMaterial.__cache__ = {};
        Module["PxMaterial"] = PxMaterial;
        PxMaterial.prototype["getConcreteTypeName"] = PxMaterial.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxMaterial_getConcreteTypeName_0(self2));
        };
        ;
        PxMaterial.prototype["getConcreteType"] = PxMaterial.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxMaterial_getConcreteType_0(self2);
        };
        ;
        PxMaterial.prototype["setBaseFlag"] = PxMaterial.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxMaterial_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxMaterial.prototype["setBaseFlags"] = PxMaterial.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxMaterial_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxMaterial.prototype["getBaseFlags"] = PxMaterial.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxMaterial_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxMaterial.prototype["isReleasable"] = PxMaterial.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxMaterial_isReleasable_0(self2);
        };
        ;
        PxMaterial.prototype["get_userData"] = PxMaterial.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxMaterial_get_userData_0(self2), VoidPtr);
        };
        PxMaterial.prototype["set_userData"] = PxMaterial.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxMaterial_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxMaterial.prototype, "userData", { get: PxMaterial.prototype.get_userData, set: PxMaterial.prototype.set_userData });
        function PxPairFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxPairFlags_PxPairFlags_1(flags);
          getCache(PxPairFlags)[this.ptr] = this;
        }
        ;
        ;
        PxPairFlags.prototype = Object.create(WrapperObject.prototype);
        PxPairFlags.prototype.constructor = PxPairFlags;
        PxPairFlags.prototype.__class__ = PxPairFlags;
        PxPairFlags.__cache__ = {};
        Module["PxPairFlags"] = PxPairFlags;
        PxPairFlags.prototype["isSet"] = PxPairFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxPairFlags_isSet_1(self2, flag);
        };
        ;
        PxPairFlags.prototype["set"] = PxPairFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxPairFlags_set_1(self2, flag);
        };
        ;
        PxPairFlags.prototype["clear"] = PxPairFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxPairFlags_clear_1(self2, flag);
        };
        ;
        PxPairFlags.prototype["__destroy__"] = PxPairFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPairFlags___destroy___0(self2);
        };
        function PxPhysics() {
          throw "cannot construct a PxPhysics, no constructor in IDL";
        }
        PxPhysics.prototype = Object.create(WrapperObject.prototype);
        PxPhysics.prototype.constructor = PxPhysics;
        PxPhysics.prototype.__class__ = PxPhysics;
        PxPhysics.__cache__ = {};
        Module["PxPhysics"] = PxPhysics;
        PxPhysics.prototype["release"] = PxPhysics.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPhysics_release_0(self2);
        };
        ;
        PxPhysics.prototype["getFoundation"] = PxPhysics.prototype.getFoundation = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_getFoundation_0(self2), PxFoundation);
        };
        ;
        PxPhysics.prototype["createAggregate"] = PxPhysics.prototype.createAggregate = function(size, enableSelfCollision) {
          var self2 = this.ptr;
          if (size && typeof size === "object")
            size = size.ptr;
          if (enableSelfCollision && typeof enableSelfCollision === "object")
            enableSelfCollision = enableSelfCollision.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_createAggregate_2(self2, size, enableSelfCollision), PxAggregate);
        };
        ;
        PxPhysics.prototype["getTolerancesScale"] = PxPhysics.prototype.getTolerancesScale = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_getTolerancesScale_0(self2), PxTolerancesScale);
        };
        ;
        PxPhysics.prototype["createScene"] = PxPhysics.prototype.createScene = function(sceneDesc) {
          var self2 = this.ptr;
          if (sceneDesc && typeof sceneDesc === "object")
            sceneDesc = sceneDesc.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_createScene_1(self2, sceneDesc), PxScene);
        };
        ;
        PxPhysics.prototype["createRigidStatic"] = PxPhysics.prototype.createRigidStatic = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_createRigidStatic_1(self2, pose), PxRigidStatic);
        };
        ;
        PxPhysics.prototype["createRigidDynamic"] = PxPhysics.prototype.createRigidDynamic = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_createRigidDynamic_1(self2, pose), PxRigidDynamic);
        };
        ;
        PxPhysics.prototype["createShape"] = PxPhysics.prototype.createShape = function(geometry, material, isExclusive, shapeFlags) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          if (material && typeof material === "object")
            material = material.ptr;
          if (isExclusive && typeof isExclusive === "object")
            isExclusive = isExclusive.ptr;
          if (shapeFlags && typeof shapeFlags === "object")
            shapeFlags = shapeFlags.ptr;
          if (isExclusive === void 0) {
            return wrapPointer(_emscripten_bind_PxPhysics_createShape_2(self2, geometry, material), PxShape);
          }
          if (shapeFlags === void 0) {
            return wrapPointer(_emscripten_bind_PxPhysics_createShape_3(self2, geometry, material, isExclusive), PxShape);
          }
          return wrapPointer(_emscripten_bind_PxPhysics_createShape_4(self2, geometry, material, isExclusive, shapeFlags), PxShape);
        };
        ;
        PxPhysics.prototype["getNbShapes"] = PxPhysics.prototype.getNbShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPhysics_getNbShapes_0(self2);
        };
        ;
        PxPhysics.prototype["createArticulation"] = PxPhysics.prototype.createArticulation = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_createArticulation_0(self2), PxArticulation);
        };
        ;
        PxPhysics.prototype["createArticulationReducedCoordinate"] = PxPhysics.prototype.createArticulationReducedCoordinate = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_createArticulationReducedCoordinate_0(self2), PxArticulationReducedCoordinate);
        };
        ;
        PxPhysics.prototype["createMaterial"] = PxPhysics.prototype.createMaterial = function(staticFriction, dynamicFriction, restitution) {
          var self2 = this.ptr;
          if (staticFriction && typeof staticFriction === "object")
            staticFriction = staticFriction.ptr;
          if (dynamicFriction && typeof dynamicFriction === "object")
            dynamicFriction = dynamicFriction.ptr;
          if (restitution && typeof restitution === "object")
            restitution = restitution.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_createMaterial_3(self2, staticFriction, dynamicFriction, restitution), PxMaterial);
        };
        ;
        PxPhysics.prototype["getPhysicsInsertionCallback"] = PxPhysics.prototype.getPhysicsInsertionCallback = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPhysics_getPhysicsInsertionCallback_0(self2), PxPhysicsInsertionCallback);
        };
        ;
        PxPhysics.prototype["__destroy__"] = PxPhysics.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPhysics___destroy___0(self2);
        };
        function PxQueryFilterData(fd, f) {
          if (fd && typeof fd === "object")
            fd = fd.ptr;
          if (f && typeof f === "object")
            f = f.ptr;
          if (fd === void 0) {
            this.ptr = _emscripten_bind_PxQueryFilterData_PxQueryFilterData_0();
            getCache(PxQueryFilterData)[this.ptr] = this;
            return;
          }
          if (f === void 0) {
            this.ptr = _emscripten_bind_PxQueryFilterData_PxQueryFilterData_1(fd);
            getCache(PxQueryFilterData)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxQueryFilterData_PxQueryFilterData_2(fd, f);
          getCache(PxQueryFilterData)[this.ptr] = this;
        }
        ;
        ;
        PxQueryFilterData.prototype = Object.create(WrapperObject.prototype);
        PxQueryFilterData.prototype.constructor = PxQueryFilterData;
        PxQueryFilterData.prototype.__class__ = PxQueryFilterData;
        PxQueryFilterData.__cache__ = {};
        Module["PxQueryFilterData"] = PxQueryFilterData;
        PxQueryFilterData.prototype["get_data"] = PxQueryFilterData.prototype.get_data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxQueryFilterData_get_data_0(self2), PxFilterData);
        };
        PxQueryFilterData.prototype["set_data"] = PxQueryFilterData.prototype.set_data = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQueryFilterData_set_data_1(self2, arg0);
        };
        Object.defineProperty(PxQueryFilterData.prototype, "data", { get: PxQueryFilterData.prototype.get_data, set: PxQueryFilterData.prototype.set_data });
        PxQueryFilterData.prototype["get_flags"] = PxQueryFilterData.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxQueryFilterData_get_flags_0(self2), PxQueryFlags);
        };
        PxQueryFilterData.prototype["set_flags"] = PxQueryFilterData.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQueryFilterData_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxQueryFilterData.prototype, "flags", { get: PxQueryFilterData.prototype.get_flags, set: PxQueryFilterData.prototype.set_flags });
        PxQueryFilterData.prototype["__destroy__"] = PxQueryFilterData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxQueryFilterData___destroy___0(self2);
        };
        function PxQueryFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxQueryFlags_PxQueryFlags_1(flags);
          getCache(PxQueryFlags)[this.ptr] = this;
        }
        ;
        ;
        PxQueryFlags.prototype = Object.create(WrapperObject.prototype);
        PxQueryFlags.prototype.constructor = PxQueryFlags;
        PxQueryFlags.prototype.__class__ = PxQueryFlags;
        PxQueryFlags.__cache__ = {};
        Module["PxQueryFlags"] = PxQueryFlags;
        PxQueryFlags.prototype["isSet"] = PxQueryFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxQueryFlags_isSet_1(self2, flag);
        };
        ;
        PxQueryFlags.prototype["set"] = PxQueryFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxQueryFlags_set_1(self2, flag);
        };
        ;
        PxQueryFlags.prototype["clear"] = PxQueryFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxQueryFlags_clear_1(self2, flag);
        };
        ;
        PxQueryFlags.prototype["__destroy__"] = PxQueryFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxQueryFlags___destroy___0(self2);
        };
        function PxRaycastBuffer10() {
          this.ptr = _emscripten_bind_PxRaycastBuffer10_PxRaycastBuffer10_0();
          getCache(PxRaycastBuffer10)[this.ptr] = this;
        }
        ;
        ;
        PxRaycastBuffer10.prototype = Object.create(PxRaycastCallback.prototype);
        PxRaycastBuffer10.prototype.constructor = PxRaycastBuffer10;
        PxRaycastBuffer10.prototype.__class__ = PxRaycastBuffer10;
        PxRaycastBuffer10.__cache__ = {};
        Module["PxRaycastBuffer10"] = PxRaycastBuffer10;
        PxRaycastBuffer10.prototype["getNbAnyHits"] = PxRaycastBuffer10.prototype.getNbAnyHits = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastBuffer10_getNbAnyHits_0(self2);
        };
        ;
        PxRaycastBuffer10.prototype["getAnyHit"] = PxRaycastBuffer10.prototype.getAnyHit = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastBuffer10_getAnyHit_1(self2, index), PxRaycastHit);
        };
        ;
        PxRaycastBuffer10.prototype["getNbTouches"] = PxRaycastBuffer10.prototype.getNbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastBuffer10_getNbTouches_0(self2);
        };
        ;
        PxRaycastBuffer10.prototype["getTouches"] = PxRaycastBuffer10.prototype.getTouches = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastBuffer10_getTouches_0(self2), PxRaycastHit);
        };
        ;
        PxRaycastBuffer10.prototype["getTouch"] = PxRaycastBuffer10.prototype.getTouch = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastBuffer10_getTouch_1(self2, index), PxRaycastHit);
        };
        ;
        PxRaycastBuffer10.prototype["getMaxNbTouches"] = PxRaycastBuffer10.prototype.getMaxNbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastBuffer10_getMaxNbTouches_0(self2);
        };
        ;
        PxRaycastBuffer10.prototype["hasAnyHits"] = PxRaycastBuffer10.prototype.hasAnyHits = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRaycastBuffer10_hasAnyHits_0(self2);
        };
        ;
        PxRaycastBuffer10.prototype["get_block"] = PxRaycastBuffer10.prototype.get_block = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastBuffer10_get_block_0(self2), PxRaycastHit);
        };
        PxRaycastBuffer10.prototype["set_block"] = PxRaycastBuffer10.prototype.set_block = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastBuffer10_set_block_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastBuffer10.prototype, "block", { get: PxRaycastBuffer10.prototype.get_block, set: PxRaycastBuffer10.prototype.set_block });
        PxRaycastBuffer10.prototype["get_hasBlock"] = PxRaycastBuffer10.prototype.get_hasBlock = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRaycastBuffer10_get_hasBlock_0(self2);
        };
        PxRaycastBuffer10.prototype["set_hasBlock"] = PxRaycastBuffer10.prototype.set_hasBlock = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastBuffer10_set_hasBlock_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastBuffer10.prototype, "hasBlock", { get: PxRaycastBuffer10.prototype.get_hasBlock, set: PxRaycastBuffer10.prototype.set_hasBlock });
        PxRaycastBuffer10.prototype["__destroy__"] = PxRaycastBuffer10.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRaycastBuffer10___destroy___0(self2);
        };
        function PxRaycastHit() {
          this.ptr = _emscripten_bind_PxRaycastHit_PxRaycastHit_0();
          getCache(PxRaycastHit)[this.ptr] = this;
        }
        ;
        ;
        PxRaycastHit.prototype = Object.create(PxLocationHit.prototype);
        PxRaycastHit.prototype.constructor = PxRaycastHit;
        PxRaycastHit.prototype.__class__ = PxRaycastHit;
        PxRaycastHit.__cache__ = {};
        Module["PxRaycastHit"] = PxRaycastHit;
        PxRaycastHit.prototype["get_u"] = PxRaycastHit.prototype.get_u = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastHit_get_u_0(self2);
        };
        PxRaycastHit.prototype["set_u"] = PxRaycastHit.prototype.set_u = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_u_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "u", { get: PxRaycastHit.prototype.get_u, set: PxRaycastHit.prototype.set_u });
        PxRaycastHit.prototype["get_v"] = PxRaycastHit.prototype.get_v = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastHit_get_v_0(self2);
        };
        PxRaycastHit.prototype["set_v"] = PxRaycastHit.prototype.set_v = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_v_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "v", { get: PxRaycastHit.prototype.get_v, set: PxRaycastHit.prototype.set_v });
        PxRaycastHit.prototype["get_actor"] = PxRaycastHit.prototype.get_actor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastHit_get_actor_0(self2), PxRigidActor);
        };
        PxRaycastHit.prototype["set_actor"] = PxRaycastHit.prototype.set_actor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_actor_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "actor", { get: PxRaycastHit.prototype.get_actor, set: PxRaycastHit.prototype.set_actor });
        PxRaycastHit.prototype["get_shape"] = PxRaycastHit.prototype.get_shape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastHit_get_shape_0(self2), PxShape);
        };
        PxRaycastHit.prototype["set_shape"] = PxRaycastHit.prototype.set_shape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_shape_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "shape", { get: PxRaycastHit.prototype.get_shape, set: PxRaycastHit.prototype.set_shape });
        PxRaycastHit.prototype["get_flags"] = PxRaycastHit.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastHit_get_flags_0(self2), PxHitFlags);
        };
        PxRaycastHit.prototype["set_flags"] = PxRaycastHit.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "flags", { get: PxRaycastHit.prototype.get_flags, set: PxRaycastHit.prototype.set_flags });
        PxRaycastHit.prototype["get_position"] = PxRaycastHit.prototype.get_position = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastHit_get_position_0(self2), PxVec3);
        };
        PxRaycastHit.prototype["set_position"] = PxRaycastHit.prototype.set_position = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_position_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "position", { get: PxRaycastHit.prototype.get_position, set: PxRaycastHit.prototype.set_position });
        PxRaycastHit.prototype["get_normal"] = PxRaycastHit.prototype.get_normal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastHit_get_normal_0(self2), PxVec3);
        };
        PxRaycastHit.prototype["set_normal"] = PxRaycastHit.prototype.set_normal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_normal_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "normal", { get: PxRaycastHit.prototype.get_normal, set: PxRaycastHit.prototype.set_normal });
        PxRaycastHit.prototype["get_distance"] = PxRaycastHit.prototype.get_distance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastHit_get_distance_0(self2);
        };
        PxRaycastHit.prototype["set_distance"] = PxRaycastHit.prototype.set_distance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_distance_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "distance", { get: PxRaycastHit.prototype.get_distance, set: PxRaycastHit.prototype.set_distance });
        PxRaycastHit.prototype["get_faceIndex"] = PxRaycastHit.prototype.get_faceIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastHit_get_faceIndex_0(self2);
        };
        PxRaycastHit.prototype["set_faceIndex"] = PxRaycastHit.prototype.set_faceIndex = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastHit_set_faceIndex_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastHit.prototype, "faceIndex", { get: PxRaycastHit.prototype.get_faceIndex, set: PxRaycastHit.prototype.set_faceIndex });
        PxRaycastHit.prototype["__destroy__"] = PxRaycastHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRaycastHit___destroy___0(self2);
        };
        function PxRaycastQueryResult() {
          throw "cannot construct a PxRaycastQueryResult, no constructor in IDL";
        }
        PxRaycastQueryResult.prototype = Object.create(WrapperObject.prototype);
        PxRaycastQueryResult.prototype.constructor = PxRaycastQueryResult;
        PxRaycastQueryResult.prototype.__class__ = PxRaycastQueryResult;
        PxRaycastQueryResult.__cache__ = {};
        Module["PxRaycastQueryResult"] = PxRaycastQueryResult;
        PxRaycastQueryResult.prototype["getNbAnyHits"] = PxRaycastQueryResult.prototype.getNbAnyHits = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastQueryResult_getNbAnyHits_0(self2);
        };
        ;
        PxRaycastQueryResult.prototype["getAnyHit"] = PxRaycastQueryResult.prototype.getAnyHit = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastQueryResult_getAnyHit_1(self2, index), PxRaycastHit);
        };
        ;
        PxRaycastQueryResult.prototype["get_block"] = PxRaycastQueryResult.prototype.get_block = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastQueryResult_get_block_0(self2), PxRaycastHit);
        };
        PxRaycastQueryResult.prototype["set_block"] = PxRaycastQueryResult.prototype.set_block = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastQueryResult_set_block_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastQueryResult.prototype, "block", { get: PxRaycastQueryResult.prototype.get_block, set: PxRaycastQueryResult.prototype.set_block });
        PxRaycastQueryResult.prototype["get_touches"] = PxRaycastQueryResult.prototype.get_touches = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRaycastQueryResult_get_touches_0(self2), PxRaycastHit);
        };
        PxRaycastQueryResult.prototype["set_touches"] = PxRaycastQueryResult.prototype.set_touches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastQueryResult_set_touches_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastQueryResult.prototype, "touches", { get: PxRaycastQueryResult.prototype.get_touches, set: PxRaycastQueryResult.prototype.set_touches });
        PxRaycastQueryResult.prototype["get_nbTouches"] = PxRaycastQueryResult.prototype.get_nbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastQueryResult_get_nbTouches_0(self2);
        };
        PxRaycastQueryResult.prototype["set_nbTouches"] = PxRaycastQueryResult.prototype.set_nbTouches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastQueryResult_set_nbTouches_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastQueryResult.prototype, "nbTouches", { get: PxRaycastQueryResult.prototype.get_nbTouches, set: PxRaycastQueryResult.prototype.set_nbTouches });
        PxRaycastQueryResult.prototype["get_userData"] = PxRaycastQueryResult.prototype.get_userData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastQueryResult_get_userData_0(self2);
        };
        PxRaycastQueryResult.prototype["set_userData"] = PxRaycastQueryResult.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastQueryResult_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastQueryResult.prototype, "userData", { get: PxRaycastQueryResult.prototype.get_userData, set: PxRaycastQueryResult.prototype.set_userData });
        PxRaycastQueryResult.prototype["get_queryStatus"] = PxRaycastQueryResult.prototype.get_queryStatus = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRaycastQueryResult_get_queryStatus_0(self2);
        };
        PxRaycastQueryResult.prototype["set_queryStatus"] = PxRaycastQueryResult.prototype.set_queryStatus = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastQueryResult_set_queryStatus_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastQueryResult.prototype, "queryStatus", { get: PxRaycastQueryResult.prototype.get_queryStatus, set: PxRaycastQueryResult.prototype.set_queryStatus });
        PxRaycastQueryResult.prototype["get_hasBlock"] = PxRaycastQueryResult.prototype.get_hasBlock = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRaycastQueryResult_get_hasBlock_0(self2);
        };
        PxRaycastQueryResult.prototype["set_hasBlock"] = PxRaycastQueryResult.prototype.set_hasBlock = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRaycastQueryResult_set_hasBlock_1(self2, arg0);
        };
        Object.defineProperty(PxRaycastQueryResult.prototype, "hasBlock", { get: PxRaycastQueryResult.prototype.get_hasBlock, set: PxRaycastQueryResult.prototype.set_hasBlock });
        PxRaycastQueryResult.prototype["__destroy__"] = PxRaycastQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRaycastQueryResult___destroy___0(self2);
        };
        function PxRigidBodyFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxRigidBodyFlags_PxRigidBodyFlags_1(flags);
          getCache(PxRigidBodyFlags)[this.ptr] = this;
        }
        ;
        ;
        PxRigidBodyFlags.prototype = Object.create(WrapperObject.prototype);
        PxRigidBodyFlags.prototype.constructor = PxRigidBodyFlags;
        PxRigidBodyFlags.prototype.__class__ = PxRigidBodyFlags;
        PxRigidBodyFlags.__cache__ = {};
        Module["PxRigidBodyFlags"] = PxRigidBodyFlags;
        PxRigidBodyFlags.prototype["isSet"] = PxRigidBodyFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxRigidBodyFlags_isSet_1(self2, flag);
        };
        ;
        PxRigidBodyFlags.prototype["set"] = PxRigidBodyFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxRigidBodyFlags_set_1(self2, flag);
        };
        ;
        PxRigidBodyFlags.prototype["clear"] = PxRigidBodyFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxRigidBodyFlags_clear_1(self2, flag);
        };
        ;
        PxRigidBodyFlags.prototype["__destroy__"] = PxRigidBodyFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidBodyFlags___destroy___0(self2);
        };
        function PxRigidDynamic() {
          throw "cannot construct a PxRigidDynamic, no constructor in IDL";
        }
        PxRigidDynamic.prototype = Object.create(PxRigidBody.prototype);
        PxRigidDynamic.prototype.constructor = PxRigidDynamic;
        PxRigidDynamic.prototype.__class__ = PxRigidDynamic;
        PxRigidDynamic.__cache__ = {};
        Module["PxRigidDynamic"] = PxRigidDynamic;
        PxRigidDynamic.prototype["setKinematicTarget"] = PxRigidDynamic.prototype.setKinematicTarget = function(destination) {
          var self2 = this.ptr;
          if (destination && typeof destination === "object")
            destination = destination.ptr;
          _emscripten_bind_PxRigidDynamic_setKinematicTarget_1(self2, destination);
        };
        ;
        PxRigidDynamic.prototype["getKinematicTarget"] = PxRigidDynamic.prototype.getKinematicTarget = function(target) {
          var self2 = this.ptr;
          if (target && typeof target === "object")
            target = target.ptr;
          return !!_emscripten_bind_PxRigidDynamic_getKinematicTarget_1(self2, target);
        };
        ;
        PxRigidDynamic.prototype["isSleeping"] = PxRigidDynamic.prototype.isSleeping = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRigidDynamic_isSleeping_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setSleepThreshold"] = PxRigidDynamic.prototype.setSleepThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxRigidDynamic_setSleepThreshold_1(self2, threshold);
        };
        ;
        PxRigidDynamic.prototype["getSleepThreshold"] = PxRigidDynamic.prototype.getSleepThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getSleepThreshold_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setStabilizationThreshold"] = PxRigidDynamic.prototype.setStabilizationThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxRigidDynamic_setStabilizationThreshold_1(self2, threshold);
        };
        ;
        PxRigidDynamic.prototype["getStabilizationThreshold"] = PxRigidDynamic.prototype.getStabilizationThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getStabilizationThreshold_0(self2);
        };
        ;
        PxRigidDynamic.prototype["getRigidDynamicLockFlags"] = PxRigidDynamic.prototype.getRigidDynamicLockFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getRigidDynamicLockFlags_0(self2), PxRigidDynamicLockFlags);
        };
        ;
        PxRigidDynamic.prototype["setRigidDynamicLockFlag"] = PxRigidDynamic.prototype.setRigidDynamicLockFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlag_2(self2, flag, value);
        };
        ;
        PxRigidDynamic.prototype["setRigidDynamicLockFlags"] = PxRigidDynamic.prototype.setRigidDynamicLockFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxRigidDynamic_setRigidDynamicLockFlags_1(self2, flags);
        };
        ;
        PxRigidDynamic.prototype["setWakeCounter"] = PxRigidDynamic.prototype.setWakeCounter = function(wakeCounterValue) {
          var self2 = this.ptr;
          if (wakeCounterValue && typeof wakeCounterValue === "object")
            wakeCounterValue = wakeCounterValue.ptr;
          _emscripten_bind_PxRigidDynamic_setWakeCounter_1(self2, wakeCounterValue);
        };
        ;
        PxRigidDynamic.prototype["getWakeCounter"] = PxRigidDynamic.prototype.getWakeCounter = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getWakeCounter_0(self2);
        };
        ;
        PxRigidDynamic.prototype["wakeUp"] = PxRigidDynamic.prototype.wakeUp = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidDynamic_wakeUp_0(self2);
        };
        ;
        PxRigidDynamic.prototype["putToSleep"] = PxRigidDynamic.prototype.putToSleep = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidDynamic_putToSleep_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setSolverIterationCounts"] = PxRigidDynamic.prototype.setSolverIterationCounts = function(minPositionIters, minVelocityIters) {
          var self2 = this.ptr;
          if (minPositionIters && typeof minPositionIters === "object")
            minPositionIters = minPositionIters.ptr;
          if (minVelocityIters && typeof minVelocityIters === "object")
            minVelocityIters = minVelocityIters.ptr;
          if (minVelocityIters === void 0) {
            _emscripten_bind_PxRigidDynamic_setSolverIterationCounts_1(self2, minPositionIters);
            return;
          }
          _emscripten_bind_PxRigidDynamic_setSolverIterationCounts_2(self2, minPositionIters, minVelocityIters);
        };
        ;
        PxRigidDynamic.prototype["getContactReportThreshold"] = PxRigidDynamic.prototype.getContactReportThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getContactReportThreshold_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setContactReportThreshold"] = PxRigidDynamic.prototype.setContactReportThreshold = function(threshold) {
          var self2 = this.ptr;
          if (threshold && typeof threshold === "object")
            threshold = threshold.ptr;
          _emscripten_bind_PxRigidDynamic_setContactReportThreshold_1(self2, threshold);
        };
        ;
        PxRigidDynamic.prototype["getType"] = PxRigidDynamic.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getType_0(self2);
        };
        ;
        PxRigidDynamic.prototype["getScene"] = PxRigidDynamic.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getScene_0(self2), PxScene);
        };
        ;
        PxRigidDynamic.prototype["setName"] = PxRigidDynamic.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxRigidDynamic_setName_1(self2, name);
        };
        ;
        PxRigidDynamic.prototype["getName"] = PxRigidDynamic.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidDynamic_getName_0(self2));
        };
        ;
        PxRigidDynamic.prototype["getWorldBounds"] = PxRigidDynamic.prototype.getWorldBounds = function(inflation) {
          var self2 = this.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (inflation === void 0) {
            return wrapPointer(_emscripten_bind_PxRigidDynamic_getWorldBounds_0(self2), PxBounds3);
          }
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getWorldBounds_1(self2, inflation), PxBounds3);
        };
        ;
        PxRigidDynamic.prototype["setActorFlags"] = PxRigidDynamic.prototype.setActorFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxRigidDynamic_setActorFlags_1(self2, flags);
        };
        ;
        PxRigidDynamic.prototype["getActorFlags"] = PxRigidDynamic.prototype.getActorFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getActorFlags_0(self2), PxActorFlags);
        };
        ;
        PxRigidDynamic.prototype["setDominanceGroup"] = PxRigidDynamic.prototype.setDominanceGroup = function(dominanceGroup) {
          var self2 = this.ptr;
          if (dominanceGroup && typeof dominanceGroup === "object")
            dominanceGroup = dominanceGroup.ptr;
          _emscripten_bind_PxRigidDynamic_setDominanceGroup_1(self2, dominanceGroup);
        };
        ;
        PxRigidDynamic.prototype["getDominanceGroup"] = PxRigidDynamic.prototype.getDominanceGroup = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getDominanceGroup_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setOwnerClient"] = PxRigidDynamic.prototype.setOwnerClient = function(inClient) {
          var self2 = this.ptr;
          if (inClient && typeof inClient === "object")
            inClient = inClient.ptr;
          _emscripten_bind_PxRigidDynamic_setOwnerClient_1(self2, inClient);
        };
        ;
        PxRigidDynamic.prototype["getOwnerClient"] = PxRigidDynamic.prototype.getOwnerClient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getOwnerClient_0(self2);
        };
        ;
        PxRigidDynamic.prototype["getConcreteTypeName"] = PxRigidDynamic.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidDynamic_getConcreteTypeName_0(self2));
        };
        ;
        PxRigidDynamic.prototype["getConcreteType"] = PxRigidDynamic.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getConcreteType_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setBaseFlag"] = PxRigidDynamic.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRigidDynamic_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxRigidDynamic.prototype["setBaseFlags"] = PxRigidDynamic.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxRigidDynamic_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxRigidDynamic.prototype["getBaseFlags"] = PxRigidDynamic.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxRigidDynamic.prototype["isReleasable"] = PxRigidDynamic.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRigidDynamic_isReleasable_0(self2);
        };
        ;
        PxRigidDynamic.prototype["getGlobalPose"] = PxRigidDynamic.prototype.getGlobalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getGlobalPose_0(self2), PxTransform);
        };
        ;
        PxRigidDynamic.prototype["setGlobalPose"] = PxRigidDynamic.prototype.setGlobalPose = function(pose, autowake) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidDynamic_setGlobalPose_1(self2, pose);
            return;
          }
          _emscripten_bind_PxRigidDynamic_setGlobalPose_2(self2, pose, autowake);
        };
        ;
        PxRigidDynamic.prototype["attachShape"] = PxRigidDynamic.prototype.attachShape = function(shape) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          return !!_emscripten_bind_PxRigidDynamic_attachShape_1(self2, shape);
        };
        ;
        PxRigidDynamic.prototype["detachShape"] = PxRigidDynamic.prototype.detachShape = function(shape, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxRigidDynamic_detachShape_1(self2, shape);
            return;
          }
          _emscripten_bind_PxRigidDynamic_detachShape_2(self2, shape, wakeOnLostTouch);
        };
        ;
        PxRigidDynamic.prototype["getNbShapes"] = PxRigidDynamic.prototype.getNbShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getNbShapes_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setCMassLocalPose"] = PxRigidDynamic.prototype.setCMassLocalPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxRigidDynamic_setCMassLocalPose_1(self2, pose);
        };
        ;
        PxRigidDynamic.prototype["getCMassLocalPose"] = PxRigidDynamic.prototype.getCMassLocalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getCMassLocalPose_0(self2), PxTransform);
        };
        ;
        PxRigidDynamic.prototype["setMass"] = PxRigidDynamic.prototype.setMass = function(mass) {
          var self2 = this.ptr;
          if (mass && typeof mass === "object")
            mass = mass.ptr;
          _emscripten_bind_PxRigidDynamic_setMass_1(self2, mass);
        };
        ;
        PxRigidDynamic.prototype["getMass"] = PxRigidDynamic.prototype.getMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getMass_0(self2);
        };
        ;
        PxRigidDynamic.prototype["getInvMass"] = PxRigidDynamic.prototype.getInvMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getInvMass_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setMassSpaceInertiaTensor"] = PxRigidDynamic.prototype.setMassSpaceInertiaTensor = function(m) {
          var self2 = this.ptr;
          if (m && typeof m === "object")
            m = m.ptr;
          _emscripten_bind_PxRigidDynamic_setMassSpaceInertiaTensor_1(self2, m);
        };
        ;
        PxRigidDynamic.prototype["getMassSpaceInertiaTensor"] = PxRigidDynamic.prototype.getMassSpaceInertiaTensor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getMassSpaceInertiaTensor_0(self2), PxVec3);
        };
        ;
        PxRigidDynamic.prototype["getMassSpaceInvInertiaTensor"] = PxRigidDynamic.prototype.getMassSpaceInvInertiaTensor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getMassSpaceInvInertiaTensor_0(self2), PxVec3);
        };
        ;
        PxRigidDynamic.prototype["setLinearDamping"] = PxRigidDynamic.prototype.setLinearDamping = function(linDamp) {
          var self2 = this.ptr;
          if (linDamp && typeof linDamp === "object")
            linDamp = linDamp.ptr;
          _emscripten_bind_PxRigidDynamic_setLinearDamping_1(self2, linDamp);
        };
        ;
        PxRigidDynamic.prototype["getLinearDamping"] = PxRigidDynamic.prototype.getLinearDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getLinearDamping_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setAngularDamping"] = PxRigidDynamic.prototype.setAngularDamping = function(angDamp) {
          var self2 = this.ptr;
          if (angDamp && typeof angDamp === "object")
            angDamp = angDamp.ptr;
          _emscripten_bind_PxRigidDynamic_setAngularDamping_1(self2, angDamp);
        };
        ;
        PxRigidDynamic.prototype["getAngularDamping"] = PxRigidDynamic.prototype.getAngularDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getAngularDamping_0(self2);
        };
        ;
        PxRigidDynamic.prototype["getLinearVelocity"] = PxRigidDynamic.prototype.getLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxRigidDynamic.prototype["setLinearVelocity"] = PxRigidDynamic.prototype.setLinearVelocity = function(linVel, autowake) {
          var self2 = this.ptr;
          if (linVel && typeof linVel === "object")
            linVel = linVel.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidDynamic_setLinearVelocity_1(self2, linVel);
            return;
          }
          _emscripten_bind_PxRigidDynamic_setLinearVelocity_2(self2, linVel, autowake);
        };
        ;
        PxRigidDynamic.prototype["getAngularVelocity"] = PxRigidDynamic.prototype.getAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxRigidDynamic.prototype["setAngularVelocity"] = PxRigidDynamic.prototype.setAngularVelocity = function(angVel, autowake) {
          var self2 = this.ptr;
          if (angVel && typeof angVel === "object")
            angVel = angVel.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidDynamic_setAngularVelocity_1(self2, angVel);
            return;
          }
          _emscripten_bind_PxRigidDynamic_setAngularVelocity_2(self2, angVel, autowake);
        };
        ;
        PxRigidDynamic.prototype["getMaxLinearVelocity"] = PxRigidDynamic.prototype.getMaxLinearVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getMaxLinearVelocity_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setMaxLinearVelocity"] = PxRigidDynamic.prototype.setMaxLinearVelocity = function(maxLinVel) {
          var self2 = this.ptr;
          if (maxLinVel && typeof maxLinVel === "object")
            maxLinVel = maxLinVel.ptr;
          _emscripten_bind_PxRigidDynamic_setMaxLinearVelocity_1(self2, maxLinVel);
        };
        ;
        PxRigidDynamic.prototype["getMaxAngularVelocity"] = PxRigidDynamic.prototype.getMaxAngularVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getMaxAngularVelocity_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setMaxAngularVelocity"] = PxRigidDynamic.prototype.setMaxAngularVelocity = function(maxAngVel) {
          var self2 = this.ptr;
          if (maxAngVel && typeof maxAngVel === "object")
            maxAngVel = maxAngVel.ptr;
          _emscripten_bind_PxRigidDynamic_setMaxAngularVelocity_1(self2, maxAngVel);
        };
        ;
        PxRigidDynamic.prototype["addForce"] = PxRigidDynamic.prototype.addForce = function(force, mode, autowake) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidDynamic_addForce_1(self2, force);
            return;
          }
          if (autowake === void 0) {
            _emscripten_bind_PxRigidDynamic_addForce_2(self2, force, mode);
            return;
          }
          _emscripten_bind_PxRigidDynamic_addForce_3(self2, force, mode, autowake);
        };
        ;
        PxRigidDynamic.prototype["addTorque"] = PxRigidDynamic.prototype.addTorque = function(torque, mode, autowake) {
          var self2 = this.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidDynamic_addTorque_1(self2, torque);
            return;
          }
          if (autowake === void 0) {
            _emscripten_bind_PxRigidDynamic_addTorque_2(self2, torque, mode);
            return;
          }
          _emscripten_bind_PxRigidDynamic_addTorque_3(self2, torque, mode, autowake);
        };
        ;
        PxRigidDynamic.prototype["clearForce"] = PxRigidDynamic.prototype.clearForce = function(mode) {
          var self2 = this.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          _emscripten_bind_PxRigidDynamic_clearForce_1(self2, mode);
        };
        ;
        PxRigidDynamic.prototype["clearTorque"] = PxRigidDynamic.prototype.clearTorque = function(mode) {
          var self2 = this.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          _emscripten_bind_PxRigidDynamic_clearTorque_1(self2, mode);
        };
        ;
        PxRigidDynamic.prototype["setForceAndTorque"] = PxRigidDynamic.prototype.setForceAndTorque = function(force, torque, mode) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidDynamic_setForceAndTorque_2(self2, force, torque);
            return;
          }
          _emscripten_bind_PxRigidDynamic_setForceAndTorque_3(self2, force, torque, mode);
        };
        ;
        PxRigidDynamic.prototype["setRigidBodyFlag"] = PxRigidDynamic.prototype.setRigidBodyFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRigidDynamic_setRigidBodyFlag_2(self2, flag, value);
        };
        ;
        PxRigidDynamic.prototype["setRigidBodyFlags"] = PxRigidDynamic.prototype.setRigidBodyFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxRigidDynamic_setRigidBodyFlags_1(self2, inFlags);
        };
        ;
        PxRigidDynamic.prototype["getRigidBodyFlags"] = PxRigidDynamic.prototype.getRigidBodyFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_getRigidBodyFlags_0(self2), PxRigidBodyFlags);
        };
        ;
        PxRigidDynamic.prototype["setMinCCDAdvanceCoefficient"] = PxRigidDynamic.prototype.setMinCCDAdvanceCoefficient = function(advanceCoefficient) {
          var self2 = this.ptr;
          if (advanceCoefficient && typeof advanceCoefficient === "object")
            advanceCoefficient = advanceCoefficient.ptr;
          _emscripten_bind_PxRigidDynamic_setMinCCDAdvanceCoefficient_1(self2, advanceCoefficient);
        };
        ;
        PxRigidDynamic.prototype["getMinCCDAdvanceCoefficient"] = PxRigidDynamic.prototype.getMinCCDAdvanceCoefficient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getMinCCDAdvanceCoefficient_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setMaxDepenetrationVelocity"] = PxRigidDynamic.prototype.setMaxDepenetrationVelocity = function(biasClamp) {
          var self2 = this.ptr;
          if (biasClamp && typeof biasClamp === "object")
            biasClamp = biasClamp.ptr;
          _emscripten_bind_PxRigidDynamic_setMaxDepenetrationVelocity_1(self2, biasClamp);
        };
        ;
        PxRigidDynamic.prototype["getMaxDepenetrationVelocity"] = PxRigidDynamic.prototype.getMaxDepenetrationVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getMaxDepenetrationVelocity_0(self2);
        };
        ;
        PxRigidDynamic.prototype["setMaxContactImpulse"] = PxRigidDynamic.prototype.setMaxContactImpulse = function(maxImpulse) {
          var self2 = this.ptr;
          if (maxImpulse && typeof maxImpulse === "object")
            maxImpulse = maxImpulse.ptr;
          _emscripten_bind_PxRigidDynamic_setMaxContactImpulse_1(self2, maxImpulse);
        };
        ;
        PxRigidDynamic.prototype["getMaxContactImpulse"] = PxRigidDynamic.prototype.getMaxContactImpulse = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getMaxContactImpulse_0(self2);
        };
        ;
        PxRigidDynamic.prototype["getInternalIslandNodeIndex"] = PxRigidDynamic.prototype.getInternalIslandNodeIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidDynamic_getInternalIslandNodeIndex_0(self2);
        };
        ;
        PxRigidDynamic.prototype["get_userData"] = PxRigidDynamic.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidDynamic_get_userData_0(self2), VoidPtr);
        };
        PxRigidDynamic.prototype["set_userData"] = PxRigidDynamic.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRigidDynamic_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxRigidDynamic.prototype, "userData", { get: PxRigidDynamic.prototype.get_userData, set: PxRigidDynamic.prototype.set_userData });
        function PxRigidDynamicLockFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxRigidDynamicLockFlags_PxRigidDynamicLockFlags_1(flags);
          getCache(PxRigidDynamicLockFlags)[this.ptr] = this;
        }
        ;
        ;
        PxRigidDynamicLockFlags.prototype = Object.create(WrapperObject.prototype);
        PxRigidDynamicLockFlags.prototype.constructor = PxRigidDynamicLockFlags;
        PxRigidDynamicLockFlags.prototype.__class__ = PxRigidDynamicLockFlags;
        PxRigidDynamicLockFlags.__cache__ = {};
        Module["PxRigidDynamicLockFlags"] = PxRigidDynamicLockFlags;
        PxRigidDynamicLockFlags.prototype["isSet"] = PxRigidDynamicLockFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxRigidDynamicLockFlags_isSet_1(self2, flag);
        };
        ;
        PxRigidDynamicLockFlags.prototype["set"] = PxRigidDynamicLockFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxRigidDynamicLockFlags_set_1(self2, flag);
        };
        ;
        PxRigidDynamicLockFlags.prototype["clear"] = PxRigidDynamicLockFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxRigidDynamicLockFlags_clear_1(self2, flag);
        };
        ;
        PxRigidDynamicLockFlags.prototype["__destroy__"] = PxRigidDynamicLockFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidDynamicLockFlags___destroy___0(self2);
        };
        function PxRigidStatic() {
          throw "cannot construct a PxRigidStatic, no constructor in IDL";
        }
        PxRigidStatic.prototype = Object.create(PxRigidActor.prototype);
        PxRigidStatic.prototype.constructor = PxRigidStatic;
        PxRigidStatic.prototype.__class__ = PxRigidStatic;
        PxRigidStatic.__cache__ = {};
        Module["PxRigidStatic"] = PxRigidStatic;
        PxRigidStatic.prototype["getType"] = PxRigidStatic.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidStatic_getType_0(self2);
        };
        ;
        PxRigidStatic.prototype["getScene"] = PxRigidStatic.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidStatic_getScene_0(self2), PxScene);
        };
        ;
        PxRigidStatic.prototype["setName"] = PxRigidStatic.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxRigidStatic_setName_1(self2, name);
        };
        ;
        PxRigidStatic.prototype["getName"] = PxRigidStatic.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidStatic_getName_0(self2));
        };
        ;
        PxRigidStatic.prototype["getWorldBounds"] = PxRigidStatic.prototype.getWorldBounds = function(inflation) {
          var self2 = this.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (inflation === void 0) {
            return wrapPointer(_emscripten_bind_PxRigidStatic_getWorldBounds_0(self2), PxBounds3);
          }
          return wrapPointer(_emscripten_bind_PxRigidStatic_getWorldBounds_1(self2, inflation), PxBounds3);
        };
        ;
        PxRigidStatic.prototype["setActorFlags"] = PxRigidStatic.prototype.setActorFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxRigidStatic_setActorFlags_1(self2, flags);
        };
        ;
        PxRigidStatic.prototype["getActorFlags"] = PxRigidStatic.prototype.getActorFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidStatic_getActorFlags_0(self2), PxActorFlags);
        };
        ;
        PxRigidStatic.prototype["setDominanceGroup"] = PxRigidStatic.prototype.setDominanceGroup = function(dominanceGroup) {
          var self2 = this.ptr;
          if (dominanceGroup && typeof dominanceGroup === "object")
            dominanceGroup = dominanceGroup.ptr;
          _emscripten_bind_PxRigidStatic_setDominanceGroup_1(self2, dominanceGroup);
        };
        ;
        PxRigidStatic.prototype["getDominanceGroup"] = PxRigidStatic.prototype.getDominanceGroup = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidStatic_getDominanceGroup_0(self2);
        };
        ;
        PxRigidStatic.prototype["setOwnerClient"] = PxRigidStatic.prototype.setOwnerClient = function(inClient) {
          var self2 = this.ptr;
          if (inClient && typeof inClient === "object")
            inClient = inClient.ptr;
          _emscripten_bind_PxRigidStatic_setOwnerClient_1(self2, inClient);
        };
        ;
        PxRigidStatic.prototype["getOwnerClient"] = PxRigidStatic.prototype.getOwnerClient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidStatic_getOwnerClient_0(self2);
        };
        ;
        PxRigidStatic.prototype["getConcreteTypeName"] = PxRigidStatic.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRigidStatic_getConcreteTypeName_0(self2));
        };
        ;
        PxRigidStatic.prototype["getConcreteType"] = PxRigidStatic.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidStatic_getConcreteType_0(self2);
        };
        ;
        PxRigidStatic.prototype["setBaseFlag"] = PxRigidStatic.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRigidStatic_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxRigidStatic.prototype["setBaseFlags"] = PxRigidStatic.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxRigidStatic_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxRigidStatic.prototype["getBaseFlags"] = PxRigidStatic.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidStatic_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxRigidStatic.prototype["isReleasable"] = PxRigidStatic.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRigidStatic_isReleasable_0(self2);
        };
        ;
        PxRigidStatic.prototype["getGlobalPose"] = PxRigidStatic.prototype.getGlobalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidStatic_getGlobalPose_0(self2), PxTransform);
        };
        ;
        PxRigidStatic.prototype["setGlobalPose"] = PxRigidStatic.prototype.setGlobalPose = function(pose, autowake) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRigidStatic_setGlobalPose_1(self2, pose);
            return;
          }
          _emscripten_bind_PxRigidStatic_setGlobalPose_2(self2, pose, autowake);
        };
        ;
        PxRigidStatic.prototype["attachShape"] = PxRigidStatic.prototype.attachShape = function(shape) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          return !!_emscripten_bind_PxRigidStatic_attachShape_1(self2, shape);
        };
        ;
        PxRigidStatic.prototype["detachShape"] = PxRigidStatic.prototype.detachShape = function(shape, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (shape && typeof shape === "object")
            shape = shape.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxRigidStatic_detachShape_1(self2, shape);
            return;
          }
          _emscripten_bind_PxRigidStatic_detachShape_2(self2, shape, wakeOnLostTouch);
        };
        ;
        PxRigidStatic.prototype["getNbShapes"] = PxRigidStatic.prototype.getNbShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRigidStatic_getNbShapes_0(self2);
        };
        ;
        PxRigidStatic.prototype["get_userData"] = PxRigidStatic.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRigidStatic_get_userData_0(self2), VoidPtr);
        };
        PxRigidStatic.prototype["set_userData"] = PxRigidStatic.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxRigidStatic_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxRigidStatic.prototype, "userData", { get: PxRigidStatic.prototype.get_userData, set: PxRigidStatic.prototype.set_userData });
        function PxScene() {
          throw "cannot construct a PxScene, no constructor in IDL";
        }
        PxScene.prototype = Object.create(WrapperObject.prototype);
        PxScene.prototype.constructor = PxScene;
        PxScene.prototype.__class__ = PxScene;
        PxScene.__cache__ = {};
        Module["PxScene"] = PxScene;
        PxScene.prototype["addActor"] = PxScene.prototype.addActor = function(actor, bvhStructure) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (bvhStructure && typeof bvhStructure === "object")
            bvhStructure = bvhStructure.ptr;
          if (bvhStructure === void 0) {
            _emscripten_bind_PxScene_addActor_1(self2, actor);
            return;
          }
          _emscripten_bind_PxScene_addActor_2(self2, actor, bvhStructure);
        };
        ;
        PxScene.prototype["removeActor"] = PxScene.prototype.removeActor = function(actor, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxScene_removeActor_1(self2, actor);
            return;
          }
          _emscripten_bind_PxScene_removeActor_2(self2, actor, wakeOnLostTouch);
        };
        ;
        PxScene.prototype["addAggregate"] = PxScene.prototype.addAggregate = function(aggregate) {
          var self2 = this.ptr;
          if (aggregate && typeof aggregate === "object")
            aggregate = aggregate.ptr;
          _emscripten_bind_PxScene_addAggregate_1(self2, aggregate);
        };
        ;
        PxScene.prototype["removeAggregate"] = PxScene.prototype.removeAggregate = function(aggregate, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (aggregate && typeof aggregate === "object")
            aggregate = aggregate.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxScene_removeAggregate_1(self2, aggregate);
            return;
          }
          _emscripten_bind_PxScene_removeAggregate_2(self2, aggregate, wakeOnLostTouch);
        };
        ;
        PxScene.prototype["addCollection"] = PxScene.prototype.addCollection = function(collection) {
          var self2 = this.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          _emscripten_bind_PxScene_addCollection_1(self2, collection);
        };
        ;
        PxScene.prototype["getWakeCounterResetValue"] = PxScene.prototype.getWakeCounterResetValue = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getWakeCounterResetValue_0(self2);
        };
        ;
        PxScene.prototype["shiftOrigin"] = PxScene.prototype.shiftOrigin = function(shift) {
          var self2 = this.ptr;
          if (shift && typeof shift === "object")
            shift = shift.ptr;
          _emscripten_bind_PxScene_shiftOrigin_1(self2, shift);
        };
        ;
        PxScene.prototype["addArticulation"] = PxScene.prototype.addArticulation = function(articulation) {
          var self2 = this.ptr;
          if (articulation && typeof articulation === "object")
            articulation = articulation.ptr;
          _emscripten_bind_PxScene_addArticulation_1(self2, articulation);
        };
        ;
        PxScene.prototype["removeArticulation"] = PxScene.prototype.removeArticulation = function(articulation, wakeOnLostTouch) {
          var self2 = this.ptr;
          if (articulation && typeof articulation === "object")
            articulation = articulation.ptr;
          if (wakeOnLostTouch && typeof wakeOnLostTouch === "object")
            wakeOnLostTouch = wakeOnLostTouch.ptr;
          if (wakeOnLostTouch === void 0) {
            _emscripten_bind_PxScene_removeArticulation_1(self2, articulation);
            return;
          }
          _emscripten_bind_PxScene_removeArticulation_2(self2, articulation, wakeOnLostTouch);
        };
        ;
        PxScene.prototype["getNbActors"] = PxScene.prototype.getNbActors = function(types) {
          var self2 = this.ptr;
          if (types && typeof types === "object")
            types = types.ptr;
          return _emscripten_bind_PxScene_getNbActors_1(self2, types);
        };
        ;
        PxScene.prototype["getNbArticulations"] = PxScene.prototype.getNbArticulations = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getNbArticulations_0(self2);
        };
        ;
        PxScene.prototype["getNbConstraints"] = PxScene.prototype.getNbConstraints = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getNbConstraints_0(self2);
        };
        ;
        PxScene.prototype["getNbAggregates"] = PxScene.prototype.getNbAggregates = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getNbAggregates_0(self2);
        };
        ;
        PxScene.prototype["setDominanceGroupPair"] = PxScene.prototype.setDominanceGroupPair = function(group1, group2, dominance) {
          var self2 = this.ptr;
          if (group1 && typeof group1 === "object")
            group1 = group1.ptr;
          if (group2 && typeof group2 === "object")
            group2 = group2.ptr;
          if (dominance && typeof dominance === "object")
            dominance = dominance.ptr;
          _emscripten_bind_PxScene_setDominanceGroupPair_3(self2, group1, group2, dominance);
        };
        ;
        PxScene.prototype["getCpuDispatcher"] = PxScene.prototype.getCpuDispatcher = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getCpuDispatcher_0(self2), PxCpuDispatcher);
        };
        ;
        PxScene.prototype["getCudaContextManager"] = PxScene.prototype.getCudaContextManager = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getCudaContextManager_0(self2), PxCudaContextManager);
        };
        ;
        PxScene.prototype["createClient"] = PxScene.prototype.createClient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_createClient_0(self2);
        };
        ;
        PxScene.prototype["setSimulationEventCallback"] = PxScene.prototype.setSimulationEventCallback = function(callback) {
          var self2 = this.ptr;
          if (callback && typeof callback === "object")
            callback = callback.ptr;
          _emscripten_bind_PxScene_setSimulationEventCallback_1(self2, callback);
        };
        ;
        PxScene.prototype["getSimulationEventCallback"] = PxScene.prototype.getSimulationEventCallback = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getSimulationEventCallback_0(self2), PxSimulationEventCallback);
        };
        ;
        PxScene.prototype["setFilterShaderData"] = PxScene.prototype.setFilterShaderData = function(data, dataSize) {
          var self2 = this.ptr;
          if (data && typeof data === "object")
            data = data.ptr;
          if (dataSize && typeof dataSize === "object")
            dataSize = dataSize.ptr;
          _emscripten_bind_PxScene_setFilterShaderData_2(self2, data, dataSize);
        };
        ;
        PxScene.prototype["getFilterShaderData"] = PxScene.prototype.getFilterShaderData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getFilterShaderData_0(self2), VoidPtr);
        };
        ;
        PxScene.prototype["getFilterShaderDataSize"] = PxScene.prototype.getFilterShaderDataSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getFilterShaderDataSize_0(self2);
        };
        ;
        PxScene.prototype["getFilterShader"] = PxScene.prototype.getFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getFilterShader_0(self2), PxSimulationFilterShader);
        };
        ;
        PxScene.prototype["resetFiltering"] = PxScene.prototype.resetFiltering = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          _emscripten_bind_PxScene_resetFiltering_1(self2, actor);
        };
        ;
        PxScene.prototype["getKinematicKinematicFilteringMode"] = PxScene.prototype.getKinematicKinematicFilteringMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getKinematicKinematicFilteringMode_0(self2);
        };
        ;
        PxScene.prototype["getStaticKinematicFilteringMode"] = PxScene.prototype.getStaticKinematicFilteringMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getStaticKinematicFilteringMode_0(self2);
        };
        ;
        PxScene.prototype["simulate"] = PxScene.prototype.simulate = function(elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize, controlSimulation) {
          var self2 = this.ptr;
          if (elapsedTime && typeof elapsedTime === "object")
            elapsedTime = elapsedTime.ptr;
          if (completionTask && typeof completionTask === "object")
            completionTask = completionTask.ptr;
          if (scratchMemBlock && typeof scratchMemBlock === "object")
            scratchMemBlock = scratchMemBlock.ptr;
          if (scratchMemBlockSize && typeof scratchMemBlockSize === "object")
            scratchMemBlockSize = scratchMemBlockSize.ptr;
          if (controlSimulation && typeof controlSimulation === "object")
            controlSimulation = controlSimulation.ptr;
          if (completionTask === void 0) {
            _emscripten_bind_PxScene_simulate_1(self2, elapsedTime);
            return;
          }
          if (scratchMemBlock === void 0) {
            _emscripten_bind_PxScene_simulate_2(self2, elapsedTime, completionTask);
            return;
          }
          if (scratchMemBlockSize === void 0) {
            _emscripten_bind_PxScene_simulate_3(self2, elapsedTime, completionTask, scratchMemBlock);
            return;
          }
          if (controlSimulation === void 0) {
            _emscripten_bind_PxScene_simulate_4(self2, elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize);
            return;
          }
          _emscripten_bind_PxScene_simulate_5(self2, elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize, controlSimulation);
        };
        ;
        PxScene.prototype["advance"] = PxScene.prototype.advance = function(completionTask) {
          var self2 = this.ptr;
          if (completionTask && typeof completionTask === "object")
            completionTask = completionTask.ptr;
          if (completionTask === void 0) {
            _emscripten_bind_PxScene_advance_0(self2);
            return;
          }
          _emscripten_bind_PxScene_advance_1(self2, completionTask);
        };
        ;
        PxScene.prototype["collide"] = PxScene.prototype.collide = function(elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize, controlSimulation) {
          var self2 = this.ptr;
          if (elapsedTime && typeof elapsedTime === "object")
            elapsedTime = elapsedTime.ptr;
          if (completionTask && typeof completionTask === "object")
            completionTask = completionTask.ptr;
          if (scratchMemBlock && typeof scratchMemBlock === "object")
            scratchMemBlock = scratchMemBlock.ptr;
          if (scratchMemBlockSize && typeof scratchMemBlockSize === "object")
            scratchMemBlockSize = scratchMemBlockSize.ptr;
          if (controlSimulation && typeof controlSimulation === "object")
            controlSimulation = controlSimulation.ptr;
          if (completionTask === void 0) {
            _emscripten_bind_PxScene_collide_1(self2, elapsedTime);
            return;
          }
          if (scratchMemBlock === void 0) {
            _emscripten_bind_PxScene_collide_2(self2, elapsedTime, completionTask);
            return;
          }
          if (scratchMemBlockSize === void 0) {
            _emscripten_bind_PxScene_collide_3(self2, elapsedTime, completionTask, scratchMemBlock);
            return;
          }
          if (controlSimulation === void 0) {
            _emscripten_bind_PxScene_collide_4(self2, elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize);
            return;
          }
          _emscripten_bind_PxScene_collide_5(self2, elapsedTime, completionTask, scratchMemBlock, scratchMemBlockSize, controlSimulation);
        };
        ;
        PxScene.prototype["checkResults"] = PxScene.prototype.checkResults = function(block) {
          var self2 = this.ptr;
          if (block && typeof block === "object")
            block = block.ptr;
          if (block === void 0) {
            return !!_emscripten_bind_PxScene_checkResults_0(self2);
          }
          return !!_emscripten_bind_PxScene_checkResults_1(self2, block);
        };
        ;
        PxScene.prototype["fetchCollision"] = PxScene.prototype.fetchCollision = function(block) {
          var self2 = this.ptr;
          if (block && typeof block === "object")
            block = block.ptr;
          if (block === void 0) {
            return !!_emscripten_bind_PxScene_fetchCollision_0(self2);
          }
          return !!_emscripten_bind_PxScene_fetchCollision_1(self2, block);
        };
        ;
        PxScene.prototype["fetchResults"] = PxScene.prototype.fetchResults = function(block) {
          var self2 = this.ptr;
          if (block && typeof block === "object")
            block = block.ptr;
          if (block === void 0) {
            return !!_emscripten_bind_PxScene_fetchResults_0(self2);
          }
          return !!_emscripten_bind_PxScene_fetchResults_1(self2, block);
        };
        ;
        PxScene.prototype["processCallbacks"] = PxScene.prototype.processCallbacks = function(continuation) {
          var self2 = this.ptr;
          if (continuation && typeof continuation === "object")
            continuation = continuation.ptr;
          _emscripten_bind_PxScene_processCallbacks_1(self2, continuation);
        };
        ;
        PxScene.prototype["flushSimulation"] = PxScene.prototype.flushSimulation = function(sendPendingReports) {
          var self2 = this.ptr;
          if (sendPendingReports && typeof sendPendingReports === "object")
            sendPendingReports = sendPendingReports.ptr;
          if (sendPendingReports === void 0) {
            _emscripten_bind_PxScene_flushSimulation_0(self2);
            return;
          }
          _emscripten_bind_PxScene_flushSimulation_1(self2, sendPendingReports);
        };
        ;
        PxScene.prototype["setGravity"] = PxScene.prototype.setGravity = function(vec) {
          var self2 = this.ptr;
          if (vec && typeof vec === "object")
            vec = vec.ptr;
          _emscripten_bind_PxScene_setGravity_1(self2, vec);
        };
        ;
        PxScene.prototype["getGravity"] = PxScene.prototype.getGravity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getGravity_0(self2), PxVec3);
        };
        ;
        PxScene.prototype["setBounceThresholdVelocity"] = PxScene.prototype.setBounceThresholdVelocity = function(t) {
          var self2 = this.ptr;
          if (t && typeof t === "object")
            t = t.ptr;
          _emscripten_bind_PxScene_setBounceThresholdVelocity_1(self2, t);
        };
        ;
        PxScene.prototype["getBounceThresholdVelocity"] = PxScene.prototype.getBounceThresholdVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getBounceThresholdVelocity_0(self2);
        };
        ;
        PxScene.prototype["setCCDMaxPasses"] = PxScene.prototype.setCCDMaxPasses = function(ccdMaxPasses) {
          var self2 = this.ptr;
          if (ccdMaxPasses && typeof ccdMaxPasses === "object")
            ccdMaxPasses = ccdMaxPasses.ptr;
          _emscripten_bind_PxScene_setCCDMaxPasses_1(self2, ccdMaxPasses);
        };
        ;
        PxScene.prototype["getCCDMaxPasses"] = PxScene.prototype.getCCDMaxPasses = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getCCDMaxPasses_0(self2);
        };
        ;
        PxScene.prototype["getFrictionOffsetThreshold"] = PxScene.prototype.getFrictionOffsetThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getFrictionOffsetThreshold_0(self2);
        };
        ;
        PxScene.prototype["setFrictionType"] = PxScene.prototype.setFrictionType = function(frictionType) {
          var self2 = this.ptr;
          if (frictionType && typeof frictionType === "object")
            frictionType = frictionType.ptr;
          _emscripten_bind_PxScene_setFrictionType_1(self2, frictionType);
        };
        ;
        PxScene.prototype["getFrictionType"] = PxScene.prototype.getFrictionType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getFrictionType_0(self2);
        };
        ;
        PxScene.prototype["getSimulationStatistics"] = PxScene.prototype.getSimulationStatistics = function(stats) {
          var self2 = this.ptr;
          if (stats && typeof stats === "object")
            stats = stats.ptr;
          _emscripten_bind_PxScene_getSimulationStatistics_1(self2, stats);
        };
        ;
        PxScene.prototype["getStaticStructure"] = PxScene.prototype.getStaticStructure = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getStaticStructure_0(self2);
        };
        ;
        PxScene.prototype["getDynamicStructure"] = PxScene.prototype.getDynamicStructure = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getDynamicStructure_0(self2);
        };
        ;
        PxScene.prototype["flushQueryUpdates"] = PxScene.prototype.flushQueryUpdates = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxScene_flushQueryUpdates_0(self2);
        };
        ;
        PxScene.prototype["createBatchQuery"] = PxScene.prototype.createBatchQuery = function(desc) {
          var self2 = this.ptr;
          if (desc && typeof desc === "object")
            desc = desc.ptr;
          return wrapPointer(_emscripten_bind_PxScene_createBatchQuery_1(self2, desc), PxBatchQuery);
        };
        ;
        PxScene.prototype["setDynamicTreeRebuildRateHint"] = PxScene.prototype.setDynamicTreeRebuildRateHint = function(dynamicTreeRebuildRateHint) {
          var self2 = this.ptr;
          if (dynamicTreeRebuildRateHint && typeof dynamicTreeRebuildRateHint === "object")
            dynamicTreeRebuildRateHint = dynamicTreeRebuildRateHint.ptr;
          _emscripten_bind_PxScene_setDynamicTreeRebuildRateHint_1(self2, dynamicTreeRebuildRateHint);
        };
        ;
        PxScene.prototype["getDynamicTreeRebuildRateHint"] = PxScene.prototype.getDynamicTreeRebuildRateHint = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getDynamicTreeRebuildRateHint_0(self2);
        };
        ;
        PxScene.prototype["forceDynamicTreeRebuild"] = PxScene.prototype.forceDynamicTreeRebuild = function(rebuildStaticStructure, rebuildDynamicStructure) {
          var self2 = this.ptr;
          if (rebuildStaticStructure && typeof rebuildStaticStructure === "object")
            rebuildStaticStructure = rebuildStaticStructure.ptr;
          if (rebuildDynamicStructure && typeof rebuildDynamicStructure === "object")
            rebuildDynamicStructure = rebuildDynamicStructure.ptr;
          _emscripten_bind_PxScene_forceDynamicTreeRebuild_2(self2, rebuildStaticStructure, rebuildDynamicStructure);
        };
        ;
        PxScene.prototype["setSceneQueryUpdateMode"] = PxScene.prototype.setSceneQueryUpdateMode = function(updateMode) {
          var self2 = this.ptr;
          if (updateMode && typeof updateMode === "object")
            updateMode = updateMode.ptr;
          _emscripten_bind_PxScene_setSceneQueryUpdateMode_1(self2, updateMode);
        };
        ;
        PxScene.prototype["getSceneQueryUpdateMode"] = PxScene.prototype.getSceneQueryUpdateMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getSceneQueryUpdateMode_0(self2);
        };
        ;
        PxScene.prototype["sceneQueriesUpdate"] = PxScene.prototype.sceneQueriesUpdate = function(completionTask, controlSimulation) {
          var self2 = this.ptr;
          if (completionTask && typeof completionTask === "object")
            completionTask = completionTask.ptr;
          if (controlSimulation && typeof controlSimulation === "object")
            controlSimulation = controlSimulation.ptr;
          if (completionTask === void 0) {
            _emscripten_bind_PxScene_sceneQueriesUpdate_0(self2);
            return;
          }
          if (controlSimulation === void 0) {
            _emscripten_bind_PxScene_sceneQueriesUpdate_1(self2, completionTask);
            return;
          }
          _emscripten_bind_PxScene_sceneQueriesUpdate_2(self2, completionTask, controlSimulation);
        };
        ;
        PxScene.prototype["checkQueries"] = PxScene.prototype.checkQueries = function(block) {
          var self2 = this.ptr;
          if (block && typeof block === "object")
            block = block.ptr;
          if (block === void 0) {
            return !!_emscripten_bind_PxScene_checkQueries_0(self2);
          }
          return !!_emscripten_bind_PxScene_checkQueries_1(self2, block);
        };
        ;
        PxScene.prototype["fetchQueries"] = PxScene.prototype.fetchQueries = function(block) {
          var self2 = this.ptr;
          if (block && typeof block === "object")
            block = block.ptr;
          if (block === void 0) {
            return !!_emscripten_bind_PxScene_fetchQueries_0(self2);
          }
          return !!_emscripten_bind_PxScene_fetchQueries_1(self2, block);
        };
        ;
        PxScene.prototype["raycast"] = PxScene.prototype.raycast = function(origin, unitDir, distance, hitCall, hitFlags, filterData) {
          var self2 = this.ptr;
          if (origin && typeof origin === "object")
            origin = origin.ptr;
          if (unitDir && typeof unitDir === "object")
            unitDir = unitDir.ptr;
          if (distance && typeof distance === "object")
            distance = distance.ptr;
          if (hitCall && typeof hitCall === "object")
            hitCall = hitCall.ptr;
          if (hitFlags && typeof hitFlags === "object")
            hitFlags = hitFlags.ptr;
          if (filterData && typeof filterData === "object")
            filterData = filterData.ptr;
          if (hitFlags === void 0) {
            return !!_emscripten_bind_PxScene_raycast_4(self2, origin, unitDir, distance, hitCall);
          }
          if (filterData === void 0) {
            return !!_emscripten_bind_PxScene_raycast_5(self2, origin, unitDir, distance, hitCall, hitFlags);
          }
          return !!_emscripten_bind_PxScene_raycast_6(self2, origin, unitDir, distance, hitCall, hitFlags, filterData);
        };
        ;
        PxScene.prototype["sweep"] = PxScene.prototype.sweep = function(geometry, pose, unitDir, distance, hitCall, hitFlags, filterData) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (unitDir && typeof unitDir === "object")
            unitDir = unitDir.ptr;
          if (distance && typeof distance === "object")
            distance = distance.ptr;
          if (hitCall && typeof hitCall === "object")
            hitCall = hitCall.ptr;
          if (hitFlags && typeof hitFlags === "object")
            hitFlags = hitFlags.ptr;
          if (filterData && typeof filterData === "object")
            filterData = filterData.ptr;
          if (hitFlags === void 0) {
            return !!_emscripten_bind_PxScene_sweep_5(self2, geometry, pose, unitDir, distance, hitCall);
          }
          if (filterData === void 0) {
            return !!_emscripten_bind_PxScene_sweep_6(self2, geometry, pose, unitDir, distance, hitCall, hitFlags);
          }
          return !!_emscripten_bind_PxScene_sweep_7(self2, geometry, pose, unitDir, distance, hitCall, hitFlags, filterData);
        };
        ;
        PxScene.prototype["overlap"] = PxScene.prototype.overlap = function(geometry, pose, hitCall, filterData) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (hitCall && typeof hitCall === "object")
            hitCall = hitCall.ptr;
          if (filterData && typeof filterData === "object")
            filterData = filterData.ptr;
          if (filterData === void 0) {
            return !!_emscripten_bind_PxScene_overlap_3(self2, geometry, pose, hitCall);
          }
          return !!_emscripten_bind_PxScene_overlap_4(self2, geometry, pose, hitCall, filterData);
        };
        ;
        PxScene.prototype["getSceneQueryStaticTimestamp"] = PxScene.prototype.getSceneQueryStaticTimestamp = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getSceneQueryStaticTimestamp_0(self2);
        };
        ;
        PxScene.prototype["getBroadPhaseType"] = PxScene.prototype.getBroadPhaseType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getBroadPhaseType_0(self2);
        };
        ;
        PxScene.prototype["getBroadPhaseCaps"] = PxScene.prototype.getBroadPhaseCaps = function(caps) {
          var self2 = this.ptr;
          if (caps && typeof caps === "object")
            caps = caps.ptr;
          return !!_emscripten_bind_PxScene_getBroadPhaseCaps_1(self2, caps);
        };
        ;
        PxScene.prototype["getNbBroadPhaseRegions"] = PxScene.prototype.getNbBroadPhaseRegions = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getNbBroadPhaseRegions_0(self2);
        };
        ;
        PxScene.prototype["getBroadPhaseRegions"] = PxScene.prototype.getBroadPhaseRegions = function(userBuffer, bufferSize, startIndex) {
          var self2 = this.ptr;
          if (userBuffer && typeof userBuffer === "object")
            userBuffer = userBuffer.ptr;
          if (bufferSize && typeof bufferSize === "object")
            bufferSize = bufferSize.ptr;
          if (startIndex && typeof startIndex === "object")
            startIndex = startIndex.ptr;
          if (startIndex === void 0) {
            return _emscripten_bind_PxScene_getBroadPhaseRegions_2(self2, userBuffer, bufferSize);
          }
          return _emscripten_bind_PxScene_getBroadPhaseRegions_3(self2, userBuffer, bufferSize, startIndex);
        };
        ;
        PxScene.prototype["addBroadPhaseRegion"] = PxScene.prototype.addBroadPhaseRegion = function(region, populateRegion) {
          var self2 = this.ptr;
          if (region && typeof region === "object")
            region = region.ptr;
          if (populateRegion && typeof populateRegion === "object")
            populateRegion = populateRegion.ptr;
          if (populateRegion === void 0) {
            return _emscripten_bind_PxScene_addBroadPhaseRegion_1(self2, region);
          }
          return _emscripten_bind_PxScene_addBroadPhaseRegion_2(self2, region, populateRegion);
        };
        ;
        PxScene.prototype["removeBroadPhaseRegion"] = PxScene.prototype.removeBroadPhaseRegion = function(handle) {
          var self2 = this.ptr;
          if (handle && typeof handle === "object")
            handle = handle.ptr;
          return !!_emscripten_bind_PxScene_removeBroadPhaseRegion_1(self2, handle);
        };
        ;
        PxScene.prototype["lockRead"] = PxScene.prototype.lockRead = function(file, line) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (file && typeof file === "object")
            file = file.ptr;
          else
            file = ensureString(file);
          if (line && typeof line === "object")
            line = line.ptr;
          if (file === void 0) {
            _emscripten_bind_PxScene_lockRead_0(self2);
            return;
          }
          if (line === void 0) {
            _emscripten_bind_PxScene_lockRead_1(self2, file);
            return;
          }
          _emscripten_bind_PxScene_lockRead_2(self2, file, line);
        };
        ;
        PxScene.prototype["unlockRead"] = PxScene.prototype.unlockRead = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxScene_unlockRead_0(self2);
        };
        ;
        PxScene.prototype["lockWrite"] = PxScene.prototype.lockWrite = function(file, line) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (file && typeof file === "object")
            file = file.ptr;
          else
            file = ensureString(file);
          if (line && typeof line === "object")
            line = line.ptr;
          if (file === void 0) {
            _emscripten_bind_PxScene_lockWrite_0(self2);
            return;
          }
          if (line === void 0) {
            _emscripten_bind_PxScene_lockWrite_1(self2, file);
            return;
          }
          _emscripten_bind_PxScene_lockWrite_2(self2, file, line);
        };
        ;
        PxScene.prototype["unlockWrite"] = PxScene.prototype.unlockWrite = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxScene_unlockWrite_0(self2);
        };
        ;
        PxScene.prototype["setNbContactDataBlocks"] = PxScene.prototype.setNbContactDataBlocks = function(numBlocks) {
          var self2 = this.ptr;
          if (numBlocks && typeof numBlocks === "object")
            numBlocks = numBlocks.ptr;
          _emscripten_bind_PxScene_setNbContactDataBlocks_1(self2, numBlocks);
        };
        ;
        PxScene.prototype["getNbContactDataBlocksUsed"] = PxScene.prototype.getNbContactDataBlocksUsed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getNbContactDataBlocksUsed_0(self2);
        };
        ;
        PxScene.prototype["getMaxNbContactDataBlocksUsed"] = PxScene.prototype.getMaxNbContactDataBlocksUsed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getMaxNbContactDataBlocksUsed_0(self2);
        };
        ;
        PxScene.prototype["getContactReportStreamBufferSize"] = PxScene.prototype.getContactReportStreamBufferSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getContactReportStreamBufferSize_0(self2);
        };
        ;
        PxScene.prototype["setSolverBatchSize"] = PxScene.prototype.setSolverBatchSize = function(solverBatchSize) {
          var self2 = this.ptr;
          if (solverBatchSize && typeof solverBatchSize === "object")
            solverBatchSize = solverBatchSize.ptr;
          _emscripten_bind_PxScene_setSolverBatchSize_1(self2, solverBatchSize);
        };
        ;
        PxScene.prototype["getSolverBatchSize"] = PxScene.prototype.getSolverBatchSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getSolverBatchSize_0(self2);
        };
        ;
        PxScene.prototype["setSolverArticulationBatchSize"] = PxScene.prototype.setSolverArticulationBatchSize = function(solverBatchSize) {
          var self2 = this.ptr;
          if (solverBatchSize && typeof solverBatchSize === "object")
            solverBatchSize = solverBatchSize.ptr;
          _emscripten_bind_PxScene_setSolverArticulationBatchSize_1(self2, solverBatchSize);
        };
        ;
        PxScene.prototype["getSolverArticulationBatchSize"] = PxScene.prototype.getSolverArticulationBatchSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getSolverArticulationBatchSize_0(self2);
        };
        ;
        PxScene.prototype["release"] = PxScene.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxScene_release_0(self2);
        };
        ;
        PxScene.prototype["setFlag"] = PxScene.prototype.setFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxScene_setFlag_2(self2, flag, value);
        };
        ;
        PxScene.prototype["getFlags"] = PxScene.prototype.getFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getFlags_0(self2), PxSceneFlags);
        };
        ;
        PxScene.prototype["setLimits"] = PxScene.prototype.setLimits = function(limits) {
          var self2 = this.ptr;
          if (limits && typeof limits === "object")
            limits = limits.ptr;
          _emscripten_bind_PxScene_setLimits_1(self2, limits);
        };
        ;
        PxScene.prototype["getLimits"] = PxScene.prototype.getLimits = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getLimits_0(self2), PxSceneLimits);
        };
        ;
        PxScene.prototype["getPhysics"] = PxScene.prototype.getPhysics = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_getPhysics_0(self2), PxPhysics);
        };
        ;
        PxScene.prototype["getTimestamp"] = PxScene.prototype.getTimestamp = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxScene_getTimestamp_0(self2);
        };
        ;
        PxScene.prototype["get_userData"] = PxScene.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxScene_get_userData_0(self2), VoidPtr);
        };
        PxScene.prototype["set_userData"] = PxScene.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxScene_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxScene.prototype, "userData", { get: PxScene.prototype.get_userData, set: PxScene.prototype.set_userData });
        function PxSceneDesc(scale) {
          if (scale && typeof scale === "object")
            scale = scale.ptr;
          this.ptr = _emscripten_bind_PxSceneDesc_PxSceneDesc_1(scale);
          getCache(PxSceneDesc)[this.ptr] = this;
        }
        ;
        ;
        PxSceneDesc.prototype = Object.create(WrapperObject.prototype);
        PxSceneDesc.prototype.constructor = PxSceneDesc;
        PxSceneDesc.prototype.__class__ = PxSceneDesc;
        PxSceneDesc.__cache__ = {};
        Module["PxSceneDesc"] = PxSceneDesc;
        PxSceneDesc.prototype["setToDefault"] = PxSceneDesc.prototype.setToDefault = function(scale) {
          var self2 = this.ptr;
          if (scale && typeof scale === "object")
            scale = scale.ptr;
          _emscripten_bind_PxSceneDesc_setToDefault_1(self2, scale);
        };
        ;
        PxSceneDesc.prototype["isValid"] = PxSceneDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSceneDesc_isValid_0(self2);
        };
        ;
        PxSceneDesc.prototype["get_gravity"] = PxSceneDesc.prototype.get_gravity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_gravity_0(self2), PxVec3);
        };
        PxSceneDesc.prototype["set_gravity"] = PxSceneDesc.prototype.set_gravity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_gravity_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "gravity", { get: PxSceneDesc.prototype.get_gravity, set: PxSceneDesc.prototype.set_gravity });
        PxSceneDesc.prototype["get_simulationEventCallback"] = PxSceneDesc.prototype.get_simulationEventCallback = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_simulationEventCallback_0(self2), PxSimulationEventCallback);
        };
        PxSceneDesc.prototype["set_simulationEventCallback"] = PxSceneDesc.prototype.set_simulationEventCallback = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_simulationEventCallback_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "simulationEventCallback", { get: PxSceneDesc.prototype.get_simulationEventCallback, set: PxSceneDesc.prototype.set_simulationEventCallback });
        PxSceneDesc.prototype["get_filterShaderData"] = PxSceneDesc.prototype.get_filterShaderData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_filterShaderData_0(self2), VoidPtr);
        };
        PxSceneDesc.prototype["set_filterShaderData"] = PxSceneDesc.prototype.set_filterShaderData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_filterShaderData_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "filterShaderData", { get: PxSceneDesc.prototype.get_filterShaderData, set: PxSceneDesc.prototype.set_filterShaderData });
        PxSceneDesc.prototype["get_filterShaderDataSize"] = PxSceneDesc.prototype.get_filterShaderDataSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_filterShaderDataSize_0(self2);
        };
        PxSceneDesc.prototype["set_filterShaderDataSize"] = PxSceneDesc.prototype.set_filterShaderDataSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_filterShaderDataSize_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "filterShaderDataSize", { get: PxSceneDesc.prototype.get_filterShaderDataSize, set: PxSceneDesc.prototype.set_filterShaderDataSize });
        PxSceneDesc.prototype["get_filterShader"] = PxSceneDesc.prototype.get_filterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_filterShader_0(self2), PxSimulationFilterShader);
        };
        PxSceneDesc.prototype["set_filterShader"] = PxSceneDesc.prototype.set_filterShader = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_filterShader_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "filterShader", { get: PxSceneDesc.prototype.get_filterShader, set: PxSceneDesc.prototype.set_filterShader });
        PxSceneDesc.prototype["get_kineKineFilteringMode"] = PxSceneDesc.prototype.get_kineKineFilteringMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_kineKineFilteringMode_0(self2);
        };
        PxSceneDesc.prototype["set_kineKineFilteringMode"] = PxSceneDesc.prototype.set_kineKineFilteringMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_kineKineFilteringMode_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "kineKineFilteringMode", { get: PxSceneDesc.prototype.get_kineKineFilteringMode, set: PxSceneDesc.prototype.set_kineKineFilteringMode });
        PxSceneDesc.prototype["get_staticKineFilteringMode"] = PxSceneDesc.prototype.get_staticKineFilteringMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_staticKineFilteringMode_0(self2);
        };
        PxSceneDesc.prototype["set_staticKineFilteringMode"] = PxSceneDesc.prototype.set_staticKineFilteringMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_staticKineFilteringMode_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "staticKineFilteringMode", { get: PxSceneDesc.prototype.get_staticKineFilteringMode, set: PxSceneDesc.prototype.set_staticKineFilteringMode });
        PxSceneDesc.prototype["get_broadPhaseType"] = PxSceneDesc.prototype.get_broadPhaseType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_broadPhaseType_0(self2);
        };
        PxSceneDesc.prototype["set_broadPhaseType"] = PxSceneDesc.prototype.set_broadPhaseType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_broadPhaseType_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "broadPhaseType", { get: PxSceneDesc.prototype.get_broadPhaseType, set: PxSceneDesc.prototype.set_broadPhaseType });
        PxSceneDesc.prototype["get_limits"] = PxSceneDesc.prototype.get_limits = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_limits_0(self2), PxSceneLimits);
        };
        PxSceneDesc.prototype["set_limits"] = PxSceneDesc.prototype.set_limits = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_limits_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "limits", { get: PxSceneDesc.prototype.get_limits, set: PxSceneDesc.prototype.set_limits });
        PxSceneDesc.prototype["get_frictionType"] = PxSceneDesc.prototype.get_frictionType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_frictionType_0(self2);
        };
        PxSceneDesc.prototype["set_frictionType"] = PxSceneDesc.prototype.set_frictionType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_frictionType_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "frictionType", { get: PxSceneDesc.prototype.get_frictionType, set: PxSceneDesc.prototype.set_frictionType });
        PxSceneDesc.prototype["get_solverType"] = PxSceneDesc.prototype.get_solverType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_solverType_0(self2);
        };
        PxSceneDesc.prototype["set_solverType"] = PxSceneDesc.prototype.set_solverType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_solverType_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "solverType", { get: PxSceneDesc.prototype.get_solverType, set: PxSceneDesc.prototype.set_solverType });
        PxSceneDesc.prototype["get_bounceThresholdVelocity"] = PxSceneDesc.prototype.get_bounceThresholdVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_bounceThresholdVelocity_0(self2);
        };
        PxSceneDesc.prototype["set_bounceThresholdVelocity"] = PxSceneDesc.prototype.set_bounceThresholdVelocity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_bounceThresholdVelocity_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "bounceThresholdVelocity", { get: PxSceneDesc.prototype.get_bounceThresholdVelocity, set: PxSceneDesc.prototype.set_bounceThresholdVelocity });
        PxSceneDesc.prototype["get_frictionOffsetThreshold"] = PxSceneDesc.prototype.get_frictionOffsetThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_frictionOffsetThreshold_0(self2);
        };
        PxSceneDesc.prototype["set_frictionOffsetThreshold"] = PxSceneDesc.prototype.set_frictionOffsetThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_frictionOffsetThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "frictionOffsetThreshold", { get: PxSceneDesc.prototype.get_frictionOffsetThreshold, set: PxSceneDesc.prototype.set_frictionOffsetThreshold });
        PxSceneDesc.prototype["get_ccdMaxSeparation"] = PxSceneDesc.prototype.get_ccdMaxSeparation = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_ccdMaxSeparation_0(self2);
        };
        PxSceneDesc.prototype["set_ccdMaxSeparation"] = PxSceneDesc.prototype.set_ccdMaxSeparation = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_ccdMaxSeparation_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "ccdMaxSeparation", { get: PxSceneDesc.prototype.get_ccdMaxSeparation, set: PxSceneDesc.prototype.set_ccdMaxSeparation });
        PxSceneDesc.prototype["get_solverOffsetSlop"] = PxSceneDesc.prototype.get_solverOffsetSlop = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_solverOffsetSlop_0(self2);
        };
        PxSceneDesc.prototype["set_solverOffsetSlop"] = PxSceneDesc.prototype.set_solverOffsetSlop = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_solverOffsetSlop_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "solverOffsetSlop", { get: PxSceneDesc.prototype.get_solverOffsetSlop, set: PxSceneDesc.prototype.set_solverOffsetSlop });
        PxSceneDesc.prototype["get_flags"] = PxSceneDesc.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_flags_0(self2), PxSceneFlags);
        };
        PxSceneDesc.prototype["set_flags"] = PxSceneDesc.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "flags", { get: PxSceneDesc.prototype.get_flags, set: PxSceneDesc.prototype.set_flags });
        PxSceneDesc.prototype["get_cpuDispatcher"] = PxSceneDesc.prototype.get_cpuDispatcher = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_cpuDispatcher_0(self2), PxCpuDispatcher);
        };
        PxSceneDesc.prototype["set_cpuDispatcher"] = PxSceneDesc.prototype.set_cpuDispatcher = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_cpuDispatcher_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "cpuDispatcher", { get: PxSceneDesc.prototype.get_cpuDispatcher, set: PxSceneDesc.prototype.set_cpuDispatcher });
        PxSceneDesc.prototype["get_cudaContextManager"] = PxSceneDesc.prototype.get_cudaContextManager = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_cudaContextManager_0(self2), PxCudaContextManager);
        };
        PxSceneDesc.prototype["set_cudaContextManager"] = PxSceneDesc.prototype.set_cudaContextManager = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_cudaContextManager_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "cudaContextManager", { get: PxSceneDesc.prototype.get_cudaContextManager, set: PxSceneDesc.prototype.set_cudaContextManager });
        PxSceneDesc.prototype["get_staticStructure"] = PxSceneDesc.prototype.get_staticStructure = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_staticStructure_0(self2);
        };
        PxSceneDesc.prototype["set_staticStructure"] = PxSceneDesc.prototype.set_staticStructure = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_staticStructure_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "staticStructure", { get: PxSceneDesc.prototype.get_staticStructure, set: PxSceneDesc.prototype.set_staticStructure });
        PxSceneDesc.prototype["get_dynamicStructure"] = PxSceneDesc.prototype.get_dynamicStructure = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_dynamicStructure_0(self2);
        };
        PxSceneDesc.prototype["set_dynamicStructure"] = PxSceneDesc.prototype.set_dynamicStructure = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_dynamicStructure_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "dynamicStructure", { get: PxSceneDesc.prototype.get_dynamicStructure, set: PxSceneDesc.prototype.set_dynamicStructure });
        PxSceneDesc.prototype["get_dynamicTreeRebuildRateHint"] = PxSceneDesc.prototype.get_dynamicTreeRebuildRateHint = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_dynamicTreeRebuildRateHint_0(self2);
        };
        PxSceneDesc.prototype["set_dynamicTreeRebuildRateHint"] = PxSceneDesc.prototype.set_dynamicTreeRebuildRateHint = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_dynamicTreeRebuildRateHint_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "dynamicTreeRebuildRateHint", { get: PxSceneDesc.prototype.get_dynamicTreeRebuildRateHint, set: PxSceneDesc.prototype.set_dynamicTreeRebuildRateHint });
        PxSceneDesc.prototype["get_sceneQueryUpdateMode"] = PxSceneDesc.prototype.get_sceneQueryUpdateMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_sceneQueryUpdateMode_0(self2);
        };
        PxSceneDesc.prototype["set_sceneQueryUpdateMode"] = PxSceneDesc.prototype.set_sceneQueryUpdateMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_sceneQueryUpdateMode_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "sceneQueryUpdateMode", { get: PxSceneDesc.prototype.get_sceneQueryUpdateMode, set: PxSceneDesc.prototype.set_sceneQueryUpdateMode });
        PxSceneDesc.prototype["get_userData"] = PxSceneDesc.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_userData_0(self2), VoidPtr);
        };
        PxSceneDesc.prototype["set_userData"] = PxSceneDesc.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "userData", { get: PxSceneDesc.prototype.get_userData, set: PxSceneDesc.prototype.set_userData });
        PxSceneDesc.prototype["get_solverBatchSize"] = PxSceneDesc.prototype.get_solverBatchSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_solverBatchSize_0(self2);
        };
        PxSceneDesc.prototype["set_solverBatchSize"] = PxSceneDesc.prototype.set_solverBatchSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_solverBatchSize_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "solverBatchSize", { get: PxSceneDesc.prototype.get_solverBatchSize, set: PxSceneDesc.prototype.set_solverBatchSize });
        PxSceneDesc.prototype["get_solverArticulationBatchSize"] = PxSceneDesc.prototype.get_solverArticulationBatchSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_solverArticulationBatchSize_0(self2);
        };
        PxSceneDesc.prototype["set_solverArticulationBatchSize"] = PxSceneDesc.prototype.set_solverArticulationBatchSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_solverArticulationBatchSize_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "solverArticulationBatchSize", { get: PxSceneDesc.prototype.get_solverArticulationBatchSize, set: PxSceneDesc.prototype.set_solverArticulationBatchSize });
        PxSceneDesc.prototype["get_nbContactDataBlocks"] = PxSceneDesc.prototype.get_nbContactDataBlocks = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_nbContactDataBlocks_0(self2);
        };
        PxSceneDesc.prototype["set_nbContactDataBlocks"] = PxSceneDesc.prototype.set_nbContactDataBlocks = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_nbContactDataBlocks_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "nbContactDataBlocks", { get: PxSceneDesc.prototype.get_nbContactDataBlocks, set: PxSceneDesc.prototype.set_nbContactDataBlocks });
        PxSceneDesc.prototype["get_maxBiasCoefficient"] = PxSceneDesc.prototype.get_maxBiasCoefficient = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_maxBiasCoefficient_0(self2);
        };
        PxSceneDesc.prototype["set_maxBiasCoefficient"] = PxSceneDesc.prototype.set_maxBiasCoefficient = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_maxBiasCoefficient_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "maxBiasCoefficient", { get: PxSceneDesc.prototype.get_maxBiasCoefficient, set: PxSceneDesc.prototype.set_maxBiasCoefficient });
        PxSceneDesc.prototype["get_contactReportStreamBufferSize"] = PxSceneDesc.prototype.get_contactReportStreamBufferSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_contactReportStreamBufferSize_0(self2);
        };
        PxSceneDesc.prototype["set_contactReportStreamBufferSize"] = PxSceneDesc.prototype.set_contactReportStreamBufferSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_contactReportStreamBufferSize_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "contactReportStreamBufferSize", { get: PxSceneDesc.prototype.get_contactReportStreamBufferSize, set: PxSceneDesc.prototype.set_contactReportStreamBufferSize });
        PxSceneDesc.prototype["get_ccdMaxPasses"] = PxSceneDesc.prototype.get_ccdMaxPasses = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_ccdMaxPasses_0(self2);
        };
        PxSceneDesc.prototype["set_ccdMaxPasses"] = PxSceneDesc.prototype.set_ccdMaxPasses = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_ccdMaxPasses_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "ccdMaxPasses", { get: PxSceneDesc.prototype.get_ccdMaxPasses, set: PxSceneDesc.prototype.set_ccdMaxPasses });
        PxSceneDesc.prototype["get_ccdThreshold"] = PxSceneDesc.prototype.get_ccdThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_ccdThreshold_0(self2);
        };
        PxSceneDesc.prototype["set_ccdThreshold"] = PxSceneDesc.prototype.set_ccdThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_ccdThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "ccdThreshold", { get: PxSceneDesc.prototype.get_ccdThreshold, set: PxSceneDesc.prototype.set_ccdThreshold });
        PxSceneDesc.prototype["get_wakeCounterResetValue"] = PxSceneDesc.prototype.get_wakeCounterResetValue = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_wakeCounterResetValue_0(self2);
        };
        PxSceneDesc.prototype["set_wakeCounterResetValue"] = PxSceneDesc.prototype.set_wakeCounterResetValue = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_wakeCounterResetValue_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "wakeCounterResetValue", { get: PxSceneDesc.prototype.get_wakeCounterResetValue, set: PxSceneDesc.prototype.set_wakeCounterResetValue });
        PxSceneDesc.prototype["get_sanityBounds"] = PxSceneDesc.prototype.get_sanityBounds = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_sanityBounds_0(self2), PxBounds3);
        };
        PxSceneDesc.prototype["set_sanityBounds"] = PxSceneDesc.prototype.set_sanityBounds = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_sanityBounds_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "sanityBounds", { get: PxSceneDesc.prototype.get_sanityBounds, set: PxSceneDesc.prototype.set_sanityBounds });
        PxSceneDesc.prototype["get_gpuDynamicsConfig"] = PxSceneDesc.prototype.get_gpuDynamicsConfig = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSceneDesc_get_gpuDynamicsConfig_0(self2), PxgDynamicsMemoryConfig);
        };
        PxSceneDesc.prototype["set_gpuDynamicsConfig"] = PxSceneDesc.prototype.set_gpuDynamicsConfig = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_gpuDynamicsConfig_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "gpuDynamicsConfig", { get: PxSceneDesc.prototype.get_gpuDynamicsConfig, set: PxSceneDesc.prototype.set_gpuDynamicsConfig });
        PxSceneDesc.prototype["get_gpuMaxNumPartitions"] = PxSceneDesc.prototype.get_gpuMaxNumPartitions = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_gpuMaxNumPartitions_0(self2);
        };
        PxSceneDesc.prototype["set_gpuMaxNumPartitions"] = PxSceneDesc.prototype.set_gpuMaxNumPartitions = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_gpuMaxNumPartitions_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "gpuMaxNumPartitions", { get: PxSceneDesc.prototype.get_gpuMaxNumPartitions, set: PxSceneDesc.prototype.set_gpuMaxNumPartitions });
        PxSceneDesc.prototype["get_gpuComputeVersion"] = PxSceneDesc.prototype.get_gpuComputeVersion = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneDesc_get_gpuComputeVersion_0(self2);
        };
        PxSceneDesc.prototype["set_gpuComputeVersion"] = PxSceneDesc.prototype.set_gpuComputeVersion = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneDesc_set_gpuComputeVersion_1(self2, arg0);
        };
        Object.defineProperty(PxSceneDesc.prototype, "gpuComputeVersion", { get: PxSceneDesc.prototype.get_gpuComputeVersion, set: PxSceneDesc.prototype.set_gpuComputeVersion });
        PxSceneDesc.prototype["__destroy__"] = PxSceneDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSceneDesc___destroy___0(self2);
        };
        function PxSceneFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxSceneFlags_PxSceneFlags_1(flags);
          getCache(PxSceneFlags)[this.ptr] = this;
        }
        ;
        ;
        PxSceneFlags.prototype = Object.create(WrapperObject.prototype);
        PxSceneFlags.prototype.constructor = PxSceneFlags;
        PxSceneFlags.prototype.__class__ = PxSceneFlags;
        PxSceneFlags.__cache__ = {};
        Module["PxSceneFlags"] = PxSceneFlags;
        PxSceneFlags.prototype["isSet"] = PxSceneFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxSceneFlags_isSet_1(self2, flag);
        };
        ;
        PxSceneFlags.prototype["set"] = PxSceneFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxSceneFlags_set_1(self2, flag);
        };
        ;
        PxSceneFlags.prototype["clear"] = PxSceneFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxSceneFlags_clear_1(self2, flag);
        };
        ;
        PxSceneFlags.prototype["__destroy__"] = PxSceneFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSceneFlags___destroy___0(self2);
        };
        function PxSceneLimits() {
          this.ptr = _emscripten_bind_PxSceneLimits_PxSceneLimits_0();
          getCache(PxSceneLimits)[this.ptr] = this;
        }
        ;
        ;
        PxSceneLimits.prototype = Object.create(WrapperObject.prototype);
        PxSceneLimits.prototype.constructor = PxSceneLimits;
        PxSceneLimits.prototype.__class__ = PxSceneLimits;
        PxSceneLimits.__cache__ = {};
        Module["PxSceneLimits"] = PxSceneLimits;
        PxSceneLimits.prototype["setToDefault"] = PxSceneLimits.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSceneLimits_setToDefault_0(self2);
        };
        ;
        PxSceneLimits.prototype["isValid"] = PxSceneLimits.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSceneLimits_isValid_0(self2);
        };
        ;
        PxSceneLimits.prototype["get_maxNbActors"] = PxSceneLimits.prototype.get_maxNbActors = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbActors_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbActors"] = PxSceneLimits.prototype.set_maxNbActors = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbActors_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbActors", { get: PxSceneLimits.prototype.get_maxNbActors, set: PxSceneLimits.prototype.set_maxNbActors });
        PxSceneLimits.prototype["get_maxNbBodies"] = PxSceneLimits.prototype.get_maxNbBodies = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbBodies_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbBodies"] = PxSceneLimits.prototype.set_maxNbBodies = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbBodies_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbBodies", { get: PxSceneLimits.prototype.get_maxNbBodies, set: PxSceneLimits.prototype.set_maxNbBodies });
        PxSceneLimits.prototype["get_maxNbStaticShapes"] = PxSceneLimits.prototype.get_maxNbStaticShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbStaticShapes_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbStaticShapes"] = PxSceneLimits.prototype.set_maxNbStaticShapes = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbStaticShapes_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbStaticShapes", { get: PxSceneLimits.prototype.get_maxNbStaticShapes, set: PxSceneLimits.prototype.set_maxNbStaticShapes });
        PxSceneLimits.prototype["get_maxNbDynamicShapes"] = PxSceneLimits.prototype.get_maxNbDynamicShapes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbDynamicShapes_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbDynamicShapes"] = PxSceneLimits.prototype.set_maxNbDynamicShapes = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbDynamicShapes_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbDynamicShapes", { get: PxSceneLimits.prototype.get_maxNbDynamicShapes, set: PxSceneLimits.prototype.set_maxNbDynamicShapes });
        PxSceneLimits.prototype["get_maxNbAggregates"] = PxSceneLimits.prototype.get_maxNbAggregates = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbAggregates_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbAggregates"] = PxSceneLimits.prototype.set_maxNbAggregates = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbAggregates_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbAggregates", { get: PxSceneLimits.prototype.get_maxNbAggregates, set: PxSceneLimits.prototype.set_maxNbAggregates });
        PxSceneLimits.prototype["get_maxNbConstraints"] = PxSceneLimits.prototype.get_maxNbConstraints = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbConstraints_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbConstraints"] = PxSceneLimits.prototype.set_maxNbConstraints = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbConstraints_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbConstraints", { get: PxSceneLimits.prototype.get_maxNbConstraints, set: PxSceneLimits.prototype.set_maxNbConstraints });
        PxSceneLimits.prototype["get_maxNbRegions"] = PxSceneLimits.prototype.get_maxNbRegions = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbRegions_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbRegions"] = PxSceneLimits.prototype.set_maxNbRegions = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbRegions_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbRegions", { get: PxSceneLimits.prototype.get_maxNbRegions, set: PxSceneLimits.prototype.set_maxNbRegions });
        PxSceneLimits.prototype["get_maxNbBroadPhaseOverlaps"] = PxSceneLimits.prototype.get_maxNbBroadPhaseOverlaps = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSceneLimits_get_maxNbBroadPhaseOverlaps_0(self2);
        };
        PxSceneLimits.prototype["set_maxNbBroadPhaseOverlaps"] = PxSceneLimits.prototype.set_maxNbBroadPhaseOverlaps = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSceneLimits_set_maxNbBroadPhaseOverlaps_1(self2, arg0);
        };
        Object.defineProperty(PxSceneLimits.prototype, "maxNbBroadPhaseOverlaps", { get: PxSceneLimits.prototype.get_maxNbBroadPhaseOverlaps, set: PxSceneLimits.prototype.set_maxNbBroadPhaseOverlaps });
        PxSceneLimits.prototype["__destroy__"] = PxSceneLimits.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSceneLimits___destroy___0(self2);
        };
        function PxShape() {
          throw "cannot construct a PxShape, no constructor in IDL";
        }
        PxShape.prototype = Object.create(PxBase.prototype);
        PxShape.prototype.constructor = PxShape;
        PxShape.prototype.__class__ = PxShape;
        PxShape.__cache__ = {};
        Module["PxShape"] = PxShape;
        PxShape.prototype["getReferenceCount"] = PxShape.prototype.getReferenceCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getReferenceCount_0(self2);
        };
        ;
        PxShape.prototype["acquireReference"] = PxShape.prototype.acquireReference = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxShape_acquireReference_0(self2);
        };
        ;
        PxShape.prototype["getGeometryType"] = PxShape.prototype.getGeometryType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getGeometryType_0(self2);
        };
        ;
        PxShape.prototype["setGeometry"] = PxShape.prototype.setGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          _emscripten_bind_PxShape_setGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getGeometry"] = PxShape.prototype.getGeometry = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getGeometry_0(self2), PxGeometryHolder);
        };
        ;
        PxShape.prototype["getBoxGeometry"] = PxShape.prototype.getBoxGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          return !!_emscripten_bind_PxShape_getBoxGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getSphereGeometry"] = PxShape.prototype.getSphereGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          return !!_emscripten_bind_PxShape_getSphereGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getCapsuleGeometry"] = PxShape.prototype.getCapsuleGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          return !!_emscripten_bind_PxShape_getCapsuleGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getPlaneGeometry"] = PxShape.prototype.getPlaneGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          return !!_emscripten_bind_PxShape_getPlaneGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getConvexMeshGeometry"] = PxShape.prototype.getConvexMeshGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          return !!_emscripten_bind_PxShape_getConvexMeshGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getTriangleMeshGeometry"] = PxShape.prototype.getTriangleMeshGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          return !!_emscripten_bind_PxShape_getTriangleMeshGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getHeightFieldGeometry"] = PxShape.prototype.getHeightFieldGeometry = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          return !!_emscripten_bind_PxShape_getHeightFieldGeometry_1(self2, geometry);
        };
        ;
        PxShape.prototype["getActor"] = PxShape.prototype.getActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getActor_0(self2), PxRigidActor);
        };
        ;
        PxShape.prototype["setMaterials"] = PxShape.prototype.setMaterials = function(materials, materialCount) {
          var self2 = this.ptr;
          if (materials && typeof materials === "object")
            materials = materials.ptr;
          if (materialCount && typeof materialCount === "object")
            materialCount = materialCount.ptr;
          _emscripten_bind_PxShape_setMaterials_2(self2, materials, materialCount);
        };
        ;
        PxShape.prototype["getNbMaterials"] = PxShape.prototype.getNbMaterials = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getNbMaterials_0(self2);
        };
        ;
        PxShape.prototype["getMaterials"] = PxShape.prototype.getMaterials = function(userBuffer, bufferSize, startIndex) {
          var self2 = this.ptr;
          if (userBuffer && typeof userBuffer === "object")
            userBuffer = userBuffer.ptr;
          if (bufferSize && typeof bufferSize === "object")
            bufferSize = bufferSize.ptr;
          if (startIndex && typeof startIndex === "object")
            startIndex = startIndex.ptr;
          return _emscripten_bind_PxShape_getMaterials_3(self2, userBuffer, bufferSize, startIndex);
        };
        ;
        PxShape.prototype["getMaterialFromInternalFaceIndex"] = PxShape.prototype.getMaterialFromInternalFaceIndex = function(faceIndex) {
          var self2 = this.ptr;
          if (faceIndex && typeof faceIndex === "object")
            faceIndex = faceIndex.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getMaterialFromInternalFaceIndex_1(self2, faceIndex), PxMaterial);
        };
        ;
        PxShape.prototype["setContactOffset"] = PxShape.prototype.setContactOffset = function(contactOffset) {
          var self2 = this.ptr;
          if (contactOffset && typeof contactOffset === "object")
            contactOffset = contactOffset.ptr;
          _emscripten_bind_PxShape_setContactOffset_1(self2, contactOffset);
        };
        ;
        PxShape.prototype["getContactOffset"] = PxShape.prototype.getContactOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getContactOffset_0(self2);
        };
        ;
        PxShape.prototype["setRestOffset"] = PxShape.prototype.setRestOffset = function(restOffset) {
          var self2 = this.ptr;
          if (restOffset && typeof restOffset === "object")
            restOffset = restOffset.ptr;
          _emscripten_bind_PxShape_setRestOffset_1(self2, restOffset);
        };
        ;
        PxShape.prototype["getRestOffset"] = PxShape.prototype.getRestOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getRestOffset_0(self2);
        };
        ;
        PxShape.prototype["setTorsionalPatchRadius"] = PxShape.prototype.setTorsionalPatchRadius = function(radius) {
          var self2 = this.ptr;
          if (radius && typeof radius === "object")
            radius = radius.ptr;
          _emscripten_bind_PxShape_setTorsionalPatchRadius_1(self2, radius);
        };
        ;
        PxShape.prototype["getTorsionalPatchRadius"] = PxShape.prototype.getTorsionalPatchRadius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getTorsionalPatchRadius_0(self2);
        };
        ;
        PxShape.prototype["setMinTorsionalPatchRadius"] = PxShape.prototype.setMinTorsionalPatchRadius = function(radius) {
          var self2 = this.ptr;
          if (radius && typeof radius === "object")
            radius = radius.ptr;
          _emscripten_bind_PxShape_setMinTorsionalPatchRadius_1(self2, radius);
        };
        ;
        PxShape.prototype["getMinTorsionalPatchRadius"] = PxShape.prototype.getMinTorsionalPatchRadius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getMinTorsionalPatchRadius_0(self2);
        };
        ;
        PxShape.prototype["setFlag"] = PxShape.prototype.setFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxShape_setFlag_2(self2, flag, value);
        };
        ;
        PxShape.prototype["setFlags"] = PxShape.prototype.setFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxShape_setFlags_1(self2, inFlags);
        };
        ;
        PxShape.prototype["getFlags"] = PxShape.prototype.getFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getFlags_0(self2), PxShapeFlags);
        };
        ;
        PxShape.prototype["isExclusive"] = PxShape.prototype.isExclusive = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxShape_isExclusive_0(self2);
        };
        ;
        PxShape.prototype["setName"] = PxShape.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxShape_setName_1(self2, name);
        };
        ;
        PxShape.prototype["getName"] = PxShape.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxShape_getName_0(self2));
        };
        ;
        PxShape.prototype["setLocalPose"] = PxShape.prototype.setLocalPose = function(pose) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          _emscripten_bind_PxShape_setLocalPose_1(self2, pose);
        };
        ;
        PxShape.prototype["getLocalPose"] = PxShape.prototype.getLocalPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getLocalPose_0(self2), PxTransform);
        };
        ;
        PxShape.prototype["setSimulationFilterData"] = PxShape.prototype.setSimulationFilterData = function(data) {
          var self2 = this.ptr;
          if (data && typeof data === "object")
            data = data.ptr;
          _emscripten_bind_PxShape_setSimulationFilterData_1(self2, data);
        };
        ;
        PxShape.prototype["getSimulationFilterData"] = PxShape.prototype.getSimulationFilterData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getSimulationFilterData_0(self2), PxFilterData);
        };
        ;
        PxShape.prototype["setQueryFilterData"] = PxShape.prototype.setQueryFilterData = function(data) {
          var self2 = this.ptr;
          if (data && typeof data === "object")
            data = data.ptr;
          _emscripten_bind_PxShape_setQueryFilterData_1(self2, data);
        };
        ;
        PxShape.prototype["getQueryFilterData"] = PxShape.prototype.getQueryFilterData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getQueryFilterData_0(self2), PxFilterData);
        };
        ;
        PxShape.prototype["getConcreteTypeName"] = PxShape.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxShape_getConcreteTypeName_0(self2));
        };
        ;
        PxShape.prototype["getConcreteType"] = PxShape.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxShape_getConcreteType_0(self2);
        };
        ;
        PxShape.prototype["setBaseFlag"] = PxShape.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxShape_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxShape.prototype["setBaseFlags"] = PxShape.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxShape_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxShape.prototype["getBaseFlags"] = PxShape.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxShape.prototype["isReleasable"] = PxShape.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxShape_isReleasable_0(self2);
        };
        ;
        PxShape.prototype["get_userData"] = PxShape.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxShape_get_userData_0(self2), VoidPtr);
        };
        PxShape.prototype["set_userData"] = PxShape.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxShape_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxShape.prototype, "userData", { get: PxShape.prototype.get_userData, set: PxShape.prototype.set_userData });
        function PxShapeFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxShapeFlags_PxShapeFlags_1(flags);
          getCache(PxShapeFlags)[this.ptr] = this;
        }
        ;
        ;
        PxShapeFlags.prototype = Object.create(WrapperObject.prototype);
        PxShapeFlags.prototype.constructor = PxShapeFlags;
        PxShapeFlags.prototype.__class__ = PxShapeFlags;
        PxShapeFlags.__cache__ = {};
        Module["PxShapeFlags"] = PxShapeFlags;
        PxShapeFlags.prototype["isSet"] = PxShapeFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxShapeFlags_isSet_1(self2, flag);
        };
        ;
        PxShapeFlags.prototype["set"] = PxShapeFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxShapeFlags_set_1(self2, flag);
        };
        ;
        PxShapeFlags.prototype["clear"] = PxShapeFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxShapeFlags_clear_1(self2, flag);
        };
        ;
        PxShapeFlags.prototype["__destroy__"] = PxShapeFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxShapeFlags___destroy___0(self2);
        };
        function JavaSimulationEventCallback() {
          this.ptr = _emscripten_bind_JavaSimulationEventCallback_JavaSimulationEventCallback_0();
          getCache(JavaSimulationEventCallback)[this.ptr] = this;
        }
        ;
        ;
        JavaSimulationEventCallback.prototype = Object.create(SimpleSimulationEventCallback.prototype);
        JavaSimulationEventCallback.prototype.constructor = JavaSimulationEventCallback;
        JavaSimulationEventCallback.prototype.__class__ = JavaSimulationEventCallback;
        JavaSimulationEventCallback.__cache__ = {};
        Module["JavaSimulationEventCallback"] = JavaSimulationEventCallback;
        JavaSimulationEventCallback.prototype["onConstraintBreak"] = JavaSimulationEventCallback.prototype.onConstraintBreak = function(constraints, count) {
          var self2 = this.ptr;
          if (constraints && typeof constraints === "object")
            constraints = constraints.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_JavaSimulationEventCallback_onConstraintBreak_2(self2, constraints, count);
        };
        ;
        JavaSimulationEventCallback.prototype["onWake"] = JavaSimulationEventCallback.prototype.onWake = function(actors, count) {
          var self2 = this.ptr;
          if (actors && typeof actors === "object")
            actors = actors.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_JavaSimulationEventCallback_onWake_2(self2, actors, count);
        };
        ;
        JavaSimulationEventCallback.prototype["onSleep"] = JavaSimulationEventCallback.prototype.onSleep = function(actors, count) {
          var self2 = this.ptr;
          if (actors && typeof actors === "object")
            actors = actors.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_JavaSimulationEventCallback_onSleep_2(self2, actors, count);
        };
        ;
        JavaSimulationEventCallback.prototype["onContact"] = JavaSimulationEventCallback.prototype.onContact = function(pairHeader, pairs, nbPairs) {
          var self2 = this.ptr;
          if (pairHeader && typeof pairHeader === "object")
            pairHeader = pairHeader.ptr;
          if (pairs && typeof pairs === "object")
            pairs = pairs.ptr;
          if (nbPairs && typeof nbPairs === "object")
            nbPairs = nbPairs.ptr;
          _emscripten_bind_JavaSimulationEventCallback_onContact_3(self2, pairHeader, pairs, nbPairs);
        };
        ;
        JavaSimulationEventCallback.prototype["onTrigger"] = JavaSimulationEventCallback.prototype.onTrigger = function(pairs, count) {
          var self2 = this.ptr;
          if (pairs && typeof pairs === "object")
            pairs = pairs.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_JavaSimulationEventCallback_onTrigger_2(self2, pairs, count);
        };
        ;
        JavaSimulationEventCallback.prototype["__destroy__"] = JavaSimulationEventCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_JavaSimulationEventCallback___destroy___0(self2);
        };
        function PxSimulationFilterShader() {
          throw "cannot construct a PxSimulationFilterShader, no constructor in IDL";
        }
        PxSimulationFilterShader.prototype = Object.create(WrapperObject.prototype);
        PxSimulationFilterShader.prototype.constructor = PxSimulationFilterShader;
        PxSimulationFilterShader.prototype.__class__ = PxSimulationFilterShader;
        PxSimulationFilterShader.__cache__ = {};
        Module["PxSimulationFilterShader"] = PxSimulationFilterShader;
        PxSimulationFilterShader.prototype["__destroy__"] = PxSimulationFilterShader.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSimulationFilterShader___destroy___0(self2);
        };
        function PxSimulationStatistics() {
          throw "cannot construct a PxSimulationStatistics, no constructor in IDL";
        }
        PxSimulationStatistics.prototype = Object.create(WrapperObject.prototype);
        PxSimulationStatistics.prototype.constructor = PxSimulationStatistics;
        PxSimulationStatistics.prototype.__class__ = PxSimulationStatistics;
        PxSimulationStatistics.__cache__ = {};
        Module["PxSimulationStatistics"] = PxSimulationStatistics;
        PxSimulationStatistics.prototype["get_nbActiveConstraints"] = PxSimulationStatistics.prototype.get_nbActiveConstraints = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbActiveConstraints_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbActiveConstraints"] = PxSimulationStatistics.prototype.set_nbActiveConstraints = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbActiveConstraints_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbActiveConstraints", { get: PxSimulationStatistics.prototype.get_nbActiveConstraints, set: PxSimulationStatistics.prototype.set_nbActiveConstraints });
        PxSimulationStatistics.prototype["get_nbActiveDynamicBodies"] = PxSimulationStatistics.prototype.get_nbActiveDynamicBodies = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbActiveDynamicBodies_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbActiveDynamicBodies"] = PxSimulationStatistics.prototype.set_nbActiveDynamicBodies = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbActiveDynamicBodies_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbActiveDynamicBodies", { get: PxSimulationStatistics.prototype.get_nbActiveDynamicBodies, set: PxSimulationStatistics.prototype.set_nbActiveDynamicBodies });
        PxSimulationStatistics.prototype["get_nbActiveKinematicBodies"] = PxSimulationStatistics.prototype.get_nbActiveKinematicBodies = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbActiveKinematicBodies_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbActiveKinematicBodies"] = PxSimulationStatistics.prototype.set_nbActiveKinematicBodies = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbActiveKinematicBodies_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbActiveKinematicBodies", { get: PxSimulationStatistics.prototype.get_nbActiveKinematicBodies, set: PxSimulationStatistics.prototype.set_nbActiveKinematicBodies });
        PxSimulationStatistics.prototype["get_nbStaticBodies"] = PxSimulationStatistics.prototype.get_nbStaticBodies = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbStaticBodies_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbStaticBodies"] = PxSimulationStatistics.prototype.set_nbStaticBodies = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbStaticBodies_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbStaticBodies", { get: PxSimulationStatistics.prototype.get_nbStaticBodies, set: PxSimulationStatistics.prototype.set_nbStaticBodies });
        PxSimulationStatistics.prototype["get_nbDynamicBodies"] = PxSimulationStatistics.prototype.get_nbDynamicBodies = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbDynamicBodies_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbDynamicBodies"] = PxSimulationStatistics.prototype.set_nbDynamicBodies = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbDynamicBodies_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbDynamicBodies", { get: PxSimulationStatistics.prototype.get_nbDynamicBodies, set: PxSimulationStatistics.prototype.set_nbDynamicBodies });
        PxSimulationStatistics.prototype["get_nbKinematicBodies"] = PxSimulationStatistics.prototype.get_nbKinematicBodies = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbKinematicBodies_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbKinematicBodies"] = PxSimulationStatistics.prototype.set_nbKinematicBodies = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbKinematicBodies_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbKinematicBodies", { get: PxSimulationStatistics.prototype.get_nbKinematicBodies, set: PxSimulationStatistics.prototype.set_nbKinematicBodies });
        PxSimulationStatistics.prototype["get_nbShapes"] = PxSimulationStatistics.prototype.get_nbShapes = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbShapes_1(self2, arg0);
        };
        PxSimulationStatistics.prototype["set_nbShapes"] = PxSimulationStatistics.prototype.set_nbShapes = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbShapes_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbShapes", { get: PxSimulationStatistics.prototype.get_nbShapes, set: PxSimulationStatistics.prototype.set_nbShapes });
        PxSimulationStatistics.prototype["get_nbAggregates"] = PxSimulationStatistics.prototype.get_nbAggregates = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbAggregates_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbAggregates"] = PxSimulationStatistics.prototype.set_nbAggregates = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbAggregates_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbAggregates", { get: PxSimulationStatistics.prototype.get_nbAggregates, set: PxSimulationStatistics.prototype.set_nbAggregates });
        PxSimulationStatistics.prototype["get_nbArticulations"] = PxSimulationStatistics.prototype.get_nbArticulations = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbArticulations_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbArticulations"] = PxSimulationStatistics.prototype.set_nbArticulations = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbArticulations_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbArticulations", { get: PxSimulationStatistics.prototype.get_nbArticulations, set: PxSimulationStatistics.prototype.set_nbArticulations });
        PxSimulationStatistics.prototype["get_nbAxisSolverConstraints"] = PxSimulationStatistics.prototype.get_nbAxisSolverConstraints = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbAxisSolverConstraints_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbAxisSolverConstraints"] = PxSimulationStatistics.prototype.set_nbAxisSolverConstraints = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbAxisSolverConstraints_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbAxisSolverConstraints", { get: PxSimulationStatistics.prototype.get_nbAxisSolverConstraints, set: PxSimulationStatistics.prototype.set_nbAxisSolverConstraints });
        PxSimulationStatistics.prototype["get_compressedContactSize"] = PxSimulationStatistics.prototype.get_compressedContactSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_compressedContactSize_0(self2);
        };
        PxSimulationStatistics.prototype["set_compressedContactSize"] = PxSimulationStatistics.prototype.set_compressedContactSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_compressedContactSize_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "compressedContactSize", { get: PxSimulationStatistics.prototype.get_compressedContactSize, set: PxSimulationStatistics.prototype.set_compressedContactSize });
        PxSimulationStatistics.prototype["get_requiredContactConstraintMemory"] = PxSimulationStatistics.prototype.get_requiredContactConstraintMemory = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_requiredContactConstraintMemory_0(self2);
        };
        PxSimulationStatistics.prototype["set_requiredContactConstraintMemory"] = PxSimulationStatistics.prototype.set_requiredContactConstraintMemory = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_requiredContactConstraintMemory_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "requiredContactConstraintMemory", { get: PxSimulationStatistics.prototype.get_requiredContactConstraintMemory, set: PxSimulationStatistics.prototype.set_requiredContactConstraintMemory });
        PxSimulationStatistics.prototype["get_peakConstraintMemory"] = PxSimulationStatistics.prototype.get_peakConstraintMemory = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_peakConstraintMemory_0(self2);
        };
        PxSimulationStatistics.prototype["set_peakConstraintMemory"] = PxSimulationStatistics.prototype.set_peakConstraintMemory = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_peakConstraintMemory_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "peakConstraintMemory", { get: PxSimulationStatistics.prototype.get_peakConstraintMemory, set: PxSimulationStatistics.prototype.set_peakConstraintMemory });
        PxSimulationStatistics.prototype["get_nbDiscreteContactPairsTotal"] = PxSimulationStatistics.prototype.get_nbDiscreteContactPairsTotal = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsTotal_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbDiscreteContactPairsTotal"] = PxSimulationStatistics.prototype.set_nbDiscreteContactPairsTotal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsTotal_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbDiscreteContactPairsTotal", { get: PxSimulationStatistics.prototype.get_nbDiscreteContactPairsTotal, set: PxSimulationStatistics.prototype.set_nbDiscreteContactPairsTotal });
        PxSimulationStatistics.prototype["get_nbDiscreteContactPairsWithCacheHits"] = PxSimulationStatistics.prototype.get_nbDiscreteContactPairsWithCacheHits = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithCacheHits_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbDiscreteContactPairsWithCacheHits"] = PxSimulationStatistics.prototype.set_nbDiscreteContactPairsWithCacheHits = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithCacheHits_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbDiscreteContactPairsWithCacheHits", { get: PxSimulationStatistics.prototype.get_nbDiscreteContactPairsWithCacheHits, set: PxSimulationStatistics.prototype.set_nbDiscreteContactPairsWithCacheHits });
        PxSimulationStatistics.prototype["get_nbDiscreteContactPairsWithContacts"] = PxSimulationStatistics.prototype.get_nbDiscreteContactPairsWithContacts = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbDiscreteContactPairsWithContacts_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbDiscreteContactPairsWithContacts"] = PxSimulationStatistics.prototype.set_nbDiscreteContactPairsWithContacts = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbDiscreteContactPairsWithContacts_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbDiscreteContactPairsWithContacts", { get: PxSimulationStatistics.prototype.get_nbDiscreteContactPairsWithContacts, set: PxSimulationStatistics.prototype.set_nbDiscreteContactPairsWithContacts });
        PxSimulationStatistics.prototype["get_nbNewPairs"] = PxSimulationStatistics.prototype.get_nbNewPairs = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbNewPairs_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbNewPairs"] = PxSimulationStatistics.prototype.set_nbNewPairs = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbNewPairs_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbNewPairs", { get: PxSimulationStatistics.prototype.get_nbNewPairs, set: PxSimulationStatistics.prototype.set_nbNewPairs });
        PxSimulationStatistics.prototype["get_nbLostPairs"] = PxSimulationStatistics.prototype.get_nbLostPairs = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbLostPairs_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbLostPairs"] = PxSimulationStatistics.prototype.set_nbLostPairs = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbLostPairs_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbLostPairs", { get: PxSimulationStatistics.prototype.get_nbLostPairs, set: PxSimulationStatistics.prototype.set_nbLostPairs });
        PxSimulationStatistics.prototype["get_nbNewTouches"] = PxSimulationStatistics.prototype.get_nbNewTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbNewTouches_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbNewTouches"] = PxSimulationStatistics.prototype.set_nbNewTouches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbNewTouches_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbNewTouches", { get: PxSimulationStatistics.prototype.get_nbNewTouches, set: PxSimulationStatistics.prototype.set_nbNewTouches });
        PxSimulationStatistics.prototype["get_nbLostTouches"] = PxSimulationStatistics.prototype.get_nbLostTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbLostTouches_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbLostTouches"] = PxSimulationStatistics.prototype.set_nbLostTouches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbLostTouches_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbLostTouches", { get: PxSimulationStatistics.prototype.get_nbLostTouches, set: PxSimulationStatistics.prototype.set_nbLostTouches });
        PxSimulationStatistics.prototype["get_nbPartitions"] = PxSimulationStatistics.prototype.get_nbPartitions = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbPartitions_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbPartitions"] = PxSimulationStatistics.prototype.set_nbPartitions = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbPartitions_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbPartitions", { get: PxSimulationStatistics.prototype.get_nbPartitions, set: PxSimulationStatistics.prototype.set_nbPartitions });
        PxSimulationStatistics.prototype["get_nbBroadPhaseAdds"] = PxSimulationStatistics.prototype.get_nbBroadPhaseAdds = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseAdds_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbBroadPhaseAdds"] = PxSimulationStatistics.prototype.set_nbBroadPhaseAdds = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseAdds_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbBroadPhaseAdds", { get: PxSimulationStatistics.prototype.get_nbBroadPhaseAdds, set: PxSimulationStatistics.prototype.set_nbBroadPhaseAdds });
        PxSimulationStatistics.prototype["get_nbBroadPhaseRemoves"] = PxSimulationStatistics.prototype.get_nbBroadPhaseRemoves = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSimulationStatistics_get_nbBroadPhaseRemoves_0(self2);
        };
        PxSimulationStatistics.prototype["set_nbBroadPhaseRemoves"] = PxSimulationStatistics.prototype.set_nbBroadPhaseRemoves = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSimulationStatistics_set_nbBroadPhaseRemoves_1(self2, arg0);
        };
        Object.defineProperty(PxSimulationStatistics.prototype, "nbBroadPhaseRemoves", { get: PxSimulationStatistics.prototype.get_nbBroadPhaseRemoves, set: PxSimulationStatistics.prototype.set_nbBroadPhaseRemoves });
        PxSimulationStatistics.prototype["__destroy__"] = PxSimulationStatistics.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSimulationStatistics___destroy___0(self2);
        };
        function PxSpatialVelocity() {
          throw "cannot construct a PxSpatialVelocity, no constructor in IDL";
        }
        PxSpatialVelocity.prototype = Object.create(WrapperObject.prototype);
        PxSpatialVelocity.prototype.constructor = PxSpatialVelocity;
        PxSpatialVelocity.prototype.__class__ = PxSpatialVelocity;
        PxSpatialVelocity.__cache__ = {};
        Module["PxSpatialVelocity"] = PxSpatialVelocity;
        PxSpatialVelocity.prototype["get_linear"] = PxSpatialVelocity.prototype.get_linear = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSpatialVelocity_get_linear_0(self2), PxVec3);
        };
        PxSpatialVelocity.prototype["set_linear"] = PxSpatialVelocity.prototype.set_linear = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSpatialVelocity_set_linear_1(self2, arg0);
        };
        Object.defineProperty(PxSpatialVelocity.prototype, "linear", { get: PxSpatialVelocity.prototype.get_linear, set: PxSpatialVelocity.prototype.set_linear });
        PxSpatialVelocity.prototype["get_angular"] = PxSpatialVelocity.prototype.get_angular = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSpatialVelocity_get_angular_0(self2), PxVec3);
        };
        PxSpatialVelocity.prototype["set_angular"] = PxSpatialVelocity.prototype.set_angular = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSpatialVelocity_set_angular_1(self2, arg0);
        };
        Object.defineProperty(PxSpatialVelocity.prototype, "angular", { get: PxSpatialVelocity.prototype.get_angular, set: PxSpatialVelocity.prototype.set_angular });
        PxSpatialVelocity.prototype["__destroy__"] = PxSpatialVelocity.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSpatialVelocity___destroy___0(self2);
        };
        function PxSweepBuffer10() {
          this.ptr = _emscripten_bind_PxSweepBuffer10_PxSweepBuffer10_0();
          getCache(PxSweepBuffer10)[this.ptr] = this;
        }
        ;
        ;
        PxSweepBuffer10.prototype = Object.create(PxSweepCallback.prototype);
        PxSweepBuffer10.prototype.constructor = PxSweepBuffer10;
        PxSweepBuffer10.prototype.__class__ = PxSweepBuffer10;
        PxSweepBuffer10.__cache__ = {};
        Module["PxSweepBuffer10"] = PxSweepBuffer10;
        PxSweepBuffer10.prototype["getNbAnyHits"] = PxSweepBuffer10.prototype.getNbAnyHits = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepBuffer10_getNbAnyHits_0(self2);
        };
        ;
        PxSweepBuffer10.prototype["getAnyHit"] = PxSweepBuffer10.prototype.getAnyHit = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxSweepBuffer10_getAnyHit_1(self2, index), PxSweepHit);
        };
        ;
        PxSweepBuffer10.prototype["getNbTouches"] = PxSweepBuffer10.prototype.getNbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepBuffer10_getNbTouches_0(self2);
        };
        ;
        PxSweepBuffer10.prototype["getTouches"] = PxSweepBuffer10.prototype.getTouches = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepBuffer10_getTouches_0(self2), PxSweepHit);
        };
        ;
        PxSweepBuffer10.prototype["getTouch"] = PxSweepBuffer10.prototype.getTouch = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxSweepBuffer10_getTouch_1(self2, index), PxSweepHit);
        };
        ;
        PxSweepBuffer10.prototype["getMaxNbTouches"] = PxSweepBuffer10.prototype.getMaxNbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepBuffer10_getMaxNbTouches_0(self2);
        };
        ;
        PxSweepBuffer10.prototype["hasAnyHits"] = PxSweepBuffer10.prototype.hasAnyHits = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSweepBuffer10_hasAnyHits_0(self2);
        };
        ;
        PxSweepBuffer10.prototype["get_block"] = PxSweepBuffer10.prototype.get_block = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepBuffer10_get_block_0(self2), PxSweepHit);
        };
        PxSweepBuffer10.prototype["set_block"] = PxSweepBuffer10.prototype.set_block = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepBuffer10_set_block_1(self2, arg0);
        };
        Object.defineProperty(PxSweepBuffer10.prototype, "block", { get: PxSweepBuffer10.prototype.get_block, set: PxSweepBuffer10.prototype.set_block });
        PxSweepBuffer10.prototype["get_hasBlock"] = PxSweepBuffer10.prototype.get_hasBlock = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSweepBuffer10_get_hasBlock_0(self2);
        };
        PxSweepBuffer10.prototype["set_hasBlock"] = PxSweepBuffer10.prototype.set_hasBlock = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepBuffer10_set_hasBlock_1(self2, arg0);
        };
        Object.defineProperty(PxSweepBuffer10.prototype, "hasBlock", { get: PxSweepBuffer10.prototype.get_hasBlock, set: PxSweepBuffer10.prototype.set_hasBlock });
        PxSweepBuffer10.prototype["__destroy__"] = PxSweepBuffer10.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSweepBuffer10___destroy___0(self2);
        };
        function PxSweepHit() {
          throw "cannot construct a PxSweepHit, no constructor in IDL";
        }
        PxSweepHit.prototype = Object.create(PxLocationHit.prototype);
        PxSweepHit.prototype.constructor = PxSweepHit;
        PxSweepHit.prototype.__class__ = PxSweepHit;
        PxSweepHit.__cache__ = {};
        Module["PxSweepHit"] = PxSweepHit;
        PxSweepHit.prototype["get_actor"] = PxSweepHit.prototype.get_actor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepHit_get_actor_0(self2), PxRigidActor);
        };
        PxSweepHit.prototype["set_actor"] = PxSweepHit.prototype.set_actor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepHit_set_actor_1(self2, arg0);
        };
        Object.defineProperty(PxSweepHit.prototype, "actor", { get: PxSweepHit.prototype.get_actor, set: PxSweepHit.prototype.set_actor });
        PxSweepHit.prototype["get_shape"] = PxSweepHit.prototype.get_shape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepHit_get_shape_0(self2), PxShape);
        };
        PxSweepHit.prototype["set_shape"] = PxSweepHit.prototype.set_shape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepHit_set_shape_1(self2, arg0);
        };
        Object.defineProperty(PxSweepHit.prototype, "shape", { get: PxSweepHit.prototype.get_shape, set: PxSweepHit.prototype.set_shape });
        PxSweepHit.prototype["get_flags"] = PxSweepHit.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepHit_get_flags_0(self2), PxHitFlags);
        };
        PxSweepHit.prototype["set_flags"] = PxSweepHit.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepHit_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxSweepHit.prototype, "flags", { get: PxSweepHit.prototype.get_flags, set: PxSweepHit.prototype.set_flags });
        PxSweepHit.prototype["get_position"] = PxSweepHit.prototype.get_position = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepHit_get_position_0(self2), PxVec3);
        };
        PxSweepHit.prototype["set_position"] = PxSweepHit.prototype.set_position = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepHit_set_position_1(self2, arg0);
        };
        Object.defineProperty(PxSweepHit.prototype, "position", { get: PxSweepHit.prototype.get_position, set: PxSweepHit.prototype.set_position });
        PxSweepHit.prototype["get_normal"] = PxSweepHit.prototype.get_normal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepHit_get_normal_0(self2), PxVec3);
        };
        PxSweepHit.prototype["set_normal"] = PxSweepHit.prototype.set_normal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepHit_set_normal_1(self2, arg0);
        };
        Object.defineProperty(PxSweepHit.prototype, "normal", { get: PxSweepHit.prototype.get_normal, set: PxSweepHit.prototype.set_normal });
        PxSweepHit.prototype["get_distance"] = PxSweepHit.prototype.get_distance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepHit_get_distance_0(self2);
        };
        PxSweepHit.prototype["set_distance"] = PxSweepHit.prototype.set_distance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepHit_set_distance_1(self2, arg0);
        };
        Object.defineProperty(PxSweepHit.prototype, "distance", { get: PxSweepHit.prototype.get_distance, set: PxSweepHit.prototype.set_distance });
        PxSweepHit.prototype["get_faceIndex"] = PxSweepHit.prototype.get_faceIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepHit_get_faceIndex_0(self2);
        };
        PxSweepHit.prototype["set_faceIndex"] = PxSweepHit.prototype.set_faceIndex = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepHit_set_faceIndex_1(self2, arg0);
        };
        Object.defineProperty(PxSweepHit.prototype, "faceIndex", { get: PxSweepHit.prototype.get_faceIndex, set: PxSweepHit.prototype.set_faceIndex });
        PxSweepHit.prototype["__destroy__"] = PxSweepHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSweepHit___destroy___0(self2);
        };
        function PxSweepQueryResult() {
          throw "cannot construct a PxSweepQueryResult, no constructor in IDL";
        }
        PxSweepQueryResult.prototype = Object.create(WrapperObject.prototype);
        PxSweepQueryResult.prototype.constructor = PxSweepQueryResult;
        PxSweepQueryResult.prototype.__class__ = PxSweepQueryResult;
        PxSweepQueryResult.__cache__ = {};
        Module["PxSweepQueryResult"] = PxSweepQueryResult;
        PxSweepQueryResult.prototype["getNbAnyHits"] = PxSweepQueryResult.prototype.getNbAnyHits = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepQueryResult_getNbAnyHits_0(self2);
        };
        ;
        PxSweepQueryResult.prototype["getAnyHit"] = PxSweepQueryResult.prototype.getAnyHit = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxSweepQueryResult_getAnyHit_1(self2, index), PxSweepHit);
        };
        ;
        PxSweepQueryResult.prototype["get_block"] = PxSweepQueryResult.prototype.get_block = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepQueryResult_get_block_0(self2), PxSweepHit);
        };
        PxSweepQueryResult.prototype["set_block"] = PxSweepQueryResult.prototype.set_block = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepQueryResult_set_block_1(self2, arg0);
        };
        Object.defineProperty(PxSweepQueryResult.prototype, "block", { get: PxSweepQueryResult.prototype.get_block, set: PxSweepQueryResult.prototype.set_block });
        PxSweepQueryResult.prototype["get_touches"] = PxSweepQueryResult.prototype.get_touches = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSweepQueryResult_get_touches_0(self2), PxSweepHit);
        };
        PxSweepQueryResult.prototype["set_touches"] = PxSweepQueryResult.prototype.set_touches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepQueryResult_set_touches_1(self2, arg0);
        };
        Object.defineProperty(PxSweepQueryResult.prototype, "touches", { get: PxSweepQueryResult.prototype.get_touches, set: PxSweepQueryResult.prototype.set_touches });
        PxSweepQueryResult.prototype["get_nbTouches"] = PxSweepQueryResult.prototype.get_nbTouches = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepQueryResult_get_nbTouches_0(self2);
        };
        PxSweepQueryResult.prototype["set_nbTouches"] = PxSweepQueryResult.prototype.set_nbTouches = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepQueryResult_set_nbTouches_1(self2, arg0);
        };
        Object.defineProperty(PxSweepQueryResult.prototype, "nbTouches", { get: PxSweepQueryResult.prototype.get_nbTouches, set: PxSweepQueryResult.prototype.set_nbTouches });
        PxSweepQueryResult.prototype["get_userData"] = PxSweepQueryResult.prototype.get_userData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepQueryResult_get_userData_0(self2);
        };
        PxSweepQueryResult.prototype["set_userData"] = PxSweepQueryResult.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepQueryResult_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxSweepQueryResult.prototype, "userData", { get: PxSweepQueryResult.prototype.get_userData, set: PxSweepQueryResult.prototype.set_userData });
        PxSweepQueryResult.prototype["get_queryStatus"] = PxSweepQueryResult.prototype.get_queryStatus = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSweepQueryResult_get_queryStatus_0(self2);
        };
        PxSweepQueryResult.prototype["set_queryStatus"] = PxSweepQueryResult.prototype.set_queryStatus = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepQueryResult_set_queryStatus_1(self2, arg0);
        };
        Object.defineProperty(PxSweepQueryResult.prototype, "queryStatus", { get: PxSweepQueryResult.prototype.get_queryStatus, set: PxSweepQueryResult.prototype.set_queryStatus });
        PxSweepQueryResult.prototype["get_hasBlock"] = PxSweepQueryResult.prototype.get_hasBlock = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSweepQueryResult_get_hasBlock_0(self2);
        };
        PxSweepQueryResult.prototype["set_hasBlock"] = PxSweepQueryResult.prototype.set_hasBlock = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSweepQueryResult_set_hasBlock_1(self2, arg0);
        };
        Object.defineProperty(PxSweepQueryResult.prototype, "hasBlock", { get: PxSweepQueryResult.prototype.get_hasBlock, set: PxSweepQueryResult.prototype.set_hasBlock });
        PxSweepQueryResult.prototype["__destroy__"] = PxSweepQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSweepQueryResult___destroy___0(self2);
        };
        function PxTriggerPair() {
          throw "cannot construct a PxTriggerPair, no constructor in IDL";
        }
        PxTriggerPair.prototype = Object.create(WrapperObject.prototype);
        PxTriggerPair.prototype.constructor = PxTriggerPair;
        PxTriggerPair.prototype.__class__ = PxTriggerPair;
        PxTriggerPair.__cache__ = {};
        Module["PxTriggerPair"] = PxTriggerPair;
        PxTriggerPair.prototype["get_triggerShape"] = PxTriggerPair.prototype.get_triggerShape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriggerPair_get_triggerShape_0(self2), PxShape);
        };
        PxTriggerPair.prototype["set_triggerShape"] = PxTriggerPair.prototype.set_triggerShape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriggerPair_set_triggerShape_1(self2, arg0);
        };
        Object.defineProperty(PxTriggerPair.prototype, "triggerShape", { get: PxTriggerPair.prototype.get_triggerShape, set: PxTriggerPair.prototype.set_triggerShape });
        PxTriggerPair.prototype["get_triggerActor"] = PxTriggerPair.prototype.get_triggerActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriggerPair_get_triggerActor_0(self2), PxRigidActor);
        };
        PxTriggerPair.prototype["set_triggerActor"] = PxTriggerPair.prototype.set_triggerActor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriggerPair_set_triggerActor_1(self2, arg0);
        };
        Object.defineProperty(PxTriggerPair.prototype, "triggerActor", { get: PxTriggerPair.prototype.get_triggerActor, set: PxTriggerPair.prototype.set_triggerActor });
        PxTriggerPair.prototype["get_otherShape"] = PxTriggerPair.prototype.get_otherShape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriggerPair_get_otherShape_0(self2), PxShape);
        };
        PxTriggerPair.prototype["set_otherShape"] = PxTriggerPair.prototype.set_otherShape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriggerPair_set_otherShape_1(self2, arg0);
        };
        Object.defineProperty(PxTriggerPair.prototype, "otherShape", { get: PxTriggerPair.prototype.get_otherShape, set: PxTriggerPair.prototype.set_otherShape });
        PxTriggerPair.prototype["get_otherActor"] = PxTriggerPair.prototype.get_otherActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriggerPair_get_otherActor_0(self2), PxRigidActor);
        };
        PxTriggerPair.prototype["set_otherActor"] = PxTriggerPair.prototype.set_otherActor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriggerPair_set_otherActor_1(self2, arg0);
        };
        Object.defineProperty(PxTriggerPair.prototype, "otherActor", { get: PxTriggerPair.prototype.get_otherActor, set: PxTriggerPair.prototype.set_otherActor });
        PxTriggerPair.prototype["get_status"] = PxTriggerPair.prototype.get_status = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTriggerPair_get_status_0(self2);
        };
        PxTriggerPair.prototype["set_status"] = PxTriggerPair.prototype.set_status = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriggerPair_set_status_1(self2, arg0);
        };
        Object.defineProperty(PxTriggerPair.prototype, "status", { get: PxTriggerPair.prototype.get_status, set: PxTriggerPair.prototype.set_status });
        PxTriggerPair.prototype["get_flags"] = PxTriggerPair.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriggerPair_get_flags_0(self2), PxTriggerPairFlags);
        };
        PxTriggerPair.prototype["set_flags"] = PxTriggerPair.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriggerPair_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxTriggerPair.prototype, "flags", { get: PxTriggerPair.prototype.get_flags, set: PxTriggerPair.prototype.set_flags });
        PxTriggerPair.prototype["__destroy__"] = PxTriggerPair.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriggerPair___destroy___0(self2);
        };
        function PxTriggerPairFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxTriggerPairFlags_PxTriggerPairFlags_1(flags);
          getCache(PxTriggerPairFlags)[this.ptr] = this;
        }
        ;
        ;
        PxTriggerPairFlags.prototype = Object.create(WrapperObject.prototype);
        PxTriggerPairFlags.prototype.constructor = PxTriggerPairFlags;
        PxTriggerPairFlags.prototype.__class__ = PxTriggerPairFlags;
        PxTriggerPairFlags.__cache__ = {};
        Module["PxTriggerPairFlags"] = PxTriggerPairFlags;
        PxTriggerPairFlags.prototype["isSet"] = PxTriggerPairFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxTriggerPairFlags_isSet_1(self2, flag);
        };
        ;
        PxTriggerPairFlags.prototype["set"] = PxTriggerPairFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxTriggerPairFlags_set_1(self2, flag);
        };
        ;
        PxTriggerPairFlags.prototype["clear"] = PxTriggerPairFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxTriggerPairFlags_clear_1(self2, flag);
        };
        ;
        PxTriggerPairFlags.prototype["__destroy__"] = PxTriggerPairFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriggerPairFlags___destroy___0(self2);
        };
        function PxVehicleTopLevelFunctions() {
          throw "cannot construct a PxVehicleTopLevelFunctions, no constructor in IDL";
        }
        PxVehicleTopLevelFunctions.prototype = Object.create(WrapperObject.prototype);
        PxVehicleTopLevelFunctions.prototype.constructor = PxVehicleTopLevelFunctions;
        PxVehicleTopLevelFunctions.prototype.__class__ = PxVehicleTopLevelFunctions;
        PxVehicleTopLevelFunctions.__cache__ = {};
        Module["PxVehicleTopLevelFunctions"] = PxVehicleTopLevelFunctions;
        PxVehicleTopLevelFunctions.prototype["InitVehicleSDK"] = PxVehicleTopLevelFunctions.prototype.InitVehicleSDK = function(physics) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          return !!_emscripten_bind_PxVehicleTopLevelFunctions_InitVehicleSDK_1(self2, physics);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["PxVehicleComputeSprungMasses"] = PxVehicleTopLevelFunctions.prototype.PxVehicleComputeSprungMasses = function(nbSprungMasses, sprungMassCoordinates, centreOfMass, totalMass, gravityDirection, sprungMasses) {
          var self2 = this.ptr;
          if (nbSprungMasses && typeof nbSprungMasses === "object")
            nbSprungMasses = nbSprungMasses.ptr;
          if (sprungMassCoordinates && typeof sprungMassCoordinates === "object")
            sprungMassCoordinates = sprungMassCoordinates.ptr;
          if (centreOfMass && typeof centreOfMass === "object")
            centreOfMass = centreOfMass.ptr;
          if (totalMass && typeof totalMass === "object")
            totalMass = totalMass.ptr;
          if (gravityDirection && typeof gravityDirection === "object")
            gravityDirection = gravityDirection.ptr;
          if (sprungMasses && typeof sprungMasses === "object")
            sprungMasses = sprungMasses.ptr;
          _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleComputeSprungMasses_6(self2, nbSprungMasses, sprungMassCoordinates, centreOfMass, totalMass, gravityDirection, sprungMasses);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["PxVehicleSuspensionRaycasts"] = PxVehicleTopLevelFunctions.prototype.PxVehicleSuspensionRaycasts = function(batchQuery, vehicles, nbSceneQueryResults, sceneQueryResults) {
          var self2 = this.ptr;
          if (batchQuery && typeof batchQuery === "object")
            batchQuery = batchQuery.ptr;
          if (vehicles && typeof vehicles === "object")
            vehicles = vehicles.ptr;
          if (nbSceneQueryResults && typeof nbSceneQueryResults === "object")
            nbSceneQueryResults = nbSceneQueryResults.ptr;
          if (sceneQueryResults && typeof sceneQueryResults === "object")
            sceneQueryResults = sceneQueryResults.ptr;
          _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleSuspensionRaycasts_4(self2, batchQuery, vehicles, nbSceneQueryResults, sceneQueryResults);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["PxVehicleUpdates"] = PxVehicleTopLevelFunctions.prototype.PxVehicleUpdates = function(timestep, gravity, vehicleDrivableSurfaceToTireFrictionPairs, vehicles, vehicleWheelQueryResults) {
          var self2 = this.ptr;
          if (timestep && typeof timestep === "object")
            timestep = timestep.ptr;
          if (gravity && typeof gravity === "object")
            gravity = gravity.ptr;
          if (vehicleDrivableSurfaceToTireFrictionPairs && typeof vehicleDrivableSurfaceToTireFrictionPairs === "object")
            vehicleDrivableSurfaceToTireFrictionPairs = vehicleDrivableSurfaceToTireFrictionPairs.ptr;
          if (vehicles && typeof vehicles === "object")
            vehicles = vehicles.ptr;
          if (vehicleWheelQueryResults && typeof vehicleWheelQueryResults === "object")
            vehicleWheelQueryResults = vehicleWheelQueryResults.ptr;
          _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleUpdates_5(self2, timestep, gravity, vehicleDrivableSurfaceToTireFrictionPairs, vehicles, vehicleWheelQueryResults);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["VehicleSetBasisVectors"] = PxVehicleTopLevelFunctions.prototype.VehicleSetBasisVectors = function(up, forward) {
          var self2 = this.ptr;
          if (up && typeof up === "object")
            up = up.ptr;
          if (forward && typeof forward === "object")
            forward = forward.ptr;
          _emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetBasisVectors_2(self2, up, forward);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["VehicleSetUpdateMode"] = PxVehicleTopLevelFunctions.prototype.VehicleSetUpdateMode = function(vehicleUpdateMode) {
          var self2 = this.ptr;
          if (vehicleUpdateMode && typeof vehicleUpdateMode === "object")
            vehicleUpdateMode = vehicleUpdateMode.ptr;
          _emscripten_bind_PxVehicleTopLevelFunctions_VehicleSetUpdateMode_1(self2, vehicleUpdateMode);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["PxVehicleTireData_getFrictionVsSlipGraph"] = PxVehicleTopLevelFunctions.prototype.PxVehicleTireData_getFrictionVsSlipGraph = function(tireData, m, n) {
          var self2 = this.ptr;
          if (tireData && typeof tireData === "object")
            tireData = tireData.ptr;
          if (m && typeof m === "object")
            m = m.ptr;
          if (n && typeof n === "object")
            n = n.ptr;
          return _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_getFrictionVsSlipGraph_3(self2, tireData, m, n);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["PxVehicleTireData_setFrictionVsSlipGraph"] = PxVehicleTopLevelFunctions.prototype.PxVehicleTireData_setFrictionVsSlipGraph = function(tireData, m, n, value) {
          var self2 = this.ptr;
          if (tireData && typeof tireData === "object")
            tireData = tireData.ptr;
          if (m && typeof m === "object")
            m = m.ptr;
          if (n && typeof n === "object")
            n = n.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleTopLevelFunctions_PxVehicleTireData_setFrictionVsSlipGraph_4(self2, tireData, m, n, value);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["DefaultWheelSceneQueryPreFilterBlocking"] = PxVehicleTopLevelFunctions.prototype.DefaultWheelSceneQueryPreFilterBlocking = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPreFilterBlocking_0(self2), PxBatchQueryPreFilterShader);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["DefaultWheelSceneQueryPostFilterBlocking"] = PxVehicleTopLevelFunctions.prototype.DefaultWheelSceneQueryPostFilterBlocking = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleTopLevelFunctions_DefaultWheelSceneQueryPostFilterBlocking_0(self2), PxBatchQueryPostFilterShader);
        };
        ;
        PxVehicleTopLevelFunctions.prototype["__destroy__"] = PxVehicleTopLevelFunctions.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleTopLevelFunctions___destroy___0(self2);
        };
        function PxVehicleAckermannGeometryData() {
          this.ptr = _emscripten_bind_PxVehicleAckermannGeometryData_PxVehicleAckermannGeometryData_0();
          getCache(PxVehicleAckermannGeometryData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleAckermannGeometryData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleAckermannGeometryData.prototype.constructor = PxVehicleAckermannGeometryData;
        PxVehicleAckermannGeometryData.prototype.__class__ = PxVehicleAckermannGeometryData;
        PxVehicleAckermannGeometryData.__cache__ = {};
        Module["PxVehicleAckermannGeometryData"] = PxVehicleAckermannGeometryData;
        PxVehicleAckermannGeometryData.prototype["get_mAccuracy"] = PxVehicleAckermannGeometryData.prototype.get_mAccuracy = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAckermannGeometryData_get_mAccuracy_0(self2);
        };
        PxVehicleAckermannGeometryData.prototype["set_mAccuracy"] = PxVehicleAckermannGeometryData.prototype.set_mAccuracy = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleAckermannGeometryData_set_mAccuracy_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleAckermannGeometryData.prototype, "mAccuracy", { get: PxVehicleAckermannGeometryData.prototype.get_mAccuracy, set: PxVehicleAckermannGeometryData.prototype.set_mAccuracy });
        PxVehicleAckermannGeometryData.prototype["get_mFrontWidth"] = PxVehicleAckermannGeometryData.prototype.get_mFrontWidth = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAckermannGeometryData_get_mFrontWidth_0(self2);
        };
        PxVehicleAckermannGeometryData.prototype["set_mFrontWidth"] = PxVehicleAckermannGeometryData.prototype.set_mFrontWidth = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleAckermannGeometryData_set_mFrontWidth_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleAckermannGeometryData.prototype, "mFrontWidth", { get: PxVehicleAckermannGeometryData.prototype.get_mFrontWidth, set: PxVehicleAckermannGeometryData.prototype.set_mFrontWidth });
        PxVehicleAckermannGeometryData.prototype["get_mRearWidth"] = PxVehicleAckermannGeometryData.prototype.get_mRearWidth = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAckermannGeometryData_get_mRearWidth_0(self2);
        };
        PxVehicleAckermannGeometryData.prototype["set_mRearWidth"] = PxVehicleAckermannGeometryData.prototype.set_mRearWidth = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleAckermannGeometryData_set_mRearWidth_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleAckermannGeometryData.prototype, "mRearWidth", { get: PxVehicleAckermannGeometryData.prototype.get_mRearWidth, set: PxVehicleAckermannGeometryData.prototype.set_mRearWidth });
        PxVehicleAckermannGeometryData.prototype["get_mAxleSeparation"] = PxVehicleAckermannGeometryData.prototype.get_mAxleSeparation = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAckermannGeometryData_get_mAxleSeparation_0(self2);
        };
        PxVehicleAckermannGeometryData.prototype["set_mAxleSeparation"] = PxVehicleAckermannGeometryData.prototype.set_mAxleSeparation = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleAckermannGeometryData_set_mAxleSeparation_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleAckermannGeometryData.prototype, "mAxleSeparation", { get: PxVehicleAckermannGeometryData.prototype.get_mAxleSeparation, set: PxVehicleAckermannGeometryData.prototype.set_mAxleSeparation });
        PxVehicleAckermannGeometryData.prototype["__destroy__"] = PxVehicleAckermannGeometryData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleAckermannGeometryData___destroy___0(self2);
        };
        function PxVehicleAntiRollBarData() {
          this.ptr = _emscripten_bind_PxVehicleAntiRollBarData_PxVehicleAntiRollBarData_0();
          getCache(PxVehicleAntiRollBarData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleAntiRollBarData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleAntiRollBarData.prototype.constructor = PxVehicleAntiRollBarData;
        PxVehicleAntiRollBarData.prototype.__class__ = PxVehicleAntiRollBarData;
        PxVehicleAntiRollBarData.__cache__ = {};
        Module["PxVehicleAntiRollBarData"] = PxVehicleAntiRollBarData;
        PxVehicleAntiRollBarData.prototype["get_mWheel0"] = PxVehicleAntiRollBarData.prototype.get_mWheel0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAntiRollBarData_get_mWheel0_0(self2);
        };
        PxVehicleAntiRollBarData.prototype["set_mWheel0"] = PxVehicleAntiRollBarData.prototype.set_mWheel0 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleAntiRollBarData_set_mWheel0_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleAntiRollBarData.prototype, "mWheel0", { get: PxVehicleAntiRollBarData.prototype.get_mWheel0, set: PxVehicleAntiRollBarData.prototype.set_mWheel0 });
        PxVehicleAntiRollBarData.prototype["get_mWheel1"] = PxVehicleAntiRollBarData.prototype.get_mWheel1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAntiRollBarData_get_mWheel1_0(self2);
        };
        PxVehicleAntiRollBarData.prototype["set_mWheel1"] = PxVehicleAntiRollBarData.prototype.set_mWheel1 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleAntiRollBarData_set_mWheel1_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleAntiRollBarData.prototype, "mWheel1", { get: PxVehicleAntiRollBarData.prototype.get_mWheel1, set: PxVehicleAntiRollBarData.prototype.set_mWheel1 });
        PxVehicleAntiRollBarData.prototype["get_mStiffness"] = PxVehicleAntiRollBarData.prototype.get_mStiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAntiRollBarData_get_mStiffness_0(self2);
        };
        PxVehicleAntiRollBarData.prototype["set_mStiffness"] = PxVehicleAntiRollBarData.prototype.set_mStiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleAntiRollBarData_set_mStiffness_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleAntiRollBarData.prototype, "mStiffness", { get: PxVehicleAntiRollBarData.prototype.get_mStiffness, set: PxVehicleAntiRollBarData.prototype.set_mStiffness });
        PxVehicleAntiRollBarData.prototype["__destroy__"] = PxVehicleAntiRollBarData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleAntiRollBarData___destroy___0(self2);
        };
        function PxVehicleAutoBoxData() {
          this.ptr = _emscripten_bind_PxVehicleAutoBoxData_PxVehicleAutoBoxData_0();
          getCache(PxVehicleAutoBoxData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleAutoBoxData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleAutoBoxData.prototype.constructor = PxVehicleAutoBoxData;
        PxVehicleAutoBoxData.prototype.__class__ = PxVehicleAutoBoxData;
        PxVehicleAutoBoxData.__cache__ = {};
        Module["PxVehicleAutoBoxData"] = PxVehicleAutoBoxData;
        PxVehicleAutoBoxData.prototype["setLatency"] = PxVehicleAutoBoxData.prototype.setLatency = function(latency) {
          var self2 = this.ptr;
          if (latency && typeof latency === "object")
            latency = latency.ptr;
          _emscripten_bind_PxVehicleAutoBoxData_setLatency_1(self2, latency);
        };
        ;
        PxVehicleAutoBoxData.prototype["getLatency"] = PxVehicleAutoBoxData.prototype.getLatency = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleAutoBoxData_getLatency_0(self2);
        };
        ;
        PxVehicleAutoBoxData.prototype["getUpRatios"] = PxVehicleAutoBoxData.prototype.getUpRatios = function(a) {
          var self2 = this.ptr;
          if (a && typeof a === "object")
            a = a.ptr;
          return _emscripten_bind_PxVehicleAutoBoxData_getUpRatios_1(self2, a);
        };
        ;
        PxVehicleAutoBoxData.prototype["setUpRatios"] = PxVehicleAutoBoxData.prototype.setUpRatios = function(a, ratio) {
          var self2 = this.ptr;
          if (a && typeof a === "object")
            a = a.ptr;
          if (ratio && typeof ratio === "object")
            ratio = ratio.ptr;
          _emscripten_bind_PxVehicleAutoBoxData_setUpRatios_2(self2, a, ratio);
        };
        ;
        PxVehicleAutoBoxData.prototype["getDownRatios"] = PxVehicleAutoBoxData.prototype.getDownRatios = function(a) {
          var self2 = this.ptr;
          if (a && typeof a === "object")
            a = a.ptr;
          return _emscripten_bind_PxVehicleAutoBoxData_getDownRatios_1(self2, a);
        };
        ;
        PxVehicleAutoBoxData.prototype["setDownRatios"] = PxVehicleAutoBoxData.prototype.setDownRatios = function(a, ratio) {
          var self2 = this.ptr;
          if (a && typeof a === "object")
            a = a.ptr;
          if (ratio && typeof ratio === "object")
            ratio = ratio.ptr;
          _emscripten_bind_PxVehicleAutoBoxData_setDownRatios_2(self2, a, ratio);
        };
        ;
        PxVehicleAutoBoxData.prototype["get_mUpRatios"] = PxVehicleAutoBoxData.prototype.get_mUpRatios = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxVehicleAutoBoxData_get_mUpRatios_1(self2, arg0);
        };
        PxVehicleAutoBoxData.prototype["set_mUpRatios"] = PxVehicleAutoBoxData.prototype.set_mUpRatios = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxVehicleAutoBoxData_set_mUpRatios_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxVehicleAutoBoxData.prototype, "mUpRatios", { get: PxVehicleAutoBoxData.prototype.get_mUpRatios, set: PxVehicleAutoBoxData.prototype.set_mUpRatios });
        PxVehicleAutoBoxData.prototype["get_mDownRatios"] = PxVehicleAutoBoxData.prototype.get_mDownRatios = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxVehicleAutoBoxData_get_mDownRatios_1(self2, arg0);
        };
        PxVehicleAutoBoxData.prototype["set_mDownRatios"] = PxVehicleAutoBoxData.prototype.set_mDownRatios = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxVehicleAutoBoxData_set_mDownRatios_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxVehicleAutoBoxData.prototype, "mDownRatios", { get: PxVehicleAutoBoxData.prototype.get_mDownRatios, set: PxVehicleAutoBoxData.prototype.set_mDownRatios });
        PxVehicleAutoBoxData.prototype["__destroy__"] = PxVehicleAutoBoxData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleAutoBoxData___destroy___0(self2);
        };
        function PxVehicleChassisData() {
          this.ptr = _emscripten_bind_PxVehicleChassisData_PxVehicleChassisData_0();
          getCache(PxVehicleChassisData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleChassisData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleChassisData.prototype.constructor = PxVehicleChassisData;
        PxVehicleChassisData.prototype.__class__ = PxVehicleChassisData;
        PxVehicleChassisData.__cache__ = {};
        Module["PxVehicleChassisData"] = PxVehicleChassisData;
        PxVehicleChassisData.prototype["get_mMOI"] = PxVehicleChassisData.prototype.get_mMOI = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleChassisData_get_mMOI_0(self2), PxVec3);
        };
        PxVehicleChassisData.prototype["set_mMOI"] = PxVehicleChassisData.prototype.set_mMOI = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleChassisData_set_mMOI_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleChassisData.prototype, "mMOI", { get: PxVehicleChassisData.prototype.get_mMOI, set: PxVehicleChassisData.prototype.set_mMOI });
        PxVehicleChassisData.prototype["get_mMass"] = PxVehicleChassisData.prototype.get_mMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleChassisData_get_mMass_0(self2);
        };
        PxVehicleChassisData.prototype["set_mMass"] = PxVehicleChassisData.prototype.set_mMass = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleChassisData_set_mMass_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleChassisData.prototype, "mMass", { get: PxVehicleChassisData.prototype.get_mMass, set: PxVehicleChassisData.prototype.set_mMass });
        PxVehicleChassisData.prototype["get_mCMOffset"] = PxVehicleChassisData.prototype.get_mCMOffset = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleChassisData_get_mCMOffset_0(self2), PxVec3);
        };
        PxVehicleChassisData.prototype["set_mCMOffset"] = PxVehicleChassisData.prototype.set_mCMOffset = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleChassisData_set_mCMOffset_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleChassisData.prototype, "mCMOffset", { get: PxVehicleChassisData.prototype.get_mCMOffset, set: PxVehicleChassisData.prototype.set_mCMOffset });
        PxVehicleChassisData.prototype["__destroy__"] = PxVehicleChassisData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleChassisData___destroy___0(self2);
        };
        function PxVehicleClutchData() {
          this.ptr = _emscripten_bind_PxVehicleClutchData_PxVehicleClutchData_0();
          getCache(PxVehicleClutchData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleClutchData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleClutchData.prototype.constructor = PxVehicleClutchData;
        PxVehicleClutchData.prototype.__class__ = PxVehicleClutchData;
        PxVehicleClutchData.__cache__ = {};
        Module["PxVehicleClutchData"] = PxVehicleClutchData;
        PxVehicleClutchData.prototype["get_mStrength"] = PxVehicleClutchData.prototype.get_mStrength = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleClutchData_get_mStrength_0(self2);
        };
        PxVehicleClutchData.prototype["set_mStrength"] = PxVehicleClutchData.prototype.set_mStrength = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleClutchData_set_mStrength_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleClutchData.prototype, "mStrength", { get: PxVehicleClutchData.prototype.get_mStrength, set: PxVehicleClutchData.prototype.set_mStrength });
        PxVehicleClutchData.prototype["get_mAccuracyMode"] = PxVehicleClutchData.prototype.get_mAccuracyMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleClutchData_get_mAccuracyMode_0(self2);
        };
        PxVehicleClutchData.prototype["set_mAccuracyMode"] = PxVehicleClutchData.prototype.set_mAccuracyMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleClutchData_set_mAccuracyMode_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleClutchData.prototype, "mAccuracyMode", { get: PxVehicleClutchData.prototype.get_mAccuracyMode, set: PxVehicleClutchData.prototype.set_mAccuracyMode });
        PxVehicleClutchData.prototype["get_mEstimateIterations"] = PxVehicleClutchData.prototype.get_mEstimateIterations = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleClutchData_get_mEstimateIterations_0(self2);
        };
        PxVehicleClutchData.prototype["set_mEstimateIterations"] = PxVehicleClutchData.prototype.set_mEstimateIterations = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleClutchData_set_mEstimateIterations_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleClutchData.prototype, "mEstimateIterations", { get: PxVehicleClutchData.prototype.get_mEstimateIterations, set: PxVehicleClutchData.prototype.set_mEstimateIterations });
        PxVehicleClutchData.prototype["__destroy__"] = PxVehicleClutchData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleClutchData___destroy___0(self2);
        };
        function PxVehicleDifferential4WData() {
          this.ptr = _emscripten_bind_PxVehicleDifferential4WData_PxVehicleDifferential4WData_0();
          getCache(PxVehicleDifferential4WData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleDifferential4WData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleDifferential4WData.prototype.constructor = PxVehicleDifferential4WData;
        PxVehicleDifferential4WData.prototype.__class__ = PxVehicleDifferential4WData;
        PxVehicleDifferential4WData.__cache__ = {};
        Module["PxVehicleDifferential4WData"] = PxVehicleDifferential4WData;
        PxVehicleDifferential4WData.prototype["get_mFrontRearSplit"] = PxVehicleDifferential4WData.prototype.get_mFrontRearSplit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferential4WData_get_mFrontRearSplit_0(self2);
        };
        PxVehicleDifferential4WData.prototype["set_mFrontRearSplit"] = PxVehicleDifferential4WData.prototype.set_mFrontRearSplit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDifferential4WData_set_mFrontRearSplit_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDifferential4WData.prototype, "mFrontRearSplit", { get: PxVehicleDifferential4WData.prototype.get_mFrontRearSplit, set: PxVehicleDifferential4WData.prototype.set_mFrontRearSplit });
        PxVehicleDifferential4WData.prototype["get_mFrontLeftRightSplit"] = PxVehicleDifferential4WData.prototype.get_mFrontLeftRightSplit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferential4WData_get_mFrontLeftRightSplit_0(self2);
        };
        PxVehicleDifferential4WData.prototype["set_mFrontLeftRightSplit"] = PxVehicleDifferential4WData.prototype.set_mFrontLeftRightSplit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDifferential4WData_set_mFrontLeftRightSplit_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDifferential4WData.prototype, "mFrontLeftRightSplit", { get: PxVehicleDifferential4WData.prototype.get_mFrontLeftRightSplit, set: PxVehicleDifferential4WData.prototype.set_mFrontLeftRightSplit });
        PxVehicleDifferential4WData.prototype["get_mRearLeftRightSplit"] = PxVehicleDifferential4WData.prototype.get_mRearLeftRightSplit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferential4WData_get_mRearLeftRightSplit_0(self2);
        };
        PxVehicleDifferential4WData.prototype["set_mRearLeftRightSplit"] = PxVehicleDifferential4WData.prototype.set_mRearLeftRightSplit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDifferential4WData_set_mRearLeftRightSplit_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDifferential4WData.prototype, "mRearLeftRightSplit", { get: PxVehicleDifferential4WData.prototype.get_mRearLeftRightSplit, set: PxVehicleDifferential4WData.prototype.set_mRearLeftRightSplit });
        PxVehicleDifferential4WData.prototype["get_mCentreBias"] = PxVehicleDifferential4WData.prototype.get_mCentreBias = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferential4WData_get_mCentreBias_0(self2);
        };
        PxVehicleDifferential4WData.prototype["set_mCentreBias"] = PxVehicleDifferential4WData.prototype.set_mCentreBias = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDifferential4WData_set_mCentreBias_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDifferential4WData.prototype, "mCentreBias", { get: PxVehicleDifferential4WData.prototype.get_mCentreBias, set: PxVehicleDifferential4WData.prototype.set_mCentreBias });
        PxVehicleDifferential4WData.prototype["get_mFrontBias"] = PxVehicleDifferential4WData.prototype.get_mFrontBias = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferential4WData_get_mFrontBias_0(self2);
        };
        PxVehicleDifferential4WData.prototype["set_mFrontBias"] = PxVehicleDifferential4WData.prototype.set_mFrontBias = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDifferential4WData_set_mFrontBias_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDifferential4WData.prototype, "mFrontBias", { get: PxVehicleDifferential4WData.prototype.get_mFrontBias, set: PxVehicleDifferential4WData.prototype.set_mFrontBias });
        PxVehicleDifferential4WData.prototype["get_mRearBias"] = PxVehicleDifferential4WData.prototype.get_mRearBias = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferential4WData_get_mRearBias_0(self2);
        };
        PxVehicleDifferential4WData.prototype["set_mRearBias"] = PxVehicleDifferential4WData.prototype.set_mRearBias = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDifferential4WData_set_mRearBias_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDifferential4WData.prototype, "mRearBias", { get: PxVehicleDifferential4WData.prototype.get_mRearBias, set: PxVehicleDifferential4WData.prototype.set_mRearBias });
        PxVehicleDifferential4WData.prototype["get_mType"] = PxVehicleDifferential4WData.prototype.get_mType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferential4WData_get_mType_0(self2);
        };
        PxVehicleDifferential4WData.prototype["set_mType"] = PxVehicleDifferential4WData.prototype.set_mType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDifferential4WData_set_mType_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDifferential4WData.prototype, "mType", { get: PxVehicleDifferential4WData.prototype.get_mType, set: PxVehicleDifferential4WData.prototype.set_mType });
        PxVehicleDifferential4WData.prototype["__destroy__"] = PxVehicleDifferential4WData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDifferential4WData___destroy___0(self2);
        };
        function PxVehicleDifferentialNWData() {
          this.ptr = _emscripten_bind_PxVehicleDifferentialNWData_PxVehicleDifferentialNWData_0();
          getCache(PxVehicleDifferentialNWData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleDifferentialNWData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleDifferentialNWData.prototype.constructor = PxVehicleDifferentialNWData;
        PxVehicleDifferentialNWData.prototype.__class__ = PxVehicleDifferentialNWData;
        PxVehicleDifferentialNWData.__cache__ = {};
        Module["PxVehicleDifferentialNWData"] = PxVehicleDifferentialNWData;
        PxVehicleDifferentialNWData.prototype["setDrivenWheel"] = PxVehicleDifferentialNWData.prototype.setDrivenWheel = function(wheelId, drivenState) {
          var self2 = this.ptr;
          if (wheelId && typeof wheelId === "object")
            wheelId = wheelId.ptr;
          if (drivenState && typeof drivenState === "object")
            drivenState = drivenState.ptr;
          _emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheel_2(self2, wheelId, drivenState);
        };
        ;
        PxVehicleDifferentialNWData.prototype["getIsDrivenWheel"] = PxVehicleDifferentialNWData.prototype.getIsDrivenWheel = function(wheelId) {
          var self2 = this.ptr;
          if (wheelId && typeof wheelId === "object")
            wheelId = wheelId.ptr;
          return !!_emscripten_bind_PxVehicleDifferentialNWData_getIsDrivenWheel_1(self2, wheelId);
        };
        ;
        PxVehicleDifferentialNWData.prototype["getDrivenWheelStatus"] = PxVehicleDifferentialNWData.prototype.getDrivenWheelStatus = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDifferentialNWData_getDrivenWheelStatus_0(self2);
        };
        ;
        PxVehicleDifferentialNWData.prototype["setDrivenWheelStatus"] = PxVehicleDifferentialNWData.prototype.setDrivenWheelStatus = function(status) {
          var self2 = this.ptr;
          if (status && typeof status === "object")
            status = status.ptr;
          _emscripten_bind_PxVehicleDifferentialNWData_setDrivenWheelStatus_1(self2, status);
        };
        ;
        PxVehicleDifferentialNWData.prototype["__destroy__"] = PxVehicleDifferentialNWData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDifferentialNWData___destroy___0(self2);
        };
        function PxVehicleDrivableSurfaceToTireFrictionPairs() {
          throw "cannot construct a PxVehicleDrivableSurfaceToTireFrictionPairs, no constructor in IDL";
        }
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype = Object.create(WrapperObject.prototype);
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.constructor = PxVehicleDrivableSurfaceToTireFrictionPairs;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.__class__ = PxVehicleDrivableSurfaceToTireFrictionPairs;
        PxVehicleDrivableSurfaceToTireFrictionPairs.__cache__ = {};
        Module["PxVehicleDrivableSurfaceToTireFrictionPairs"] = PxVehicleDrivableSurfaceToTireFrictionPairs;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype["allocate"] = PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.allocate = function(maxNbTireTypes, maxNbSurfaceTypes) {
          var self2 = this.ptr;
          if (maxNbTireTypes && typeof maxNbTireTypes === "object")
            maxNbTireTypes = maxNbTireTypes.ptr;
          if (maxNbSurfaceTypes && typeof maxNbSurfaceTypes === "object")
            maxNbSurfaceTypes = maxNbSurfaceTypes.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_allocate_2(self2, maxNbTireTypes, maxNbSurfaceTypes), PxVehicleDrivableSurfaceToTireFrictionPairs);
        };
        ;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype["setup"] = PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.setup = function(nbTireTypes, nbSurfaceTypes, drivableSurfaceMaterials, drivableSurfaceTypes) {
          var self2 = this.ptr;
          if (nbTireTypes && typeof nbTireTypes === "object")
            nbTireTypes = nbTireTypes.ptr;
          if (nbSurfaceTypes && typeof nbSurfaceTypes === "object")
            nbSurfaceTypes = nbSurfaceTypes.ptr;
          if (drivableSurfaceMaterials && typeof drivableSurfaceMaterials === "object")
            drivableSurfaceMaterials = drivableSurfaceMaterials.ptr;
          if (drivableSurfaceTypes && typeof drivableSurfaceTypes === "object")
            drivableSurfaceTypes = drivableSurfaceTypes.ptr;
          _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setup_4(self2, nbTireTypes, nbSurfaceTypes, drivableSurfaceMaterials, drivableSurfaceTypes);
        };
        ;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype["release"] = PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_release_0(self2);
        };
        ;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype["setTypePairFriction"] = PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.setTypePairFriction = function(surfaceType, tireType, value) {
          var self2 = this.ptr;
          if (surfaceType && typeof surfaceType === "object")
            surfaceType = surfaceType.ptr;
          if (tireType && typeof tireType === "object")
            tireType = tireType.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_setTypePairFriction_3(self2, surfaceType, tireType, value);
        };
        ;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype["getTypePairFriction"] = PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.getTypePairFriction = function(surfaceType, tireType) {
          var self2 = this.ptr;
          if (surfaceType && typeof surfaceType === "object")
            surfaceType = surfaceType.ptr;
          if (tireType && typeof tireType === "object")
            tireType = tireType.ptr;
          return _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getTypePairFriction_2(self2, surfaceType, tireType);
        };
        ;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype["getMaxNbSurfaceTypes"] = PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.getMaxNbSurfaceTypes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbSurfaceTypes_0(self2);
        };
        ;
        PxVehicleDrivableSurfaceToTireFrictionPairs.prototype["getMaxNbTireTypes"] = PxVehicleDrivableSurfaceToTireFrictionPairs.prototype.getMaxNbTireTypes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrivableSurfaceToTireFrictionPairs_getMaxNbTireTypes_0(self2);
        };
        ;
        function PxVehicleDrivableSurfaceType() {
          this.ptr = _emscripten_bind_PxVehicleDrivableSurfaceType_PxVehicleDrivableSurfaceType_0();
          getCache(PxVehicleDrivableSurfaceType)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleDrivableSurfaceType.prototype = Object.create(WrapperObject.prototype);
        PxVehicleDrivableSurfaceType.prototype.constructor = PxVehicleDrivableSurfaceType;
        PxVehicleDrivableSurfaceType.prototype.__class__ = PxVehicleDrivableSurfaceType;
        PxVehicleDrivableSurfaceType.__cache__ = {};
        Module["PxVehicleDrivableSurfaceType"] = PxVehicleDrivableSurfaceType;
        PxVehicleDrivableSurfaceType.prototype["get_mType"] = PxVehicleDrivableSurfaceType.prototype.get_mType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrivableSurfaceType_get_mType_0(self2);
        };
        PxVehicleDrivableSurfaceType.prototype["set_mType"] = PxVehicleDrivableSurfaceType.prototype.set_mType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrivableSurfaceType_set_mType_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrivableSurfaceType.prototype, "mType", { get: PxVehicleDrivableSurfaceType.prototype.get_mType, set: PxVehicleDrivableSurfaceType.prototype.set_mType });
        PxVehicleDrivableSurfaceType.prototype["__destroy__"] = PxVehicleDrivableSurfaceType.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDrivableSurfaceType___destroy___0(self2);
        };
        function PxVehicleDrive4W() {
          throw "cannot construct a PxVehicleDrive4W, no constructor in IDL";
        }
        PxVehicleDrive4W.prototype = Object.create(PxVehicleDrive.prototype);
        PxVehicleDrive4W.prototype.constructor = PxVehicleDrive4W;
        PxVehicleDrive4W.prototype.__class__ = PxVehicleDrive4W;
        PxVehicleDrive4W.__cache__ = {};
        Module["PxVehicleDrive4W"] = PxVehicleDrive4W;
        PxVehicleDrive4W.prototype["allocate"] = PxVehicleDrive4W.prototype.allocate = function(nbWheels) {
          var self2 = this.ptr;
          if (nbWheels && typeof nbWheels === "object")
            nbWheels = nbWheels.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive4W_allocate_1(self2, nbWheels), PxVehicleDrive4W);
        };
        ;
        PxVehicleDrive4W.prototype["free"] = PxVehicleDrive4W.prototype.free = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDrive4W_free_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["setup"] = PxVehicleDrive4W.prototype.setup = function(physics, vehActor, wheelsData, driveData, nbNonDrivenWheels) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (vehActor && typeof vehActor === "object")
            vehActor = vehActor.ptr;
          if (wheelsData && typeof wheelsData === "object")
            wheelsData = wheelsData.ptr;
          if (driveData && typeof driveData === "object")
            driveData = driveData.ptr;
          if (nbNonDrivenWheels && typeof nbNonDrivenWheels === "object")
            nbNonDrivenWheels = nbNonDrivenWheels.ptr;
          _emscripten_bind_PxVehicleDrive4W_setup_5(self2, physics, vehActor, wheelsData, driveData, nbNonDrivenWheels);
        };
        ;
        PxVehicleDrive4W.prototype["setToRestState"] = PxVehicleDrive4W.prototype.setToRestState = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDrive4W_setToRestState_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["getConcreteTypeName"] = PxVehicleDrive4W.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxVehicleDrive4W_getConcreteTypeName_0(self2));
        };
        ;
        PxVehicleDrive4W.prototype["getConcreteType"] = PxVehicleDrive4W.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive4W_getConcreteType_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["setBaseFlag"] = PxVehicleDrive4W.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleDrive4W_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxVehicleDrive4W.prototype["setBaseFlags"] = PxVehicleDrive4W.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxVehicleDrive4W_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxVehicleDrive4W.prototype["getBaseFlags"] = PxVehicleDrive4W.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive4W_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxVehicleDrive4W.prototype["isReleasable"] = PxVehicleDrive4W.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDrive4W_isReleasable_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["getVehicleType"] = PxVehicleDrive4W.prototype.getVehicleType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive4W_getVehicleType_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["getRigidDynamicActor"] = PxVehicleDrive4W.prototype.getRigidDynamicActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive4W_getRigidDynamicActor_0(self2), PxRigidDynamic);
        };
        ;
        PxVehicleDrive4W.prototype["computeForwardSpeed"] = PxVehicleDrive4W.prototype.computeForwardSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive4W_computeForwardSpeed_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["computeSidewaysSpeed"] = PxVehicleDrive4W.prototype.computeSidewaysSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive4W_computeSidewaysSpeed_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["getNbNonDrivenWheels"] = PxVehicleDrive4W.prototype.getNbNonDrivenWheels = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDrive4W_getNbNonDrivenWheels_0(self2);
        };
        ;
        PxVehicleDrive4W.prototype["get_mDriveSimData"] = PxVehicleDrive4W.prototype.get_mDriveSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive4W_get_mDriveSimData_0(self2), PxVehicleDriveSimData4W);
        };
        PxVehicleDrive4W.prototype["set_mDriveSimData"] = PxVehicleDrive4W.prototype.set_mDriveSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrive4W_set_mDriveSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrive4W.prototype, "mDriveSimData", { get: PxVehicleDrive4W.prototype.get_mDriveSimData, set: PxVehicleDrive4W.prototype.set_mDriveSimData });
        PxVehicleDrive4W.prototype["get_mDriveDynData"] = PxVehicleDrive4W.prototype.get_mDriveDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive4W_get_mDriveDynData_0(self2), PxVehicleDriveDynData);
        };
        PxVehicleDrive4W.prototype["set_mDriveDynData"] = PxVehicleDrive4W.prototype.set_mDriveDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrive4W_set_mDriveDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrive4W.prototype, "mDriveDynData", { get: PxVehicleDrive4W.prototype.get_mDriveDynData, set: PxVehicleDrive4W.prototype.set_mDriveDynData });
        PxVehicleDrive4W.prototype["get_mWheelsSimData"] = PxVehicleDrive4W.prototype.get_mWheelsSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive4W_get_mWheelsSimData_0(self2), PxVehicleWheelsSimData);
        };
        PxVehicleDrive4W.prototype["set_mWheelsSimData"] = PxVehicleDrive4W.prototype.set_mWheelsSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrive4W_set_mWheelsSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrive4W.prototype, "mWheelsSimData", { get: PxVehicleDrive4W.prototype.get_mWheelsSimData, set: PxVehicleDrive4W.prototype.set_mWheelsSimData });
        PxVehicleDrive4W.prototype["get_mWheelsDynData"] = PxVehicleDrive4W.prototype.get_mWheelsDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDrive4W_get_mWheelsDynData_0(self2), PxVehicleWheelsDynData);
        };
        PxVehicleDrive4W.prototype["set_mWheelsDynData"] = PxVehicleDrive4W.prototype.set_mWheelsDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDrive4W_set_mWheelsDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDrive4W.prototype, "mWheelsDynData", { get: PxVehicleDrive4W.prototype.get_mWheelsDynData, set: PxVehicleDrive4W.prototype.set_mWheelsDynData });
        function PxVehicleDriveDynData() {
          throw "cannot construct a PxVehicleDriveDynData, no constructor in IDL";
        }
        PxVehicleDriveDynData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleDriveDynData.prototype.constructor = PxVehicleDriveDynData;
        PxVehicleDriveDynData.prototype.__class__ = PxVehicleDriveDynData;
        PxVehicleDriveDynData.__cache__ = {};
        Module["PxVehicleDriveDynData"] = PxVehicleDriveDynData;
        PxVehicleDriveDynData.prototype["setToRestState"] = PxVehicleDriveDynData.prototype.setToRestState = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setToRestState_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["setAnalogInput"] = PxVehicleDriveDynData.prototype.setAnalogInput = function(type, analogVal) {
          var self2 = this.ptr;
          if (type && typeof type === "object")
            type = type.ptr;
          if (analogVal && typeof analogVal === "object")
            analogVal = analogVal.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setAnalogInput_2(self2, type, analogVal);
        };
        ;
        PxVehicleDriveDynData.prototype["getAnalogInput"] = PxVehicleDriveDynData.prototype.getAnalogInput = function(type) {
          var self2 = this.ptr;
          if (type && typeof type === "object")
            type = type.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getAnalogInput_1(self2, type);
        };
        ;
        PxVehicleDriveDynData.prototype["setGearUp"] = PxVehicleDriveDynData.prototype.setGearUp = function(digitalVal) {
          var self2 = this.ptr;
          if (digitalVal && typeof digitalVal === "object")
            digitalVal = digitalVal.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setGearUp_1(self2, digitalVal);
        };
        ;
        PxVehicleDriveDynData.prototype["setGearDown"] = PxVehicleDriveDynData.prototype.setGearDown = function(digitalVal) {
          var self2 = this.ptr;
          if (digitalVal && typeof digitalVal === "object")
            digitalVal = digitalVal.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setGearDown_1(self2, digitalVal);
        };
        ;
        PxVehicleDriveDynData.prototype["getGearUp"] = PxVehicleDriveDynData.prototype.getGearUp = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveDynData_getGearUp_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["getGearDown"] = PxVehicleDriveDynData.prototype.getGearDown = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveDynData_getGearDown_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["setUseAutoGears"] = PxVehicleDriveDynData.prototype.setUseAutoGears = function(useAutoGears) {
          var self2 = this.ptr;
          if (useAutoGears && typeof useAutoGears === "object")
            useAutoGears = useAutoGears.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setUseAutoGears_1(self2, useAutoGears);
        };
        ;
        PxVehicleDriveDynData.prototype["getUseAutoGears"] = PxVehicleDriveDynData.prototype.getUseAutoGears = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveDynData_getUseAutoGears_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["toggleAutoGears"] = PxVehicleDriveDynData.prototype.toggleAutoGears = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveDynData_toggleAutoGears_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["setCurrentGear"] = PxVehicleDriveDynData.prototype.setCurrentGear = function(currentGear) {
          var self2 = this.ptr;
          if (currentGear && typeof currentGear === "object")
            currentGear = currentGear.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setCurrentGear_1(self2, currentGear);
        };
        ;
        PxVehicleDriveDynData.prototype["getCurrentGear"] = PxVehicleDriveDynData.prototype.getCurrentGear = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getCurrentGear_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["setTargetGear"] = PxVehicleDriveDynData.prototype.setTargetGear = function(targetGear) {
          var self2 = this.ptr;
          if (targetGear && typeof targetGear === "object")
            targetGear = targetGear.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setTargetGear_1(self2, targetGear);
        };
        ;
        PxVehicleDriveDynData.prototype["getTargetGear"] = PxVehicleDriveDynData.prototype.getTargetGear = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getTargetGear_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["startGearChange"] = PxVehicleDriveDynData.prototype.startGearChange = function(targetGear) {
          var self2 = this.ptr;
          if (targetGear && typeof targetGear === "object")
            targetGear = targetGear.ptr;
          _emscripten_bind_PxVehicleDriveDynData_startGearChange_1(self2, targetGear);
        };
        ;
        PxVehicleDriveDynData.prototype["forceGearChange"] = PxVehicleDriveDynData.prototype.forceGearChange = function(targetGear) {
          var self2 = this.ptr;
          if (targetGear && typeof targetGear === "object")
            targetGear = targetGear.ptr;
          _emscripten_bind_PxVehicleDriveDynData_forceGearChange_1(self2, targetGear);
        };
        ;
        PxVehicleDriveDynData.prototype["setEngineRotationSpeed"] = PxVehicleDriveDynData.prototype.setEngineRotationSpeed = function(speed) {
          var self2 = this.ptr;
          if (speed && typeof speed === "object")
            speed = speed.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setEngineRotationSpeed_1(self2, speed);
        };
        ;
        PxVehicleDriveDynData.prototype["getEngineRotationSpeed"] = PxVehicleDriveDynData.prototype.getEngineRotationSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getEngineRotationSpeed_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["getGearSwitchTime"] = PxVehicleDriveDynData.prototype.getGearSwitchTime = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getGearSwitchTime_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["getAutoBoxSwitchTime"] = PxVehicleDriveDynData.prototype.getAutoBoxSwitchTime = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getAutoBoxSwitchTime_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["getNbAnalogInput"] = PxVehicleDriveDynData.prototype.getNbAnalogInput = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getNbAnalogInput_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["setGearChange"] = PxVehicleDriveDynData.prototype.setGearChange = function(gearChange) {
          var self2 = this.ptr;
          if (gearChange && typeof gearChange === "object")
            gearChange = gearChange.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setGearChange_1(self2, gearChange);
        };
        ;
        PxVehicleDriveDynData.prototype["getGearChange"] = PxVehicleDriveDynData.prototype.getGearChange = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_getGearChange_0(self2);
        };
        ;
        PxVehicleDriveDynData.prototype["setGearSwitchTime"] = PxVehicleDriveDynData.prototype.setGearSwitchTime = function(switchTime) {
          var self2 = this.ptr;
          if (switchTime && typeof switchTime === "object")
            switchTime = switchTime.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setGearSwitchTime_1(self2, switchTime);
        };
        ;
        PxVehicleDriveDynData.prototype["setAutoBoxSwitchTime"] = PxVehicleDriveDynData.prototype.setAutoBoxSwitchTime = function(autoBoxSwitchTime) {
          var self2 = this.ptr;
          if (autoBoxSwitchTime && typeof autoBoxSwitchTime === "object")
            autoBoxSwitchTime = autoBoxSwitchTime.ptr;
          _emscripten_bind_PxVehicleDriveDynData_setAutoBoxSwitchTime_1(self2, autoBoxSwitchTime);
        };
        ;
        PxVehicleDriveDynData.prototype["get_mControlAnalogVals"] = PxVehicleDriveDynData.prototype.get_mControlAnalogVals = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_get_mControlAnalogVals_1(self2, arg0);
        };
        PxVehicleDriveDynData.prototype["set_mControlAnalogVals"] = PxVehicleDriveDynData.prototype.set_mControlAnalogVals = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mControlAnalogVals_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mControlAnalogVals", { get: PxVehicleDriveDynData.prototype.get_mControlAnalogVals, set: PxVehicleDriveDynData.prototype.set_mControlAnalogVals });
        PxVehicleDriveDynData.prototype["get_mUseAutoGears"] = PxVehicleDriveDynData.prototype.get_mUseAutoGears = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveDynData_get_mUseAutoGears_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mUseAutoGears"] = PxVehicleDriveDynData.prototype.set_mUseAutoGears = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mUseAutoGears_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mUseAutoGears", { get: PxVehicleDriveDynData.prototype.get_mUseAutoGears, set: PxVehicleDriveDynData.prototype.set_mUseAutoGears });
        PxVehicleDriveDynData.prototype["get_mGearUpPressed"] = PxVehicleDriveDynData.prototype.get_mGearUpPressed = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveDynData_get_mGearUpPressed_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mGearUpPressed"] = PxVehicleDriveDynData.prototype.set_mGearUpPressed = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mGearUpPressed_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mGearUpPressed", { get: PxVehicleDriveDynData.prototype.get_mGearUpPressed, set: PxVehicleDriveDynData.prototype.set_mGearUpPressed });
        PxVehicleDriveDynData.prototype["get_mGearDownPressed"] = PxVehicleDriveDynData.prototype.get_mGearDownPressed = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveDynData_get_mGearDownPressed_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mGearDownPressed"] = PxVehicleDriveDynData.prototype.set_mGearDownPressed = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mGearDownPressed_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mGearDownPressed", { get: PxVehicleDriveDynData.prototype.get_mGearDownPressed, set: PxVehicleDriveDynData.prototype.set_mGearDownPressed });
        PxVehicleDriveDynData.prototype["get_mCurrentGear"] = PxVehicleDriveDynData.prototype.get_mCurrentGear = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_get_mCurrentGear_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mCurrentGear"] = PxVehicleDriveDynData.prototype.set_mCurrentGear = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mCurrentGear_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mCurrentGear", { get: PxVehicleDriveDynData.prototype.get_mCurrentGear, set: PxVehicleDriveDynData.prototype.set_mCurrentGear });
        PxVehicleDriveDynData.prototype["get_mTargetGear"] = PxVehicleDriveDynData.prototype.get_mTargetGear = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_get_mTargetGear_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mTargetGear"] = PxVehicleDriveDynData.prototype.set_mTargetGear = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mTargetGear_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mTargetGear", { get: PxVehicleDriveDynData.prototype.get_mTargetGear, set: PxVehicleDriveDynData.prototype.set_mTargetGear });
        PxVehicleDriveDynData.prototype["get_mEnginespeed"] = PxVehicleDriveDynData.prototype.get_mEnginespeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_get_mEnginespeed_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mEnginespeed"] = PxVehicleDriveDynData.prototype.set_mEnginespeed = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mEnginespeed_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mEnginespeed", { get: PxVehicleDriveDynData.prototype.get_mEnginespeed, set: PxVehicleDriveDynData.prototype.set_mEnginespeed });
        PxVehicleDriveDynData.prototype["get_mGearSwitchTime"] = PxVehicleDriveDynData.prototype.get_mGearSwitchTime = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_get_mGearSwitchTime_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mGearSwitchTime"] = PxVehicleDriveDynData.prototype.set_mGearSwitchTime = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mGearSwitchTime_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mGearSwitchTime", { get: PxVehicleDriveDynData.prototype.get_mGearSwitchTime, set: PxVehicleDriveDynData.prototype.set_mGearSwitchTime });
        PxVehicleDriveDynData.prototype["get_mAutoBoxSwitchTime"] = PxVehicleDriveDynData.prototype.get_mAutoBoxSwitchTime = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveDynData_get_mAutoBoxSwitchTime_0(self2);
        };
        PxVehicleDriveDynData.prototype["set_mAutoBoxSwitchTime"] = PxVehicleDriveDynData.prototype.set_mAutoBoxSwitchTime = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveDynData_set_mAutoBoxSwitchTime_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveDynData.prototype, "mAutoBoxSwitchTime", { get: PxVehicleDriveDynData.prototype.get_mAutoBoxSwitchTime, set: PxVehicleDriveDynData.prototype.set_mAutoBoxSwitchTime });
        PxVehicleDriveDynData.prototype["__destroy__"] = PxVehicleDriveDynData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveDynData___destroy___0(self2);
        };
        function PxVehicleDriveNW() {
          throw "cannot construct a PxVehicleDriveNW, no constructor in IDL";
        }
        PxVehicleDriveNW.prototype = Object.create(PxVehicleDrive.prototype);
        PxVehicleDriveNW.prototype.constructor = PxVehicleDriveNW;
        PxVehicleDriveNW.prototype.__class__ = PxVehicleDriveNW;
        PxVehicleDriveNW.__cache__ = {};
        Module["PxVehicleDriveNW"] = PxVehicleDriveNW;
        PxVehicleDriveNW.prototype["allocate"] = PxVehicleDriveNW.prototype.allocate = function(nbWheels) {
          var self2 = this.ptr;
          if (nbWheels && typeof nbWheels === "object")
            nbWheels = nbWheels.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveNW_allocate_1(self2, nbWheels), PxVehicleDriveNW);
        };
        ;
        PxVehicleDriveNW.prototype["free"] = PxVehicleDriveNW.prototype.free = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveNW_free_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["setup"] = PxVehicleDriveNW.prototype.setup = function(physics, vehActor, wheelsData, driveData, nbWheels) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (vehActor && typeof vehActor === "object")
            vehActor = vehActor.ptr;
          if (wheelsData && typeof wheelsData === "object")
            wheelsData = wheelsData.ptr;
          if (driveData && typeof driveData === "object")
            driveData = driveData.ptr;
          if (nbWheels && typeof nbWheels === "object")
            nbWheels = nbWheels.ptr;
          _emscripten_bind_PxVehicleDriveNW_setup_5(self2, physics, vehActor, wheelsData, driveData, nbWheels);
        };
        ;
        PxVehicleDriveNW.prototype["setToRestState"] = PxVehicleDriveNW.prototype.setToRestState = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveNW_setToRestState_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["getConcreteTypeName"] = PxVehicleDriveNW.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxVehicleDriveNW_getConcreteTypeName_0(self2));
        };
        ;
        PxVehicleDriveNW.prototype["getConcreteType"] = PxVehicleDriveNW.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveNW_getConcreteType_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["setBaseFlag"] = PxVehicleDriveNW.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleDriveNW_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxVehicleDriveNW.prototype["setBaseFlags"] = PxVehicleDriveNW.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxVehicleDriveNW_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxVehicleDriveNW.prototype["getBaseFlags"] = PxVehicleDriveNW.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveNW_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxVehicleDriveNW.prototype["isReleasable"] = PxVehicleDriveNW.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveNW_isReleasable_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["getVehicleType"] = PxVehicleDriveNW.prototype.getVehicleType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveNW_getVehicleType_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["getRigidDynamicActor"] = PxVehicleDriveNW.prototype.getRigidDynamicActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveNW_getRigidDynamicActor_0(self2), PxRigidDynamic);
        };
        ;
        PxVehicleDriveNW.prototype["computeForwardSpeed"] = PxVehicleDriveNW.prototype.computeForwardSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveNW_computeForwardSpeed_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["computeSidewaysSpeed"] = PxVehicleDriveNW.prototype.computeSidewaysSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveNW_computeSidewaysSpeed_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["getNbNonDrivenWheels"] = PxVehicleDriveNW.prototype.getNbNonDrivenWheels = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveNW_getNbNonDrivenWheels_0(self2);
        };
        ;
        PxVehicleDriveNW.prototype["get_mDriveSimData"] = PxVehicleDriveNW.prototype.get_mDriveSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveNW_get_mDriveSimData_0(self2), PxVehicleDriveSimDataNW);
        };
        PxVehicleDriveNW.prototype["set_mDriveSimData"] = PxVehicleDriveNW.prototype.set_mDriveSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveNW_set_mDriveSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveNW.prototype, "mDriveSimData", { get: PxVehicleDriveNW.prototype.get_mDriveSimData, set: PxVehicleDriveNW.prototype.set_mDriveSimData });
        PxVehicleDriveNW.prototype["get_mDriveDynData"] = PxVehicleDriveNW.prototype.get_mDriveDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveNW_get_mDriveDynData_0(self2), PxVehicleDriveDynData);
        };
        PxVehicleDriveNW.prototype["set_mDriveDynData"] = PxVehicleDriveNW.prototype.set_mDriveDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveNW_set_mDriveDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveNW.prototype, "mDriveDynData", { get: PxVehicleDriveNW.prototype.get_mDriveDynData, set: PxVehicleDriveNW.prototype.set_mDriveDynData });
        PxVehicleDriveNW.prototype["get_mWheelsSimData"] = PxVehicleDriveNW.prototype.get_mWheelsSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveNW_get_mWheelsSimData_0(self2), PxVehicleWheelsSimData);
        };
        PxVehicleDriveNW.prototype["set_mWheelsSimData"] = PxVehicleDriveNW.prototype.set_mWheelsSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveNW_set_mWheelsSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveNW.prototype, "mWheelsSimData", { get: PxVehicleDriveNW.prototype.get_mWheelsSimData, set: PxVehicleDriveNW.prototype.set_mWheelsSimData });
        PxVehicleDriveNW.prototype["get_mWheelsDynData"] = PxVehicleDriveNW.prototype.get_mWheelsDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveNW_get_mWheelsDynData_0(self2), PxVehicleWheelsDynData);
        };
        PxVehicleDriveNW.prototype["set_mWheelsDynData"] = PxVehicleDriveNW.prototype.set_mWheelsDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveNW_set_mWheelsDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveNW.prototype, "mWheelsDynData", { get: PxVehicleDriveNW.prototype.get_mWheelsDynData, set: PxVehicleDriveNW.prototype.set_mWheelsDynData });
        function PxVehicleDriveSimData4W() {
          this.ptr = _emscripten_bind_PxVehicleDriveSimData4W_PxVehicleDriveSimData4W_0();
          getCache(PxVehicleDriveSimData4W)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleDriveSimData4W.prototype = Object.create(PxVehicleDriveSimData.prototype);
        PxVehicleDriveSimData4W.prototype.constructor = PxVehicleDriveSimData4W;
        PxVehicleDriveSimData4W.prototype.__class__ = PxVehicleDriveSimData4W;
        PxVehicleDriveSimData4W.__cache__ = {};
        Module["PxVehicleDriveSimData4W"] = PxVehicleDriveSimData4W;
        PxVehicleDriveSimData4W.prototype["getDiffData"] = PxVehicleDriveSimData4W.prototype.getDiffData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData4W_getDiffData_0(self2), PxVehicleDifferential4WData);
        };
        ;
        PxVehicleDriveSimData4W.prototype["getAckermannGeometryData"] = PxVehicleDriveSimData4W.prototype.getAckermannGeometryData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData4W_getAckermannGeometryData_0(self2), PxVehicleAckermannGeometryData);
        };
        ;
        PxVehicleDriveSimData4W.prototype["setDiffData"] = PxVehicleDriveSimData4W.prototype.setDiffData = function(diff) {
          var self2 = this.ptr;
          if (diff && typeof diff === "object")
            diff = diff.ptr;
          _emscripten_bind_PxVehicleDriveSimData4W_setDiffData_1(self2, diff);
        };
        ;
        PxVehicleDriveSimData4W.prototype["setAckermannGeometryData"] = PxVehicleDriveSimData4W.prototype.setAckermannGeometryData = function(ackermannData) {
          var self2 = this.ptr;
          if (ackermannData && typeof ackermannData === "object")
            ackermannData = ackermannData.ptr;
          _emscripten_bind_PxVehicleDriveSimData4W_setAckermannGeometryData_1(self2, ackermannData);
        };
        ;
        PxVehicleDriveSimData4W.prototype["getEngineData"] = PxVehicleDriveSimData4W.prototype.getEngineData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData4W_getEngineData_0(self2), PxVehicleEngineData);
        };
        ;
        PxVehicleDriveSimData4W.prototype["setEngineData"] = PxVehicleDriveSimData4W.prototype.setEngineData = function(engine) {
          var self2 = this.ptr;
          if (engine && typeof engine === "object")
            engine = engine.ptr;
          _emscripten_bind_PxVehicleDriveSimData4W_setEngineData_1(self2, engine);
        };
        ;
        PxVehicleDriveSimData4W.prototype["getGearsData"] = PxVehicleDriveSimData4W.prototype.getGearsData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData4W_getGearsData_0(self2), PxVehicleGearsData);
        };
        ;
        PxVehicleDriveSimData4W.prototype["setGearsData"] = PxVehicleDriveSimData4W.prototype.setGearsData = function(gears) {
          var self2 = this.ptr;
          if (gears && typeof gears === "object")
            gears = gears.ptr;
          _emscripten_bind_PxVehicleDriveSimData4W_setGearsData_1(self2, gears);
        };
        ;
        PxVehicleDriveSimData4W.prototype["getClutchData"] = PxVehicleDriveSimData4W.prototype.getClutchData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData4W_getClutchData_0(self2), PxVehicleClutchData);
        };
        ;
        PxVehicleDriveSimData4W.prototype["setClutchData"] = PxVehicleDriveSimData4W.prototype.setClutchData = function(clutch) {
          var self2 = this.ptr;
          if (clutch && typeof clutch === "object")
            clutch = clutch.ptr;
          _emscripten_bind_PxVehicleDriveSimData4W_setClutchData_1(self2, clutch);
        };
        ;
        PxVehicleDriveSimData4W.prototype["getAutoBoxData"] = PxVehicleDriveSimData4W.prototype.getAutoBoxData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimData4W_getAutoBoxData_0(self2), PxVehicleAutoBoxData);
        };
        ;
        PxVehicleDriveSimData4W.prototype["setAutoBoxData"] = PxVehicleDriveSimData4W.prototype.setAutoBoxData = function(clutch) {
          var self2 = this.ptr;
          if (clutch && typeof clutch === "object")
            clutch = clutch.ptr;
          _emscripten_bind_PxVehicleDriveSimData4W_setAutoBoxData_1(self2, clutch);
        };
        ;
        PxVehicleDriveSimData4W.prototype["__destroy__"] = PxVehicleDriveSimData4W.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveSimData4W___destroy___0(self2);
        };
        function PxVehicleDriveSimDataNW() {
          this.ptr = _emscripten_bind_PxVehicleDriveSimDataNW_PxVehicleDriveSimDataNW_0();
          getCache(PxVehicleDriveSimDataNW)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleDriveSimDataNW.prototype = Object.create(PxVehicleDriveSimData.prototype);
        PxVehicleDriveSimDataNW.prototype.constructor = PxVehicleDriveSimDataNW;
        PxVehicleDriveSimDataNW.prototype.__class__ = PxVehicleDriveSimDataNW;
        PxVehicleDriveSimDataNW.__cache__ = {};
        Module["PxVehicleDriveSimDataNW"] = PxVehicleDriveSimDataNW;
        PxVehicleDriveSimDataNW.prototype["getDiffData"] = PxVehicleDriveSimDataNW.prototype.getDiffData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimDataNW_getDiffData_0(self2), PxVehicleDifferentialNWData);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["setDiffData"] = PxVehicleDriveSimDataNW.prototype.setDiffData = function(diff) {
          var self2 = this.ptr;
          if (diff && typeof diff === "object")
            diff = diff.ptr;
          _emscripten_bind_PxVehicleDriveSimDataNW_setDiffData_1(self2, diff);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["getEngineData"] = PxVehicleDriveSimDataNW.prototype.getEngineData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimDataNW_getEngineData_0(self2), PxVehicleEngineData);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["setEngineData"] = PxVehicleDriveSimDataNW.prototype.setEngineData = function(engine) {
          var self2 = this.ptr;
          if (engine && typeof engine === "object")
            engine = engine.ptr;
          _emscripten_bind_PxVehicleDriveSimDataNW_setEngineData_1(self2, engine);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["getGearsData"] = PxVehicleDriveSimDataNW.prototype.getGearsData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimDataNW_getGearsData_0(self2), PxVehicleGearsData);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["setGearsData"] = PxVehicleDriveSimDataNW.prototype.setGearsData = function(gears) {
          var self2 = this.ptr;
          if (gears && typeof gears === "object")
            gears = gears.ptr;
          _emscripten_bind_PxVehicleDriveSimDataNW_setGearsData_1(self2, gears);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["getClutchData"] = PxVehicleDriveSimDataNW.prototype.getClutchData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimDataNW_getClutchData_0(self2), PxVehicleClutchData);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["setClutchData"] = PxVehicleDriveSimDataNW.prototype.setClutchData = function(clutch) {
          var self2 = this.ptr;
          if (clutch && typeof clutch === "object")
            clutch = clutch.ptr;
          _emscripten_bind_PxVehicleDriveSimDataNW_setClutchData_1(self2, clutch);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["getAutoBoxData"] = PxVehicleDriveSimDataNW.prototype.getAutoBoxData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveSimDataNW_getAutoBoxData_0(self2), PxVehicleAutoBoxData);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["setAutoBoxData"] = PxVehicleDriveSimDataNW.prototype.setAutoBoxData = function(clutch) {
          var self2 = this.ptr;
          if (clutch && typeof clutch === "object")
            clutch = clutch.ptr;
          _emscripten_bind_PxVehicleDriveSimDataNW_setAutoBoxData_1(self2, clutch);
        };
        ;
        PxVehicleDriveSimDataNW.prototype["__destroy__"] = PxVehicleDriveSimDataNW.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveSimDataNW___destroy___0(self2);
        };
        function PxVehicleDriveTank() {
          throw "cannot construct a PxVehicleDriveTank, no constructor in IDL";
        }
        PxVehicleDriveTank.prototype = Object.create(PxVehicleDrive.prototype);
        PxVehicleDriveTank.prototype.constructor = PxVehicleDriveTank;
        PxVehicleDriveTank.prototype.__class__ = PxVehicleDriveTank;
        PxVehicleDriveTank.__cache__ = {};
        Module["PxVehicleDriveTank"] = PxVehicleDriveTank;
        PxVehicleDriveTank.prototype["allocate"] = PxVehicleDriveTank.prototype.allocate = function(nbWheels) {
          var self2 = this.ptr;
          if (nbWheels && typeof nbWheels === "object")
            nbWheels = nbWheels.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveTank_allocate_1(self2, nbWheels), PxVehicleDriveTank);
        };
        ;
        PxVehicleDriveTank.prototype["free"] = PxVehicleDriveTank.prototype.free = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveTank_free_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["setup"] = PxVehicleDriveTank.prototype.setup = function(physics, vehActor, wheelsData, driveData, nbDrivenWheels) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (vehActor && typeof vehActor === "object")
            vehActor = vehActor.ptr;
          if (wheelsData && typeof wheelsData === "object")
            wheelsData = wheelsData.ptr;
          if (driveData && typeof driveData === "object")
            driveData = driveData.ptr;
          if (nbDrivenWheels && typeof nbDrivenWheels === "object")
            nbDrivenWheels = nbDrivenWheels.ptr;
          _emscripten_bind_PxVehicleDriveTank_setup_5(self2, physics, vehActor, wheelsData, driveData, nbDrivenWheels);
        };
        ;
        PxVehicleDriveTank.prototype["setDriveModel"] = PxVehicleDriveTank.prototype.setDriveModel = function(driveModel) {
          var self2 = this.ptr;
          if (driveModel && typeof driveModel === "object")
            driveModel = driveModel.ptr;
          _emscripten_bind_PxVehicleDriveTank_setDriveModel_1(self2, driveModel);
        };
        ;
        PxVehicleDriveTank.prototype["getDriveModel"] = PxVehicleDriveTank.prototype.getDriveModel = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveTank_getDriveModel_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["setToRestState"] = PxVehicleDriveTank.prototype.setToRestState = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleDriveTank_setToRestState_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["getConcreteTypeName"] = PxVehicleDriveTank.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxVehicleDriveTank_getConcreteTypeName_0(self2));
        };
        ;
        PxVehicleDriveTank.prototype["getConcreteType"] = PxVehicleDriveTank.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveTank_getConcreteType_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["setBaseFlag"] = PxVehicleDriveTank.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleDriveTank_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxVehicleDriveTank.prototype["setBaseFlags"] = PxVehicleDriveTank.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxVehicleDriveTank_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxVehicleDriveTank.prototype["getBaseFlags"] = PxVehicleDriveTank.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveTank_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxVehicleDriveTank.prototype["isReleasable"] = PxVehicleDriveTank.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleDriveTank_isReleasable_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["getVehicleType"] = PxVehicleDriveTank.prototype.getVehicleType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveTank_getVehicleType_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["getRigidDynamicActor"] = PxVehicleDriveTank.prototype.getRigidDynamicActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveTank_getRigidDynamicActor_0(self2), PxRigidDynamic);
        };
        ;
        PxVehicleDriveTank.prototype["computeForwardSpeed"] = PxVehicleDriveTank.prototype.computeForwardSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveTank_computeForwardSpeed_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["computeSidewaysSpeed"] = PxVehicleDriveTank.prototype.computeSidewaysSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveTank_computeSidewaysSpeed_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["getNbNonDrivenWheels"] = PxVehicleDriveTank.prototype.getNbNonDrivenWheels = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleDriveTank_getNbNonDrivenWheels_0(self2);
        };
        ;
        PxVehicleDriveTank.prototype["get_mDriveSimData"] = PxVehicleDriveTank.prototype.get_mDriveSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveTank_get_mDriveSimData_0(self2), PxVehicleDriveSimData);
        };
        PxVehicleDriveTank.prototype["set_mDriveSimData"] = PxVehicleDriveTank.prototype.set_mDriveSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveTank_set_mDriveSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveTank.prototype, "mDriveSimData", { get: PxVehicleDriveTank.prototype.get_mDriveSimData, set: PxVehicleDriveTank.prototype.set_mDriveSimData });
        PxVehicleDriveTank.prototype["get_mDriveDynData"] = PxVehicleDriveTank.prototype.get_mDriveDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveTank_get_mDriveDynData_0(self2), PxVehicleDriveDynData);
        };
        PxVehicleDriveTank.prototype["set_mDriveDynData"] = PxVehicleDriveTank.prototype.set_mDriveDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveTank_set_mDriveDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveTank.prototype, "mDriveDynData", { get: PxVehicleDriveTank.prototype.get_mDriveDynData, set: PxVehicleDriveTank.prototype.set_mDriveDynData });
        PxVehicleDriveTank.prototype["get_mWheelsSimData"] = PxVehicleDriveTank.prototype.get_mWheelsSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveTank_get_mWheelsSimData_0(self2), PxVehicleWheelsSimData);
        };
        PxVehicleDriveTank.prototype["set_mWheelsSimData"] = PxVehicleDriveTank.prototype.set_mWheelsSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveTank_set_mWheelsSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveTank.prototype, "mWheelsSimData", { get: PxVehicleDriveTank.prototype.get_mWheelsSimData, set: PxVehicleDriveTank.prototype.set_mWheelsSimData });
        PxVehicleDriveTank.prototype["get_mWheelsDynData"] = PxVehicleDriveTank.prototype.get_mWheelsDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleDriveTank_get_mWheelsDynData_0(self2), PxVehicleWheelsDynData);
        };
        PxVehicleDriveTank.prototype["set_mWheelsDynData"] = PxVehicleDriveTank.prototype.set_mWheelsDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleDriveTank_set_mWheelsDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleDriveTank.prototype, "mWheelsDynData", { get: PxVehicleDriveTank.prototype.get_mWheelsDynData, set: PxVehicleDriveTank.prototype.set_mWheelsDynData });
        function PxVehicleEngineData() {
          this.ptr = _emscripten_bind_PxVehicleEngineData_PxVehicleEngineData_0();
          getCache(PxVehicleEngineData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleEngineData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleEngineData.prototype.constructor = PxVehicleEngineData;
        PxVehicleEngineData.prototype.__class__ = PxVehicleEngineData;
        PxVehicleEngineData.__cache__ = {};
        Module["PxVehicleEngineData"] = PxVehicleEngineData;
        PxVehicleEngineData.prototype["get_mTorqueCurve"] = PxVehicleEngineData.prototype.get_mTorqueCurve = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleEngineData_get_mTorqueCurve_0(self2), PxEngineTorqueLookupTable);
        };
        PxVehicleEngineData.prototype["set_mTorqueCurve"] = PxVehicleEngineData.prototype.set_mTorqueCurve = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleEngineData_set_mTorqueCurve_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleEngineData.prototype, "mTorqueCurve", { get: PxVehicleEngineData.prototype.get_mTorqueCurve, set: PxVehicleEngineData.prototype.set_mTorqueCurve });
        PxVehicleEngineData.prototype["get_mMOI"] = PxVehicleEngineData.prototype.get_mMOI = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleEngineData_get_mMOI_0(self2);
        };
        PxVehicleEngineData.prototype["set_mMOI"] = PxVehicleEngineData.prototype.set_mMOI = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleEngineData_set_mMOI_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleEngineData.prototype, "mMOI", { get: PxVehicleEngineData.prototype.get_mMOI, set: PxVehicleEngineData.prototype.set_mMOI });
        PxVehicleEngineData.prototype["get_mPeakTorque"] = PxVehicleEngineData.prototype.get_mPeakTorque = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleEngineData_get_mPeakTorque_0(self2);
        };
        PxVehicleEngineData.prototype["set_mPeakTorque"] = PxVehicleEngineData.prototype.set_mPeakTorque = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleEngineData_set_mPeakTorque_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleEngineData.prototype, "mPeakTorque", { get: PxVehicleEngineData.prototype.get_mPeakTorque, set: PxVehicleEngineData.prototype.set_mPeakTorque });
        PxVehicleEngineData.prototype["get_mMaxOmega"] = PxVehicleEngineData.prototype.get_mMaxOmega = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleEngineData_get_mMaxOmega_0(self2);
        };
        PxVehicleEngineData.prototype["set_mMaxOmega"] = PxVehicleEngineData.prototype.set_mMaxOmega = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleEngineData_set_mMaxOmega_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleEngineData.prototype, "mMaxOmega", { get: PxVehicleEngineData.prototype.get_mMaxOmega, set: PxVehicleEngineData.prototype.set_mMaxOmega });
        PxVehicleEngineData.prototype["get_mDampingRateFullThrottle"] = PxVehicleEngineData.prototype.get_mDampingRateFullThrottle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleEngineData_get_mDampingRateFullThrottle_0(self2);
        };
        PxVehicleEngineData.prototype["set_mDampingRateFullThrottle"] = PxVehicleEngineData.prototype.set_mDampingRateFullThrottle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleEngineData_set_mDampingRateFullThrottle_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleEngineData.prototype, "mDampingRateFullThrottle", { get: PxVehicleEngineData.prototype.get_mDampingRateFullThrottle, set: PxVehicleEngineData.prototype.set_mDampingRateFullThrottle });
        PxVehicleEngineData.prototype["get_mDampingRateZeroThrottleClutchEngaged"] = PxVehicleEngineData.prototype.get_mDampingRateZeroThrottleClutchEngaged = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchEngaged_0(self2);
        };
        PxVehicleEngineData.prototype["set_mDampingRateZeroThrottleClutchEngaged"] = PxVehicleEngineData.prototype.set_mDampingRateZeroThrottleClutchEngaged = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchEngaged_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleEngineData.prototype, "mDampingRateZeroThrottleClutchEngaged", { get: PxVehicleEngineData.prototype.get_mDampingRateZeroThrottleClutchEngaged, set: PxVehicleEngineData.prototype.set_mDampingRateZeroThrottleClutchEngaged });
        PxVehicleEngineData.prototype["get_mDampingRateZeroThrottleClutchDisengaged"] = PxVehicleEngineData.prototype.get_mDampingRateZeroThrottleClutchDisengaged = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleEngineData_get_mDampingRateZeroThrottleClutchDisengaged_0(self2);
        };
        PxVehicleEngineData.prototype["set_mDampingRateZeroThrottleClutchDisengaged"] = PxVehicleEngineData.prototype.set_mDampingRateZeroThrottleClutchDisengaged = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleEngineData_set_mDampingRateZeroThrottleClutchDisengaged_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleEngineData.prototype, "mDampingRateZeroThrottleClutchDisengaged", { get: PxVehicleEngineData.prototype.get_mDampingRateZeroThrottleClutchDisengaged, set: PxVehicleEngineData.prototype.set_mDampingRateZeroThrottleClutchDisengaged });
        PxVehicleEngineData.prototype["__destroy__"] = PxVehicleEngineData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleEngineData___destroy___0(self2);
        };
        function PxEngineTorqueLookupTable() {
          this.ptr = _emscripten_bind_PxEngineTorqueLookupTable_PxEngineTorqueLookupTable_0();
          getCache(PxEngineTorqueLookupTable)[this.ptr] = this;
        }
        ;
        ;
        PxEngineTorqueLookupTable.prototype = Object.create(WrapperObject.prototype);
        PxEngineTorqueLookupTable.prototype.constructor = PxEngineTorqueLookupTable;
        PxEngineTorqueLookupTable.prototype.__class__ = PxEngineTorqueLookupTable;
        PxEngineTorqueLookupTable.__cache__ = {};
        Module["PxEngineTorqueLookupTable"] = PxEngineTorqueLookupTable;
        PxEngineTorqueLookupTable.prototype["addPair"] = PxEngineTorqueLookupTable.prototype.addPair = function(x, y) {
          var self2 = this.ptr;
          if (x && typeof x === "object")
            x = x.ptr;
          if (y && typeof y === "object")
            y = y.ptr;
          _emscripten_bind_PxEngineTorqueLookupTable_addPair_2(self2, x, y);
        };
        ;
        PxEngineTorqueLookupTable.prototype["getYVal"] = PxEngineTorqueLookupTable.prototype.getYVal = function(x) {
          var self2 = this.ptr;
          if (x && typeof x === "object")
            x = x.ptr;
          return _emscripten_bind_PxEngineTorqueLookupTable_getYVal_1(self2, x);
        };
        ;
        PxEngineTorqueLookupTable.prototype["getNbDataPairs"] = PxEngineTorqueLookupTable.prototype.getNbDataPairs = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxEngineTorqueLookupTable_getNbDataPairs_0(self2);
        };
        ;
        PxEngineTorqueLookupTable.prototype["clear"] = PxEngineTorqueLookupTable.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxEngineTorqueLookupTable_clear_0(self2);
        };
        ;
        PxEngineTorqueLookupTable.prototype["getX"] = PxEngineTorqueLookupTable.prototype.getX = function(i) {
          var self2 = this.ptr;
          if (i && typeof i === "object")
            i = i.ptr;
          return _emscripten_bind_PxEngineTorqueLookupTable_getX_1(self2, i);
        };
        ;
        PxEngineTorqueLookupTable.prototype["getY"] = PxEngineTorqueLookupTable.prototype.getY = function(i) {
          var self2 = this.ptr;
          if (i && typeof i === "object")
            i = i.ptr;
          return _emscripten_bind_PxEngineTorqueLookupTable_getY_1(self2, i);
        };
        ;
        PxEngineTorqueLookupTable.prototype["get_mDataPairs"] = PxEngineTorqueLookupTable.prototype.get_mDataPairs = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxEngineTorqueLookupTable_get_mDataPairs_1(self2, arg0);
        };
        PxEngineTorqueLookupTable.prototype["set_mDataPairs"] = PxEngineTorqueLookupTable.prototype.set_mDataPairs = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxEngineTorqueLookupTable_set_mDataPairs_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxEngineTorqueLookupTable.prototype, "mDataPairs", { get: PxEngineTorqueLookupTable.prototype.get_mDataPairs, set: PxEngineTorqueLookupTable.prototype.set_mDataPairs });
        PxEngineTorqueLookupTable.prototype["get_mNbDataPairs"] = PxEngineTorqueLookupTable.prototype.get_mNbDataPairs = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxEngineTorqueLookupTable_get_mNbDataPairs_0(self2);
        };
        PxEngineTorqueLookupTable.prototype["set_mNbDataPairs"] = PxEngineTorqueLookupTable.prototype.set_mNbDataPairs = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxEngineTorqueLookupTable_set_mNbDataPairs_1(self2, arg0);
        };
        Object.defineProperty(PxEngineTorqueLookupTable.prototype, "mNbDataPairs", { get: PxEngineTorqueLookupTable.prototype.get_mNbDataPairs, set: PxEngineTorqueLookupTable.prototype.set_mNbDataPairs });
        PxEngineTorqueLookupTable.prototype["__destroy__"] = PxEngineTorqueLookupTable.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxEngineTorqueLookupTable___destroy___0(self2);
        };
        function PxVehicleGearsData() {
          this.ptr = _emscripten_bind_PxVehicleGearsData_PxVehicleGearsData_0();
          getCache(PxVehicleGearsData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleGearsData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleGearsData.prototype.constructor = PxVehicleGearsData;
        PxVehicleGearsData.prototype.__class__ = PxVehicleGearsData;
        PxVehicleGearsData.__cache__ = {};
        Module["PxVehicleGearsData"] = PxVehicleGearsData;
        PxVehicleGearsData.prototype["getGearRatio"] = PxVehicleGearsData.prototype.getGearRatio = function(a) {
          var self2 = this.ptr;
          if (a && typeof a === "object")
            a = a.ptr;
          return _emscripten_bind_PxVehicleGearsData_getGearRatio_1(self2, a);
        };
        ;
        PxVehicleGearsData.prototype["setGearRatio"] = PxVehicleGearsData.prototype.setGearRatio = function(a, ratio) {
          var self2 = this.ptr;
          if (a && typeof a === "object")
            a = a.ptr;
          if (ratio && typeof ratio === "object")
            ratio = ratio.ptr;
          _emscripten_bind_PxVehicleGearsData_setGearRatio_2(self2, a, ratio);
        };
        ;
        PxVehicleGearsData.prototype["get_mRatios"] = PxVehicleGearsData.prototype.get_mRatios = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxVehicleGearsData_get_mRatios_1(self2, arg0);
        };
        PxVehicleGearsData.prototype["set_mRatios"] = PxVehicleGearsData.prototype.set_mRatios = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxVehicleGearsData_set_mRatios_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxVehicleGearsData.prototype, "mRatios", { get: PxVehicleGearsData.prototype.get_mRatios, set: PxVehicleGearsData.prototype.set_mRatios });
        PxVehicleGearsData.prototype["get_mFinalRatio"] = PxVehicleGearsData.prototype.get_mFinalRatio = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleGearsData_get_mFinalRatio_0(self2);
        };
        PxVehicleGearsData.prototype["set_mFinalRatio"] = PxVehicleGearsData.prototype.set_mFinalRatio = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleGearsData_set_mFinalRatio_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleGearsData.prototype, "mFinalRatio", { get: PxVehicleGearsData.prototype.get_mFinalRatio, set: PxVehicleGearsData.prototype.set_mFinalRatio });
        PxVehicleGearsData.prototype["get_mNbRatios"] = PxVehicleGearsData.prototype.get_mNbRatios = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleGearsData_get_mNbRatios_0(self2);
        };
        PxVehicleGearsData.prototype["set_mNbRatios"] = PxVehicleGearsData.prototype.set_mNbRatios = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleGearsData_set_mNbRatios_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleGearsData.prototype, "mNbRatios", { get: PxVehicleGearsData.prototype.get_mNbRatios, set: PxVehicleGearsData.prototype.set_mNbRatios });
        PxVehicleGearsData.prototype["get_mSwitchTime"] = PxVehicleGearsData.prototype.get_mSwitchTime = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleGearsData_get_mSwitchTime_0(self2);
        };
        PxVehicleGearsData.prototype["set_mSwitchTime"] = PxVehicleGearsData.prototype.set_mSwitchTime = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleGearsData_set_mSwitchTime_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleGearsData.prototype, "mSwitchTime", { get: PxVehicleGearsData.prototype.get_mSwitchTime, set: PxVehicleGearsData.prototype.set_mSwitchTime });
        PxVehicleGearsData.prototype["__destroy__"] = PxVehicleGearsData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleGearsData___destroy___0(self2);
        };
        function PxVehicleNoDrive() {
          throw "cannot construct a PxVehicleNoDrive, no constructor in IDL";
        }
        PxVehicleNoDrive.prototype = Object.create(PxVehicleWheels.prototype);
        PxVehicleNoDrive.prototype.constructor = PxVehicleNoDrive;
        PxVehicleNoDrive.prototype.__class__ = PxVehicleNoDrive;
        PxVehicleNoDrive.__cache__ = {};
        Module["PxVehicleNoDrive"] = PxVehicleNoDrive;
        PxVehicleNoDrive.prototype["allocate"] = PxVehicleNoDrive.prototype.allocate = function(nbWheels) {
          var self2 = this.ptr;
          if (nbWheels && typeof nbWheels === "object")
            nbWheels = nbWheels.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleNoDrive_allocate_1(self2, nbWheels), PxVehicleNoDrive);
        };
        ;
        PxVehicleNoDrive.prototype["free"] = PxVehicleNoDrive.prototype.free = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleNoDrive_free_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["setup"] = PxVehicleNoDrive.prototype.setup = function(physics, vehActor, wheelsData) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          if (vehActor && typeof vehActor === "object")
            vehActor = vehActor.ptr;
          if (wheelsData && typeof wheelsData === "object")
            wheelsData = wheelsData.ptr;
          _emscripten_bind_PxVehicleNoDrive_setup_3(self2, physics, vehActor, wheelsData);
        };
        ;
        PxVehicleNoDrive.prototype["setToRestState"] = PxVehicleNoDrive.prototype.setToRestState = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleNoDrive_setToRestState_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["setBrakeTorque"] = PxVehicleNoDrive.prototype.setBrakeTorque = function(id, brakeTorque) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (brakeTorque && typeof brakeTorque === "object")
            brakeTorque = brakeTorque.ptr;
          _emscripten_bind_PxVehicleNoDrive_setBrakeTorque_2(self2, id, brakeTorque);
        };
        ;
        PxVehicleNoDrive.prototype["setDriveTorque"] = PxVehicleNoDrive.prototype.setDriveTorque = function(id, driveTorque) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (driveTorque && typeof driveTorque === "object")
            driveTorque = driveTorque.ptr;
          _emscripten_bind_PxVehicleNoDrive_setDriveTorque_2(self2, id, driveTorque);
        };
        ;
        PxVehicleNoDrive.prototype["setSteerAngle"] = PxVehicleNoDrive.prototype.setSteerAngle = function(id, steerAngle) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (steerAngle && typeof steerAngle === "object")
            steerAngle = steerAngle.ptr;
          _emscripten_bind_PxVehicleNoDrive_setSteerAngle_2(self2, id, steerAngle);
        };
        ;
        PxVehicleNoDrive.prototype["getBrakeTorque"] = PxVehicleNoDrive.prototype.getBrakeTorque = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getBrakeTorque_1(self2, id);
        };
        ;
        PxVehicleNoDrive.prototype["getDriveTorque"] = PxVehicleNoDrive.prototype.getDriveTorque = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getDriveTorque_1(self2, id);
        };
        ;
        PxVehicleNoDrive.prototype["getSteerAngle"] = PxVehicleNoDrive.prototype.getSteerAngle = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getSteerAngle_1(self2, id);
        };
        ;
        PxVehicleNoDrive.prototype["getNbSteerAngle"] = PxVehicleNoDrive.prototype.getNbSteerAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getNbSteerAngle_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["getNbDriveTorque"] = PxVehicleNoDrive.prototype.getNbDriveTorque = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getNbDriveTorque_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["getNbBrakeTorque"] = PxVehicleNoDrive.prototype.getNbBrakeTorque = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getNbBrakeTorque_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["getConcreteTypeName"] = PxVehicleNoDrive.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxVehicleNoDrive_getConcreteTypeName_0(self2));
        };
        ;
        PxVehicleNoDrive.prototype["getConcreteType"] = PxVehicleNoDrive.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getConcreteType_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["setBaseFlag"] = PxVehicleNoDrive.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxVehicleNoDrive_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxVehicleNoDrive.prototype["setBaseFlags"] = PxVehicleNoDrive.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxVehicleNoDrive_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxVehicleNoDrive.prototype["getBaseFlags"] = PxVehicleNoDrive.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleNoDrive_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxVehicleNoDrive.prototype["isReleasable"] = PxVehicleNoDrive.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxVehicleNoDrive_isReleasable_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["getVehicleType"] = PxVehicleNoDrive.prototype.getVehicleType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getVehicleType_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["getRigidDynamicActor"] = PxVehicleNoDrive.prototype.getRigidDynamicActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleNoDrive_getRigidDynamicActor_0(self2), PxRigidDynamic);
        };
        ;
        PxVehicleNoDrive.prototype["computeForwardSpeed"] = PxVehicleNoDrive.prototype.computeForwardSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_computeForwardSpeed_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["computeSidewaysSpeed"] = PxVehicleNoDrive.prototype.computeSidewaysSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_computeSidewaysSpeed_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["getNbNonDrivenWheels"] = PxVehicleNoDrive.prototype.getNbNonDrivenWheels = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleNoDrive_getNbNonDrivenWheels_0(self2);
        };
        ;
        PxVehicleNoDrive.prototype["get_mWheelsSimData"] = PxVehicleNoDrive.prototype.get_mWheelsSimData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleNoDrive_get_mWheelsSimData_0(self2), PxVehicleWheelsSimData);
        };
        PxVehicleNoDrive.prototype["set_mWheelsSimData"] = PxVehicleNoDrive.prototype.set_mWheelsSimData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleNoDrive_set_mWheelsSimData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleNoDrive.prototype, "mWheelsSimData", { get: PxVehicleNoDrive.prototype.get_mWheelsSimData, set: PxVehicleNoDrive.prototype.set_mWheelsSimData });
        PxVehicleNoDrive.prototype["get_mWheelsDynData"] = PxVehicleNoDrive.prototype.get_mWheelsDynData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleNoDrive_get_mWheelsDynData_0(self2), PxVehicleWheelsDynData);
        };
        PxVehicleNoDrive.prototype["set_mWheelsDynData"] = PxVehicleNoDrive.prototype.set_mWheelsDynData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleNoDrive_set_mWheelsDynData_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleNoDrive.prototype, "mWheelsDynData", { get: PxVehicleNoDrive.prototype.get_mWheelsDynData, set: PxVehicleNoDrive.prototype.set_mWheelsDynData });
        function PxVehicleSuspensionData() {
          this.ptr = _emscripten_bind_PxVehicleSuspensionData_PxVehicleSuspensionData_0();
          getCache(PxVehicleSuspensionData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleSuspensionData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleSuspensionData.prototype.constructor = PxVehicleSuspensionData;
        PxVehicleSuspensionData.prototype.__class__ = PxVehicleSuspensionData;
        PxVehicleSuspensionData.__cache__ = {};
        Module["PxVehicleSuspensionData"] = PxVehicleSuspensionData;
        PxVehicleSuspensionData.prototype["setMassAndPreserveNaturalFrequency"] = PxVehicleSuspensionData.prototype.setMassAndPreserveNaturalFrequency = function(newSprungMass) {
          var self2 = this.ptr;
          if (newSprungMass && typeof newSprungMass === "object")
            newSprungMass = newSprungMass.ptr;
          _emscripten_bind_PxVehicleSuspensionData_setMassAndPreserveNaturalFrequency_1(self2, newSprungMass);
        };
        ;
        PxVehicleSuspensionData.prototype["get_mSpringStrength"] = PxVehicleSuspensionData.prototype.get_mSpringStrength = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mSpringStrength_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mSpringStrength"] = PxVehicleSuspensionData.prototype.set_mSpringStrength = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mSpringStrength_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mSpringStrength", { get: PxVehicleSuspensionData.prototype.get_mSpringStrength, set: PxVehicleSuspensionData.prototype.set_mSpringStrength });
        PxVehicleSuspensionData.prototype["get_mSpringDamperRate"] = PxVehicleSuspensionData.prototype.get_mSpringDamperRate = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mSpringDamperRate_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mSpringDamperRate"] = PxVehicleSuspensionData.prototype.set_mSpringDamperRate = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mSpringDamperRate_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mSpringDamperRate", { get: PxVehicleSuspensionData.prototype.get_mSpringDamperRate, set: PxVehicleSuspensionData.prototype.set_mSpringDamperRate });
        PxVehicleSuspensionData.prototype["get_mMaxCompression"] = PxVehicleSuspensionData.prototype.get_mMaxCompression = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mMaxCompression_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mMaxCompression"] = PxVehicleSuspensionData.prototype.set_mMaxCompression = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mMaxCompression_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mMaxCompression", { get: PxVehicleSuspensionData.prototype.get_mMaxCompression, set: PxVehicleSuspensionData.prototype.set_mMaxCompression });
        PxVehicleSuspensionData.prototype["get_mMaxDroop"] = PxVehicleSuspensionData.prototype.get_mMaxDroop = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mMaxDroop_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mMaxDroop"] = PxVehicleSuspensionData.prototype.set_mMaxDroop = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mMaxDroop_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mMaxDroop", { get: PxVehicleSuspensionData.prototype.get_mMaxDroop, set: PxVehicleSuspensionData.prototype.set_mMaxDroop });
        PxVehicleSuspensionData.prototype["get_mSprungMass"] = PxVehicleSuspensionData.prototype.get_mSprungMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mSprungMass_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mSprungMass"] = PxVehicleSuspensionData.prototype.set_mSprungMass = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mSprungMass_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mSprungMass", { get: PxVehicleSuspensionData.prototype.get_mSprungMass, set: PxVehicleSuspensionData.prototype.set_mSprungMass });
        PxVehicleSuspensionData.prototype["get_mCamberAtRest"] = PxVehicleSuspensionData.prototype.get_mCamberAtRest = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mCamberAtRest_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mCamberAtRest"] = PxVehicleSuspensionData.prototype.set_mCamberAtRest = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mCamberAtRest_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mCamberAtRest", { get: PxVehicleSuspensionData.prototype.get_mCamberAtRest, set: PxVehicleSuspensionData.prototype.set_mCamberAtRest });
        PxVehicleSuspensionData.prototype["get_mCamberAtMaxCompression"] = PxVehicleSuspensionData.prototype.get_mCamberAtMaxCompression = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxCompression_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mCamberAtMaxCompression"] = PxVehicleSuspensionData.prototype.set_mCamberAtMaxCompression = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxCompression_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mCamberAtMaxCompression", { get: PxVehicleSuspensionData.prototype.get_mCamberAtMaxCompression, set: PxVehicleSuspensionData.prototype.set_mCamberAtMaxCompression });
        PxVehicleSuspensionData.prototype["get_mCamberAtMaxDroop"] = PxVehicleSuspensionData.prototype.get_mCamberAtMaxDroop = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleSuspensionData_get_mCamberAtMaxDroop_0(self2);
        };
        PxVehicleSuspensionData.prototype["set_mCamberAtMaxDroop"] = PxVehicleSuspensionData.prototype.set_mCamberAtMaxDroop = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleSuspensionData_set_mCamberAtMaxDroop_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleSuspensionData.prototype, "mCamberAtMaxDroop", { get: PxVehicleSuspensionData.prototype.get_mCamberAtMaxDroop, set: PxVehicleSuspensionData.prototype.set_mCamberAtMaxDroop });
        PxVehicleSuspensionData.prototype["__destroy__"] = PxVehicleSuspensionData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleSuspensionData___destroy___0(self2);
        };
        function PxVehicleTireData() {
          this.ptr = _emscripten_bind_PxVehicleTireData_PxVehicleTireData_0();
          getCache(PxVehicleTireData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleTireData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleTireData.prototype.constructor = PxVehicleTireData;
        PxVehicleTireData.prototype.__class__ = PxVehicleTireData;
        PxVehicleTireData.__cache__ = {};
        Module["PxVehicleTireData"] = PxVehicleTireData;
        PxVehicleTireData.prototype["get_mLatStiffX"] = PxVehicleTireData.prototype.get_mLatStiffX = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireData_get_mLatStiffX_0(self2);
        };
        PxVehicleTireData.prototype["set_mLatStiffX"] = PxVehicleTireData.prototype.set_mLatStiffX = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireData_set_mLatStiffX_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireData.prototype, "mLatStiffX", { get: PxVehicleTireData.prototype.get_mLatStiffX, set: PxVehicleTireData.prototype.set_mLatStiffX });
        PxVehicleTireData.prototype["get_mLatStiffY"] = PxVehicleTireData.prototype.get_mLatStiffY = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireData_get_mLatStiffY_0(self2);
        };
        PxVehicleTireData.prototype["set_mLatStiffY"] = PxVehicleTireData.prototype.set_mLatStiffY = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireData_set_mLatStiffY_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireData.prototype, "mLatStiffY", { get: PxVehicleTireData.prototype.get_mLatStiffY, set: PxVehicleTireData.prototype.set_mLatStiffY });
        PxVehicleTireData.prototype["get_mLongitudinalStiffnessPerUnitGravity"] = PxVehicleTireData.prototype.get_mLongitudinalStiffnessPerUnitGravity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireData_get_mLongitudinalStiffnessPerUnitGravity_0(self2);
        };
        PxVehicleTireData.prototype["set_mLongitudinalStiffnessPerUnitGravity"] = PxVehicleTireData.prototype.set_mLongitudinalStiffnessPerUnitGravity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireData_set_mLongitudinalStiffnessPerUnitGravity_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireData.prototype, "mLongitudinalStiffnessPerUnitGravity", { get: PxVehicleTireData.prototype.get_mLongitudinalStiffnessPerUnitGravity, set: PxVehicleTireData.prototype.set_mLongitudinalStiffnessPerUnitGravity });
        PxVehicleTireData.prototype["get_mCamberStiffnessPerUnitGravity"] = PxVehicleTireData.prototype.get_mCamberStiffnessPerUnitGravity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireData_get_mCamberStiffnessPerUnitGravity_0(self2);
        };
        PxVehicleTireData.prototype["set_mCamberStiffnessPerUnitGravity"] = PxVehicleTireData.prototype.set_mCamberStiffnessPerUnitGravity = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireData_set_mCamberStiffnessPerUnitGravity_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireData.prototype, "mCamberStiffnessPerUnitGravity", { get: PxVehicleTireData.prototype.get_mCamberStiffnessPerUnitGravity, set: PxVehicleTireData.prototype.set_mCamberStiffnessPerUnitGravity });
        PxVehicleTireData.prototype["get_mType"] = PxVehicleTireData.prototype.get_mType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireData_get_mType_0(self2);
        };
        PxVehicleTireData.prototype["set_mType"] = PxVehicleTireData.prototype.set_mType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireData_set_mType_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireData.prototype, "mType", { get: PxVehicleTireData.prototype.get_mType, set: PxVehicleTireData.prototype.set_mType });
        PxVehicleTireData.prototype["__destroy__"] = PxVehicleTireData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleTireData___destroy___0(self2);
        };
        function PxVehicleTireLoadFilterData() {
          this.ptr = _emscripten_bind_PxVehicleTireLoadFilterData_PxVehicleTireLoadFilterData_0();
          getCache(PxVehicleTireLoadFilterData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleTireLoadFilterData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleTireLoadFilterData.prototype.constructor = PxVehicleTireLoadFilterData;
        PxVehicleTireLoadFilterData.prototype.__class__ = PxVehicleTireLoadFilterData;
        PxVehicleTireLoadFilterData.__cache__ = {};
        Module["PxVehicleTireLoadFilterData"] = PxVehicleTireLoadFilterData;
        PxVehicleTireLoadFilterData.prototype["getDenominator"] = PxVehicleTireLoadFilterData.prototype.getDenominator = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireLoadFilterData_getDenominator_0(self2);
        };
        ;
        PxVehicleTireLoadFilterData.prototype["get_mMinNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.get_mMinNormalisedLoad = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireLoadFilterData_get_mMinNormalisedLoad_0(self2);
        };
        PxVehicleTireLoadFilterData.prototype["set_mMinNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.set_mMinNormalisedLoad = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireLoadFilterData_set_mMinNormalisedLoad_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireLoadFilterData.prototype, "mMinNormalisedLoad", { get: PxVehicleTireLoadFilterData.prototype.get_mMinNormalisedLoad, set: PxVehicleTireLoadFilterData.prototype.set_mMinNormalisedLoad });
        PxVehicleTireLoadFilterData.prototype["get_mMinFilteredNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.get_mMinFilteredNormalisedLoad = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireLoadFilterData_get_mMinFilteredNormalisedLoad_0(self2);
        };
        PxVehicleTireLoadFilterData.prototype["set_mMinFilteredNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.set_mMinFilteredNormalisedLoad = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireLoadFilterData_set_mMinFilteredNormalisedLoad_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireLoadFilterData.prototype, "mMinFilteredNormalisedLoad", { get: PxVehicleTireLoadFilterData.prototype.get_mMinFilteredNormalisedLoad, set: PxVehicleTireLoadFilterData.prototype.set_mMinFilteredNormalisedLoad });
        PxVehicleTireLoadFilterData.prototype["get_mMaxNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.get_mMaxNormalisedLoad = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxNormalisedLoad_0(self2);
        };
        PxVehicleTireLoadFilterData.prototype["set_mMaxNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.set_mMaxNormalisedLoad = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxNormalisedLoad_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireLoadFilterData.prototype, "mMaxNormalisedLoad", { get: PxVehicleTireLoadFilterData.prototype.get_mMaxNormalisedLoad, set: PxVehicleTireLoadFilterData.prototype.set_mMaxNormalisedLoad });
        PxVehicleTireLoadFilterData.prototype["get_mMaxFilteredNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.get_mMaxFilteredNormalisedLoad = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleTireLoadFilterData_get_mMaxFilteredNormalisedLoad_0(self2);
        };
        PxVehicleTireLoadFilterData.prototype["set_mMaxFilteredNormalisedLoad"] = PxVehicleTireLoadFilterData.prototype.set_mMaxFilteredNormalisedLoad = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleTireLoadFilterData_set_mMaxFilteredNormalisedLoad_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleTireLoadFilterData.prototype, "mMaxFilteredNormalisedLoad", { get: PxVehicleTireLoadFilterData.prototype.get_mMaxFilteredNormalisedLoad, set: PxVehicleTireLoadFilterData.prototype.set_mMaxFilteredNormalisedLoad });
        PxVehicleTireLoadFilterData.prototype["__destroy__"] = PxVehicleTireLoadFilterData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleTireLoadFilterData___destroy___0(self2);
        };
        function PxVehicleWheelData() {
          this.ptr = _emscripten_bind_PxVehicleWheelData_PxVehicleWheelData_0();
          getCache(PxVehicleWheelData)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleWheelData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleWheelData.prototype.constructor = PxVehicleWheelData;
        PxVehicleWheelData.prototype.__class__ = PxVehicleWheelData;
        PxVehicleWheelData.__cache__ = {};
        Module["PxVehicleWheelData"] = PxVehicleWheelData;
        PxVehicleWheelData.prototype["get_mRadius"] = PxVehicleWheelData.prototype.get_mRadius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mRadius_0(self2);
        };
        PxVehicleWheelData.prototype["set_mRadius"] = PxVehicleWheelData.prototype.set_mRadius = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mRadius_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mRadius", { get: PxVehicleWheelData.prototype.get_mRadius, set: PxVehicleWheelData.prototype.set_mRadius });
        PxVehicleWheelData.prototype["get_mWidth"] = PxVehicleWheelData.prototype.get_mWidth = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mWidth_0(self2);
        };
        PxVehicleWheelData.prototype["set_mWidth"] = PxVehicleWheelData.prototype.set_mWidth = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mWidth_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mWidth", { get: PxVehicleWheelData.prototype.get_mWidth, set: PxVehicleWheelData.prototype.set_mWidth });
        PxVehicleWheelData.prototype["get_mMass"] = PxVehicleWheelData.prototype.get_mMass = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mMass_0(self2);
        };
        PxVehicleWheelData.prototype["set_mMass"] = PxVehicleWheelData.prototype.set_mMass = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mMass_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mMass", { get: PxVehicleWheelData.prototype.get_mMass, set: PxVehicleWheelData.prototype.set_mMass });
        PxVehicleWheelData.prototype["get_mMOI"] = PxVehicleWheelData.prototype.get_mMOI = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mMOI_0(self2);
        };
        PxVehicleWheelData.prototype["set_mMOI"] = PxVehicleWheelData.prototype.set_mMOI = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mMOI_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mMOI", { get: PxVehicleWheelData.prototype.get_mMOI, set: PxVehicleWheelData.prototype.set_mMOI });
        PxVehicleWheelData.prototype["get_mDampingRate"] = PxVehicleWheelData.prototype.get_mDampingRate = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mDampingRate_0(self2);
        };
        PxVehicleWheelData.prototype["set_mDampingRate"] = PxVehicleWheelData.prototype.set_mDampingRate = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mDampingRate_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mDampingRate", { get: PxVehicleWheelData.prototype.get_mDampingRate, set: PxVehicleWheelData.prototype.set_mDampingRate });
        PxVehicleWheelData.prototype["get_mMaxBrakeTorque"] = PxVehicleWheelData.prototype.get_mMaxBrakeTorque = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mMaxBrakeTorque_0(self2);
        };
        PxVehicleWheelData.prototype["set_mMaxBrakeTorque"] = PxVehicleWheelData.prototype.set_mMaxBrakeTorque = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mMaxBrakeTorque_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mMaxBrakeTorque", { get: PxVehicleWheelData.prototype.get_mMaxBrakeTorque, set: PxVehicleWheelData.prototype.set_mMaxBrakeTorque });
        PxVehicleWheelData.prototype["get_mMaxHandBrakeTorque"] = PxVehicleWheelData.prototype.get_mMaxHandBrakeTorque = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mMaxHandBrakeTorque_0(self2);
        };
        PxVehicleWheelData.prototype["set_mMaxHandBrakeTorque"] = PxVehicleWheelData.prototype.set_mMaxHandBrakeTorque = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mMaxHandBrakeTorque_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mMaxHandBrakeTorque", { get: PxVehicleWheelData.prototype.get_mMaxHandBrakeTorque, set: PxVehicleWheelData.prototype.set_mMaxHandBrakeTorque });
        PxVehicleWheelData.prototype["get_mMaxSteer"] = PxVehicleWheelData.prototype.get_mMaxSteer = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mMaxSteer_0(self2);
        };
        PxVehicleWheelData.prototype["set_mMaxSteer"] = PxVehicleWheelData.prototype.set_mMaxSteer = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mMaxSteer_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mMaxSteer", { get: PxVehicleWheelData.prototype.get_mMaxSteer, set: PxVehicleWheelData.prototype.set_mMaxSteer });
        PxVehicleWheelData.prototype["get_mToeAngle"] = PxVehicleWheelData.prototype.get_mToeAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelData_get_mToeAngle_0(self2);
        };
        PxVehicleWheelData.prototype["set_mToeAngle"] = PxVehicleWheelData.prototype.set_mToeAngle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelData_set_mToeAngle_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelData.prototype, "mToeAngle", { get: PxVehicleWheelData.prototype.get_mToeAngle, set: PxVehicleWheelData.prototype.set_mToeAngle });
        PxVehicleWheelData.prototype["__destroy__"] = PxVehicleWheelData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelData___destroy___0(self2);
        };
        function PxVehicleWheelQueryResult() {
          this.ptr = _emscripten_bind_PxVehicleWheelQueryResult_PxVehicleWheelQueryResult_0();
          getCache(PxVehicleWheelQueryResult)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleWheelQueryResult.prototype = Object.create(WrapperObject.prototype);
        PxVehicleWheelQueryResult.prototype.constructor = PxVehicleWheelQueryResult;
        PxVehicleWheelQueryResult.prototype.__class__ = PxVehicleWheelQueryResult;
        PxVehicleWheelQueryResult.__cache__ = {};
        Module["PxVehicleWheelQueryResult"] = PxVehicleWheelQueryResult;
        PxVehicleWheelQueryResult.prototype["get_wheelQueryResults"] = PxVehicleWheelQueryResult.prototype.get_wheelQueryResults = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelQueryResult_get_wheelQueryResults_0(self2), PxWheelQueryResult);
        };
        PxVehicleWheelQueryResult.prototype["set_wheelQueryResults"] = PxVehicleWheelQueryResult.prototype.set_wheelQueryResults = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelQueryResult_set_wheelQueryResults_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelQueryResult.prototype, "wheelQueryResults", { get: PxVehicleWheelQueryResult.prototype.get_wheelQueryResults, set: PxVehicleWheelQueryResult.prototype.set_wheelQueryResults });
        PxVehicleWheelQueryResult.prototype["get_nbWheelQueryResults"] = PxVehicleWheelQueryResult.prototype.get_nbWheelQueryResults = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelQueryResult_get_nbWheelQueryResults_0(self2);
        };
        PxVehicleWheelQueryResult.prototype["set_nbWheelQueryResults"] = PxVehicleWheelQueryResult.prototype.set_nbWheelQueryResults = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVehicleWheelQueryResult_set_nbWheelQueryResults_1(self2, arg0);
        };
        Object.defineProperty(PxVehicleWheelQueryResult.prototype, "nbWheelQueryResults", { get: PxVehicleWheelQueryResult.prototype.get_nbWheelQueryResults, set: PxVehicleWheelQueryResult.prototype.set_nbWheelQueryResults });
        PxVehicleWheelQueryResult.prototype["__destroy__"] = PxVehicleWheelQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelQueryResult___destroy___0(self2);
        };
        function PxVehicleWheelsDynData() {
          throw "cannot construct a PxVehicleWheelsDynData, no constructor in IDL";
        }
        PxVehicleWheelsDynData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleWheelsDynData.prototype.constructor = PxVehicleWheelsDynData;
        PxVehicleWheelsDynData.prototype.__class__ = PxVehicleWheelsDynData;
        PxVehicleWheelsDynData.__cache__ = {};
        Module["PxVehicleWheelsDynData"] = PxVehicleWheelsDynData;
        PxVehicleWheelsDynData.prototype["setToRestState"] = PxVehicleWheelsDynData.prototype.setToRestState = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelsDynData_setToRestState_0(self2);
        };
        ;
        PxVehicleWheelsDynData.prototype["setWheelRotationSpeed"] = PxVehicleWheelsDynData.prototype.setWheelRotationSpeed = function(wheelIdx, speed) {
          var self2 = this.ptr;
          if (wheelIdx && typeof wheelIdx === "object")
            wheelIdx = wheelIdx.ptr;
          if (speed && typeof speed === "object")
            speed = speed.ptr;
          _emscripten_bind_PxVehicleWheelsDynData_setWheelRotationSpeed_2(self2, wheelIdx, speed);
        };
        ;
        PxVehicleWheelsDynData.prototype["getWheelRotationSpeed"] = PxVehicleWheelsDynData.prototype.getWheelRotationSpeed = function(wheelIdx) {
          var self2 = this.ptr;
          if (wheelIdx && typeof wheelIdx === "object")
            wheelIdx = wheelIdx.ptr;
          return _emscripten_bind_PxVehicleWheelsDynData_getWheelRotationSpeed_1(self2, wheelIdx);
        };
        ;
        PxVehicleWheelsDynData.prototype["setWheelRotationAngle"] = PxVehicleWheelsDynData.prototype.setWheelRotationAngle = function(wheelIdx, angle) {
          var self2 = this.ptr;
          if (wheelIdx && typeof wheelIdx === "object")
            wheelIdx = wheelIdx.ptr;
          if (angle && typeof angle === "object")
            angle = angle.ptr;
          _emscripten_bind_PxVehicleWheelsDynData_setWheelRotationAngle_2(self2, wheelIdx, angle);
        };
        ;
        PxVehicleWheelsDynData.prototype["getWheelRotationAngle"] = PxVehicleWheelsDynData.prototype.getWheelRotationAngle = function(wheelIdx) {
          var self2 = this.ptr;
          if (wheelIdx && typeof wheelIdx === "object")
            wheelIdx = wheelIdx.ptr;
          return _emscripten_bind_PxVehicleWheelsDynData_getWheelRotationAngle_1(self2, wheelIdx);
        };
        ;
        PxVehicleWheelsDynData.prototype["copy"] = PxVehicleWheelsDynData.prototype.copy = function(src, srcWheel, trgWheel) {
          var self2 = this.ptr;
          if (src && typeof src === "object")
            src = src.ptr;
          if (srcWheel && typeof srcWheel === "object")
            srcWheel = srcWheel.ptr;
          if (trgWheel && typeof trgWheel === "object")
            trgWheel = trgWheel.ptr;
          _emscripten_bind_PxVehicleWheelsDynData_copy_3(self2, src, srcWheel, trgWheel);
        };
        ;
        PxVehicleWheelsDynData.prototype["getNbWheelRotationSpeed"] = PxVehicleWheelsDynData.prototype.getNbWheelRotationSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationSpeed_0(self2);
        };
        ;
        PxVehicleWheelsDynData.prototype["getNbWheelRotationAngle"] = PxVehicleWheelsDynData.prototype.getNbWheelRotationAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsDynData_getNbWheelRotationAngle_0(self2);
        };
        ;
        PxVehicleWheelsDynData.prototype["__destroy__"] = PxVehicleWheelsDynData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelsDynData___destroy___0(self2);
        };
        function PxVehicleWheelsSimData() {
          throw "cannot construct a PxVehicleWheelsSimData, no constructor in IDL";
        }
        PxVehicleWheelsSimData.prototype = Object.create(WrapperObject.prototype);
        PxVehicleWheelsSimData.prototype.constructor = PxVehicleWheelsSimData;
        PxVehicleWheelsSimData.prototype.__class__ = PxVehicleWheelsSimData;
        PxVehicleWheelsSimData.__cache__ = {};
        Module["PxVehicleWheelsSimData"] = PxVehicleWheelsSimData;
        PxVehicleWheelsSimData.prototype["allocate"] = PxVehicleWheelsSimData.prototype.allocate = function(nbWheels) {
          var self2 = this.ptr;
          if (nbWheels && typeof nbWheels === "object")
            nbWheels = nbWheels.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_allocate_1(self2, nbWheels), PxVehicleWheelsSimData);
        };
        ;
        PxVehicleWheelsSimData.prototype["setChassisMass"] = PxVehicleWheelsSimData.prototype.setChassisMass = function(chassisMass) {
          var self2 = this.ptr;
          if (chassisMass && typeof chassisMass === "object")
            chassisMass = chassisMass.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setChassisMass_1(self2, chassisMass);
        };
        ;
        PxVehicleWheelsSimData.prototype["free"] = PxVehicleWheelsSimData.prototype.free = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_free_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["copy"] = PxVehicleWheelsSimData.prototype.copy = function(src, srcWheel, trgWheel) {
          var self2 = this.ptr;
          if (src && typeof src === "object")
            src = src.ptr;
          if (srcWheel && typeof srcWheel === "object")
            srcWheel = srcWheel.ptr;
          if (trgWheel && typeof trgWheel === "object")
            trgWheel = trgWheel.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_copy_3(self2, src, srcWheel, trgWheel);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbWheels"] = PxVehicleWheelsSimData.prototype.getNbWheels = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbWheels_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getSuspensionData"] = PxVehicleWheelsSimData.prototype.getSuspensionData = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getSuspensionData_1(self2, id), PxVehicleSuspensionData);
        };
        ;
        PxVehicleWheelsSimData.prototype["getWheelData"] = PxVehicleWheelsSimData.prototype.getWheelData = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getWheelData_1(self2, id), PxVehicleWheelData);
        };
        ;
        PxVehicleWheelsSimData.prototype["getTireData"] = PxVehicleWheelsSimData.prototype.getTireData = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getTireData_1(self2, id), PxVehicleTireData);
        };
        ;
        PxVehicleWheelsSimData.prototype["getSuspTravelDirection"] = PxVehicleWheelsSimData.prototype.getSuspTravelDirection = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getSuspTravelDirection_1(self2, id), PxVec3);
        };
        ;
        PxVehicleWheelsSimData.prototype["getSuspForceAppPointOffset"] = PxVehicleWheelsSimData.prototype.getSuspForceAppPointOffset = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getSuspForceAppPointOffset_1(self2, id), PxVec3);
        };
        ;
        PxVehicleWheelsSimData.prototype["getTireForceAppPointOffset"] = PxVehicleWheelsSimData.prototype.getTireForceAppPointOffset = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getTireForceAppPointOffset_1(self2, id), PxVec3);
        };
        ;
        PxVehicleWheelsSimData.prototype["getWheelCentreOffset"] = PxVehicleWheelsSimData.prototype.getWheelCentreOffset = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getWheelCentreOffset_1(self2, id), PxVec3);
        };
        ;
        PxVehicleWheelsSimData.prototype["getWheelShapeMapping"] = PxVehicleWheelsSimData.prototype.getWheelShapeMapping = function(wheelId) {
          var self2 = this.ptr;
          if (wheelId && typeof wheelId === "object")
            wheelId = wheelId.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getWheelShapeMapping_1(self2, wheelId);
        };
        ;
        PxVehicleWheelsSimData.prototype["getSceneQueryFilterData"] = PxVehicleWheelsSimData.prototype.getSceneQueryFilterData = function(suspId) {
          var self2 = this.ptr;
          if (suspId && typeof suspId === "object")
            suspId = suspId.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getSceneQueryFilterData_1(self2, suspId), PxFilterData);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbAntiRollBars"] = PxVehicleWheelsSimData.prototype.getNbAntiRollBars = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getAntiRollBarData"] = PxVehicleWheelsSimData.prototype.getAntiRollBarData = function(antiRollId) {
          var self2 = this.ptr;
          if (antiRollId && typeof antiRollId === "object")
            antiRollId = antiRollId.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getAntiRollBarData_1(self2, antiRollId), PxVehicleAntiRollBarData);
        };
        ;
        PxVehicleWheelsSimData.prototype["getTireLoadFilterData"] = PxVehicleWheelsSimData.prototype.getTireLoadFilterData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getTireLoadFilterData_0(self2), PxVehicleTireLoadFilterData);
        };
        ;
        PxVehicleWheelsSimData.prototype["setSuspensionData"] = PxVehicleWheelsSimData.prototype.setSuspensionData = function(id, susp) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (susp && typeof susp === "object")
            susp = susp.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setSuspensionData_2(self2, id, susp);
        };
        ;
        PxVehicleWheelsSimData.prototype["setWheelData"] = PxVehicleWheelsSimData.prototype.setWheelData = function(id, wheel) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (wheel && typeof wheel === "object")
            wheel = wheel.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setWheelData_2(self2, id, wheel);
        };
        ;
        PxVehicleWheelsSimData.prototype["setTireData"] = PxVehicleWheelsSimData.prototype.setTireData = function(id, tire) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (tire && typeof tire === "object")
            tire = tire.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setTireData_2(self2, id, tire);
        };
        ;
        PxVehicleWheelsSimData.prototype["setSuspTravelDirection"] = PxVehicleWheelsSimData.prototype.setSuspTravelDirection = function(id, dir) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (dir && typeof dir === "object")
            dir = dir.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setSuspTravelDirection_2(self2, id, dir);
        };
        ;
        PxVehicleWheelsSimData.prototype["setSuspForceAppPointOffset"] = PxVehicleWheelsSimData.prototype.setSuspForceAppPointOffset = function(id, offset) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setSuspForceAppPointOffset_2(self2, id, offset);
        };
        ;
        PxVehicleWheelsSimData.prototype["setTireForceAppPointOffset"] = PxVehicleWheelsSimData.prototype.setTireForceAppPointOffset = function(id, offset) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setTireForceAppPointOffset_2(self2, id, offset);
        };
        ;
        PxVehicleWheelsSimData.prototype["setWheelCentreOffset"] = PxVehicleWheelsSimData.prototype.setWheelCentreOffset = function(id, offset) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setWheelCentreOffset_2(self2, id, offset);
        };
        ;
        PxVehicleWheelsSimData.prototype["setWheelShapeMapping"] = PxVehicleWheelsSimData.prototype.setWheelShapeMapping = function(wheelId, shapeId) {
          var self2 = this.ptr;
          if (wheelId && typeof wheelId === "object")
            wheelId = wheelId.ptr;
          if (shapeId && typeof shapeId === "object")
            shapeId = shapeId.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setWheelShapeMapping_2(self2, wheelId, shapeId);
        };
        ;
        PxVehicleWheelsSimData.prototype["setSceneQueryFilterData"] = PxVehicleWheelsSimData.prototype.setSceneQueryFilterData = function(suspId, sqFilterData) {
          var self2 = this.ptr;
          if (suspId && typeof suspId === "object")
            suspId = suspId.ptr;
          if (sqFilterData && typeof sqFilterData === "object")
            sqFilterData = sqFilterData.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setSceneQueryFilterData_2(self2, suspId, sqFilterData);
        };
        ;
        PxVehicleWheelsSimData.prototype["setTireLoadFilterData"] = PxVehicleWheelsSimData.prototype.setTireLoadFilterData = function(tireLoadFilter) {
          var self2 = this.ptr;
          if (tireLoadFilter && typeof tireLoadFilter === "object")
            tireLoadFilter = tireLoadFilter.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setTireLoadFilterData_1(self2, tireLoadFilter);
        };
        ;
        PxVehicleWheelsSimData.prototype["addAntiRollBarData"] = PxVehicleWheelsSimData.prototype.addAntiRollBarData = function(antiRoll) {
          var self2 = this.ptr;
          if (antiRoll && typeof antiRoll === "object")
            antiRoll = antiRoll.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_addAntiRollBarData_1(self2, antiRoll);
        };
        ;
        PxVehicleWheelsSimData.prototype["disableWheel"] = PxVehicleWheelsSimData.prototype.disableWheel = function(wheel) {
          var self2 = this.ptr;
          if (wheel && typeof wheel === "object")
            wheel = wheel.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_disableWheel_1(self2, wheel);
        };
        ;
        PxVehicleWheelsSimData.prototype["enableWheel"] = PxVehicleWheelsSimData.prototype.enableWheel = function(wheel) {
          var self2 = this.ptr;
          if (wheel && typeof wheel === "object")
            wheel = wheel.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_enableWheel_1(self2, wheel);
        };
        ;
        PxVehicleWheelsSimData.prototype["getIsWheelDisabled"] = PxVehicleWheelsSimData.prototype.getIsWheelDisabled = function(wheel) {
          var self2 = this.ptr;
          if (wheel && typeof wheel === "object")
            wheel = wheel.ptr;
          return !!_emscripten_bind_PxVehicleWheelsSimData_getIsWheelDisabled_1(self2, wheel);
        };
        ;
        PxVehicleWheelsSimData.prototype["setSubStepCount"] = PxVehicleWheelsSimData.prototype.setSubStepCount = function(thresholdLongitudinalSpeed, lowForwardSpeedSubStepCount, highForwardSpeedSubStepCount) {
          var self2 = this.ptr;
          if (thresholdLongitudinalSpeed && typeof thresholdLongitudinalSpeed === "object")
            thresholdLongitudinalSpeed = thresholdLongitudinalSpeed.ptr;
          if (lowForwardSpeedSubStepCount && typeof lowForwardSpeedSubStepCount === "object")
            lowForwardSpeedSubStepCount = lowForwardSpeedSubStepCount.ptr;
          if (highForwardSpeedSubStepCount && typeof highForwardSpeedSubStepCount === "object")
            highForwardSpeedSubStepCount = highForwardSpeedSubStepCount.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setSubStepCount_3(self2, thresholdLongitudinalSpeed, lowForwardSpeedSubStepCount, highForwardSpeedSubStepCount);
        };
        ;
        PxVehicleWheelsSimData.prototype["setMinLongSlipDenominator"] = PxVehicleWheelsSimData.prototype.setMinLongSlipDenominator = function(minLongSlipDenominator) {
          var self2 = this.ptr;
          if (minLongSlipDenominator && typeof minLongSlipDenominator === "object")
            minLongSlipDenominator = minLongSlipDenominator.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setMinLongSlipDenominator_1(self2, minLongSlipDenominator);
        };
        ;
        PxVehicleWheelsSimData.prototype["setFlags"] = PxVehicleWheelsSimData.prototype.setFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setFlags_1(self2, flags);
        };
        ;
        PxVehicleWheelsSimData.prototype["getFlags"] = PxVehicleWheelsSimData.prototype.getFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxVehicleWheelsSimData_getFlags_0(self2), PxVehicleWheelsSimFlags);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbWheels4"] = PxVehicleWheelsSimData.prototype.getNbWheels4 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbWheels4_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbSuspensionData"] = PxVehicleWheelsSimData.prototype.getNbSuspensionData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbSuspensionData_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbWheelData"] = PxVehicleWheelsSimData.prototype.getNbWheelData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbWheelData_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbSuspTravelDirection"] = PxVehicleWheelsSimData.prototype.getNbSuspTravelDirection = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbSuspTravelDirection_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbTireData"] = PxVehicleWheelsSimData.prototype.getNbTireData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbTireData_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbSuspForceAppPointOffset"] = PxVehicleWheelsSimData.prototype.getNbSuspForceAppPointOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbSuspForceAppPointOffset_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbTireForceAppPointOffset"] = PxVehicleWheelsSimData.prototype.getNbTireForceAppPointOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbTireForceAppPointOffset_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbWheelCentreOffset"] = PxVehicleWheelsSimData.prototype.getNbWheelCentreOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbWheelCentreOffset_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbWheelShapeMapping"] = PxVehicleWheelsSimData.prototype.getNbWheelShapeMapping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbWheelShapeMapping_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbSceneQueryFilterData"] = PxVehicleWheelsSimData.prototype.getNbSceneQueryFilterData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbSceneQueryFilterData_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getMinLongSlipDenominator"] = PxVehicleWheelsSimData.prototype.getMinLongSlipDenominator = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getMinLongSlipDenominator_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["setThresholdLongSpeed"] = PxVehicleWheelsSimData.prototype.setThresholdLongSpeed = function(f) {
          var self2 = this.ptr;
          if (f && typeof f === "object")
            f = f.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setThresholdLongSpeed_1(self2, f);
        };
        ;
        PxVehicleWheelsSimData.prototype["getThresholdLongSpeed"] = PxVehicleWheelsSimData.prototype.getThresholdLongSpeed = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getThresholdLongSpeed_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["setLowForwardSpeedSubStepCount"] = PxVehicleWheelsSimData.prototype.setLowForwardSpeedSubStepCount = function(f) {
          var self2 = this.ptr;
          if (f && typeof f === "object")
            f = f.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setLowForwardSpeedSubStepCount_1(self2, f);
        };
        ;
        PxVehicleWheelsSimData.prototype["getLowForwardSpeedSubStepCount"] = PxVehicleWheelsSimData.prototype.getLowForwardSpeedSubStepCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getLowForwardSpeedSubStepCount_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["setHighForwardSpeedSubStepCount"] = PxVehicleWheelsSimData.prototype.setHighForwardSpeedSubStepCount = function(f) {
          var self2 = this.ptr;
          if (f && typeof f === "object")
            f = f.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setHighForwardSpeedSubStepCount_1(self2, f);
        };
        ;
        PxVehicleWheelsSimData.prototype["getHighForwardSpeedSubStepCount"] = PxVehicleWheelsSimData.prototype.getHighForwardSpeedSubStepCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getHighForwardSpeedSubStepCount_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["setWheelEnabledState"] = PxVehicleWheelsSimData.prototype.setWheelEnabledState = function(wheel, state) {
          var self2 = this.ptr;
          if (wheel && typeof wheel === "object")
            wheel = wheel.ptr;
          if (state && typeof state === "object")
            state = state.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setWheelEnabledState_2(self2, wheel, state);
        };
        ;
        PxVehicleWheelsSimData.prototype["getWheelEnabledState"] = PxVehicleWheelsSimData.prototype.getWheelEnabledState = function(wheel) {
          var self2 = this.ptr;
          if (wheel && typeof wheel === "object")
            wheel = wheel.ptr;
          return !!_emscripten_bind_PxVehicleWheelsSimData_getWheelEnabledState_1(self2, wheel);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbWheelEnabledState"] = PxVehicleWheelsSimData.prototype.getNbWheelEnabledState = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbWheelEnabledState_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbAntiRollBars4"] = PxVehicleWheelsSimData.prototype.getNbAntiRollBars4 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBars4_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["getNbAntiRollBarData"] = PxVehicleWheelsSimData.prototype.getNbAntiRollBarData = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVehicleWheelsSimData_getNbAntiRollBarData_0(self2);
        };
        ;
        PxVehicleWheelsSimData.prototype["setAntiRollBarData"] = PxVehicleWheelsSimData.prototype.setAntiRollBarData = function(id, antiRoll) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (antiRoll && typeof antiRoll === "object")
            antiRoll = antiRoll.ptr;
          _emscripten_bind_PxVehicleWheelsSimData_setAntiRollBarData_2(self2, id, antiRoll);
        };
        ;
        PxVehicleWheelsSimData.prototype["__destroy__"] = PxVehicleWheelsSimData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelsSimData___destroy___0(self2);
        };
        function PxVehicleWheelsSimFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxVehicleWheelsSimFlags_PxVehicleWheelsSimFlags_1(flags);
          getCache(PxVehicleWheelsSimFlags)[this.ptr] = this;
        }
        ;
        ;
        PxVehicleWheelsSimFlags.prototype = Object.create(WrapperObject.prototype);
        PxVehicleWheelsSimFlags.prototype.constructor = PxVehicleWheelsSimFlags;
        PxVehicleWheelsSimFlags.prototype.__class__ = PxVehicleWheelsSimFlags;
        PxVehicleWheelsSimFlags.__cache__ = {};
        Module["PxVehicleWheelsSimFlags"] = PxVehicleWheelsSimFlags;
        PxVehicleWheelsSimFlags.prototype["isSet"] = PxVehicleWheelsSimFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxVehicleWheelsSimFlags_isSet_1(self2, flag);
        };
        ;
        PxVehicleWheelsSimFlags.prototype["set"] = PxVehicleWheelsSimFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxVehicleWheelsSimFlags_set_1(self2, flag);
        };
        ;
        PxVehicleWheelsSimFlags.prototype["clear"] = PxVehicleWheelsSimFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxVehicleWheelsSimFlags_clear_1(self2, flag);
        };
        ;
        PxVehicleWheelsSimFlags.prototype["__destroy__"] = PxVehicleWheelsSimFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelsSimFlags___destroy___0(self2);
        };
        function PxWheelQueryResult() {
          this.ptr = _emscripten_bind_PxWheelQueryResult_PxWheelQueryResult_0();
          getCache(PxWheelQueryResult)[this.ptr] = this;
        }
        ;
        ;
        PxWheelQueryResult.prototype = Object.create(WrapperObject.prototype);
        PxWheelQueryResult.prototype.constructor = PxWheelQueryResult;
        PxWheelQueryResult.prototype.__class__ = PxWheelQueryResult;
        PxWheelQueryResult.__cache__ = {};
        Module["PxWheelQueryResult"] = PxWheelQueryResult;
        PxWheelQueryResult.prototype["get_suspLineStart"] = PxWheelQueryResult.prototype.get_suspLineStart = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_suspLineStart_0(self2), PxVec3);
        };
        PxWheelQueryResult.prototype["set_suspLineStart"] = PxWheelQueryResult.prototype.set_suspLineStart = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_suspLineStart_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "suspLineStart", { get: PxWheelQueryResult.prototype.get_suspLineStart, set: PxWheelQueryResult.prototype.set_suspLineStart });
        PxWheelQueryResult.prototype["get_suspLineDir"] = PxWheelQueryResult.prototype.get_suspLineDir = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_suspLineDir_0(self2), PxVec3);
        };
        PxWheelQueryResult.prototype["set_suspLineDir"] = PxWheelQueryResult.prototype.set_suspLineDir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_suspLineDir_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "suspLineDir", { get: PxWheelQueryResult.prototype.get_suspLineDir, set: PxWheelQueryResult.prototype.set_suspLineDir });
        PxWheelQueryResult.prototype["get_suspLineLength"] = PxWheelQueryResult.prototype.get_suspLineLength = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_suspLineLength_0(self2);
        };
        PxWheelQueryResult.prototype["set_suspLineLength"] = PxWheelQueryResult.prototype.set_suspLineLength = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_suspLineLength_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "suspLineLength", { get: PxWheelQueryResult.prototype.get_suspLineLength, set: PxWheelQueryResult.prototype.set_suspLineLength });
        PxWheelQueryResult.prototype["get_isInAir"] = PxWheelQueryResult.prototype.get_isInAir = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxWheelQueryResult_get_isInAir_0(self2);
        };
        PxWheelQueryResult.prototype["set_isInAir"] = PxWheelQueryResult.prototype.set_isInAir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_isInAir_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "isInAir", { get: PxWheelQueryResult.prototype.get_isInAir, set: PxWheelQueryResult.prototype.set_isInAir });
        PxWheelQueryResult.prototype["get_tireContactActor"] = PxWheelQueryResult.prototype.get_tireContactActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_tireContactActor_0(self2), PxActor);
        };
        PxWheelQueryResult.prototype["set_tireContactActor"] = PxWheelQueryResult.prototype.set_tireContactActor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireContactActor_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireContactActor", { get: PxWheelQueryResult.prototype.get_tireContactActor, set: PxWheelQueryResult.prototype.set_tireContactActor });
        PxWheelQueryResult.prototype["get_tireContactShape"] = PxWheelQueryResult.prototype.get_tireContactShape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_tireContactShape_0(self2), PxShape);
        };
        PxWheelQueryResult.prototype["set_tireContactShape"] = PxWheelQueryResult.prototype.set_tireContactShape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireContactShape_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireContactShape", { get: PxWheelQueryResult.prototype.get_tireContactShape, set: PxWheelQueryResult.prototype.set_tireContactShape });
        PxWheelQueryResult.prototype["get_tireSurfaceMaterial"] = PxWheelQueryResult.prototype.get_tireSurfaceMaterial = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_tireSurfaceMaterial_0(self2), PxMaterial);
        };
        PxWheelQueryResult.prototype["set_tireSurfaceMaterial"] = PxWheelQueryResult.prototype.set_tireSurfaceMaterial = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireSurfaceMaterial_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireSurfaceMaterial", { get: PxWheelQueryResult.prototype.get_tireSurfaceMaterial, set: PxWheelQueryResult.prototype.set_tireSurfaceMaterial });
        PxWheelQueryResult.prototype["get_tireSurfaceType"] = PxWheelQueryResult.prototype.get_tireSurfaceType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_tireSurfaceType_0(self2);
        };
        PxWheelQueryResult.prototype["set_tireSurfaceType"] = PxWheelQueryResult.prototype.set_tireSurfaceType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireSurfaceType_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireSurfaceType", { get: PxWheelQueryResult.prototype.get_tireSurfaceType, set: PxWheelQueryResult.prototype.set_tireSurfaceType });
        PxWheelQueryResult.prototype["get_tireContactPoint"] = PxWheelQueryResult.prototype.get_tireContactPoint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_tireContactPoint_0(self2), PxVec3);
        };
        PxWheelQueryResult.prototype["set_tireContactPoint"] = PxWheelQueryResult.prototype.set_tireContactPoint = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireContactPoint_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireContactPoint", { get: PxWheelQueryResult.prototype.get_tireContactPoint, set: PxWheelQueryResult.prototype.set_tireContactPoint });
        PxWheelQueryResult.prototype["get_tireContactNormal"] = PxWheelQueryResult.prototype.get_tireContactNormal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_tireContactNormal_0(self2), PxVec3);
        };
        PxWheelQueryResult.prototype["set_tireContactNormal"] = PxWheelQueryResult.prototype.set_tireContactNormal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireContactNormal_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireContactNormal", { get: PxWheelQueryResult.prototype.get_tireContactNormal, set: PxWheelQueryResult.prototype.set_tireContactNormal });
        PxWheelQueryResult.prototype["get_tireFriction"] = PxWheelQueryResult.prototype.get_tireFriction = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_tireFriction_0(self2);
        };
        PxWheelQueryResult.prototype["set_tireFriction"] = PxWheelQueryResult.prototype.set_tireFriction = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireFriction_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireFriction", { get: PxWheelQueryResult.prototype.get_tireFriction, set: PxWheelQueryResult.prototype.set_tireFriction });
        PxWheelQueryResult.prototype["get_suspJounce"] = PxWheelQueryResult.prototype.get_suspJounce = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_suspJounce_0(self2);
        };
        PxWheelQueryResult.prototype["set_suspJounce"] = PxWheelQueryResult.prototype.set_suspJounce = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_suspJounce_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "suspJounce", { get: PxWheelQueryResult.prototype.get_suspJounce, set: PxWheelQueryResult.prototype.set_suspJounce });
        PxWheelQueryResult.prototype["get_suspSpringForce"] = PxWheelQueryResult.prototype.get_suspSpringForce = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_suspSpringForce_0(self2);
        };
        PxWheelQueryResult.prototype["set_suspSpringForce"] = PxWheelQueryResult.prototype.set_suspSpringForce = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_suspSpringForce_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "suspSpringForce", { get: PxWheelQueryResult.prototype.get_suspSpringForce, set: PxWheelQueryResult.prototype.set_suspSpringForce });
        PxWheelQueryResult.prototype["get_tireLongitudinalDir"] = PxWheelQueryResult.prototype.get_tireLongitudinalDir = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_tireLongitudinalDir_0(self2), PxVec3);
        };
        PxWheelQueryResult.prototype["set_tireLongitudinalDir"] = PxWheelQueryResult.prototype.set_tireLongitudinalDir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireLongitudinalDir_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireLongitudinalDir", { get: PxWheelQueryResult.prototype.get_tireLongitudinalDir, set: PxWheelQueryResult.prototype.set_tireLongitudinalDir });
        PxWheelQueryResult.prototype["get_tireLateralDir"] = PxWheelQueryResult.prototype.get_tireLateralDir = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_tireLateralDir_0(self2), PxVec3);
        };
        PxWheelQueryResult.prototype["set_tireLateralDir"] = PxWheelQueryResult.prototype.set_tireLateralDir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_tireLateralDir_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "tireLateralDir", { get: PxWheelQueryResult.prototype.get_tireLateralDir, set: PxWheelQueryResult.prototype.set_tireLateralDir });
        PxWheelQueryResult.prototype["get_longitudinalSlip"] = PxWheelQueryResult.prototype.get_longitudinalSlip = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_longitudinalSlip_0(self2);
        };
        PxWheelQueryResult.prototype["set_longitudinalSlip"] = PxWheelQueryResult.prototype.set_longitudinalSlip = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_longitudinalSlip_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "longitudinalSlip", { get: PxWheelQueryResult.prototype.get_longitudinalSlip, set: PxWheelQueryResult.prototype.set_longitudinalSlip });
        PxWheelQueryResult.prototype["get_lateralSlip"] = PxWheelQueryResult.prototype.get_lateralSlip = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_lateralSlip_0(self2);
        };
        PxWheelQueryResult.prototype["set_lateralSlip"] = PxWheelQueryResult.prototype.set_lateralSlip = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_lateralSlip_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "lateralSlip", { get: PxWheelQueryResult.prototype.get_lateralSlip, set: PxWheelQueryResult.prototype.set_lateralSlip });
        PxWheelQueryResult.prototype["get_steerAngle"] = PxWheelQueryResult.prototype.get_steerAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxWheelQueryResult_get_steerAngle_0(self2);
        };
        PxWheelQueryResult.prototype["set_steerAngle"] = PxWheelQueryResult.prototype.set_steerAngle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_steerAngle_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "steerAngle", { get: PxWheelQueryResult.prototype.get_steerAngle, set: PxWheelQueryResult.prototype.set_steerAngle });
        PxWheelQueryResult.prototype["get_localPose"] = PxWheelQueryResult.prototype.get_localPose = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxWheelQueryResult_get_localPose_0(self2), PxTransform);
        };
        PxWheelQueryResult.prototype["set_localPose"] = PxWheelQueryResult.prototype.set_localPose = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxWheelQueryResult_set_localPose_1(self2, arg0);
        };
        Object.defineProperty(PxWheelQueryResult.prototype, "localPose", { get: PxWheelQueryResult.prototype.get_localPose, set: PxWheelQueryResult.prototype.set_localPose });
        PxWheelQueryResult.prototype["__destroy__"] = PxWheelQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxWheelQueryResult___destroy___0(self2);
        };
        function PxBoxGeometry(hx, hy, hz) {
          if (hx && typeof hx === "object")
            hx = hx.ptr;
          if (hy && typeof hy === "object")
            hy = hy.ptr;
          if (hz && typeof hz === "object")
            hz = hz.ptr;
          this.ptr = _emscripten_bind_PxBoxGeometry_PxBoxGeometry_3(hx, hy, hz);
          getCache(PxBoxGeometry)[this.ptr] = this;
        }
        ;
        ;
        PxBoxGeometry.prototype = Object.create(PxGeometry.prototype);
        PxBoxGeometry.prototype.constructor = PxBoxGeometry;
        PxBoxGeometry.prototype.__class__ = PxBoxGeometry;
        PxBoxGeometry.__cache__ = {};
        Module["PxBoxGeometry"] = PxBoxGeometry;
        PxBoxGeometry.prototype["isValid"] = PxBoxGeometry.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBoxGeometry_isValid_0(self2);
        };
        ;
        PxBoxGeometry.prototype["getType"] = PxBoxGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxGeometry_getType_0(self2);
        };
        ;
        PxBoxGeometry.prototype["get_halfExtents"] = PxBoxGeometry.prototype.get_halfExtents = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxGeometry_get_halfExtents_0(self2), PxVec3);
        };
        PxBoxGeometry.prototype["set_halfExtents"] = PxBoxGeometry.prototype.set_halfExtents = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxGeometry_set_halfExtents_1(self2, arg0);
        };
        Object.defineProperty(PxBoxGeometry.prototype, "halfExtents", { get: PxBoxGeometry.prototype.get_halfExtents, set: PxBoxGeometry.prototype.set_halfExtents });
        PxBoxGeometry.prototype["__destroy__"] = PxBoxGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBoxGeometry___destroy___0(self2);
        };
        function PxBVHStructure() {
          throw "cannot construct a PxBVHStructure, no constructor in IDL";
        }
        PxBVHStructure.prototype = Object.create(PxBase.prototype);
        PxBVHStructure.prototype.constructor = PxBVHStructure;
        PxBVHStructure.prototype.__class__ = PxBVHStructure;
        PxBVHStructure.__cache__ = {};
        Module["PxBVHStructure"] = PxBVHStructure;
        PxBVHStructure.prototype["getConcreteTypeName"] = PxBVHStructure.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxBVHStructure_getConcreteTypeName_0(self2));
        };
        ;
        PxBVHStructure.prototype["getConcreteType"] = PxBVHStructure.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBVHStructure_getConcreteType_0(self2);
        };
        ;
        PxBVHStructure.prototype["setBaseFlag"] = PxBVHStructure.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxBVHStructure_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxBVHStructure.prototype["setBaseFlags"] = PxBVHStructure.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxBVHStructure_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxBVHStructure.prototype["getBaseFlags"] = PxBVHStructure.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBVHStructure_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxBVHStructure.prototype["isReleasable"] = PxBVHStructure.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBVHStructure_isReleasable_0(self2);
        };
        ;
        function PxCapsuleGeometry(radius, halfHeight) {
          if (radius && typeof radius === "object")
            radius = radius.ptr;
          if (halfHeight && typeof halfHeight === "object")
            halfHeight = halfHeight.ptr;
          this.ptr = _emscripten_bind_PxCapsuleGeometry_PxCapsuleGeometry_2(radius, halfHeight);
          getCache(PxCapsuleGeometry)[this.ptr] = this;
        }
        ;
        ;
        PxCapsuleGeometry.prototype = Object.create(PxGeometry.prototype);
        PxCapsuleGeometry.prototype.constructor = PxCapsuleGeometry;
        PxCapsuleGeometry.prototype.__class__ = PxCapsuleGeometry;
        PxCapsuleGeometry.__cache__ = {};
        Module["PxCapsuleGeometry"] = PxCapsuleGeometry;
        PxCapsuleGeometry.prototype["isValid"] = PxCapsuleGeometry.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCapsuleGeometry_isValid_0(self2);
        };
        ;
        PxCapsuleGeometry.prototype["getType"] = PxCapsuleGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleGeometry_getType_0(self2);
        };
        ;
        PxCapsuleGeometry.prototype["get_radius"] = PxCapsuleGeometry.prototype.get_radius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleGeometry_get_radius_0(self2);
        };
        PxCapsuleGeometry.prototype["set_radius"] = PxCapsuleGeometry.prototype.set_radius = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleGeometry_set_radius_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleGeometry.prototype, "radius", { get: PxCapsuleGeometry.prototype.get_radius, set: PxCapsuleGeometry.prototype.set_radius });
        PxCapsuleGeometry.prototype["get_halfHeight"] = PxCapsuleGeometry.prototype.get_halfHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleGeometry_get_halfHeight_0(self2);
        };
        PxCapsuleGeometry.prototype["set_halfHeight"] = PxCapsuleGeometry.prototype.set_halfHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleGeometry_set_halfHeight_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleGeometry.prototype, "halfHeight", { get: PxCapsuleGeometry.prototype.get_halfHeight, set: PxCapsuleGeometry.prototype.set_halfHeight });
        PxCapsuleGeometry.prototype["__destroy__"] = PxCapsuleGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCapsuleGeometry___destroy___0(self2);
        };
        function PxConvexMesh() {
          throw "cannot construct a PxConvexMesh, no constructor in IDL";
        }
        PxConvexMesh.prototype = Object.create(PxBase.prototype);
        PxConvexMesh.prototype.constructor = PxConvexMesh;
        PxConvexMesh.prototype.__class__ = PxConvexMesh;
        PxConvexMesh.__cache__ = {};
        Module["PxConvexMesh"] = PxConvexMesh;
        PxConvexMesh.prototype["getNbVertices"] = PxConvexMesh.prototype.getNbVertices = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConvexMesh_getNbVertices_0(self2);
        };
        ;
        PxConvexMesh.prototype["getVertices"] = PxConvexMesh.prototype.getVertices = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConvexMesh_getVertices_0(self2), PxVec3);
        };
        ;
        PxConvexMesh.prototype["getIndexBuffer"] = PxConvexMesh.prototype.getIndexBuffer = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConvexMesh_getIndexBuffer_0(self2), PxU8ConstPtr);
        };
        ;
        PxConvexMesh.prototype["getNbPolygons"] = PxConvexMesh.prototype.getNbPolygons = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConvexMesh_getNbPolygons_0(self2);
        };
        ;
        PxConvexMesh.prototype["getPolygonData"] = PxConvexMesh.prototype.getPolygonData = function(index, data) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          if (data && typeof data === "object")
            data = data.ptr;
          return !!_emscripten_bind_PxConvexMesh_getPolygonData_2(self2, index, data);
        };
        ;
        PxConvexMesh.prototype["getReferenceCount"] = PxConvexMesh.prototype.getReferenceCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConvexMesh_getReferenceCount_0(self2);
        };
        ;
        PxConvexMesh.prototype["acquireReference"] = PxConvexMesh.prototype.acquireReference = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConvexMesh_acquireReference_0(self2);
        };
        ;
        PxConvexMesh.prototype["getLocalBounds"] = PxConvexMesh.prototype.getLocalBounds = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConvexMesh_getLocalBounds_0(self2), PxBounds3);
        };
        ;
        PxConvexMesh.prototype["isGpuCompatible"] = PxConvexMesh.prototype.isGpuCompatible = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxConvexMesh_isGpuCompatible_0(self2);
        };
        ;
        PxConvexMesh.prototype["getConcreteTypeName"] = PxConvexMesh.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxConvexMesh_getConcreteTypeName_0(self2));
        };
        ;
        PxConvexMesh.prototype["getConcreteType"] = PxConvexMesh.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConvexMesh_getConcreteType_0(self2);
        };
        ;
        PxConvexMesh.prototype["setBaseFlag"] = PxConvexMesh.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxConvexMesh_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxConvexMesh.prototype["setBaseFlags"] = PxConvexMesh.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxConvexMesh_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxConvexMesh.prototype["getBaseFlags"] = PxConvexMesh.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConvexMesh_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxConvexMesh.prototype["isReleasable"] = PxConvexMesh.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxConvexMesh_isReleasable_0(self2);
        };
        ;
        function PxConvexMeshGeometry(mesh, scaling, flags) {
          if (mesh && typeof mesh === "object")
            mesh = mesh.ptr;
          if (scaling && typeof scaling === "object")
            scaling = scaling.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          if (scaling === void 0) {
            this.ptr = _emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_1(mesh);
            getCache(PxConvexMeshGeometry)[this.ptr] = this;
            return;
          }
          if (flags === void 0) {
            this.ptr = _emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_2(mesh, scaling);
            getCache(PxConvexMeshGeometry)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxConvexMeshGeometry_PxConvexMeshGeometry_3(mesh, scaling, flags);
          getCache(PxConvexMeshGeometry)[this.ptr] = this;
        }
        ;
        ;
        PxConvexMeshGeometry.prototype = Object.create(PxGeometry.prototype);
        PxConvexMeshGeometry.prototype.constructor = PxConvexMeshGeometry;
        PxConvexMeshGeometry.prototype.__class__ = PxConvexMeshGeometry;
        PxConvexMeshGeometry.__cache__ = {};
        Module["PxConvexMeshGeometry"] = PxConvexMeshGeometry;
        PxConvexMeshGeometry.prototype["isValid"] = PxConvexMeshGeometry.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxConvexMeshGeometry_isValid_0(self2);
        };
        ;
        PxConvexMeshGeometry.prototype["getType"] = PxConvexMeshGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxConvexMeshGeometry_getType_0(self2);
        };
        ;
        PxConvexMeshGeometry.prototype["get_scale"] = PxConvexMeshGeometry.prototype.get_scale = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConvexMeshGeometry_get_scale_0(self2), PxMeshScale);
        };
        PxConvexMeshGeometry.prototype["set_scale"] = PxConvexMeshGeometry.prototype.set_scale = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxConvexMeshGeometry_set_scale_1(self2, arg0);
        };
        Object.defineProperty(PxConvexMeshGeometry.prototype, "scale", { get: PxConvexMeshGeometry.prototype.get_scale, set: PxConvexMeshGeometry.prototype.set_scale });
        PxConvexMeshGeometry.prototype["__destroy__"] = PxConvexMeshGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConvexMeshGeometry___destroy___0(self2);
        };
        function PxConvexMeshGeometryFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxConvexMeshGeometryFlags_PxConvexMeshGeometryFlags_1(flags);
          getCache(PxConvexMeshGeometryFlags)[this.ptr] = this;
        }
        ;
        ;
        PxConvexMeshGeometryFlags.prototype = Object.create(WrapperObject.prototype);
        PxConvexMeshGeometryFlags.prototype.constructor = PxConvexMeshGeometryFlags;
        PxConvexMeshGeometryFlags.prototype.__class__ = PxConvexMeshGeometryFlags;
        PxConvexMeshGeometryFlags.__cache__ = {};
        Module["PxConvexMeshGeometryFlags"] = PxConvexMeshGeometryFlags;
        PxConvexMeshGeometryFlags.prototype["isSet"] = PxConvexMeshGeometryFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxConvexMeshGeometryFlags_isSet_1(self2, flag);
        };
        ;
        PxConvexMeshGeometryFlags.prototype["set"] = PxConvexMeshGeometryFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxConvexMeshGeometryFlags_set_1(self2, flag);
        };
        ;
        PxConvexMeshGeometryFlags.prototype["clear"] = PxConvexMeshGeometryFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxConvexMeshGeometryFlags_clear_1(self2, flag);
        };
        ;
        PxConvexMeshGeometryFlags.prototype["__destroy__"] = PxConvexMeshGeometryFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConvexMeshGeometryFlags___destroy___0(self2);
        };
        function PxGeometryHolder(geometry) {
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          if (geometry === void 0) {
            this.ptr = _emscripten_bind_PxGeometryHolder_PxGeometryHolder_0();
            getCache(PxGeometryHolder)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxGeometryHolder_PxGeometryHolder_1(geometry);
          getCache(PxGeometryHolder)[this.ptr] = this;
        }
        ;
        ;
        PxGeometryHolder.prototype = Object.create(WrapperObject.prototype);
        PxGeometryHolder.prototype.constructor = PxGeometryHolder;
        PxGeometryHolder.prototype.__class__ = PxGeometryHolder;
        PxGeometryHolder.__cache__ = {};
        Module["PxGeometryHolder"] = PxGeometryHolder;
        PxGeometryHolder.prototype["getType"] = PxGeometryHolder.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxGeometryHolder_getType_0(self2);
        };
        ;
        PxGeometryHolder.prototype["sphere"] = PxGeometryHolder.prototype.sphere = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxGeometryHolder_sphere_0(self2), PxSphereGeometry);
        };
        ;
        PxGeometryHolder.prototype["plane"] = PxGeometryHolder.prototype.plane = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxGeometryHolder_plane_0(self2), PxPlaneGeometry);
        };
        ;
        PxGeometryHolder.prototype["capsule"] = PxGeometryHolder.prototype.capsule = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxGeometryHolder_capsule_0(self2), PxCapsuleGeometry);
        };
        ;
        PxGeometryHolder.prototype["box"] = PxGeometryHolder.prototype.box = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxGeometryHolder_box_0(self2), PxBoxGeometry);
        };
        ;
        PxGeometryHolder.prototype["convexMesh"] = PxGeometryHolder.prototype.convexMesh = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxGeometryHolder_convexMesh_0(self2), PxConvexMeshGeometry);
        };
        ;
        PxGeometryHolder.prototype["triangleMesh"] = PxGeometryHolder.prototype.triangleMesh = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxGeometryHolder_triangleMesh_0(self2), PxTriangleMeshGeometry);
        };
        ;
        PxGeometryHolder.prototype["heightField"] = PxGeometryHolder.prototype.heightField = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxGeometryHolder_heightField_0(self2), PxHeightFieldGeometry);
        };
        ;
        PxGeometryHolder.prototype["storeAny"] = PxGeometryHolder.prototype.storeAny = function(geometry) {
          var self2 = this.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          _emscripten_bind_PxGeometryHolder_storeAny_1(self2, geometry);
        };
        ;
        PxGeometryHolder.prototype["__destroy__"] = PxGeometryHolder.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxGeometryHolder___destroy___0(self2);
        };
        function PxGeometryQuery() {
          throw "cannot construct a PxGeometryQuery, no constructor in IDL";
        }
        PxGeometryQuery.prototype = Object.create(WrapperObject.prototype);
        PxGeometryQuery.prototype.constructor = PxGeometryQuery;
        PxGeometryQuery.prototype.__class__ = PxGeometryQuery;
        PxGeometryQuery.__cache__ = {};
        Module["PxGeometryQuery"] = PxGeometryQuery;
        PxGeometryQuery.prototype["sweep"] = PxGeometryQuery.prototype.sweep = function(unitDir, maxDist, geom0, pose0, geom1, pose1, sweepHit, hitFlags, inflation) {
          var self2 = this.ptr;
          if (unitDir && typeof unitDir === "object")
            unitDir = unitDir.ptr;
          if (maxDist && typeof maxDist === "object")
            maxDist = maxDist.ptr;
          if (geom0 && typeof geom0 === "object")
            geom0 = geom0.ptr;
          if (pose0 && typeof pose0 === "object")
            pose0 = pose0.ptr;
          if (geom1 && typeof geom1 === "object")
            geom1 = geom1.ptr;
          if (pose1 && typeof pose1 === "object")
            pose1 = pose1.ptr;
          if (sweepHit && typeof sweepHit === "object")
            sweepHit = sweepHit.ptr;
          if (hitFlags && typeof hitFlags === "object")
            hitFlags = hitFlags.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (hitFlags === void 0) {
            return !!_emscripten_bind_PxGeometryQuery_sweep_7(self2, unitDir, maxDist, geom0, pose0, geom1, pose1, sweepHit);
          }
          if (inflation === void 0) {
            return !!_emscripten_bind_PxGeometryQuery_sweep_8(self2, unitDir, maxDist, geom0, pose0, geom1, pose1, sweepHit, hitFlags);
          }
          return !!_emscripten_bind_PxGeometryQuery_sweep_9(self2, unitDir, maxDist, geom0, pose0, geom1, pose1, sweepHit, hitFlags, inflation);
        };
        ;
        PxGeometryQuery.prototype["overlap"] = PxGeometryQuery.prototype.overlap = function(geom0, pose0, geom1, pose1) {
          var self2 = this.ptr;
          if (geom0 && typeof geom0 === "object")
            geom0 = geom0.ptr;
          if (pose0 && typeof pose0 === "object")
            pose0 = pose0.ptr;
          if (geom1 && typeof geom1 === "object")
            geom1 = geom1.ptr;
          if (pose1 && typeof pose1 === "object")
            pose1 = pose1.ptr;
          return !!_emscripten_bind_PxGeometryQuery_overlap_4(self2, geom0, pose0, geom1, pose1);
        };
        ;
        PxGeometryQuery.prototype["raycast"] = PxGeometryQuery.prototype.raycast = function(origin, unitDir, geom, pose, maxDist, hitFlags, maxHits, rayHits) {
          var self2 = this.ptr;
          if (origin && typeof origin === "object")
            origin = origin.ptr;
          if (unitDir && typeof unitDir === "object")
            unitDir = unitDir.ptr;
          if (geom && typeof geom === "object")
            geom = geom.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (maxDist && typeof maxDist === "object")
            maxDist = maxDist.ptr;
          if (hitFlags && typeof hitFlags === "object")
            hitFlags = hitFlags.ptr;
          if (maxHits && typeof maxHits === "object")
            maxHits = maxHits.ptr;
          if (rayHits && typeof rayHits === "object")
            rayHits = rayHits.ptr;
          return _emscripten_bind_PxGeometryQuery_raycast_8(self2, origin, unitDir, geom, pose, maxDist, hitFlags, maxHits, rayHits);
        };
        ;
        PxGeometryQuery.prototype["pointDistance"] = PxGeometryQuery.prototype.pointDistance = function(point, geom, pose, closestPoint) {
          var self2 = this.ptr;
          if (point && typeof point === "object")
            point = point.ptr;
          if (geom && typeof geom === "object")
            geom = geom.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (closestPoint && typeof closestPoint === "object")
            closestPoint = closestPoint.ptr;
          if (closestPoint === void 0) {
            return _emscripten_bind_PxGeometryQuery_pointDistance_3(self2, point, geom, pose);
          }
          return _emscripten_bind_PxGeometryQuery_pointDistance_4(self2, point, geom, pose, closestPoint);
        };
        ;
        PxGeometryQuery.prototype["getWorldBounds"] = PxGeometryQuery.prototype.getWorldBounds = function(geom, pose, inflation) {
          var self2 = this.ptr;
          if (geom && typeof geom === "object")
            geom = geom.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (inflation && typeof inflation === "object")
            inflation = inflation.ptr;
          if (inflation === void 0) {
            return wrapPointer(_emscripten_bind_PxGeometryQuery_getWorldBounds_2(self2, geom, pose), PxBounds3);
          }
          return wrapPointer(_emscripten_bind_PxGeometryQuery_getWorldBounds_3(self2, geom, pose, inflation), PxBounds3);
        };
        ;
        PxGeometryQuery.prototype["isValid"] = PxGeometryQuery.prototype.isValid = function(geom) {
          var self2 = this.ptr;
          if (geom && typeof geom === "object")
            geom = geom.ptr;
          return !!_emscripten_bind_PxGeometryQuery_isValid_1(self2, geom);
        };
        ;
        PxGeometryQuery.prototype["__destroy__"] = PxGeometryQuery.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxGeometryQuery___destroy___0(self2);
        };
        function PxHeightField() {
          throw "cannot construct a PxHeightField, no constructor in IDL";
        }
        PxHeightField.prototype = Object.create(PxBase.prototype);
        PxHeightField.prototype.constructor = PxHeightField;
        PxHeightField.prototype.__class__ = PxHeightField;
        PxHeightField.__cache__ = {};
        Module["PxHeightField"] = PxHeightField;
        PxHeightField.prototype["saveCells"] = PxHeightField.prototype.saveCells = function(destBuffer, destBufferSize) {
          var self2 = this.ptr;
          if (destBuffer && typeof destBuffer === "object")
            destBuffer = destBuffer.ptr;
          if (destBufferSize && typeof destBufferSize === "object")
            destBufferSize = destBufferSize.ptr;
          return _emscripten_bind_PxHeightField_saveCells_2(self2, destBuffer, destBufferSize);
        };
        ;
        PxHeightField.prototype["modifySamples"] = PxHeightField.prototype.modifySamples = function(startCol, startRow, subfieldDesc, shrinkBounds) {
          var self2 = this.ptr;
          if (startCol && typeof startCol === "object")
            startCol = startCol.ptr;
          if (startRow && typeof startRow === "object")
            startRow = startRow.ptr;
          if (subfieldDesc && typeof subfieldDesc === "object")
            subfieldDesc = subfieldDesc.ptr;
          if (shrinkBounds && typeof shrinkBounds === "object")
            shrinkBounds = shrinkBounds.ptr;
          if (shrinkBounds === void 0) {
            return !!_emscripten_bind_PxHeightField_modifySamples_3(self2, startCol, startRow, subfieldDesc);
          }
          return !!_emscripten_bind_PxHeightField_modifySamples_4(self2, startCol, startRow, subfieldDesc, shrinkBounds);
        };
        ;
        PxHeightField.prototype["getNbRows"] = PxHeightField.prototype.getNbRows = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getNbRows_0(self2);
        };
        ;
        PxHeightField.prototype["getNbColumns"] = PxHeightField.prototype.getNbColumns = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getNbColumns_0(self2);
        };
        ;
        PxHeightField.prototype["getFormat"] = PxHeightField.prototype.getFormat = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getFormat_0(self2);
        };
        ;
        PxHeightField.prototype["getSampleStride"] = PxHeightField.prototype.getSampleStride = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getSampleStride_0(self2);
        };
        ;
        PxHeightField.prototype["getConvexEdgeThreshold"] = PxHeightField.prototype.getConvexEdgeThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getConvexEdgeThreshold_0(self2);
        };
        ;
        PxHeightField.prototype["getFlags"] = PxHeightField.prototype.getFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxHeightField_getFlags_0(self2), PxHeightFieldFlags);
        };
        ;
        PxHeightField.prototype["getHeight"] = PxHeightField.prototype.getHeight = function(x, z) {
          var self2 = this.ptr;
          if (x && typeof x === "object")
            x = x.ptr;
          if (z && typeof z === "object")
            z = z.ptr;
          return _emscripten_bind_PxHeightField_getHeight_2(self2, x, z);
        };
        ;
        PxHeightField.prototype["getReferenceCount"] = PxHeightField.prototype.getReferenceCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getReferenceCount_0(self2);
        };
        ;
        PxHeightField.prototype["acquireReference"] = PxHeightField.prototype.acquireReference = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHeightField_acquireReference_0(self2);
        };
        ;
        PxHeightField.prototype["getTriangleMaterialIndex"] = PxHeightField.prototype.getTriangleMaterialIndex = function(triangleIndex) {
          var self2 = this.ptr;
          if (triangleIndex && typeof triangleIndex === "object")
            triangleIndex = triangleIndex.ptr;
          return _emscripten_bind_PxHeightField_getTriangleMaterialIndex_1(self2, triangleIndex);
        };
        ;
        PxHeightField.prototype["getTriangleNormal"] = PxHeightField.prototype.getTriangleNormal = function(triangleIndex) {
          var self2 = this.ptr;
          if (triangleIndex && typeof triangleIndex === "object")
            triangleIndex = triangleIndex.ptr;
          return wrapPointer(_emscripten_bind_PxHeightField_getTriangleNormal_1(self2, triangleIndex), PxVec3);
        };
        ;
        PxHeightField.prototype["getSample"] = PxHeightField.prototype.getSample = function(row, column) {
          var self2 = this.ptr;
          if (row && typeof row === "object")
            row = row.ptr;
          if (column && typeof column === "object")
            column = column.ptr;
          return wrapPointer(_emscripten_bind_PxHeightField_getSample_2(self2, row, column), PxHeightFieldSample);
        };
        ;
        PxHeightField.prototype["getTimestamp"] = PxHeightField.prototype.getTimestamp = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getTimestamp_0(self2);
        };
        ;
        PxHeightField.prototype["getConcreteTypeName"] = PxHeightField.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxHeightField_getConcreteTypeName_0(self2));
        };
        ;
        PxHeightField.prototype["getConcreteType"] = PxHeightField.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightField_getConcreteType_0(self2);
        };
        ;
        PxHeightField.prototype["setBaseFlag"] = PxHeightField.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxHeightField_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxHeightField.prototype["setBaseFlags"] = PxHeightField.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxHeightField_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxHeightField.prototype["getBaseFlags"] = PxHeightField.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxHeightField_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxHeightField.prototype["isReleasable"] = PxHeightField.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxHeightField_isReleasable_0(self2);
        };
        ;
        function PxHeightFieldDesc() {
          this.ptr = _emscripten_bind_PxHeightFieldDesc_PxHeightFieldDesc_0();
          getCache(PxHeightFieldDesc)[this.ptr] = this;
        }
        ;
        ;
        PxHeightFieldDesc.prototype = Object.create(WrapperObject.prototype);
        PxHeightFieldDesc.prototype.constructor = PxHeightFieldDesc;
        PxHeightFieldDesc.prototype.__class__ = PxHeightFieldDesc;
        PxHeightFieldDesc.__cache__ = {};
        Module["PxHeightFieldDesc"] = PxHeightFieldDesc;
        PxHeightFieldDesc.prototype["setToDefault"] = PxHeightFieldDesc.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHeightFieldDesc_setToDefault_0(self2);
        };
        ;
        PxHeightFieldDesc.prototype["isValid"] = PxHeightFieldDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxHeightFieldDesc_isValid_0(self2);
        };
        ;
        PxHeightFieldDesc.prototype["get_nbRows"] = PxHeightFieldDesc.prototype.get_nbRows = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldDesc_get_nbRows_0(self2);
        };
        PxHeightFieldDesc.prototype["set_nbRows"] = PxHeightFieldDesc.prototype.set_nbRows = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldDesc_set_nbRows_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldDesc.prototype, "nbRows", { get: PxHeightFieldDesc.prototype.get_nbRows, set: PxHeightFieldDesc.prototype.set_nbRows });
        PxHeightFieldDesc.prototype["get_nbColumns"] = PxHeightFieldDesc.prototype.get_nbColumns = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldDesc_get_nbColumns_0(self2);
        };
        PxHeightFieldDesc.prototype["set_nbColumns"] = PxHeightFieldDesc.prototype.set_nbColumns = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldDesc_set_nbColumns_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldDesc.prototype, "nbColumns", { get: PxHeightFieldDesc.prototype.get_nbColumns, set: PxHeightFieldDesc.prototype.set_nbColumns });
        PxHeightFieldDesc.prototype["get_format"] = PxHeightFieldDesc.prototype.get_format = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldDesc_get_format_0(self2);
        };
        PxHeightFieldDesc.prototype["set_format"] = PxHeightFieldDesc.prototype.set_format = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldDesc_set_format_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldDesc.prototype, "format", { get: PxHeightFieldDesc.prototype.get_format, set: PxHeightFieldDesc.prototype.set_format });
        PxHeightFieldDesc.prototype["get_samples"] = PxHeightFieldDesc.prototype.get_samples = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxHeightFieldDesc_get_samples_0(self2), PxStridedData);
        };
        PxHeightFieldDesc.prototype["set_samples"] = PxHeightFieldDesc.prototype.set_samples = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldDesc_set_samples_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldDesc.prototype, "samples", { get: PxHeightFieldDesc.prototype.get_samples, set: PxHeightFieldDesc.prototype.set_samples });
        PxHeightFieldDesc.prototype["get_convexEdgeThreshold"] = PxHeightFieldDesc.prototype.get_convexEdgeThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldDesc_get_convexEdgeThreshold_0(self2);
        };
        PxHeightFieldDesc.prototype["set_convexEdgeThreshold"] = PxHeightFieldDesc.prototype.set_convexEdgeThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldDesc_set_convexEdgeThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldDesc.prototype, "convexEdgeThreshold", { get: PxHeightFieldDesc.prototype.get_convexEdgeThreshold, set: PxHeightFieldDesc.prototype.set_convexEdgeThreshold });
        PxHeightFieldDesc.prototype["get_flags"] = PxHeightFieldDesc.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxHeightFieldDesc_get_flags_0(self2), PxHeightFieldFlags);
        };
        PxHeightFieldDesc.prototype["set_flags"] = PxHeightFieldDesc.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldDesc_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldDesc.prototype, "flags", { get: PxHeightFieldDesc.prototype.get_flags, set: PxHeightFieldDesc.prototype.set_flags });
        PxHeightFieldDesc.prototype["__destroy__"] = PxHeightFieldDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHeightFieldDesc___destroy___0(self2);
        };
        function PxHeightFieldFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxHeightFieldFlags_PxHeightFieldFlags_1(flags);
          getCache(PxHeightFieldFlags)[this.ptr] = this;
        }
        ;
        ;
        PxHeightFieldFlags.prototype = Object.create(WrapperObject.prototype);
        PxHeightFieldFlags.prototype.constructor = PxHeightFieldFlags;
        PxHeightFieldFlags.prototype.__class__ = PxHeightFieldFlags;
        PxHeightFieldFlags.__cache__ = {};
        Module["PxHeightFieldFlags"] = PxHeightFieldFlags;
        PxHeightFieldFlags.prototype["isSet"] = PxHeightFieldFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxHeightFieldFlags_isSet_1(self2, flag);
        };
        ;
        PxHeightFieldFlags.prototype["set"] = PxHeightFieldFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxHeightFieldFlags_set_1(self2, flag);
        };
        ;
        PxHeightFieldFlags.prototype["clear"] = PxHeightFieldFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxHeightFieldFlags_clear_1(self2, flag);
        };
        ;
        PxHeightFieldFlags.prototype["__destroy__"] = PxHeightFieldFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHeightFieldFlags___destroy___0(self2);
        };
        function PxHeightFieldGeometry(hf, flags, heightScale, rowScale, columnScale) {
          if (hf && typeof hf === "object")
            hf = hf.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          if (heightScale && typeof heightScale === "object")
            heightScale = heightScale.ptr;
          if (rowScale && typeof rowScale === "object")
            rowScale = rowScale.ptr;
          if (columnScale && typeof columnScale === "object")
            columnScale = columnScale.ptr;
          if (hf === void 0) {
            this.ptr = _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_0();
            getCache(PxHeightFieldGeometry)[this.ptr] = this;
            return;
          }
          if (flags === void 0) {
            this.ptr = _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_1(hf);
            getCache(PxHeightFieldGeometry)[this.ptr] = this;
            return;
          }
          if (heightScale === void 0) {
            this.ptr = _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_2(hf, flags);
            getCache(PxHeightFieldGeometry)[this.ptr] = this;
            return;
          }
          if (rowScale === void 0) {
            this.ptr = _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_3(hf, flags, heightScale);
            getCache(PxHeightFieldGeometry)[this.ptr] = this;
            return;
          }
          if (columnScale === void 0) {
            this.ptr = _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_4(hf, flags, heightScale, rowScale);
            getCache(PxHeightFieldGeometry)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxHeightFieldGeometry_PxHeightFieldGeometry_5(hf, flags, heightScale, rowScale, columnScale);
          getCache(PxHeightFieldGeometry)[this.ptr] = this;
        }
        ;
        ;
        PxHeightFieldGeometry.prototype = Object.create(PxGeometry.prototype);
        PxHeightFieldGeometry.prototype.constructor = PxHeightFieldGeometry;
        PxHeightFieldGeometry.prototype.__class__ = PxHeightFieldGeometry;
        PxHeightFieldGeometry.__cache__ = {};
        Module["PxHeightFieldGeometry"] = PxHeightFieldGeometry;
        PxHeightFieldGeometry.prototype["isValid"] = PxHeightFieldGeometry.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxHeightFieldGeometry_isValid_0(self2);
        };
        ;
        PxHeightFieldGeometry.prototype["getType"] = PxHeightFieldGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldGeometry_getType_0(self2);
        };
        ;
        PxHeightFieldGeometry.prototype["get_heightField"] = PxHeightFieldGeometry.prototype.get_heightField = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxHeightFieldGeometry_get_heightField_0(self2), PxHeightField);
        };
        PxHeightFieldGeometry.prototype["set_heightField"] = PxHeightFieldGeometry.prototype.set_heightField = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldGeometry_set_heightField_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldGeometry.prototype, "heightField", { get: PxHeightFieldGeometry.prototype.get_heightField, set: PxHeightFieldGeometry.prototype.set_heightField });
        PxHeightFieldGeometry.prototype["get_heightScale"] = PxHeightFieldGeometry.prototype.get_heightScale = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldGeometry_get_heightScale_0(self2);
        };
        PxHeightFieldGeometry.prototype["set_heightScale"] = PxHeightFieldGeometry.prototype.set_heightScale = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldGeometry_set_heightScale_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldGeometry.prototype, "heightScale", { get: PxHeightFieldGeometry.prototype.get_heightScale, set: PxHeightFieldGeometry.prototype.set_heightScale });
        PxHeightFieldGeometry.prototype["get_rowScale"] = PxHeightFieldGeometry.prototype.get_rowScale = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldGeometry_get_rowScale_0(self2);
        };
        PxHeightFieldGeometry.prototype["set_rowScale"] = PxHeightFieldGeometry.prototype.set_rowScale = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldGeometry_set_rowScale_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldGeometry.prototype, "rowScale", { get: PxHeightFieldGeometry.prototype.get_rowScale, set: PxHeightFieldGeometry.prototype.set_rowScale });
        PxHeightFieldGeometry.prototype["get_columnScale"] = PxHeightFieldGeometry.prototype.get_columnScale = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldGeometry_get_columnScale_0(self2);
        };
        PxHeightFieldGeometry.prototype["set_columnScale"] = PxHeightFieldGeometry.prototype.set_columnScale = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldGeometry_set_columnScale_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldGeometry.prototype, "columnScale", { get: PxHeightFieldGeometry.prototype.get_columnScale, set: PxHeightFieldGeometry.prototype.set_columnScale });
        PxHeightFieldGeometry.prototype["get_heightFieldFlags"] = PxHeightFieldGeometry.prototype.get_heightFieldFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxHeightFieldGeometry_get_heightFieldFlags_0(self2), PxMeshGeometryFlags);
        };
        PxHeightFieldGeometry.prototype["set_heightFieldFlags"] = PxHeightFieldGeometry.prototype.set_heightFieldFlags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldGeometry_set_heightFieldFlags_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldGeometry.prototype, "heightFieldFlags", { get: PxHeightFieldGeometry.prototype.get_heightFieldFlags, set: PxHeightFieldGeometry.prototype.set_heightFieldFlags });
        PxHeightFieldGeometry.prototype["__destroy__"] = PxHeightFieldGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHeightFieldGeometry___destroy___0(self2);
        };
        function PxHeightFieldSample() {
          throw "cannot construct a PxHeightFieldSample, no constructor in IDL";
        }
        PxHeightFieldSample.prototype = Object.create(WrapperObject.prototype);
        PxHeightFieldSample.prototype.constructor = PxHeightFieldSample;
        PxHeightFieldSample.prototype.__class__ = PxHeightFieldSample;
        PxHeightFieldSample.__cache__ = {};
        Module["PxHeightFieldSample"] = PxHeightFieldSample;
        PxHeightFieldSample.prototype["get_height"] = PxHeightFieldSample.prototype.get_height = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldSample_get_height_0(self2);
        };
        PxHeightFieldSample.prototype["set_height"] = PxHeightFieldSample.prototype.set_height = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldSample_set_height_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldSample.prototype, "height", { get: PxHeightFieldSample.prototype.get_height, set: PxHeightFieldSample.prototype.set_height });
        PxHeightFieldSample.prototype["get_materialIndex0"] = PxHeightFieldSample.prototype.get_materialIndex0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldSample_get_materialIndex0_0(self2);
        };
        PxHeightFieldSample.prototype["set_materialIndex0"] = PxHeightFieldSample.prototype.set_materialIndex0 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldSample_set_materialIndex0_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldSample.prototype, "materialIndex0", { get: PxHeightFieldSample.prototype.get_materialIndex0, set: PxHeightFieldSample.prototype.set_materialIndex0 });
        PxHeightFieldSample.prototype["get_materialIndex1"] = PxHeightFieldSample.prototype.get_materialIndex1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHeightFieldSample_get_materialIndex1_0(self2);
        };
        PxHeightFieldSample.prototype["set_materialIndex1"] = PxHeightFieldSample.prototype.set_materialIndex1 = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHeightFieldSample_set_materialIndex1_1(self2, arg0);
        };
        Object.defineProperty(PxHeightFieldSample.prototype, "materialIndex1", { get: PxHeightFieldSample.prototype.get_materialIndex1, set: PxHeightFieldSample.prototype.set_materialIndex1 });
        PxHeightFieldSample.prototype["__destroy__"] = PxHeightFieldSample.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHeightFieldSample___destroy___0(self2);
        };
        function PxHullPolygon() {
          this.ptr = _emscripten_bind_PxHullPolygon_PxHullPolygon_0();
          getCache(PxHullPolygon)[this.ptr] = this;
        }
        ;
        ;
        PxHullPolygon.prototype = Object.create(WrapperObject.prototype);
        PxHullPolygon.prototype.constructor = PxHullPolygon;
        PxHullPolygon.prototype.__class__ = PxHullPolygon;
        PxHullPolygon.__cache__ = {};
        Module["PxHullPolygon"] = PxHullPolygon;
        PxHullPolygon.prototype["get_mPlane"] = PxHullPolygon.prototype.get_mPlane = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxHullPolygon_get_mPlane_1(self2, arg0);
        };
        PxHullPolygon.prototype["set_mPlane"] = PxHullPolygon.prototype.set_mPlane = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxHullPolygon_set_mPlane_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxHullPolygon.prototype, "mPlane", { get: PxHullPolygon.prototype.get_mPlane, set: PxHullPolygon.prototype.set_mPlane });
        PxHullPolygon.prototype["get_mNbVerts"] = PxHullPolygon.prototype.get_mNbVerts = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHullPolygon_get_mNbVerts_0(self2);
        };
        PxHullPolygon.prototype["set_mNbVerts"] = PxHullPolygon.prototype.set_mNbVerts = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHullPolygon_set_mNbVerts_1(self2, arg0);
        };
        Object.defineProperty(PxHullPolygon.prototype, "mNbVerts", { get: PxHullPolygon.prototype.get_mNbVerts, set: PxHullPolygon.prototype.set_mNbVerts });
        PxHullPolygon.prototype["get_mIndexBase"] = PxHullPolygon.prototype.get_mIndexBase = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxHullPolygon_get_mIndexBase_0(self2);
        };
        PxHullPolygon.prototype["set_mIndexBase"] = PxHullPolygon.prototype.set_mIndexBase = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxHullPolygon_set_mIndexBase_1(self2, arg0);
        };
        Object.defineProperty(PxHullPolygon.prototype, "mIndexBase", { get: PxHullPolygon.prototype.get_mIndexBase, set: PxHullPolygon.prototype.set_mIndexBase });
        PxHullPolygon.prototype["__destroy__"] = PxHullPolygon.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxHullPolygon___destroy___0(self2);
        };
        function PxMeshFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxMeshFlags_PxMeshFlags_1(flags);
          getCache(PxMeshFlags)[this.ptr] = this;
        }
        ;
        ;
        PxMeshFlags.prototype = Object.create(WrapperObject.prototype);
        PxMeshFlags.prototype.constructor = PxMeshFlags;
        PxMeshFlags.prototype.__class__ = PxMeshFlags;
        PxMeshFlags.__cache__ = {};
        Module["PxMeshFlags"] = PxMeshFlags;
        PxMeshFlags.prototype["isSet"] = PxMeshFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxMeshFlags_isSet_1(self2, flag);
        };
        ;
        PxMeshFlags.prototype["set"] = PxMeshFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxMeshFlags_set_1(self2, flag);
        };
        ;
        PxMeshFlags.prototype["clear"] = PxMeshFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxMeshFlags_clear_1(self2, flag);
        };
        ;
        PxMeshFlags.prototype["__destroy__"] = PxMeshFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxMeshFlags___destroy___0(self2);
        };
        function PxMeshGeometryFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxMeshGeometryFlags_PxMeshGeometryFlags_1(flags);
          getCache(PxMeshGeometryFlags)[this.ptr] = this;
        }
        ;
        ;
        PxMeshGeometryFlags.prototype = Object.create(WrapperObject.prototype);
        PxMeshGeometryFlags.prototype.constructor = PxMeshGeometryFlags;
        PxMeshGeometryFlags.prototype.__class__ = PxMeshGeometryFlags;
        PxMeshGeometryFlags.__cache__ = {};
        Module["PxMeshGeometryFlags"] = PxMeshGeometryFlags;
        PxMeshGeometryFlags.prototype["isSet"] = PxMeshGeometryFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxMeshGeometryFlags_isSet_1(self2, flag);
        };
        ;
        PxMeshGeometryFlags.prototype["set"] = PxMeshGeometryFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxMeshGeometryFlags_set_1(self2, flag);
        };
        ;
        PxMeshGeometryFlags.prototype["clear"] = PxMeshGeometryFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxMeshGeometryFlags_clear_1(self2, flag);
        };
        ;
        PxMeshGeometryFlags.prototype["__destroy__"] = PxMeshGeometryFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxMeshGeometryFlags___destroy___0(self2);
        };
        function PxMeshScale(s, r) {
          if (s && typeof s === "object")
            s = s.ptr;
          if (r && typeof r === "object")
            r = r.ptr;
          if (s === void 0) {
            this.ptr = _emscripten_bind_PxMeshScale_PxMeshScale_0();
            getCache(PxMeshScale)[this.ptr] = this;
            return;
          }
          if (r === void 0) {
            this.ptr = _emscripten_bind_PxMeshScale_PxMeshScale_1(s);
            getCache(PxMeshScale)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxMeshScale_PxMeshScale_2(s, r);
          getCache(PxMeshScale)[this.ptr] = this;
        }
        ;
        ;
        PxMeshScale.prototype = Object.create(WrapperObject.prototype);
        PxMeshScale.prototype.constructor = PxMeshScale;
        PxMeshScale.prototype.__class__ = PxMeshScale;
        PxMeshScale.__cache__ = {};
        Module["PxMeshScale"] = PxMeshScale;
        PxMeshScale.prototype["get_scale"] = PxMeshScale.prototype.get_scale = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxMeshScale_get_scale_0(self2), PxVec3);
        };
        PxMeshScale.prototype["set_scale"] = PxMeshScale.prototype.set_scale = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxMeshScale_set_scale_1(self2, arg0);
        };
        Object.defineProperty(PxMeshScale.prototype, "scale", { get: PxMeshScale.prototype.get_scale, set: PxMeshScale.prototype.set_scale });
        PxMeshScale.prototype["get_rotation"] = PxMeshScale.prototype.get_rotation = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxMeshScale_get_rotation_0(self2), PxQuat);
        };
        PxMeshScale.prototype["set_rotation"] = PxMeshScale.prototype.set_rotation = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxMeshScale_set_rotation_1(self2, arg0);
        };
        Object.defineProperty(PxMeshScale.prototype, "rotation", { get: PxMeshScale.prototype.get_rotation, set: PxMeshScale.prototype.set_rotation });
        PxMeshScale.prototype["__destroy__"] = PxMeshScale.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxMeshScale___destroy___0(self2);
        };
        function PxPlaneGeometry() {
          this.ptr = _emscripten_bind_PxPlaneGeometry_PxPlaneGeometry_0();
          getCache(PxPlaneGeometry)[this.ptr] = this;
        }
        ;
        ;
        PxPlaneGeometry.prototype = Object.create(PxGeometry.prototype);
        PxPlaneGeometry.prototype.constructor = PxPlaneGeometry;
        PxPlaneGeometry.prototype.__class__ = PxPlaneGeometry;
        PxPlaneGeometry.__cache__ = {};
        Module["PxPlaneGeometry"] = PxPlaneGeometry;
        PxPlaneGeometry.prototype["getType"] = PxPlaneGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPlaneGeometry_getType_0(self2);
        };
        ;
        PxPlaneGeometry.prototype["__destroy__"] = PxPlaneGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPlaneGeometry___destroy___0(self2);
        };
        function PxSphereGeometry(ir) {
          if (ir && typeof ir === "object")
            ir = ir.ptr;
          this.ptr = _emscripten_bind_PxSphereGeometry_PxSphereGeometry_1(ir);
          getCache(PxSphereGeometry)[this.ptr] = this;
        }
        ;
        ;
        PxSphereGeometry.prototype = Object.create(PxGeometry.prototype);
        PxSphereGeometry.prototype.constructor = PxSphereGeometry;
        PxSphereGeometry.prototype.__class__ = PxSphereGeometry;
        PxSphereGeometry.__cache__ = {};
        Module["PxSphereGeometry"] = PxSphereGeometry;
        PxSphereGeometry.prototype["isValid"] = PxSphereGeometry.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSphereGeometry_isValid_0(self2);
        };
        ;
        PxSphereGeometry.prototype["getType"] = PxSphereGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphereGeometry_getType_0(self2);
        };
        ;
        PxSphereGeometry.prototype["get_radius"] = PxSphereGeometry.prototype.get_radius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphereGeometry_get_radius_0(self2);
        };
        PxSphereGeometry.prototype["set_radius"] = PxSphereGeometry.prototype.set_radius = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxSphereGeometry_set_radius_1(self2, arg0);
        };
        Object.defineProperty(PxSphereGeometry.prototype, "radius", { get: PxSphereGeometry.prototype.get_radius, set: PxSphereGeometry.prototype.set_radius });
        PxSphereGeometry.prototype["__destroy__"] = PxSphereGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSphereGeometry___destroy___0(self2);
        };
        function PxTriangle(p0, p1, p2) {
          if (p0 && typeof p0 === "object")
            p0 = p0.ptr;
          if (p1 && typeof p1 === "object")
            p1 = p1.ptr;
          if (p2 && typeof p2 === "object")
            p2 = p2.ptr;
          if (p0 === void 0) {
            this.ptr = _emscripten_bind_PxTriangle_PxTriangle_0();
            getCache(PxTriangle)[this.ptr] = this;
            return;
          }
          if (p1 === void 0) {
            this.ptr = _emscripten_bind_PxTriangle_PxTriangle_1(p0);
            getCache(PxTriangle)[this.ptr] = this;
            return;
          }
          if (p2 === void 0) {
            this.ptr = _emscripten_bind_PxTriangle_PxTriangle_2(p0, p1);
            getCache(PxTriangle)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxTriangle_PxTriangle_3(p0, p1, p2);
          getCache(PxTriangle)[this.ptr] = this;
        }
        ;
        ;
        PxTriangle.prototype = Object.create(WrapperObject.prototype);
        PxTriangle.prototype.constructor = PxTriangle;
        PxTriangle.prototype.__class__ = PxTriangle;
        PxTriangle.__cache__ = {};
        Module["PxTriangle"] = PxTriangle;
        PxTriangle.prototype["normal"] = PxTriangle.prototype.normal = function(normal) {
          var self2 = this.ptr;
          if (normal && typeof normal === "object")
            normal = normal.ptr;
          _emscripten_bind_PxTriangle_normal_1(self2, normal);
        };
        ;
        PxTriangle.prototype["denormalizedNormal"] = PxTriangle.prototype.denormalizedNormal = function(normal) {
          var self2 = this.ptr;
          if (normal && typeof normal === "object")
            normal = normal.ptr;
          _emscripten_bind_PxTriangle_denormalizedNormal_1(self2, normal);
        };
        ;
        PxTriangle.prototype["area"] = PxTriangle.prototype.area = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTriangle_area_0(self2);
        };
        ;
        PxTriangle.prototype["pointFromUV"] = PxTriangle.prototype.pointFromUV = function(u, v) {
          var self2 = this.ptr;
          if (u && typeof u === "object")
            u = u.ptr;
          if (v && typeof v === "object")
            v = v.ptr;
          return wrapPointer(_emscripten_bind_PxTriangle_pointFromUV_2(self2, u, v), PxVec3);
        };
        ;
        PxTriangle.prototype["__destroy__"] = PxTriangle.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriangle___destroy___0(self2);
        };
        function PxTriangleMesh() {
          throw "cannot construct a PxTriangleMesh, no constructor in IDL";
        }
        PxTriangleMesh.prototype = Object.create(PxBase.prototype);
        PxTriangleMesh.prototype.constructor = PxTriangleMesh;
        PxTriangleMesh.prototype.__class__ = PxTriangleMesh;
        PxTriangleMesh.__cache__ = {};
        Module["PxTriangleMesh"] = PxTriangleMesh;
        PxTriangleMesh.prototype["getNbVertices"] = PxTriangleMesh.prototype.getNbVertices = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTriangleMesh_getNbVertices_0(self2);
        };
        ;
        PxTriangleMesh.prototype["getVertices"] = PxTriangleMesh.prototype.getVertices = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_getVertices_0(self2), PxVec3);
        };
        ;
        PxTriangleMesh.prototype["getVerticesForModification"] = PxTriangleMesh.prototype.getVerticesForModification = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_getVerticesForModification_0(self2), PxVec3);
        };
        ;
        PxTriangleMesh.prototype["refitBVH"] = PxTriangleMesh.prototype.refitBVH = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_refitBVH_0(self2), PxBounds3);
        };
        ;
        PxTriangleMesh.prototype["getNbTriangles"] = PxTriangleMesh.prototype.getNbTriangles = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTriangleMesh_getNbTriangles_0(self2);
        };
        ;
        PxTriangleMesh.prototype["getTriangles"] = PxTriangleMesh.prototype.getTriangles = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_getTriangles_0(self2), VoidPtr);
        };
        ;
        PxTriangleMesh.prototype["getTriangleMeshFlags"] = PxTriangleMesh.prototype.getTriangleMeshFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_getTriangleMeshFlags_0(self2), PxTriangleMeshFlags);
        };
        ;
        PxTriangleMesh.prototype["getTrianglesRemap"] = PxTriangleMesh.prototype.getTrianglesRemap = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_getTrianglesRemap_0(self2), PxU32ConstPtr);
        };
        ;
        PxTriangleMesh.prototype["getTriangleMaterialIndex"] = PxTriangleMesh.prototype.getTriangleMaterialIndex = function(triangleIndex) {
          var self2 = this.ptr;
          if (triangleIndex && typeof triangleIndex === "object")
            triangleIndex = triangleIndex.ptr;
          return _emscripten_bind_PxTriangleMesh_getTriangleMaterialIndex_1(self2, triangleIndex);
        };
        ;
        PxTriangleMesh.prototype["getLocalBounds"] = PxTriangleMesh.prototype.getLocalBounds = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_getLocalBounds_0(self2), PxBounds3);
        };
        ;
        PxTriangleMesh.prototype["getReferenceCount"] = PxTriangleMesh.prototype.getReferenceCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTriangleMesh_getReferenceCount_0(self2);
        };
        ;
        PxTriangleMesh.prototype["acquireReference"] = PxTriangleMesh.prototype.acquireReference = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriangleMesh_acquireReference_0(self2);
        };
        ;
        PxTriangleMesh.prototype["getConcreteTypeName"] = PxTriangleMesh.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxTriangleMesh_getConcreteTypeName_0(self2));
        };
        ;
        PxTriangleMesh.prototype["getConcreteType"] = PxTriangleMesh.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTriangleMesh_getConcreteType_0(self2);
        };
        ;
        PxTriangleMesh.prototype["setBaseFlag"] = PxTriangleMesh.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxTriangleMesh_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxTriangleMesh.prototype["setBaseFlags"] = PxTriangleMesh.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxTriangleMesh_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxTriangleMesh.prototype["getBaseFlags"] = PxTriangleMesh.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMesh_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxTriangleMesh.prototype["isReleasable"] = PxTriangleMesh.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxTriangleMesh_isReleasable_0(self2);
        };
        ;
        function PxTriangleMeshFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxTriangleMeshFlags_PxTriangleMeshFlags_1(flags);
          getCache(PxTriangleMeshFlags)[this.ptr] = this;
        }
        ;
        ;
        PxTriangleMeshFlags.prototype = Object.create(WrapperObject.prototype);
        PxTriangleMeshFlags.prototype.constructor = PxTriangleMeshFlags;
        PxTriangleMeshFlags.prototype.__class__ = PxTriangleMeshFlags;
        PxTriangleMeshFlags.__cache__ = {};
        Module["PxTriangleMeshFlags"] = PxTriangleMeshFlags;
        PxTriangleMeshFlags.prototype["isSet"] = PxTriangleMeshFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxTriangleMeshFlags_isSet_1(self2, flag);
        };
        ;
        PxTriangleMeshFlags.prototype["set"] = PxTriangleMeshFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxTriangleMeshFlags_set_1(self2, flag);
        };
        ;
        PxTriangleMeshFlags.prototype["clear"] = PxTriangleMeshFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxTriangleMeshFlags_clear_1(self2, flag);
        };
        ;
        PxTriangleMeshFlags.prototype["__destroy__"] = PxTriangleMeshFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriangleMeshFlags___destroy___0(self2);
        };
        function PxTriangleMeshGeometry(mesh, scaling, flags) {
          if (mesh && typeof mesh === "object")
            mesh = mesh.ptr;
          if (scaling && typeof scaling === "object")
            scaling = scaling.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          if (scaling === void 0) {
            this.ptr = _emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_1(mesh);
            getCache(PxTriangleMeshGeometry)[this.ptr] = this;
            return;
          }
          if (flags === void 0) {
            this.ptr = _emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_2(mesh, scaling);
            getCache(PxTriangleMeshGeometry)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxTriangleMeshGeometry_PxTriangleMeshGeometry_3(mesh, scaling, flags);
          getCache(PxTriangleMeshGeometry)[this.ptr] = this;
        }
        ;
        ;
        PxTriangleMeshGeometry.prototype = Object.create(PxGeometry.prototype);
        PxTriangleMeshGeometry.prototype.constructor = PxTriangleMeshGeometry;
        PxTriangleMeshGeometry.prototype.__class__ = PxTriangleMeshGeometry;
        PxTriangleMeshGeometry.__cache__ = {};
        Module["PxTriangleMeshGeometry"] = PxTriangleMeshGeometry;
        PxTriangleMeshGeometry.prototype["isValid"] = PxTriangleMeshGeometry.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxTriangleMeshGeometry_isValid_0(self2);
        };
        ;
        PxTriangleMeshGeometry.prototype["getType"] = PxTriangleMeshGeometry.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxTriangleMeshGeometry_getType_0(self2);
        };
        ;
        PxTriangleMeshGeometry.prototype["get_scale"] = PxTriangleMeshGeometry.prototype.get_scale = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMeshGeometry_get_scale_0(self2), PxMeshScale);
        };
        PxTriangleMeshGeometry.prototype["set_scale"] = PxTriangleMeshGeometry.prototype.set_scale = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriangleMeshGeometry_set_scale_1(self2, arg0);
        };
        Object.defineProperty(PxTriangleMeshGeometry.prototype, "scale", { get: PxTriangleMeshGeometry.prototype.get_scale, set: PxTriangleMeshGeometry.prototype.set_scale });
        PxTriangleMeshGeometry.prototype["__destroy__"] = PxTriangleMeshGeometry.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriangleMeshGeometry___destroy___0(self2);
        };
        function PxBVH33MidphaseDesc() {
          throw "cannot construct a PxBVH33MidphaseDesc, no constructor in IDL";
        }
        PxBVH33MidphaseDesc.prototype = Object.create(WrapperObject.prototype);
        PxBVH33MidphaseDesc.prototype.constructor = PxBVH33MidphaseDesc;
        PxBVH33MidphaseDesc.prototype.__class__ = PxBVH33MidphaseDesc;
        PxBVH33MidphaseDesc.__cache__ = {};
        Module["PxBVH33MidphaseDesc"] = PxBVH33MidphaseDesc;
        PxBVH33MidphaseDesc.prototype["setToDefault"] = PxBVH33MidphaseDesc.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBVH33MidphaseDesc_setToDefault_0(self2);
        };
        ;
        PxBVH33MidphaseDesc.prototype["isValid"] = PxBVH33MidphaseDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBVH33MidphaseDesc_isValid_0(self2);
        };
        ;
        PxBVH33MidphaseDesc.prototype["get_meshSizePerformanceTradeOff"] = PxBVH33MidphaseDesc.prototype.get_meshSizePerformanceTradeOff = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBVH33MidphaseDesc_get_meshSizePerformanceTradeOff_0(self2);
        };
        PxBVH33MidphaseDesc.prototype["set_meshSizePerformanceTradeOff"] = PxBVH33MidphaseDesc.prototype.set_meshSizePerformanceTradeOff = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBVH33MidphaseDesc_set_meshSizePerformanceTradeOff_1(self2, arg0);
        };
        Object.defineProperty(PxBVH33MidphaseDesc.prototype, "meshSizePerformanceTradeOff", { get: PxBVH33MidphaseDesc.prototype.get_meshSizePerformanceTradeOff, set: PxBVH33MidphaseDesc.prototype.set_meshSizePerformanceTradeOff });
        PxBVH33MidphaseDesc.prototype["get_meshCookingHint"] = PxBVH33MidphaseDesc.prototype.get_meshCookingHint = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBVH33MidphaseDesc_get_meshCookingHint_0(self2);
        };
        PxBVH33MidphaseDesc.prototype["set_meshCookingHint"] = PxBVH33MidphaseDesc.prototype.set_meshCookingHint = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBVH33MidphaseDesc_set_meshCookingHint_1(self2, arg0);
        };
        Object.defineProperty(PxBVH33MidphaseDesc.prototype, "meshCookingHint", { get: PxBVH33MidphaseDesc.prototype.get_meshCookingHint, set: PxBVH33MidphaseDesc.prototype.set_meshCookingHint });
        PxBVH33MidphaseDesc.prototype["__destroy__"] = PxBVH33MidphaseDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBVH33MidphaseDesc___destroy___0(self2);
        };
        function PxBVH34MidphaseDesc() {
          throw "cannot construct a PxBVH34MidphaseDesc, no constructor in IDL";
        }
        PxBVH34MidphaseDesc.prototype = Object.create(WrapperObject.prototype);
        PxBVH34MidphaseDesc.prototype.constructor = PxBVH34MidphaseDesc;
        PxBVH34MidphaseDesc.prototype.__class__ = PxBVH34MidphaseDesc;
        PxBVH34MidphaseDesc.__cache__ = {};
        Module["PxBVH34MidphaseDesc"] = PxBVH34MidphaseDesc;
        PxBVH34MidphaseDesc.prototype["setToDefault"] = PxBVH34MidphaseDesc.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBVH34MidphaseDesc_setToDefault_0(self2);
        };
        ;
        PxBVH34MidphaseDesc.prototype["isValid"] = PxBVH34MidphaseDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBVH34MidphaseDesc_isValid_0(self2);
        };
        ;
        PxBVH34MidphaseDesc.prototype["get_numPrimsPerLeaf"] = PxBVH34MidphaseDesc.prototype.get_numPrimsPerLeaf = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBVH34MidphaseDesc_get_numPrimsPerLeaf_0(self2);
        };
        PxBVH34MidphaseDesc.prototype["set_numPrimsPerLeaf"] = PxBVH34MidphaseDesc.prototype.set_numPrimsPerLeaf = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBVH34MidphaseDesc_set_numPrimsPerLeaf_1(self2, arg0);
        };
        Object.defineProperty(PxBVH34MidphaseDesc.prototype, "numPrimsPerLeaf", { get: PxBVH34MidphaseDesc.prototype.get_numPrimsPerLeaf, set: PxBVH34MidphaseDesc.prototype.set_numPrimsPerLeaf });
        PxBVH34MidphaseDesc.prototype["__destroy__"] = PxBVH34MidphaseDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBVH34MidphaseDesc___destroy___0(self2);
        };
        function PxConvexFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxConvexFlags_PxConvexFlags_1(flags);
          getCache(PxConvexFlags)[this.ptr] = this;
        }
        ;
        ;
        PxConvexFlags.prototype = Object.create(WrapperObject.prototype);
        PxConvexFlags.prototype.constructor = PxConvexFlags;
        PxConvexFlags.prototype.__class__ = PxConvexFlags;
        PxConvexFlags.__cache__ = {};
        Module["PxConvexFlags"] = PxConvexFlags;
        PxConvexFlags.prototype["isSet"] = PxConvexFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxConvexFlags_isSet_1(self2, flag);
        };
        ;
        PxConvexFlags.prototype["set"] = PxConvexFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxConvexFlags_set_1(self2, flag);
        };
        ;
        PxConvexFlags.prototype["clear"] = PxConvexFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxConvexFlags_clear_1(self2, flag);
        };
        ;
        PxConvexFlags.prototype["__destroy__"] = PxConvexFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConvexFlags___destroy___0(self2);
        };
        function PxConvexMeshDesc() {
          this.ptr = _emscripten_bind_PxConvexMeshDesc_PxConvexMeshDesc_0();
          getCache(PxConvexMeshDesc)[this.ptr] = this;
        }
        ;
        ;
        PxConvexMeshDesc.prototype = Object.create(WrapperObject.prototype);
        PxConvexMeshDesc.prototype.constructor = PxConvexMeshDesc;
        PxConvexMeshDesc.prototype.__class__ = PxConvexMeshDesc;
        PxConvexMeshDesc.__cache__ = {};
        Module["PxConvexMeshDesc"] = PxConvexMeshDesc;
        PxConvexMeshDesc.prototype["get_points"] = PxConvexMeshDesc.prototype.get_points = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConvexMeshDesc_get_points_0(self2), PxBoundedData);
        };
        PxConvexMeshDesc.prototype["set_points"] = PxConvexMeshDesc.prototype.set_points = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxConvexMeshDesc_set_points_1(self2, arg0);
        };
        Object.defineProperty(PxConvexMeshDesc.prototype, "points", { get: PxConvexMeshDesc.prototype.get_points, set: PxConvexMeshDesc.prototype.set_points });
        PxConvexMeshDesc.prototype["get_flags"] = PxConvexMeshDesc.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxConvexMeshDesc_get_flags_0(self2), PxConvexFlags);
        };
        PxConvexMeshDesc.prototype["set_flags"] = PxConvexMeshDesc.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxConvexMeshDesc_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxConvexMeshDesc.prototype, "flags", { get: PxConvexMeshDesc.prototype.get_flags, set: PxConvexMeshDesc.prototype.set_flags });
        PxConvexMeshDesc.prototype["__destroy__"] = PxConvexMeshDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxConvexMeshDesc___destroy___0(self2);
        };
        function PxCooking() {
          throw "cannot construct a PxCooking, no constructor in IDL";
        }
        PxCooking.prototype = Object.create(WrapperObject.prototype);
        PxCooking.prototype.constructor = PxCooking;
        PxCooking.prototype.__class__ = PxCooking;
        PxCooking.__cache__ = {};
        Module["PxCooking"] = PxCooking;
        PxCooking.prototype["release"] = PxCooking.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCooking_release_0(self2);
        };
        ;
        PxCooking.prototype["createConvexMesh"] = PxCooking.prototype.createConvexMesh = function(desc, insertionCallback) {
          var self2 = this.ptr;
          if (desc && typeof desc === "object")
            desc = desc.ptr;
          if (insertionCallback && typeof insertionCallback === "object")
            insertionCallback = insertionCallback.ptr;
          return wrapPointer(_emscripten_bind_PxCooking_createConvexMesh_2(self2, desc, insertionCallback), PxConvexMesh);
        };
        ;
        PxCooking.prototype["createTriangleMesh"] = PxCooking.prototype.createTriangleMesh = function(desc, insertionCallback) {
          var self2 = this.ptr;
          if (desc && typeof desc === "object")
            desc = desc.ptr;
          if (insertionCallback && typeof insertionCallback === "object")
            insertionCallback = insertionCallback.ptr;
          return wrapPointer(_emscripten_bind_PxCooking_createTriangleMesh_2(self2, desc, insertionCallback), PxTriangleMesh);
        };
        ;
        PxCooking.prototype["createHeightField"] = PxCooking.prototype.createHeightField = function(desc, insertionCallback) {
          var self2 = this.ptr;
          if (desc && typeof desc === "object")
            desc = desc.ptr;
          if (insertionCallback && typeof insertionCallback === "object")
            insertionCallback = insertionCallback.ptr;
          return wrapPointer(_emscripten_bind_PxCooking_createHeightField_2(self2, desc, insertionCallback), PxHeightField);
        };
        ;
        function PxCookingParams(sc) {
          if (sc && typeof sc === "object")
            sc = sc.ptr;
          this.ptr = _emscripten_bind_PxCookingParams_PxCookingParams_1(sc);
          getCache(PxCookingParams)[this.ptr] = this;
        }
        ;
        ;
        PxCookingParams.prototype = Object.create(WrapperObject.prototype);
        PxCookingParams.prototype.constructor = PxCookingParams;
        PxCookingParams.prototype.__class__ = PxCookingParams;
        PxCookingParams.__cache__ = {};
        Module["PxCookingParams"] = PxCookingParams;
        PxCookingParams.prototype["get_areaTestEpsilon"] = PxCookingParams.prototype.get_areaTestEpsilon = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCookingParams_get_areaTestEpsilon_0(self2);
        };
        PxCookingParams.prototype["set_areaTestEpsilon"] = PxCookingParams.prototype.set_areaTestEpsilon = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_areaTestEpsilon_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "areaTestEpsilon", { get: PxCookingParams.prototype.get_areaTestEpsilon, set: PxCookingParams.prototype.set_areaTestEpsilon });
        PxCookingParams.prototype["get_planeTolerance"] = PxCookingParams.prototype.get_planeTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCookingParams_get_planeTolerance_0(self2);
        };
        PxCookingParams.prototype["set_planeTolerance"] = PxCookingParams.prototype.set_planeTolerance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_planeTolerance_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "planeTolerance", { get: PxCookingParams.prototype.get_planeTolerance, set: PxCookingParams.prototype.set_planeTolerance });
        PxCookingParams.prototype["get_convexMeshCookingType"] = PxCookingParams.prototype.get_convexMeshCookingType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCookingParams_get_convexMeshCookingType_0(self2);
        };
        PxCookingParams.prototype["set_convexMeshCookingType"] = PxCookingParams.prototype.set_convexMeshCookingType = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_convexMeshCookingType_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "convexMeshCookingType", { get: PxCookingParams.prototype.get_convexMeshCookingType, set: PxCookingParams.prototype.set_convexMeshCookingType });
        PxCookingParams.prototype["get_suppressTriangleMeshRemapTable"] = PxCookingParams.prototype.get_suppressTriangleMeshRemapTable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCookingParams_get_suppressTriangleMeshRemapTable_0(self2);
        };
        PxCookingParams.prototype["set_suppressTriangleMeshRemapTable"] = PxCookingParams.prototype.set_suppressTriangleMeshRemapTable = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_suppressTriangleMeshRemapTable_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "suppressTriangleMeshRemapTable", { get: PxCookingParams.prototype.get_suppressTriangleMeshRemapTable, set: PxCookingParams.prototype.set_suppressTriangleMeshRemapTable });
        PxCookingParams.prototype["get_buildTriangleAdjacencies"] = PxCookingParams.prototype.get_buildTriangleAdjacencies = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCookingParams_get_buildTriangleAdjacencies_0(self2);
        };
        PxCookingParams.prototype["set_buildTriangleAdjacencies"] = PxCookingParams.prototype.set_buildTriangleAdjacencies = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_buildTriangleAdjacencies_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "buildTriangleAdjacencies", { get: PxCookingParams.prototype.get_buildTriangleAdjacencies, set: PxCookingParams.prototype.set_buildTriangleAdjacencies });
        PxCookingParams.prototype["get_buildGPUData"] = PxCookingParams.prototype.get_buildGPUData = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCookingParams_get_buildGPUData_0(self2);
        };
        PxCookingParams.prototype["set_buildGPUData"] = PxCookingParams.prototype.set_buildGPUData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_buildGPUData_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "buildGPUData", { get: PxCookingParams.prototype.get_buildGPUData, set: PxCookingParams.prototype.set_buildGPUData });
        PxCookingParams.prototype["get_scale"] = PxCookingParams.prototype.get_scale = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCookingParams_get_scale_0(self2), PxTolerancesScale);
        };
        PxCookingParams.prototype["set_scale"] = PxCookingParams.prototype.set_scale = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_scale_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "scale", { get: PxCookingParams.prototype.get_scale, set: PxCookingParams.prototype.set_scale });
        PxCookingParams.prototype["get_meshPreprocessParams"] = PxCookingParams.prototype.get_meshPreprocessParams = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCookingParams_get_meshPreprocessParams_0(self2), PxMeshPreprocessingFlags);
        };
        PxCookingParams.prototype["set_meshPreprocessParams"] = PxCookingParams.prototype.set_meshPreprocessParams = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_meshPreprocessParams_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "meshPreprocessParams", { get: PxCookingParams.prototype.get_meshPreprocessParams, set: PxCookingParams.prototype.set_meshPreprocessParams });
        PxCookingParams.prototype["get_meshWeldTolerance"] = PxCookingParams.prototype.get_meshWeldTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCookingParams_get_meshWeldTolerance_0(self2);
        };
        PxCookingParams.prototype["set_meshWeldTolerance"] = PxCookingParams.prototype.set_meshWeldTolerance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_meshWeldTolerance_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "meshWeldTolerance", { get: PxCookingParams.prototype.get_meshWeldTolerance, set: PxCookingParams.prototype.set_meshWeldTolerance });
        PxCookingParams.prototype["get_midphaseDesc"] = PxCookingParams.prototype.get_midphaseDesc = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCookingParams_get_midphaseDesc_0(self2), PxMidphaseDesc);
        };
        PxCookingParams.prototype["set_midphaseDesc"] = PxCookingParams.prototype.set_midphaseDesc = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_midphaseDesc_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "midphaseDesc", { get: PxCookingParams.prototype.get_midphaseDesc, set: PxCookingParams.prototype.set_midphaseDesc });
        PxCookingParams.prototype["get_gaussMapLimit"] = PxCookingParams.prototype.get_gaussMapLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCookingParams_get_gaussMapLimit_0(self2);
        };
        PxCookingParams.prototype["set_gaussMapLimit"] = PxCookingParams.prototype.set_gaussMapLimit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCookingParams_set_gaussMapLimit_1(self2, arg0);
        };
        Object.defineProperty(PxCookingParams.prototype, "gaussMapLimit", { get: PxCookingParams.prototype.get_gaussMapLimit, set: PxCookingParams.prototype.set_gaussMapLimit });
        PxCookingParams.prototype["__destroy__"] = PxCookingParams.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCookingParams___destroy___0(self2);
        };
        function PxMeshPreprocessingFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxMeshPreprocessingFlags_PxMeshPreprocessingFlags_1(flags);
          getCache(PxMeshPreprocessingFlags)[this.ptr] = this;
        }
        ;
        ;
        PxMeshPreprocessingFlags.prototype = Object.create(WrapperObject.prototype);
        PxMeshPreprocessingFlags.prototype.constructor = PxMeshPreprocessingFlags;
        PxMeshPreprocessingFlags.prototype.__class__ = PxMeshPreprocessingFlags;
        PxMeshPreprocessingFlags.__cache__ = {};
        Module["PxMeshPreprocessingFlags"] = PxMeshPreprocessingFlags;
        PxMeshPreprocessingFlags.prototype["isSet"] = PxMeshPreprocessingFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxMeshPreprocessingFlags_isSet_1(self2, flag);
        };
        ;
        PxMeshPreprocessingFlags.prototype["set"] = PxMeshPreprocessingFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxMeshPreprocessingFlags_set_1(self2, flag);
        };
        ;
        PxMeshPreprocessingFlags.prototype["clear"] = PxMeshPreprocessingFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxMeshPreprocessingFlags_clear_1(self2, flag);
        };
        ;
        PxMeshPreprocessingFlags.prototype["__destroy__"] = PxMeshPreprocessingFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxMeshPreprocessingFlags___destroy___0(self2);
        };
        function PxMidphaseDesc() {
          this.ptr = _emscripten_bind_PxMidphaseDesc_PxMidphaseDesc_0();
          getCache(PxMidphaseDesc)[this.ptr] = this;
        }
        ;
        ;
        PxMidphaseDesc.prototype = Object.create(WrapperObject.prototype);
        PxMidphaseDesc.prototype.constructor = PxMidphaseDesc;
        PxMidphaseDesc.prototype.__class__ = PxMidphaseDesc;
        PxMidphaseDesc.__cache__ = {};
        Module["PxMidphaseDesc"] = PxMidphaseDesc;
        PxMidphaseDesc.prototype["getType"] = PxMidphaseDesc.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxMidphaseDesc_getType_0(self2);
        };
        ;
        PxMidphaseDesc.prototype["setToDefault"] = PxMidphaseDesc.prototype.setToDefault = function(type) {
          var self2 = this.ptr;
          if (type && typeof type === "object")
            type = type.ptr;
          _emscripten_bind_PxMidphaseDesc_setToDefault_1(self2, type);
        };
        ;
        PxMidphaseDesc.prototype["isValid"] = PxMidphaseDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxMidphaseDesc_isValid_0(self2);
        };
        ;
        PxMidphaseDesc.prototype["get_mBVH33Desc"] = PxMidphaseDesc.prototype.get_mBVH33Desc = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxMidphaseDesc_get_mBVH33Desc_0(self2), PxBVH33MidphaseDesc);
        };
        PxMidphaseDesc.prototype["set_mBVH33Desc"] = PxMidphaseDesc.prototype.set_mBVH33Desc = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxMidphaseDesc_set_mBVH33Desc_1(self2, arg0);
        };
        Object.defineProperty(PxMidphaseDesc.prototype, "mBVH33Desc", { get: PxMidphaseDesc.prototype.get_mBVH33Desc, set: PxMidphaseDesc.prototype.set_mBVH33Desc });
        PxMidphaseDesc.prototype["get_mBVH34Desc"] = PxMidphaseDesc.prototype.get_mBVH34Desc = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxMidphaseDesc_get_mBVH34Desc_0(self2), PxBVH34MidphaseDesc);
        };
        PxMidphaseDesc.prototype["set_mBVH34Desc"] = PxMidphaseDesc.prototype.set_mBVH34Desc = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxMidphaseDesc_set_mBVH34Desc_1(self2, arg0);
        };
        Object.defineProperty(PxMidphaseDesc.prototype, "mBVH34Desc", { get: PxMidphaseDesc.prototype.get_mBVH34Desc, set: PxMidphaseDesc.prototype.set_mBVH34Desc });
        PxMidphaseDesc.prototype["__destroy__"] = PxMidphaseDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxMidphaseDesc___destroy___0(self2);
        };
        function PxTriangleMeshDesc() {
          this.ptr = _emscripten_bind_PxTriangleMeshDesc_PxTriangleMeshDesc_0();
          getCache(PxTriangleMeshDesc)[this.ptr] = this;
        }
        ;
        ;
        PxTriangleMeshDesc.prototype = Object.create(PxSimpleTriangleMesh.prototype);
        PxTriangleMeshDesc.prototype.constructor = PxTriangleMeshDesc;
        PxTriangleMeshDesc.prototype.__class__ = PxTriangleMeshDesc;
        PxTriangleMeshDesc.__cache__ = {};
        Module["PxTriangleMeshDesc"] = PxTriangleMeshDesc;
        PxTriangleMeshDesc.prototype["setToDefault"] = PxTriangleMeshDesc.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriangleMeshDesc_setToDefault_0(self2);
        };
        ;
        PxTriangleMeshDesc.prototype["isValid"] = PxTriangleMeshDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxTriangleMeshDesc_isValid_0(self2);
        };
        ;
        PxTriangleMeshDesc.prototype["get_materialIndices"] = PxTriangleMeshDesc.prototype.get_materialIndices = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMeshDesc_get_materialIndices_0(self2), PxU16StridedData);
        };
        PxTriangleMeshDesc.prototype["set_materialIndices"] = PxTriangleMeshDesc.prototype.set_materialIndices = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriangleMeshDesc_set_materialIndices_1(self2, arg0);
        };
        Object.defineProperty(PxTriangleMeshDesc.prototype, "materialIndices", { get: PxTriangleMeshDesc.prototype.get_materialIndices, set: PxTriangleMeshDesc.prototype.set_materialIndices });
        PxTriangleMeshDesc.prototype["get_points"] = PxTriangleMeshDesc.prototype.get_points = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMeshDesc_get_points_0(self2), PxBoundedData);
        };
        PxTriangleMeshDesc.prototype["set_points"] = PxTriangleMeshDesc.prototype.set_points = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriangleMeshDesc_set_points_1(self2, arg0);
        };
        Object.defineProperty(PxTriangleMeshDesc.prototype, "points", { get: PxTriangleMeshDesc.prototype.get_points, set: PxTriangleMeshDesc.prototype.set_points });
        PxTriangleMeshDesc.prototype["get_triangles"] = PxTriangleMeshDesc.prototype.get_triangles = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMeshDesc_get_triangles_0(self2), PxBoundedData);
        };
        PxTriangleMeshDesc.prototype["set_triangles"] = PxTriangleMeshDesc.prototype.set_triangles = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriangleMeshDesc_set_triangles_1(self2, arg0);
        };
        Object.defineProperty(PxTriangleMeshDesc.prototype, "triangles", { get: PxTriangleMeshDesc.prototype.get_triangles, set: PxTriangleMeshDesc.prototype.set_triangles });
        PxTriangleMeshDesc.prototype["get_flags"] = PxTriangleMeshDesc.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTriangleMeshDesc_get_flags_0(self2), PxMeshFlags);
        };
        PxTriangleMeshDesc.prototype["set_flags"] = PxTriangleMeshDesc.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTriangleMeshDesc_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxTriangleMeshDesc.prototype, "flags", { get: PxTriangleMeshDesc.prototype.get_flags, set: PxTriangleMeshDesc.prototype.set_flags });
        PxTriangleMeshDesc.prototype["__destroy__"] = PxTriangleMeshDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTriangleMeshDesc___destroy___0(self2);
        };
        function PxBaseFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxBaseFlags_PxBaseFlags_1(flags);
          getCache(PxBaseFlags)[this.ptr] = this;
        }
        ;
        ;
        PxBaseFlags.prototype = Object.create(WrapperObject.prototype);
        PxBaseFlags.prototype.constructor = PxBaseFlags;
        PxBaseFlags.prototype.__class__ = PxBaseFlags;
        PxBaseFlags.__cache__ = {};
        Module["PxBaseFlags"] = PxBaseFlags;
        PxBaseFlags.prototype["isSet"] = PxBaseFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxBaseFlags_isSet_1(self2, flag);
        };
        ;
        PxBaseFlags.prototype["set"] = PxBaseFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxBaseFlags_set_1(self2, flag);
        };
        ;
        PxBaseFlags.prototype["clear"] = PxBaseFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxBaseFlags_clear_1(self2, flag);
        };
        ;
        PxBaseFlags.prototype["__destroy__"] = PxBaseFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBaseFlags___destroy___0(self2);
        };
        function PxBaseTask() {
          throw "cannot construct a PxBaseTask, no constructor in IDL";
        }
        PxBaseTask.prototype = Object.create(WrapperObject.prototype);
        PxBaseTask.prototype.constructor = PxBaseTask;
        PxBaseTask.prototype.__class__ = PxBaseTask;
        PxBaseTask.__cache__ = {};
        Module["PxBaseTask"] = PxBaseTask;
        PxBaseTask.prototype["__destroy__"] = PxBaseTask.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBaseTask___destroy___0(self2);
        };
        function PxBoundedData() {
          this.ptr = _emscripten_bind_PxBoundedData_PxBoundedData_0();
          getCache(PxBoundedData)[this.ptr] = this;
        }
        ;
        ;
        PxBoundedData.prototype = Object.create(WrapperObject.prototype);
        PxBoundedData.prototype.constructor = PxBoundedData;
        PxBoundedData.prototype.__class__ = PxBoundedData;
        PxBoundedData.__cache__ = {};
        Module["PxBoundedData"] = PxBoundedData;
        PxBoundedData.prototype["get_count"] = PxBoundedData.prototype.get_count = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoundedData_get_count_0(self2);
        };
        PxBoundedData.prototype["set_count"] = PxBoundedData.prototype.set_count = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoundedData_set_count_1(self2, arg0);
        };
        Object.defineProperty(PxBoundedData.prototype, "count", { get: PxBoundedData.prototype.get_count, set: PxBoundedData.prototype.set_count });
        PxBoundedData.prototype["get_stride"] = PxBoundedData.prototype.get_stride = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoundedData_get_stride_0(self2);
        };
        PxBoundedData.prototype["set_stride"] = PxBoundedData.prototype.set_stride = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoundedData_set_stride_1(self2, arg0);
        };
        Object.defineProperty(PxBoundedData.prototype, "stride", { get: PxBoundedData.prototype.get_stride, set: PxBoundedData.prototype.set_stride });
        PxBoundedData.prototype["get_data"] = PxBoundedData.prototype.get_data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoundedData_get_data_0(self2), VoidPtr);
        };
        PxBoundedData.prototype["set_data"] = PxBoundedData.prototype.set_data = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoundedData_set_data_1(self2, arg0);
        };
        Object.defineProperty(PxBoundedData.prototype, "data", { get: PxBoundedData.prototype.get_data, set: PxBoundedData.prototype.set_data });
        PxBoundedData.prototype["__destroy__"] = PxBoundedData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBoundedData___destroy___0(self2);
        };
        function PxBounds3(minimum, maximum) {
          if (minimum && typeof minimum === "object")
            minimum = minimum.ptr;
          if (maximum && typeof maximum === "object")
            maximum = maximum.ptr;
          if (minimum === void 0) {
            this.ptr = _emscripten_bind_PxBounds3_PxBounds3_0();
            getCache(PxBounds3)[this.ptr] = this;
            return;
          }
          if (maximum === void 0) {
            this.ptr = _emscripten_bind_PxBounds3_PxBounds3_1(minimum);
            getCache(PxBounds3)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxBounds3_PxBounds3_2(minimum, maximum);
          getCache(PxBounds3)[this.ptr] = this;
        }
        ;
        ;
        PxBounds3.prototype = Object.create(WrapperObject.prototype);
        PxBounds3.prototype.constructor = PxBounds3;
        PxBounds3.prototype.__class__ = PxBounds3;
        PxBounds3.__cache__ = {};
        Module["PxBounds3"] = PxBounds3;
        PxBounds3.prototype["setEmpty"] = PxBounds3.prototype.setEmpty = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBounds3_setEmpty_0(self2);
        };
        ;
        PxBounds3.prototype["setMaximal"] = PxBounds3.prototype.setMaximal = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBounds3_setMaximal_0(self2);
        };
        ;
        PxBounds3.prototype["include"] = PxBounds3.prototype.include = function(v) {
          var self2 = this.ptr;
          if (v && typeof v === "object")
            v = v.ptr;
          _emscripten_bind_PxBounds3_include_1(self2, v);
        };
        ;
        PxBounds3.prototype["isEmpty"] = PxBounds3.prototype.isEmpty = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBounds3_isEmpty_0(self2);
        };
        ;
        PxBounds3.prototype["intersects"] = PxBounds3.prototype.intersects = function(b) {
          var self2 = this.ptr;
          if (b && typeof b === "object")
            b = b.ptr;
          return !!_emscripten_bind_PxBounds3_intersects_1(self2, b);
        };
        ;
        PxBounds3.prototype["intersects1D"] = PxBounds3.prototype.intersects1D = function(b, axis) {
          var self2 = this.ptr;
          if (b && typeof b === "object")
            b = b.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          return !!_emscripten_bind_PxBounds3_intersects1D_2(self2, b, axis);
        };
        ;
        PxBounds3.prototype["contains"] = PxBounds3.prototype.contains = function(v) {
          var self2 = this.ptr;
          if (v && typeof v === "object")
            v = v.ptr;
          return !!_emscripten_bind_PxBounds3_contains_1(self2, v);
        };
        ;
        PxBounds3.prototype["isInside"] = PxBounds3.prototype.isInside = function(box) {
          var self2 = this.ptr;
          if (box && typeof box === "object")
            box = box.ptr;
          return !!_emscripten_bind_PxBounds3_isInside_1(self2, box);
        };
        ;
        PxBounds3.prototype["getCenter"] = PxBounds3.prototype.getCenter = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBounds3_getCenter_0(self2), PxVec3);
        };
        ;
        PxBounds3.prototype["getDimensions"] = PxBounds3.prototype.getDimensions = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBounds3_getDimensions_0(self2), PxVec3);
        };
        ;
        PxBounds3.prototype["getExtents"] = PxBounds3.prototype.getExtents = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBounds3_getExtents_0(self2), PxVec3);
        };
        ;
        PxBounds3.prototype["scaleSafe"] = PxBounds3.prototype.scaleSafe = function(scale) {
          var self2 = this.ptr;
          if (scale && typeof scale === "object")
            scale = scale.ptr;
          _emscripten_bind_PxBounds3_scaleSafe_1(self2, scale);
        };
        ;
        PxBounds3.prototype["scaleFast"] = PxBounds3.prototype.scaleFast = function(scale) {
          var self2 = this.ptr;
          if (scale && typeof scale === "object")
            scale = scale.ptr;
          _emscripten_bind_PxBounds3_scaleFast_1(self2, scale);
        };
        ;
        PxBounds3.prototype["fattenSafe"] = PxBounds3.prototype.fattenSafe = function(distance) {
          var self2 = this.ptr;
          if (distance && typeof distance === "object")
            distance = distance.ptr;
          _emscripten_bind_PxBounds3_fattenSafe_1(self2, distance);
        };
        ;
        PxBounds3.prototype["fattenFast"] = PxBounds3.prototype.fattenFast = function(distance) {
          var self2 = this.ptr;
          if (distance && typeof distance === "object")
            distance = distance.ptr;
          _emscripten_bind_PxBounds3_fattenFast_1(self2, distance);
        };
        ;
        PxBounds3.prototype["isFinite"] = PxBounds3.prototype.isFinite = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBounds3_isFinite_0(self2);
        };
        ;
        PxBounds3.prototype["isValid"] = PxBounds3.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBounds3_isValid_0(self2);
        };
        ;
        PxBounds3.prototype["get_minimum"] = PxBounds3.prototype.get_minimum = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBounds3_get_minimum_0(self2), PxVec3);
        };
        PxBounds3.prototype["set_minimum"] = PxBounds3.prototype.set_minimum = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBounds3_set_minimum_1(self2, arg0);
        };
        Object.defineProperty(PxBounds3.prototype, "minimum", { get: PxBounds3.prototype.get_minimum, set: PxBounds3.prototype.set_minimum });
        PxBounds3.prototype["get_maximum"] = PxBounds3.prototype.get_maximum = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBounds3_get_maximum_0(self2), PxVec3);
        };
        PxBounds3.prototype["set_maximum"] = PxBounds3.prototype.set_maximum = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBounds3_set_maximum_1(self2, arg0);
        };
        Object.defineProperty(PxBounds3.prototype, "maximum", { get: PxBounds3.prototype.get_maximum, set: PxBounds3.prototype.set_maximum });
        PxBounds3.prototype["__destroy__"] = PxBounds3.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBounds3___destroy___0(self2);
        };
        function PxCollection() {
          throw "cannot construct a PxCollection, no constructor in IDL";
        }
        PxCollection.prototype = Object.create(WrapperObject.prototype);
        PxCollection.prototype.constructor = PxCollection;
        PxCollection.prototype.__class__ = PxCollection;
        PxCollection.__cache__ = {};
        Module["PxCollection"] = PxCollection;
        PxCollection.prototype["add"] = PxCollection.prototype.add = function(obj, id) {
          var self2 = this.ptr;
          if (obj && typeof obj === "object")
            obj = obj.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          if (id === void 0) {
            _emscripten_bind_PxCollection_add_1(self2, obj);
            return;
          }
          _emscripten_bind_PxCollection_add_2(self2, obj, id);
        };
        ;
        PxCollection.prototype["remove"] = PxCollection.prototype.remove = function(obj) {
          var self2 = this.ptr;
          if (obj && typeof obj === "object")
            obj = obj.ptr;
          _emscripten_bind_PxCollection_remove_1(self2, obj);
        };
        ;
        PxCollection.prototype["contains"] = PxCollection.prototype.contains = function(obj) {
          var self2 = this.ptr;
          if (obj && typeof obj === "object")
            obj = obj.ptr;
          return !!_emscripten_bind_PxCollection_contains_1(self2, obj);
        };
        ;
        PxCollection.prototype["addId"] = PxCollection.prototype.addId = function(obj, id) {
          var self2 = this.ptr;
          if (obj && typeof obj === "object")
            obj = obj.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          _emscripten_bind_PxCollection_addId_2(self2, obj, id);
        };
        ;
        PxCollection.prototype["removeId"] = PxCollection.prototype.removeId = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          _emscripten_bind_PxCollection_removeId_1(self2, id);
        };
        ;
        PxCollection.prototype["getNbObjects"] = PxCollection.prototype.getNbObjects = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCollection_getNbObjects_0(self2);
        };
        ;
        PxCollection.prototype["getObject"] = PxCollection.prototype.getObject = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxCollection_getObject_1(self2, index), PxBase);
        };
        ;
        PxCollection.prototype["find"] = PxCollection.prototype.find = function(id) {
          var self2 = this.ptr;
          if (id && typeof id === "object")
            id = id.ptr;
          return wrapPointer(_emscripten_bind_PxCollection_find_1(self2, id), PxBase);
        };
        ;
        PxCollection.prototype["getNbIds"] = PxCollection.prototype.getNbIds = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCollection_getNbIds_0(self2);
        };
        ;
        PxCollection.prototype["getId"] = PxCollection.prototype.getId = function(obj) {
          var self2 = this.ptr;
          if (obj && typeof obj === "object")
            obj = obj.ptr;
          return _emscripten_bind_PxCollection_getId_1(self2, obj);
        };
        ;
        PxCollection.prototype["release"] = PxCollection.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCollection_release_0(self2);
        };
        ;
        function PxCudaContextManager() {
          throw "cannot construct a PxCudaContextManager, no constructor in IDL";
        }
        PxCudaContextManager.prototype = Object.create(WrapperObject.prototype);
        PxCudaContextManager.prototype.constructor = PxCudaContextManager;
        PxCudaContextManager.prototype.__class__ = PxCudaContextManager;
        PxCudaContextManager.__cache__ = {};
        Module["PxCudaContextManager"] = PxCudaContextManager;
        PxCudaContextManager.prototype["contextIsValid"] = PxCudaContextManager.prototype.contextIsValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_contextIsValid_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM10"] = PxCudaContextManager.prototype.supportsArchSM10 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM10_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM11"] = PxCudaContextManager.prototype.supportsArchSM11 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM11_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM12"] = PxCudaContextManager.prototype.supportsArchSM12 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM12_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM13"] = PxCudaContextManager.prototype.supportsArchSM13 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM13_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM20"] = PxCudaContextManager.prototype.supportsArchSM20 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM20_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM30"] = PxCudaContextManager.prototype.supportsArchSM30 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM30_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM35"] = PxCudaContextManager.prototype.supportsArchSM35 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM35_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM50"] = PxCudaContextManager.prototype.supportsArchSM50 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM50_0(self2);
        };
        ;
        PxCudaContextManager.prototype["supportsArchSM52"] = PxCudaContextManager.prototype.supportsArchSM52 = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_supportsArchSM52_0(self2);
        };
        ;
        PxCudaContextManager.prototype["isIntegrated"] = PxCudaContextManager.prototype.isIntegrated = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_isIntegrated_0(self2);
        };
        ;
        PxCudaContextManager.prototype["canMapHostMemory"] = PxCudaContextManager.prototype.canMapHostMemory = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_canMapHostMemory_0(self2);
        };
        ;
        PxCudaContextManager.prototype["getDriverVersion"] = PxCudaContextManager.prototype.getDriverVersion = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_getDriverVersion_0(self2);
        };
        ;
        PxCudaContextManager.prototype["getDeviceTotalMemBytes"] = PxCudaContextManager.prototype.getDeviceTotalMemBytes = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_getDeviceTotalMemBytes_0(self2);
        };
        ;
        PxCudaContextManager.prototype["getMultiprocessorCount"] = PxCudaContextManager.prototype.getMultiprocessorCount = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_getMultiprocessorCount_0(self2);
        };
        ;
        PxCudaContextManager.prototype["getClockRate"] = PxCudaContextManager.prototype.getClockRate = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_getClockRate_0(self2);
        };
        ;
        PxCudaContextManager.prototype["getSharedMemPerBlock"] = PxCudaContextManager.prototype.getSharedMemPerBlock = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_getSharedMemPerBlock_0(self2);
        };
        ;
        PxCudaContextManager.prototype["getMaxThreadsPerBlock"] = PxCudaContextManager.prototype.getMaxThreadsPerBlock = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_getMaxThreadsPerBlock_0(self2);
        };
        ;
        PxCudaContextManager.prototype["getDeviceName"] = PxCudaContextManager.prototype.getDeviceName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxCudaContextManager_getDeviceName_0(self2));
        };
        ;
        PxCudaContextManager.prototype["getInteropMode"] = PxCudaContextManager.prototype.getInteropMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_getInteropMode_0(self2);
        };
        ;
        PxCudaContextManager.prototype["setUsingConcurrentStreams"] = PxCudaContextManager.prototype.setUsingConcurrentStreams = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxCudaContextManager_setUsingConcurrentStreams_1(self2, flag);
        };
        ;
        PxCudaContextManager.prototype["getUsingConcurrentStreams"] = PxCudaContextManager.prototype.getUsingConcurrentStreams = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCudaContextManager_getUsingConcurrentStreams_0(self2);
        };
        ;
        PxCudaContextManager.prototype["usingDedicatedGPU"] = PxCudaContextManager.prototype.usingDedicatedGPU = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManager_usingDedicatedGPU_0(self2);
        };
        ;
        PxCudaContextManager.prototype["release"] = PxCudaContextManager.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCudaContextManager_release_0(self2);
        };
        ;
        function PxCudaContextManagerDesc() {
          this.ptr = _emscripten_bind_PxCudaContextManagerDesc_PxCudaContextManagerDesc_0();
          getCache(PxCudaContextManagerDesc)[this.ptr] = this;
        }
        ;
        ;
        PxCudaContextManagerDesc.prototype = Object.create(WrapperObject.prototype);
        PxCudaContextManagerDesc.prototype.constructor = PxCudaContextManagerDesc;
        PxCudaContextManagerDesc.prototype.__class__ = PxCudaContextManagerDesc;
        PxCudaContextManagerDesc.__cache__ = {};
        Module["PxCudaContextManagerDesc"] = PxCudaContextManagerDesc;
        PxCudaContextManagerDesc.prototype["get_graphicsDevice"] = PxCudaContextManagerDesc.prototype.get_graphicsDevice = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCudaContextManagerDesc_get_graphicsDevice_0(self2), VoidPtr);
        };
        PxCudaContextManagerDesc.prototype["set_graphicsDevice"] = PxCudaContextManagerDesc.prototype.set_graphicsDevice = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCudaContextManagerDesc_set_graphicsDevice_1(self2, arg0);
        };
        Object.defineProperty(PxCudaContextManagerDesc.prototype, "graphicsDevice", { get: PxCudaContextManagerDesc.prototype.get_graphicsDevice, set: PxCudaContextManagerDesc.prototype.set_graphicsDevice });
        PxCudaContextManagerDesc.prototype["get_interopMode"] = PxCudaContextManagerDesc.prototype.get_interopMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCudaContextManagerDesc_get_interopMode_0(self2);
        };
        PxCudaContextManagerDesc.prototype["set_interopMode"] = PxCudaContextManagerDesc.prototype.set_interopMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCudaContextManagerDesc_set_interopMode_1(self2, arg0);
        };
        Object.defineProperty(PxCudaContextManagerDesc.prototype, "interopMode", { get: PxCudaContextManagerDesc.prototype.get_interopMode, set: PxCudaContextManagerDesc.prototype.set_interopMode });
        PxCudaContextManagerDesc.prototype["get_maxMemorySize"] = PxCudaContextManagerDesc.prototype.get_maxMemorySize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxCudaContextManagerDesc_get_maxMemorySize_1(self2, arg0);
        };
        PxCudaContextManagerDesc.prototype["set_maxMemorySize"] = PxCudaContextManagerDesc.prototype.set_maxMemorySize = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxCudaContextManagerDesc_set_maxMemorySize_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxCudaContextManagerDesc.prototype, "maxMemorySize", { get: PxCudaContextManagerDesc.prototype.get_maxMemorySize, set: PxCudaContextManagerDesc.prototype.set_maxMemorySize });
        PxCudaContextManagerDesc.prototype["get_memoryBaseSize"] = PxCudaContextManagerDesc.prototype.get_memoryBaseSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxCudaContextManagerDesc_get_memoryBaseSize_1(self2, arg0);
        };
        PxCudaContextManagerDesc.prototype["set_memoryBaseSize"] = PxCudaContextManagerDesc.prototype.set_memoryBaseSize = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxCudaContextManagerDesc_set_memoryBaseSize_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxCudaContextManagerDesc.prototype, "memoryBaseSize", { get: PxCudaContextManagerDesc.prototype.get_memoryBaseSize, set: PxCudaContextManagerDesc.prototype.set_memoryBaseSize });
        PxCudaContextManagerDesc.prototype["get_memoryPageSize"] = PxCudaContextManagerDesc.prototype.get_memoryPageSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          return _emscripten_bind_PxCudaContextManagerDesc_get_memoryPageSize_1(self2, arg0);
        };
        PxCudaContextManagerDesc.prototype["set_memoryPageSize"] = PxCudaContextManagerDesc.prototype.set_memoryPageSize = function(arg0, arg1) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          if (arg1 && typeof arg1 === "object")
            arg1 = arg1.ptr;
          _emscripten_bind_PxCudaContextManagerDesc_set_memoryPageSize_2(self2, arg0, arg1);
        };
        Object.defineProperty(PxCudaContextManagerDesc.prototype, "memoryPageSize", { get: PxCudaContextManagerDesc.prototype.get_memoryPageSize, set: PxCudaContextManagerDesc.prototype.set_memoryPageSize });
        PxCudaContextManagerDesc.prototype["__destroy__"] = PxCudaContextManagerDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCudaContextManagerDesc___destroy___0(self2);
        };
        function PxDefaultErrorCallback() {
          this.ptr = _emscripten_bind_PxDefaultErrorCallback_PxDefaultErrorCallback_0();
          getCache(PxDefaultErrorCallback)[this.ptr] = this;
        }
        ;
        ;
        PxDefaultErrorCallback.prototype = Object.create(PxErrorCallback.prototype);
        PxDefaultErrorCallback.prototype.constructor = PxDefaultErrorCallback;
        PxDefaultErrorCallback.prototype.__class__ = PxDefaultErrorCallback;
        PxDefaultErrorCallback.__cache__ = {};
        Module["PxDefaultErrorCallback"] = PxDefaultErrorCallback;
        PxDefaultErrorCallback.prototype["reportError"] = PxDefaultErrorCallback.prototype.reportError = function(code, message, file, line) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (code && typeof code === "object")
            code = code.ptr;
          if (message && typeof message === "object")
            message = message.ptr;
          else
            message = ensureString(message);
          if (file && typeof file === "object")
            file = file.ptr;
          else
            file = ensureString(file);
          if (line && typeof line === "object")
            line = line.ptr;
          _emscripten_bind_PxDefaultErrorCallback_reportError_4(self2, code, message, file, line);
        };
        ;
        PxDefaultErrorCallback.prototype["__destroy__"] = PxDefaultErrorCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDefaultErrorCallback___destroy___0(self2);
        };
        function JavaErrorCallback() {
          this.ptr = _emscripten_bind_JavaErrorCallback_JavaErrorCallback_0();
          getCache(JavaErrorCallback)[this.ptr] = this;
        }
        ;
        ;
        JavaErrorCallback.prototype = Object.create(PxErrorCallback.prototype);
        JavaErrorCallback.prototype.constructor = JavaErrorCallback;
        JavaErrorCallback.prototype.__class__ = JavaErrorCallback;
        JavaErrorCallback.__cache__ = {};
        Module["JavaErrorCallback"] = JavaErrorCallback;
        JavaErrorCallback.prototype["reportError"] = JavaErrorCallback.prototype.reportError = function(code, message, file, line) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (code && typeof code === "object")
            code = code.ptr;
          if (message && typeof message === "object")
            message = message.ptr;
          else
            message = ensureString(message);
          if (file && typeof file === "object")
            file = file.ptr;
          else
            file = ensureString(file);
          if (line && typeof line === "object")
            line = line.ptr;
          _emscripten_bind_JavaErrorCallback_reportError_4(self2, code, message, file, line);
        };
        ;
        JavaErrorCallback.prototype["__destroy__"] = JavaErrorCallback.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_JavaErrorCallback___destroy___0(self2);
        };
        function PxFoundation() {
          throw "cannot construct a PxFoundation, no constructor in IDL";
        }
        PxFoundation.prototype = Object.create(WrapperObject.prototype);
        PxFoundation.prototype.constructor = PxFoundation;
        PxFoundation.prototype.__class__ = PxFoundation;
        PxFoundation.__cache__ = {};
        Module["PxFoundation"] = PxFoundation;
        PxFoundation.prototype["release"] = PxFoundation.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxFoundation_release_0(self2);
        };
        ;
        function PxPhysicsInsertionCallback() {
          throw "cannot construct a PxPhysicsInsertionCallback, no constructor in IDL";
        }
        PxPhysicsInsertionCallback.prototype = Object.create(WrapperObject.prototype);
        PxPhysicsInsertionCallback.prototype.constructor = PxPhysicsInsertionCallback;
        PxPhysicsInsertionCallback.prototype.__class__ = PxPhysicsInsertionCallback;
        PxPhysicsInsertionCallback.__cache__ = {};
        Module["PxPhysicsInsertionCallback"] = PxPhysicsInsertionCallback;
        function PxQuat(x, y, z, w) {
          if (x && typeof x === "object")
            x = x.ptr;
          if (y && typeof y === "object")
            y = y.ptr;
          if (z && typeof z === "object")
            z = z.ptr;
          if (w && typeof w === "object")
            w = w.ptr;
          if (x === void 0) {
            this.ptr = _emscripten_bind_PxQuat_PxQuat_0();
            getCache(PxQuat)[this.ptr] = this;
            return;
          }
          if (y === void 0) {
            this.ptr = _emscripten_bind_PxQuat_PxQuat_1(x);
            getCache(PxQuat)[this.ptr] = this;
            return;
          }
          if (z === void 0) {
            this.ptr = _emscripten_bind_PxQuat_PxQuat_2(x, y);
            getCache(PxQuat)[this.ptr] = this;
            return;
          }
          if (w === void 0) {
            this.ptr = _emscripten_bind_PxQuat_PxQuat_3(x, y, z);
            getCache(PxQuat)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxQuat_PxQuat_4(x, y, z, w);
          getCache(PxQuat)[this.ptr] = this;
        }
        ;
        ;
        PxQuat.prototype = Object.create(WrapperObject.prototype);
        PxQuat.prototype.constructor = PxQuat;
        PxQuat.prototype.__class__ = PxQuat;
        PxQuat.__cache__ = {};
        Module["PxQuat"] = PxQuat;
        PxQuat.prototype["get_x"] = PxQuat.prototype.get_x = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxQuat_get_x_0(self2);
        };
        PxQuat.prototype["set_x"] = PxQuat.prototype.set_x = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQuat_set_x_1(self2, arg0);
        };
        Object.defineProperty(PxQuat.prototype, "x", { get: PxQuat.prototype.get_x, set: PxQuat.prototype.set_x });
        PxQuat.prototype["get_y"] = PxQuat.prototype.get_y = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxQuat_get_y_0(self2);
        };
        PxQuat.prototype["set_y"] = PxQuat.prototype.set_y = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQuat_set_y_1(self2, arg0);
        };
        Object.defineProperty(PxQuat.prototype, "y", { get: PxQuat.prototype.get_y, set: PxQuat.prototype.set_y });
        PxQuat.prototype["get_z"] = PxQuat.prototype.get_z = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxQuat_get_z_0(self2);
        };
        PxQuat.prototype["set_z"] = PxQuat.prototype.set_z = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQuat_set_z_1(self2, arg0);
        };
        Object.defineProperty(PxQuat.prototype, "z", { get: PxQuat.prototype.get_z, set: PxQuat.prototype.set_z });
        PxQuat.prototype["get_w"] = PxQuat.prototype.get_w = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxQuat_get_w_0(self2);
        };
        PxQuat.prototype["set_w"] = PxQuat.prototype.set_w = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxQuat_set_w_1(self2, arg0);
        };
        Object.defineProperty(PxQuat.prototype, "w", { get: PxQuat.prototype.get_w, set: PxQuat.prototype.set_w });
        PxQuat.prototype["__destroy__"] = PxQuat.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxQuat___destroy___0(self2);
        };
        function PxTolerancesScale() {
          this.ptr = _emscripten_bind_PxTolerancesScale_PxTolerancesScale_0();
          getCache(PxTolerancesScale)[this.ptr] = this;
        }
        ;
        ;
        PxTolerancesScale.prototype = Object.create(WrapperObject.prototype);
        PxTolerancesScale.prototype.constructor = PxTolerancesScale;
        PxTolerancesScale.prototype.__class__ = PxTolerancesScale;
        PxTolerancesScale.__cache__ = {};
        Module["PxTolerancesScale"] = PxTolerancesScale;
        PxTolerancesScale.prototype["__destroy__"] = PxTolerancesScale.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTolerancesScale___destroy___0(self2);
        };
        function PxTransform(p0, q0) {
          if (p0 && typeof p0 === "object")
            p0 = p0.ptr;
          if (q0 && typeof q0 === "object")
            q0 = q0.ptr;
          if (q0 === void 0) {
            this.ptr = _emscripten_bind_PxTransform_PxTransform_1(p0);
            getCache(PxTransform)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxTransform_PxTransform_2(p0, q0);
          getCache(PxTransform)[this.ptr] = this;
        }
        ;
        ;
        PxTransform.prototype = Object.create(WrapperObject.prototype);
        PxTransform.prototype.constructor = PxTransform;
        PxTransform.prototype.__class__ = PxTransform;
        PxTransform.__cache__ = {};
        Module["PxTransform"] = PxTransform;
        PxTransform.prototype["get_q"] = PxTransform.prototype.get_q = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTransform_get_q_0(self2), PxQuat);
        };
        PxTransform.prototype["set_q"] = PxTransform.prototype.set_q = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTransform_set_q_1(self2, arg0);
        };
        Object.defineProperty(PxTransform.prototype, "q", { get: PxTransform.prototype.get_q, set: PxTransform.prototype.set_q });
        PxTransform.prototype["get_p"] = PxTransform.prototype.get_p = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxTransform_get_p_0(self2), PxVec3);
        };
        PxTransform.prototype["set_p"] = PxTransform.prototype.set_p = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxTransform_set_p_1(self2, arg0);
        };
        Object.defineProperty(PxTransform.prototype, "p", { get: PxTransform.prototype.get_p, set: PxTransform.prototype.set_p });
        PxTransform.prototype["__destroy__"] = PxTransform.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxTransform___destroy___0(self2);
        };
        function PxStridedData() {
          throw "cannot construct a PxStridedData, no constructor in IDL";
        }
        PxStridedData.prototype = Object.create(WrapperObject.prototype);
        PxStridedData.prototype.constructor = PxStridedData;
        PxStridedData.prototype.__class__ = PxStridedData;
        PxStridedData.__cache__ = {};
        Module["PxStridedData"] = PxStridedData;
        PxStridedData.prototype["get_stride"] = PxStridedData.prototype.get_stride = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxStridedData_get_stride_0(self2);
        };
        PxStridedData.prototype["set_stride"] = PxStridedData.prototype.set_stride = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxStridedData_set_stride_1(self2, arg0);
        };
        Object.defineProperty(PxStridedData.prototype, "stride", { get: PxStridedData.prototype.get_stride, set: PxStridedData.prototype.set_stride });
        PxStridedData.prototype["get_data"] = PxStridedData.prototype.get_data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxStridedData_get_data_0(self2), VoidPtr);
        };
        PxStridedData.prototype["set_data"] = PxStridedData.prototype.set_data = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxStridedData_set_data_1(self2, arg0);
        };
        Object.defineProperty(PxStridedData.prototype, "data", { get: PxStridedData.prototype.get_data, set: PxStridedData.prototype.set_data });
        PxStridedData.prototype["__destroy__"] = PxStridedData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxStridedData___destroy___0(self2);
        };
        function PxU16StridedData() {
          throw "cannot construct a PxU16StridedData, no constructor in IDL";
        }
        PxU16StridedData.prototype = Object.create(WrapperObject.prototype);
        PxU16StridedData.prototype.constructor = PxU16StridedData;
        PxU16StridedData.prototype.__class__ = PxU16StridedData;
        PxU16StridedData.__cache__ = {};
        Module["PxU16StridedData"] = PxU16StridedData;
        PxU16StridedData.prototype["get_stride"] = PxU16StridedData.prototype.get_stride = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxU16StridedData_get_stride_0(self2);
        };
        PxU16StridedData.prototype["set_stride"] = PxU16StridedData.prototype.set_stride = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxU16StridedData_set_stride_1(self2, arg0);
        };
        Object.defineProperty(PxU16StridedData.prototype, "stride", { get: PxU16StridedData.prototype.get_stride, set: PxU16StridedData.prototype.set_stride });
        PxU16StridedData.prototype["get_data"] = PxU16StridedData.prototype.get_data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxU16StridedData_get_data_0(self2), PxU16ConstPtr);
        };
        PxU16StridedData.prototype["set_data"] = PxU16StridedData.prototype.set_data = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxU16StridedData_set_data_1(self2, arg0);
        };
        Object.defineProperty(PxU16StridedData.prototype, "data", { get: PxU16StridedData.prototype.get_data, set: PxU16StridedData.prototype.set_data });
        PxU16StridedData.prototype["__destroy__"] = PxU16StridedData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxU16StridedData___destroy___0(self2);
        };
        function PxVec3(x, y, z) {
          if (x && typeof x === "object")
            x = x.ptr;
          if (y && typeof y === "object")
            y = y.ptr;
          if (z && typeof z === "object")
            z = z.ptr;
          if (x === void 0) {
            this.ptr = _emscripten_bind_PxVec3_PxVec3_0();
            getCache(PxVec3)[this.ptr] = this;
            return;
          }
          if (y === void 0) {
            this.ptr = _emscripten_bind_PxVec3_PxVec3_1(x);
            getCache(PxVec3)[this.ptr] = this;
            return;
          }
          if (z === void 0) {
            this.ptr = _emscripten_bind_PxVec3_PxVec3_2(x, y);
            getCache(PxVec3)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxVec3_PxVec3_3(x, y, z);
          getCache(PxVec3)[this.ptr] = this;
        }
        ;
        ;
        PxVec3.prototype = Object.create(WrapperObject.prototype);
        PxVec3.prototype.constructor = PxVec3;
        PxVec3.prototype.__class__ = PxVec3;
        PxVec3.__cache__ = {};
        Module["PxVec3"] = PxVec3;
        PxVec3.prototype["get_x"] = PxVec3.prototype.get_x = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVec3_get_x_0(self2);
        };
        PxVec3.prototype["set_x"] = PxVec3.prototype.set_x = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVec3_set_x_1(self2, arg0);
        };
        Object.defineProperty(PxVec3.prototype, "x", { get: PxVec3.prototype.get_x, set: PxVec3.prototype.set_x });
        PxVec3.prototype["get_y"] = PxVec3.prototype.get_y = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVec3_get_y_0(self2);
        };
        PxVec3.prototype["set_y"] = PxVec3.prototype.set_y = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVec3_set_y_1(self2, arg0);
        };
        Object.defineProperty(PxVec3.prototype, "y", { get: PxVec3.prototype.get_y, set: PxVec3.prototype.set_y });
        PxVec3.prototype["get_z"] = PxVec3.prototype.get_z = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxVec3_get_z_0(self2);
        };
        PxVec3.prototype["set_z"] = PxVec3.prototype.set_z = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxVec3_set_z_1(self2, arg0);
        };
        Object.defineProperty(PxVec3.prototype, "z", { get: PxVec3.prototype.get_z, set: PxVec3.prototype.set_z });
        PxVec3.prototype["__destroy__"] = PxVec3.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVec3___destroy___0(self2);
        };
        function PxCollectionExt() {
          throw "cannot construct a PxCollectionExt, no constructor in IDL";
        }
        PxCollectionExt.prototype = Object.create(WrapperObject.prototype);
        PxCollectionExt.prototype.constructor = PxCollectionExt;
        PxCollectionExt.prototype.__class__ = PxCollectionExt;
        PxCollectionExt.__cache__ = {};
        Module["PxCollectionExt"] = PxCollectionExt;
        PxCollectionExt.prototype["releaseObjects"] = PxCollectionExt.prototype.releaseObjects = function(collection, releaseExclusiveShapes) {
          var self2 = this.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          if (releaseExclusiveShapes && typeof releaseExclusiveShapes === "object")
            releaseExclusiveShapes = releaseExclusiveShapes.ptr;
          if (releaseExclusiveShapes === void 0) {
            _emscripten_bind_PxCollectionExt_releaseObjects_1(self2, collection);
            return;
          }
          _emscripten_bind_PxCollectionExt_releaseObjects_2(self2, collection, releaseExclusiveShapes);
        };
        ;
        PxCollectionExt.prototype["remove"] = PxCollectionExt.prototype.remove = function(collection, concreteType, to) {
          var self2 = this.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          if (concreteType && typeof concreteType === "object")
            concreteType = concreteType.ptr;
          if (to && typeof to === "object")
            to = to.ptr;
          if (to === void 0) {
            _emscripten_bind_PxCollectionExt_remove_2(self2, collection, concreteType);
            return;
          }
          _emscripten_bind_PxCollectionExt_remove_3(self2, collection, concreteType, to);
        };
        ;
        PxCollectionExt.prototype["createCollection"] = PxCollectionExt.prototype.createCollection = function(scene) {
          var self2 = this.ptr;
          if (scene && typeof scene === "object")
            scene = scene.ptr;
          return wrapPointer(_emscripten_bind_PxCollectionExt_createCollection_1(self2, scene), PxCollection);
        };
        ;
        PxCollectionExt.prototype["__destroy__"] = PxCollectionExt.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCollectionExt___destroy___0(self2);
        };
        function PxD6Joint() {
          throw "cannot construct a PxD6Joint, no constructor in IDL";
        }
        PxD6Joint.prototype = Object.create(WrapperObject.prototype);
        PxD6Joint.prototype.constructor = PxD6Joint;
        PxD6Joint.prototype.__class__ = PxD6Joint;
        PxD6Joint.__cache__ = {};
        Module["PxD6Joint"] = PxD6Joint;
        PxD6Joint.prototype["setMotion"] = PxD6Joint.prototype.setMotion = function(axis, type) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          if (type && typeof type === "object")
            type = type.ptr;
          _emscripten_bind_PxD6Joint_setMotion_2(self2, axis, type);
        };
        ;
        PxD6Joint.prototype["getMotion"] = PxD6Joint.prototype.getMotion = function(axis) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          return _emscripten_bind_PxD6Joint_getMotion_1(self2, axis);
        };
        ;
        PxD6Joint.prototype["getTwistAngle"] = PxD6Joint.prototype.getTwistAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6Joint_getTwistAngle_0(self2);
        };
        ;
        PxD6Joint.prototype["getSwingYAngle"] = PxD6Joint.prototype.getSwingYAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6Joint_getSwingYAngle_0(self2);
        };
        ;
        PxD6Joint.prototype["getSwingZAngle"] = PxD6Joint.prototype.getSwingZAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6Joint_getSwingZAngle_0(self2);
        };
        ;
        PxD6Joint.prototype["setDistanceLimit"] = PxD6Joint.prototype.setDistanceLimit = function(limit) {
          var self2 = this.ptr;
          if (limit && typeof limit === "object")
            limit = limit.ptr;
          _emscripten_bind_PxD6Joint_setDistanceLimit_1(self2, limit);
        };
        ;
        PxD6Joint.prototype["setLinearLimit"] = PxD6Joint.prototype.setLinearLimit = function(axis, limit) {
          var self2 = this.ptr;
          if (axis && typeof axis === "object")
            axis = axis.ptr;
          if (limit && typeof limit === "object")
            limit = limit.ptr;
          _emscripten_bind_PxD6Joint_setLinearLimit_2(self2, axis, limit);
        };
        ;
        PxD6Joint.prototype["setTwistLimit"] = PxD6Joint.prototype.setTwistLimit = function(limit) {
          var self2 = this.ptr;
          if (limit && typeof limit === "object")
            limit = limit.ptr;
          _emscripten_bind_PxD6Joint_setTwistLimit_1(self2, limit);
        };
        ;
        PxD6Joint.prototype["setSwingLimit"] = PxD6Joint.prototype.setSwingLimit = function(limit) {
          var self2 = this.ptr;
          if (limit && typeof limit === "object")
            limit = limit.ptr;
          _emscripten_bind_PxD6Joint_setSwingLimit_1(self2, limit);
        };
        ;
        PxD6Joint.prototype["setPyramidSwingLimit"] = PxD6Joint.prototype.setPyramidSwingLimit = function(limit) {
          var self2 = this.ptr;
          if (limit && typeof limit === "object")
            limit = limit.ptr;
          _emscripten_bind_PxD6Joint_setPyramidSwingLimit_1(self2, limit);
        };
        ;
        PxD6Joint.prototype["setDrive"] = PxD6Joint.prototype.setDrive = function(index, drive) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          if (drive && typeof drive === "object")
            drive = drive.ptr;
          _emscripten_bind_PxD6Joint_setDrive_2(self2, index, drive);
        };
        ;
        PxD6Joint.prototype["getDrive"] = PxD6Joint.prototype.getDrive = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxD6Joint_getDrive_1(self2, index), PxD6JointDrive);
        };
        ;
        PxD6Joint.prototype["setDrivePosition"] = PxD6Joint.prototype.setDrivePosition = function(pose, autowake) {
          var self2 = this.ptr;
          if (pose && typeof pose === "object")
            pose = pose.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxD6Joint_setDrivePosition_1(self2, pose);
            return;
          }
          _emscripten_bind_PxD6Joint_setDrivePosition_2(self2, pose, autowake);
        };
        ;
        PxD6Joint.prototype["getDrivePosition"] = PxD6Joint.prototype.getDrivePosition = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxD6Joint_getDrivePosition_0(self2), PxTransform);
        };
        ;
        PxD6Joint.prototype["setDriveVelocity"] = PxD6Joint.prototype.setDriveVelocity = function(linear, angular) {
          var self2 = this.ptr;
          if (linear && typeof linear === "object")
            linear = linear.ptr;
          if (angular && typeof angular === "object")
            angular = angular.ptr;
          _emscripten_bind_PxD6Joint_setDriveVelocity_2(self2, linear, angular);
        };
        ;
        PxD6Joint.prototype["getDriveVelocity"] = PxD6Joint.prototype.getDriveVelocity = function(linear, angular) {
          var self2 = this.ptr;
          if (linear && typeof linear === "object")
            linear = linear.ptr;
          if (angular && typeof angular === "object")
            angular = angular.ptr;
          _emscripten_bind_PxD6Joint_getDriveVelocity_2(self2, linear, angular);
        };
        ;
        PxD6Joint.prototype["setProjectionLinearTolerance"] = PxD6Joint.prototype.setProjectionLinearTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxD6Joint_setProjectionLinearTolerance_1(self2, tolerance);
        };
        ;
        PxD6Joint.prototype["getProjectionLinearTolerance"] = PxD6Joint.prototype.getProjectionLinearTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6Joint_getProjectionLinearTolerance_0(self2);
        };
        ;
        PxD6Joint.prototype["setProjectionAngularTolerance"] = PxD6Joint.prototype.setProjectionAngularTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxD6Joint_setProjectionAngularTolerance_1(self2, tolerance);
        };
        ;
        PxD6Joint.prototype["getProjectionAngularTolerance"] = PxD6Joint.prototype.getProjectionAngularTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6Joint_getProjectionAngularTolerance_0(self2);
        };
        ;
        PxD6Joint.prototype["__destroy__"] = PxD6Joint.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxD6Joint___destroy___0(self2);
        };
        function PxD6JointDrive(driveStiffness, driveDamping, driveForceLimit, isAcceleration) {
          if (driveStiffness && typeof driveStiffness === "object")
            driveStiffness = driveStiffness.ptr;
          if (driveDamping && typeof driveDamping === "object")
            driveDamping = driveDamping.ptr;
          if (driveForceLimit && typeof driveForceLimit === "object")
            driveForceLimit = driveForceLimit.ptr;
          if (isAcceleration && typeof isAcceleration === "object")
            isAcceleration = isAcceleration.ptr;
          if (driveStiffness === void 0) {
            this.ptr = _emscripten_bind_PxD6JointDrive_PxD6JointDrive_0();
            getCache(PxD6JointDrive)[this.ptr] = this;
            return;
          }
          if (driveDamping === void 0) {
            this.ptr = _emscripten_bind_PxD6JointDrive_PxD6JointDrive_1(driveStiffness);
            getCache(PxD6JointDrive)[this.ptr] = this;
            return;
          }
          if (driveForceLimit === void 0) {
            this.ptr = _emscripten_bind_PxD6JointDrive_PxD6JointDrive_2(driveStiffness, driveDamping);
            getCache(PxD6JointDrive)[this.ptr] = this;
            return;
          }
          if (isAcceleration === void 0) {
            this.ptr = _emscripten_bind_PxD6JointDrive_PxD6JointDrive_3(driveStiffness, driveDamping, driveForceLimit);
            getCache(PxD6JointDrive)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxD6JointDrive_PxD6JointDrive_4(driveStiffness, driveDamping, driveForceLimit, isAcceleration);
          getCache(PxD6JointDrive)[this.ptr] = this;
        }
        ;
        ;
        PxD6JointDrive.prototype = Object.create(PxSpring.prototype);
        PxD6JointDrive.prototype.constructor = PxD6JointDrive;
        PxD6JointDrive.prototype.__class__ = PxD6JointDrive;
        PxD6JointDrive.__cache__ = {};
        Module["PxD6JointDrive"] = PxD6JointDrive;
        PxD6JointDrive.prototype["get_forceLimit"] = PxD6JointDrive.prototype.get_forceLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6JointDrive_get_forceLimit_0(self2);
        };
        PxD6JointDrive.prototype["set_forceLimit"] = PxD6JointDrive.prototype.set_forceLimit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxD6JointDrive_set_forceLimit_1(self2, arg0);
        };
        Object.defineProperty(PxD6JointDrive.prototype, "forceLimit", { get: PxD6JointDrive.prototype.get_forceLimit, set: PxD6JointDrive.prototype.set_forceLimit });
        PxD6JointDrive.prototype["get_flags"] = PxD6JointDrive.prototype.get_flags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxD6JointDrive_get_flags_0(self2), PxD6JointDriveFlags);
        };
        PxD6JointDrive.prototype["set_flags"] = PxD6JointDrive.prototype.set_flags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxD6JointDrive_set_flags_1(self2, arg0);
        };
        Object.defineProperty(PxD6JointDrive.prototype, "flags", { get: PxD6JointDrive.prototype.get_flags, set: PxD6JointDrive.prototype.set_flags });
        PxD6JointDrive.prototype["get_stiffness"] = PxD6JointDrive.prototype.get_stiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6JointDrive_get_stiffness_0(self2);
        };
        PxD6JointDrive.prototype["set_stiffness"] = PxD6JointDrive.prototype.set_stiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxD6JointDrive_set_stiffness_1(self2, arg0);
        };
        Object.defineProperty(PxD6JointDrive.prototype, "stiffness", { get: PxD6JointDrive.prototype.get_stiffness, set: PxD6JointDrive.prototype.set_stiffness });
        PxD6JointDrive.prototype["get_damping"] = PxD6JointDrive.prototype.get_damping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxD6JointDrive_get_damping_0(self2);
        };
        PxD6JointDrive.prototype["set_damping"] = PxD6JointDrive.prototype.set_damping = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxD6JointDrive_set_damping_1(self2, arg0);
        };
        Object.defineProperty(PxD6JointDrive.prototype, "damping", { get: PxD6JointDrive.prototype.get_damping, set: PxD6JointDrive.prototype.set_damping });
        PxD6JointDrive.prototype["__destroy__"] = PxD6JointDrive.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxD6JointDrive___destroy___0(self2);
        };
        function PxD6JointDriveFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxD6JointDriveFlags_PxD6JointDriveFlags_1(flags);
          getCache(PxD6JointDriveFlags)[this.ptr] = this;
        }
        ;
        ;
        PxD6JointDriveFlags.prototype = Object.create(WrapperObject.prototype);
        PxD6JointDriveFlags.prototype.constructor = PxD6JointDriveFlags;
        PxD6JointDriveFlags.prototype.__class__ = PxD6JointDriveFlags;
        PxD6JointDriveFlags.__cache__ = {};
        Module["PxD6JointDriveFlags"] = PxD6JointDriveFlags;
        PxD6JointDriveFlags.prototype["isSet"] = PxD6JointDriveFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxD6JointDriveFlags_isSet_1(self2, flag);
        };
        ;
        PxD6JointDriveFlags.prototype["set"] = PxD6JointDriveFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxD6JointDriveFlags_set_1(self2, flag);
        };
        ;
        PxD6JointDriveFlags.prototype["clear"] = PxD6JointDriveFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxD6JointDriveFlags_clear_1(self2, flag);
        };
        ;
        PxD6JointDriveFlags.prototype["__destroy__"] = PxD6JointDriveFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxD6JointDriveFlags___destroy___0(self2);
        };
        function PxDefaultAllocator() {
          this.ptr = _emscripten_bind_PxDefaultAllocator_PxDefaultAllocator_0();
          getCache(PxDefaultAllocator)[this.ptr] = this;
        }
        ;
        ;
        PxDefaultAllocator.prototype = Object.create(WrapperObject.prototype);
        PxDefaultAllocator.prototype.constructor = PxDefaultAllocator;
        PxDefaultAllocator.prototype.__class__ = PxDefaultAllocator;
        PxDefaultAllocator.__cache__ = {};
        Module["PxDefaultAllocator"] = PxDefaultAllocator;
        PxDefaultAllocator.prototype["__destroy__"] = PxDefaultAllocator.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDefaultAllocator___destroy___0(self2);
        };
        function PxDefaultCpuDispatcher() {
          throw "cannot construct a PxDefaultCpuDispatcher, no constructor in IDL";
        }
        PxDefaultCpuDispatcher.prototype = Object.create(PxCpuDispatcher.prototype);
        PxDefaultCpuDispatcher.prototype.constructor = PxDefaultCpuDispatcher;
        PxDefaultCpuDispatcher.prototype.__class__ = PxDefaultCpuDispatcher;
        PxDefaultCpuDispatcher.__cache__ = {};
        Module["PxDefaultCpuDispatcher"] = PxDefaultCpuDispatcher;
        PxDefaultCpuDispatcher.prototype["__destroy__"] = PxDefaultCpuDispatcher.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDefaultCpuDispatcher___destroy___0(self2);
        };
        function PxDefaultMemoryInputData(data, length) {
          if (data && typeof data === "object")
            data = data.ptr;
          if (length && typeof length === "object")
            length = length.ptr;
          this.ptr = _emscripten_bind_PxDefaultMemoryInputData_PxDefaultMemoryInputData_2(data, length);
          getCache(PxDefaultMemoryInputData)[this.ptr] = this;
        }
        ;
        ;
        PxDefaultMemoryInputData.prototype = Object.create(PxInputData.prototype);
        PxDefaultMemoryInputData.prototype.constructor = PxDefaultMemoryInputData;
        PxDefaultMemoryInputData.prototype.__class__ = PxDefaultMemoryInputData;
        PxDefaultMemoryInputData.__cache__ = {};
        Module["PxDefaultMemoryInputData"] = PxDefaultMemoryInputData;
        PxDefaultMemoryInputData.prototype["read"] = PxDefaultMemoryInputData.prototype.read = function(dest, count) {
          var self2 = this.ptr;
          if (dest && typeof dest === "object")
            dest = dest.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          return _emscripten_bind_PxDefaultMemoryInputData_read_2(self2, dest, count);
        };
        ;
        PxDefaultMemoryInputData.prototype["getLength"] = PxDefaultMemoryInputData.prototype.getLength = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDefaultMemoryInputData_getLength_0(self2);
        };
        ;
        PxDefaultMemoryInputData.prototype["seek"] = PxDefaultMemoryInputData.prototype.seek = function(pos) {
          var self2 = this.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          _emscripten_bind_PxDefaultMemoryInputData_seek_1(self2, pos);
        };
        ;
        PxDefaultMemoryInputData.prototype["tell"] = PxDefaultMemoryInputData.prototype.tell = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDefaultMemoryInputData_tell_0(self2);
        };
        ;
        PxDefaultMemoryInputData.prototype["__destroy__"] = PxDefaultMemoryInputData.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDefaultMemoryInputData___destroy___0(self2);
        };
        function PxDefaultMemoryOutputStream() {
          this.ptr = _emscripten_bind_PxDefaultMemoryOutputStream_PxDefaultMemoryOutputStream_0();
          getCache(PxDefaultMemoryOutputStream)[this.ptr] = this;
        }
        ;
        ;
        PxDefaultMemoryOutputStream.prototype = Object.create(PxOutputStream.prototype);
        PxDefaultMemoryOutputStream.prototype.constructor = PxDefaultMemoryOutputStream;
        PxDefaultMemoryOutputStream.prototype.__class__ = PxDefaultMemoryOutputStream;
        PxDefaultMemoryOutputStream.__cache__ = {};
        Module["PxDefaultMemoryOutputStream"] = PxDefaultMemoryOutputStream;
        PxDefaultMemoryOutputStream.prototype["write"] = PxDefaultMemoryOutputStream.prototype.write = function(src, count) {
          var self2 = this.ptr;
          if (src && typeof src === "object")
            src = src.ptr;
          if (count && typeof count === "object")
            count = count.ptr;
          _emscripten_bind_PxDefaultMemoryOutputStream_write_2(self2, src, count);
        };
        ;
        PxDefaultMemoryOutputStream.prototype["getSize"] = PxDefaultMemoryOutputStream.prototype.getSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDefaultMemoryOutputStream_getSize_0(self2);
        };
        ;
        PxDefaultMemoryOutputStream.prototype["getData"] = PxDefaultMemoryOutputStream.prototype.getData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDefaultMemoryOutputStream_getData_0(self2), VoidPtr);
        };
        ;
        PxDefaultMemoryOutputStream.prototype["__destroy__"] = PxDefaultMemoryOutputStream.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDefaultMemoryOutputStream___destroy___0(self2);
        };
        function PxDistanceJoint() {
          throw "cannot construct a PxDistanceJoint, no constructor in IDL";
        }
        PxDistanceJoint.prototype = Object.create(PxJoint.prototype);
        PxDistanceJoint.prototype.constructor = PxDistanceJoint;
        PxDistanceJoint.prototype.__class__ = PxDistanceJoint;
        PxDistanceJoint.__cache__ = {};
        Module["PxDistanceJoint"] = PxDistanceJoint;
        PxDistanceJoint.prototype["getDistance"] = PxDistanceJoint.prototype.getDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getDistance_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setMinDistance"] = PxDistanceJoint.prototype.setMinDistance = function(distance) {
          var self2 = this.ptr;
          if (distance && typeof distance === "object")
            distance = distance.ptr;
          _emscripten_bind_PxDistanceJoint_setMinDistance_1(self2, distance);
        };
        ;
        PxDistanceJoint.prototype["getMinDistance"] = PxDistanceJoint.prototype.getMinDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getMinDistance_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setMaxDistance"] = PxDistanceJoint.prototype.setMaxDistance = function(distance) {
          var self2 = this.ptr;
          if (distance && typeof distance === "object")
            distance = distance.ptr;
          _emscripten_bind_PxDistanceJoint_setMaxDistance_1(self2, distance);
        };
        ;
        PxDistanceJoint.prototype["getMaxDistance"] = PxDistanceJoint.prototype.getMaxDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getMaxDistance_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setTolerance"] = PxDistanceJoint.prototype.setTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxDistanceJoint_setTolerance_1(self2, tolerance);
        };
        ;
        PxDistanceJoint.prototype["getTolerance"] = PxDistanceJoint.prototype.getTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getTolerance_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setStiffness"] = PxDistanceJoint.prototype.setStiffness = function(stiffness) {
          var self2 = this.ptr;
          if (stiffness && typeof stiffness === "object")
            stiffness = stiffness.ptr;
          _emscripten_bind_PxDistanceJoint_setStiffness_1(self2, stiffness);
        };
        ;
        PxDistanceJoint.prototype["getStiffness"] = PxDistanceJoint.prototype.getStiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getStiffness_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setDamping"] = PxDistanceJoint.prototype.setDamping = function(damping) {
          var self2 = this.ptr;
          if (damping && typeof damping === "object")
            damping = damping.ptr;
          _emscripten_bind_PxDistanceJoint_setDamping_1(self2, damping);
        };
        ;
        PxDistanceJoint.prototype["getDamping"] = PxDistanceJoint.prototype.getDamping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getDamping_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setDistanceJointFlags"] = PxDistanceJoint.prototype.setDistanceJointFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxDistanceJoint_setDistanceJointFlags_1(self2, flags);
        };
        ;
        PxDistanceJoint.prototype["setDistanceJointFlag"] = PxDistanceJoint.prototype.setDistanceJointFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxDistanceJoint_setDistanceJointFlag_2(self2, flag, value);
        };
        ;
        PxDistanceJoint.prototype["getDistanceJointFlags"] = PxDistanceJoint.prototype.getDistanceJointFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getDistanceJointFlags_0(self2), PxDistanceJointFlags);
        };
        ;
        PxDistanceJoint.prototype["getConcreteTypeName"] = PxDistanceJoint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxDistanceJoint_getConcreteTypeName_0(self2));
        };
        ;
        PxDistanceJoint.prototype["getConcreteType"] = PxDistanceJoint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getConcreteType_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setBaseFlag"] = PxDistanceJoint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxDistanceJoint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxDistanceJoint.prototype["setBaseFlags"] = PxDistanceJoint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxDistanceJoint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxDistanceJoint.prototype["getBaseFlags"] = PxDistanceJoint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxDistanceJoint.prototype["isReleasable"] = PxDistanceJoint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxDistanceJoint_isReleasable_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setActors"] = PxDistanceJoint.prototype.setActors = function(actor0, actor1) {
          var self2 = this.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          _emscripten_bind_PxDistanceJoint_setActors_2(self2, actor0, actor1);
        };
        ;
        PxDistanceJoint.prototype["setLocalPose"] = PxDistanceJoint.prototype.setLocalPose = function(actor, localPose) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (localPose && typeof localPose === "object")
            localPose = localPose.ptr;
          _emscripten_bind_PxDistanceJoint_setLocalPose_2(self2, actor, localPose);
        };
        ;
        PxDistanceJoint.prototype["getLocalPose"] = PxDistanceJoint.prototype.getLocalPose = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getLocalPose_1(self2, actor), PxTransform);
        };
        ;
        PxDistanceJoint.prototype["getRelativeTransform"] = PxDistanceJoint.prototype.getRelativeTransform = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getRelativeTransform_0(self2), PxTransform);
        };
        ;
        PxDistanceJoint.prototype["getRelativeLinearVelocity"] = PxDistanceJoint.prototype.getRelativeLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getRelativeLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxDistanceJoint.prototype["getRelativeAngularVelocity"] = PxDistanceJoint.prototype.getRelativeAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getRelativeAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxDistanceJoint.prototype["setBreakForce"] = PxDistanceJoint.prototype.setBreakForce = function(force, torque) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          _emscripten_bind_PxDistanceJoint_setBreakForce_2(self2, force, torque);
        };
        ;
        PxDistanceJoint.prototype["setConstraintFlags"] = PxDistanceJoint.prototype.setConstraintFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxDistanceJoint_setConstraintFlags_1(self2, flags);
        };
        ;
        PxDistanceJoint.prototype["setConstraintFlag"] = PxDistanceJoint.prototype.setConstraintFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxDistanceJoint_setConstraintFlag_2(self2, flag, value);
        };
        ;
        PxDistanceJoint.prototype["getConstraintFlags"] = PxDistanceJoint.prototype.getConstraintFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getConstraintFlags_0(self2), PxConstraintFlags);
        };
        ;
        PxDistanceJoint.prototype["setInvMassScale0"] = PxDistanceJoint.prototype.setInvMassScale0 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxDistanceJoint_setInvMassScale0_1(self2, invMassScale);
        };
        ;
        PxDistanceJoint.prototype["getInvMassScale0"] = PxDistanceJoint.prototype.getInvMassScale0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getInvMassScale0_0(self2);
        };
        ;
        PxDistanceJoint.prototype["setInvMassScale1"] = PxDistanceJoint.prototype.setInvMassScale1 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxDistanceJoint_setInvMassScale1_1(self2, invMassScale);
        };
        ;
        PxDistanceJoint.prototype["getInvMassScale1"] = PxDistanceJoint.prototype.getInvMassScale1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxDistanceJoint_getInvMassScale1_0(self2);
        };
        ;
        PxDistanceJoint.prototype["getConstraint"] = PxDistanceJoint.prototype.getConstraint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getConstraint_0(self2), PxConstraint);
        };
        ;
        PxDistanceJoint.prototype["setName"] = PxDistanceJoint.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxDistanceJoint_setName_1(self2, name);
        };
        ;
        PxDistanceJoint.prototype["getName"] = PxDistanceJoint.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxDistanceJoint_getName_0(self2));
        };
        ;
        PxDistanceJoint.prototype["release"] = PxDistanceJoint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDistanceJoint_release_0(self2);
        };
        ;
        PxDistanceJoint.prototype["getScene"] = PxDistanceJoint.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxDistanceJoint_getScene_0(self2), PxScene);
        };
        ;
        PxDistanceJoint.prototype["__destroy__"] = PxDistanceJoint.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDistanceJoint___destroy___0(self2);
        };
        function PxDistanceJointFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxDistanceJointFlags_PxDistanceJointFlags_1(flags);
          getCache(PxDistanceJointFlags)[this.ptr] = this;
        }
        ;
        ;
        PxDistanceJointFlags.prototype = Object.create(WrapperObject.prototype);
        PxDistanceJointFlags.prototype.constructor = PxDistanceJointFlags;
        PxDistanceJointFlags.prototype.__class__ = PxDistanceJointFlags;
        PxDistanceJointFlags.__cache__ = {};
        Module["PxDistanceJointFlags"] = PxDistanceJointFlags;
        PxDistanceJointFlags.prototype["isSet"] = PxDistanceJointFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxDistanceJointFlags_isSet_1(self2, flag);
        };
        ;
        PxDistanceJointFlags.prototype["set"] = PxDistanceJointFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxDistanceJointFlags_set_1(self2, flag);
        };
        ;
        PxDistanceJointFlags.prototype["clear"] = PxDistanceJointFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxDistanceJointFlags_clear_1(self2, flag);
        };
        ;
        PxDistanceJointFlags.prototype["__destroy__"] = PxDistanceJointFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxDistanceJointFlags___destroy___0(self2);
        };
        function PxFixedJoint() {
          throw "cannot construct a PxFixedJoint, no constructor in IDL";
        }
        PxFixedJoint.prototype = Object.create(PxJoint.prototype);
        PxFixedJoint.prototype.constructor = PxFixedJoint;
        PxFixedJoint.prototype.__class__ = PxFixedJoint;
        PxFixedJoint.__cache__ = {};
        Module["PxFixedJoint"] = PxFixedJoint;
        PxFixedJoint.prototype["setProjectionLinearTolerance"] = PxFixedJoint.prototype.setProjectionLinearTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxFixedJoint_setProjectionLinearTolerance_1(self2, tolerance);
        };
        ;
        PxFixedJoint.prototype["getProjectionLinearTolerance"] = PxFixedJoint.prototype.getProjectionLinearTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFixedJoint_getProjectionLinearTolerance_0(self2);
        };
        ;
        PxFixedJoint.prototype["setProjectionAngularTolerance"] = PxFixedJoint.prototype.setProjectionAngularTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxFixedJoint_setProjectionAngularTolerance_1(self2, tolerance);
        };
        ;
        PxFixedJoint.prototype["getProjectionAngularTolerance"] = PxFixedJoint.prototype.getProjectionAngularTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFixedJoint_getProjectionAngularTolerance_0(self2);
        };
        ;
        PxFixedJoint.prototype["getConcreteTypeName"] = PxFixedJoint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxFixedJoint_getConcreteTypeName_0(self2));
        };
        ;
        PxFixedJoint.prototype["getConcreteType"] = PxFixedJoint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFixedJoint_getConcreteType_0(self2);
        };
        ;
        PxFixedJoint.prototype["setBaseFlag"] = PxFixedJoint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxFixedJoint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxFixedJoint.prototype["setBaseFlags"] = PxFixedJoint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxFixedJoint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxFixedJoint.prototype["getBaseFlags"] = PxFixedJoint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxFixedJoint.prototype["isReleasable"] = PxFixedJoint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxFixedJoint_isReleasable_0(self2);
        };
        ;
        PxFixedJoint.prototype["setActors"] = PxFixedJoint.prototype.setActors = function(actor0, actor1) {
          var self2 = this.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          _emscripten_bind_PxFixedJoint_setActors_2(self2, actor0, actor1);
        };
        ;
        PxFixedJoint.prototype["setLocalPose"] = PxFixedJoint.prototype.setLocalPose = function(actor, localPose) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (localPose && typeof localPose === "object")
            localPose = localPose.ptr;
          _emscripten_bind_PxFixedJoint_setLocalPose_2(self2, actor, localPose);
        };
        ;
        PxFixedJoint.prototype["getLocalPose"] = PxFixedJoint.prototype.getLocalPose = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getLocalPose_1(self2, actor), PxTransform);
        };
        ;
        PxFixedJoint.prototype["getRelativeTransform"] = PxFixedJoint.prototype.getRelativeTransform = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getRelativeTransform_0(self2), PxTransform);
        };
        ;
        PxFixedJoint.prototype["getRelativeLinearVelocity"] = PxFixedJoint.prototype.getRelativeLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getRelativeLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxFixedJoint.prototype["getRelativeAngularVelocity"] = PxFixedJoint.prototype.getRelativeAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getRelativeAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxFixedJoint.prototype["setBreakForce"] = PxFixedJoint.prototype.setBreakForce = function(force, torque) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          _emscripten_bind_PxFixedJoint_setBreakForce_2(self2, force, torque);
        };
        ;
        PxFixedJoint.prototype["setConstraintFlags"] = PxFixedJoint.prototype.setConstraintFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxFixedJoint_setConstraintFlags_1(self2, flags);
        };
        ;
        PxFixedJoint.prototype["setConstraintFlag"] = PxFixedJoint.prototype.setConstraintFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxFixedJoint_setConstraintFlag_2(self2, flag, value);
        };
        ;
        PxFixedJoint.prototype["getConstraintFlags"] = PxFixedJoint.prototype.getConstraintFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getConstraintFlags_0(self2), PxConstraintFlags);
        };
        ;
        PxFixedJoint.prototype["setInvMassScale0"] = PxFixedJoint.prototype.setInvMassScale0 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxFixedJoint_setInvMassScale0_1(self2, invMassScale);
        };
        ;
        PxFixedJoint.prototype["getInvMassScale0"] = PxFixedJoint.prototype.getInvMassScale0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFixedJoint_getInvMassScale0_0(self2);
        };
        ;
        PxFixedJoint.prototype["setInvMassScale1"] = PxFixedJoint.prototype.setInvMassScale1 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxFixedJoint_setInvMassScale1_1(self2, invMassScale);
        };
        ;
        PxFixedJoint.prototype["getInvMassScale1"] = PxFixedJoint.prototype.getInvMassScale1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxFixedJoint_getInvMassScale1_0(self2);
        };
        ;
        PxFixedJoint.prototype["getConstraint"] = PxFixedJoint.prototype.getConstraint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getConstraint_0(self2), PxConstraint);
        };
        ;
        PxFixedJoint.prototype["setName"] = PxFixedJoint.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxFixedJoint_setName_1(self2, name);
        };
        ;
        PxFixedJoint.prototype["getName"] = PxFixedJoint.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxFixedJoint_getName_0(self2));
        };
        ;
        PxFixedJoint.prototype["release"] = PxFixedJoint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxFixedJoint_release_0(self2);
        };
        ;
        PxFixedJoint.prototype["getScene"] = PxFixedJoint.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxFixedJoint_getScene_0(self2), PxScene);
        };
        ;
        PxFixedJoint.prototype["__destroy__"] = PxFixedJoint.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxFixedJoint___destroy___0(self2);
        };
        function PxJointAngularLimitPair(lowerLimit, upperLimit, spring) {
          if (lowerLimit && typeof lowerLimit === "object")
            lowerLimit = lowerLimit.ptr;
          if (upperLimit && typeof upperLimit === "object")
            upperLimit = upperLimit.ptr;
          if (spring && typeof spring === "object")
            spring = spring.ptr;
          this.ptr = _emscripten_bind_PxJointAngularLimitPair_PxJointAngularLimitPair_3(lowerLimit, upperLimit, spring);
          getCache(PxJointAngularLimitPair)[this.ptr] = this;
        }
        ;
        ;
        PxJointAngularLimitPair.prototype = Object.create(PxJointLimitParameters.prototype);
        PxJointAngularLimitPair.prototype.constructor = PxJointAngularLimitPair;
        PxJointAngularLimitPair.prototype.__class__ = PxJointAngularLimitPair;
        PxJointAngularLimitPair.__cache__ = {};
        Module["PxJointAngularLimitPair"] = PxJointAngularLimitPair;
        PxJointAngularLimitPair.prototype["isValid"] = PxJointAngularLimitPair.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointAngularLimitPair_isValid_0(self2);
        };
        ;
        PxJointAngularLimitPair.prototype["isSoft"] = PxJointAngularLimitPair.prototype.isSoft = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointAngularLimitPair_isSoft_0(self2);
        };
        ;
        PxJointAngularLimitPair.prototype["get_upper"] = PxJointAngularLimitPair.prototype.get_upper = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointAngularLimitPair_get_upper_0(self2);
        };
        PxJointAngularLimitPair.prototype["set_upper"] = PxJointAngularLimitPair.prototype.set_upper = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointAngularLimitPair_set_upper_1(self2, arg0);
        };
        Object.defineProperty(PxJointAngularLimitPair.prototype, "upper", { get: PxJointAngularLimitPair.prototype.get_upper, set: PxJointAngularLimitPair.prototype.set_upper });
        PxJointAngularLimitPair.prototype["get_lower"] = PxJointAngularLimitPair.prototype.get_lower = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointAngularLimitPair_get_lower_0(self2);
        };
        PxJointAngularLimitPair.prototype["set_lower"] = PxJointAngularLimitPair.prototype.set_lower = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointAngularLimitPair_set_lower_1(self2, arg0);
        };
        Object.defineProperty(PxJointAngularLimitPair.prototype, "lower", { get: PxJointAngularLimitPair.prototype.get_lower, set: PxJointAngularLimitPair.prototype.set_lower });
        PxJointAngularLimitPair.prototype["get_restitution"] = PxJointAngularLimitPair.prototype.get_restitution = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointAngularLimitPair_get_restitution_0(self2);
        };
        PxJointAngularLimitPair.prototype["set_restitution"] = PxJointAngularLimitPair.prototype.set_restitution = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointAngularLimitPair_set_restitution_1(self2, arg0);
        };
        Object.defineProperty(PxJointAngularLimitPair.prototype, "restitution", { get: PxJointAngularLimitPair.prototype.get_restitution, set: PxJointAngularLimitPair.prototype.set_restitution });
        PxJointAngularLimitPair.prototype["get_bounceThreshold"] = PxJointAngularLimitPair.prototype.get_bounceThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointAngularLimitPair_get_bounceThreshold_0(self2);
        };
        PxJointAngularLimitPair.prototype["set_bounceThreshold"] = PxJointAngularLimitPair.prototype.set_bounceThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointAngularLimitPair_set_bounceThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxJointAngularLimitPair.prototype, "bounceThreshold", { get: PxJointAngularLimitPair.prototype.get_bounceThreshold, set: PxJointAngularLimitPair.prototype.set_bounceThreshold });
        PxJointAngularLimitPair.prototype["get_stiffness"] = PxJointAngularLimitPair.prototype.get_stiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointAngularLimitPair_get_stiffness_0(self2);
        };
        PxJointAngularLimitPair.prototype["set_stiffness"] = PxJointAngularLimitPair.prototype.set_stiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointAngularLimitPair_set_stiffness_1(self2, arg0);
        };
        Object.defineProperty(PxJointAngularLimitPair.prototype, "stiffness", { get: PxJointAngularLimitPair.prototype.get_stiffness, set: PxJointAngularLimitPair.prototype.set_stiffness });
        PxJointAngularLimitPair.prototype["get_damping"] = PxJointAngularLimitPair.prototype.get_damping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointAngularLimitPair_get_damping_0(self2);
        };
        PxJointAngularLimitPair.prototype["set_damping"] = PxJointAngularLimitPair.prototype.set_damping = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointAngularLimitPair_set_damping_1(self2, arg0);
        };
        Object.defineProperty(PxJointAngularLimitPair.prototype, "damping", { get: PxJointAngularLimitPair.prototype.get_damping, set: PxJointAngularLimitPair.prototype.set_damping });
        PxJointAngularLimitPair.prototype["get_contactDistance"] = PxJointAngularLimitPair.prototype.get_contactDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointAngularLimitPair_get_contactDistance_0(self2);
        };
        PxJointAngularLimitPair.prototype["set_contactDistance"] = PxJointAngularLimitPair.prototype.set_contactDistance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointAngularLimitPair_set_contactDistance_1(self2, arg0);
        };
        Object.defineProperty(PxJointAngularLimitPair.prototype, "contactDistance", { get: PxJointAngularLimitPair.prototype.get_contactDistance, set: PxJointAngularLimitPair.prototype.set_contactDistance });
        PxJointAngularLimitPair.prototype["__destroy__"] = PxJointAngularLimitPair.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxJointAngularLimitPair___destroy___0(self2);
        };
        function PxJointLimitCone(yLimitAngle, zLimitAngle, spring) {
          if (yLimitAngle && typeof yLimitAngle === "object")
            yLimitAngle = yLimitAngle.ptr;
          if (zLimitAngle && typeof zLimitAngle === "object")
            zLimitAngle = zLimitAngle.ptr;
          if (spring && typeof spring === "object")
            spring = spring.ptr;
          this.ptr = _emscripten_bind_PxJointLimitCone_PxJointLimitCone_3(yLimitAngle, zLimitAngle, spring);
          getCache(PxJointLimitCone)[this.ptr] = this;
        }
        ;
        ;
        PxJointLimitCone.prototype = Object.create(PxJointLimitParameters.prototype);
        PxJointLimitCone.prototype.constructor = PxJointLimitCone;
        PxJointLimitCone.prototype.__class__ = PxJointLimitCone;
        PxJointLimitCone.__cache__ = {};
        Module["PxJointLimitCone"] = PxJointLimitCone;
        PxJointLimitCone.prototype["isValid"] = PxJointLimitCone.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLimitCone_isValid_0(self2);
        };
        ;
        PxJointLimitCone.prototype["isSoft"] = PxJointLimitCone.prototype.isSoft = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLimitCone_isSoft_0(self2);
        };
        ;
        PxJointLimitCone.prototype["get_yAngle"] = PxJointLimitCone.prototype.get_yAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitCone_get_yAngle_0(self2);
        };
        PxJointLimitCone.prototype["set_yAngle"] = PxJointLimitCone.prototype.set_yAngle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitCone_set_yAngle_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitCone.prototype, "yAngle", { get: PxJointLimitCone.prototype.get_yAngle, set: PxJointLimitCone.prototype.set_yAngle });
        PxJointLimitCone.prototype["get_zAngle"] = PxJointLimitCone.prototype.get_zAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitCone_get_zAngle_0(self2);
        };
        PxJointLimitCone.prototype["set_zAngle"] = PxJointLimitCone.prototype.set_zAngle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitCone_set_zAngle_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitCone.prototype, "zAngle", { get: PxJointLimitCone.prototype.get_zAngle, set: PxJointLimitCone.prototype.set_zAngle });
        PxJointLimitCone.prototype["get_restitution"] = PxJointLimitCone.prototype.get_restitution = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitCone_get_restitution_0(self2);
        };
        PxJointLimitCone.prototype["set_restitution"] = PxJointLimitCone.prototype.set_restitution = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitCone_set_restitution_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitCone.prototype, "restitution", { get: PxJointLimitCone.prototype.get_restitution, set: PxJointLimitCone.prototype.set_restitution });
        PxJointLimitCone.prototype["get_bounceThreshold"] = PxJointLimitCone.prototype.get_bounceThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitCone_get_bounceThreshold_0(self2);
        };
        PxJointLimitCone.prototype["set_bounceThreshold"] = PxJointLimitCone.prototype.set_bounceThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitCone_set_bounceThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitCone.prototype, "bounceThreshold", { get: PxJointLimitCone.prototype.get_bounceThreshold, set: PxJointLimitCone.prototype.set_bounceThreshold });
        PxJointLimitCone.prototype["get_stiffness"] = PxJointLimitCone.prototype.get_stiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitCone_get_stiffness_0(self2);
        };
        PxJointLimitCone.prototype["set_stiffness"] = PxJointLimitCone.prototype.set_stiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitCone_set_stiffness_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitCone.prototype, "stiffness", { get: PxJointLimitCone.prototype.get_stiffness, set: PxJointLimitCone.prototype.set_stiffness });
        PxJointLimitCone.prototype["get_damping"] = PxJointLimitCone.prototype.get_damping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitCone_get_damping_0(self2);
        };
        PxJointLimitCone.prototype["set_damping"] = PxJointLimitCone.prototype.set_damping = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitCone_set_damping_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitCone.prototype, "damping", { get: PxJointLimitCone.prototype.get_damping, set: PxJointLimitCone.prototype.set_damping });
        PxJointLimitCone.prototype["get_contactDistance"] = PxJointLimitCone.prototype.get_contactDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitCone_get_contactDistance_0(self2);
        };
        PxJointLimitCone.prototype["set_contactDistance"] = PxJointLimitCone.prototype.set_contactDistance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitCone_set_contactDistance_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitCone.prototype, "contactDistance", { get: PxJointLimitCone.prototype.get_contactDistance, set: PxJointLimitCone.prototype.set_contactDistance });
        PxJointLimitCone.prototype["__destroy__"] = PxJointLimitCone.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxJointLimitCone___destroy___0(self2);
        };
        function PxJointLimitPyramid(yLimitAngleMin, yLimitAngleMax, zLimitAngleMin, zLimitAngleMax, spring) {
          if (yLimitAngleMin && typeof yLimitAngleMin === "object")
            yLimitAngleMin = yLimitAngleMin.ptr;
          if (yLimitAngleMax && typeof yLimitAngleMax === "object")
            yLimitAngleMax = yLimitAngleMax.ptr;
          if (zLimitAngleMin && typeof zLimitAngleMin === "object")
            zLimitAngleMin = zLimitAngleMin.ptr;
          if (zLimitAngleMax && typeof zLimitAngleMax === "object")
            zLimitAngleMax = zLimitAngleMax.ptr;
          if (spring && typeof spring === "object")
            spring = spring.ptr;
          this.ptr = _emscripten_bind_PxJointLimitPyramid_PxJointLimitPyramid_5(yLimitAngleMin, yLimitAngleMax, zLimitAngleMin, zLimitAngleMax, spring);
          getCache(PxJointLimitPyramid)[this.ptr] = this;
        }
        ;
        ;
        PxJointLimitPyramid.prototype = Object.create(PxJointLimitParameters.prototype);
        PxJointLimitPyramid.prototype.constructor = PxJointLimitPyramid;
        PxJointLimitPyramid.prototype.__class__ = PxJointLimitPyramid;
        PxJointLimitPyramid.__cache__ = {};
        Module["PxJointLimitPyramid"] = PxJointLimitPyramid;
        PxJointLimitPyramid.prototype["isValid"] = PxJointLimitPyramid.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLimitPyramid_isValid_0(self2);
        };
        ;
        PxJointLimitPyramid.prototype["isSoft"] = PxJointLimitPyramid.prototype.isSoft = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLimitPyramid_isSoft_0(self2);
        };
        ;
        PxJointLimitPyramid.prototype["get_yAngleMin"] = PxJointLimitPyramid.prototype.get_yAngleMin = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_yAngleMin_0(self2);
        };
        PxJointLimitPyramid.prototype["set_yAngleMin"] = PxJointLimitPyramid.prototype.set_yAngleMin = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_yAngleMin_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "yAngleMin", { get: PxJointLimitPyramid.prototype.get_yAngleMin, set: PxJointLimitPyramid.prototype.set_yAngleMin });
        PxJointLimitPyramid.prototype["get_yAngleMax"] = PxJointLimitPyramid.prototype.get_yAngleMax = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_yAngleMax_0(self2);
        };
        PxJointLimitPyramid.prototype["set_yAngleMax"] = PxJointLimitPyramid.prototype.set_yAngleMax = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_yAngleMax_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "yAngleMax", { get: PxJointLimitPyramid.prototype.get_yAngleMax, set: PxJointLimitPyramid.prototype.set_yAngleMax });
        PxJointLimitPyramid.prototype["get_zAngleMin"] = PxJointLimitPyramid.prototype.get_zAngleMin = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_zAngleMin_0(self2);
        };
        PxJointLimitPyramid.prototype["set_zAngleMin"] = PxJointLimitPyramid.prototype.set_zAngleMin = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_zAngleMin_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "zAngleMin", { get: PxJointLimitPyramid.prototype.get_zAngleMin, set: PxJointLimitPyramid.prototype.set_zAngleMin });
        PxJointLimitPyramid.prototype["get_zAngleMax"] = PxJointLimitPyramid.prototype.get_zAngleMax = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_zAngleMax_0(self2);
        };
        PxJointLimitPyramid.prototype["set_zAngleMax"] = PxJointLimitPyramid.prototype.set_zAngleMax = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_zAngleMax_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "zAngleMax", { get: PxJointLimitPyramid.prototype.get_zAngleMax, set: PxJointLimitPyramid.prototype.set_zAngleMax });
        PxJointLimitPyramid.prototype["get_restitution"] = PxJointLimitPyramid.prototype.get_restitution = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_restitution_0(self2);
        };
        PxJointLimitPyramid.prototype["set_restitution"] = PxJointLimitPyramid.prototype.set_restitution = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_restitution_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "restitution", { get: PxJointLimitPyramid.prototype.get_restitution, set: PxJointLimitPyramid.prototype.set_restitution });
        PxJointLimitPyramid.prototype["get_bounceThreshold"] = PxJointLimitPyramid.prototype.get_bounceThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_bounceThreshold_0(self2);
        };
        PxJointLimitPyramid.prototype["set_bounceThreshold"] = PxJointLimitPyramid.prototype.set_bounceThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_bounceThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "bounceThreshold", { get: PxJointLimitPyramid.prototype.get_bounceThreshold, set: PxJointLimitPyramid.prototype.set_bounceThreshold });
        PxJointLimitPyramid.prototype["get_stiffness"] = PxJointLimitPyramid.prototype.get_stiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_stiffness_0(self2);
        };
        PxJointLimitPyramid.prototype["set_stiffness"] = PxJointLimitPyramid.prototype.set_stiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_stiffness_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "stiffness", { get: PxJointLimitPyramid.prototype.get_stiffness, set: PxJointLimitPyramid.prototype.set_stiffness });
        PxJointLimitPyramid.prototype["get_damping"] = PxJointLimitPyramid.prototype.get_damping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_damping_0(self2);
        };
        PxJointLimitPyramid.prototype["set_damping"] = PxJointLimitPyramid.prototype.set_damping = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_damping_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "damping", { get: PxJointLimitPyramid.prototype.get_damping, set: PxJointLimitPyramid.prototype.set_damping });
        PxJointLimitPyramid.prototype["get_contactDistance"] = PxJointLimitPyramid.prototype.get_contactDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLimitPyramid_get_contactDistance_0(self2);
        };
        PxJointLimitPyramid.prototype["set_contactDistance"] = PxJointLimitPyramid.prototype.set_contactDistance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLimitPyramid_set_contactDistance_1(self2, arg0);
        };
        Object.defineProperty(PxJointLimitPyramid.prototype, "contactDistance", { get: PxJointLimitPyramid.prototype.get_contactDistance, set: PxJointLimitPyramid.prototype.set_contactDistance });
        PxJointLimitPyramid.prototype["__destroy__"] = PxJointLimitPyramid.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxJointLimitPyramid___destroy___0(self2);
        };
        function PxJointLinearLimit(extent, spring) {
          if (extent && typeof extent === "object")
            extent = extent.ptr;
          if (spring && typeof spring === "object")
            spring = spring.ptr;
          this.ptr = _emscripten_bind_PxJointLinearLimit_PxJointLinearLimit_2(extent, spring);
          getCache(PxJointLinearLimit)[this.ptr] = this;
        }
        ;
        ;
        PxJointLinearLimit.prototype = Object.create(WrapperObject.prototype);
        PxJointLinearLimit.prototype.constructor = PxJointLinearLimit;
        PxJointLinearLimit.prototype.__class__ = PxJointLinearLimit;
        PxJointLinearLimit.__cache__ = {};
        Module["PxJointLinearLimit"] = PxJointLinearLimit;
        PxJointLinearLimit.prototype["get_value"] = PxJointLinearLimit.prototype.get_value = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimit_get_value_0(self2);
        };
        PxJointLinearLimit.prototype["set_value"] = PxJointLinearLimit.prototype.set_value = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimit_set_value_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimit.prototype, "value", { get: PxJointLinearLimit.prototype.get_value, set: PxJointLinearLimit.prototype.set_value });
        PxJointLinearLimit.prototype["__destroy__"] = PxJointLinearLimit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxJointLinearLimit___destroy___0(self2);
        };
        function PxJointLinearLimitPair(lowerLimit, upperLimit, spring) {
          if (lowerLimit && typeof lowerLimit === "object")
            lowerLimit = lowerLimit.ptr;
          if (upperLimit && typeof upperLimit === "object")
            upperLimit = upperLimit.ptr;
          if (spring && typeof spring === "object")
            spring = spring.ptr;
          this.ptr = _emscripten_bind_PxJointLinearLimitPair_PxJointLinearLimitPair_3(lowerLimit, upperLimit, spring);
          getCache(PxJointLinearLimitPair)[this.ptr] = this;
        }
        ;
        ;
        PxJointLinearLimitPair.prototype = Object.create(PxJointLimitParameters.prototype);
        PxJointLinearLimitPair.prototype.constructor = PxJointLinearLimitPair;
        PxJointLinearLimitPair.prototype.__class__ = PxJointLinearLimitPair;
        PxJointLinearLimitPair.__cache__ = {};
        Module["PxJointLinearLimitPair"] = PxJointLinearLimitPair;
        PxJointLinearLimitPair.prototype["isValid"] = PxJointLinearLimitPair.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLinearLimitPair_isValid_0(self2);
        };
        ;
        PxJointLinearLimitPair.prototype["isSoft"] = PxJointLinearLimitPair.prototype.isSoft = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxJointLinearLimitPair_isSoft_0(self2);
        };
        ;
        PxJointLinearLimitPair.prototype["get_upper"] = PxJointLinearLimitPair.prototype.get_upper = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimitPair_get_upper_0(self2);
        };
        PxJointLinearLimitPair.prototype["set_upper"] = PxJointLinearLimitPair.prototype.set_upper = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimitPair_set_upper_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimitPair.prototype, "upper", { get: PxJointLinearLimitPair.prototype.get_upper, set: PxJointLinearLimitPair.prototype.set_upper });
        PxJointLinearLimitPair.prototype["get_lower"] = PxJointLinearLimitPair.prototype.get_lower = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimitPair_get_lower_0(self2);
        };
        PxJointLinearLimitPair.prototype["set_lower"] = PxJointLinearLimitPair.prototype.set_lower = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimitPair_set_lower_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimitPair.prototype, "lower", { get: PxJointLinearLimitPair.prototype.get_lower, set: PxJointLinearLimitPair.prototype.set_lower });
        PxJointLinearLimitPair.prototype["get_restitution"] = PxJointLinearLimitPair.prototype.get_restitution = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimitPair_get_restitution_0(self2);
        };
        PxJointLinearLimitPair.prototype["set_restitution"] = PxJointLinearLimitPair.prototype.set_restitution = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimitPair_set_restitution_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimitPair.prototype, "restitution", { get: PxJointLinearLimitPair.prototype.get_restitution, set: PxJointLinearLimitPair.prototype.set_restitution });
        PxJointLinearLimitPair.prototype["get_bounceThreshold"] = PxJointLinearLimitPair.prototype.get_bounceThreshold = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimitPair_get_bounceThreshold_0(self2);
        };
        PxJointLinearLimitPair.prototype["set_bounceThreshold"] = PxJointLinearLimitPair.prototype.set_bounceThreshold = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimitPair_set_bounceThreshold_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimitPair.prototype, "bounceThreshold", { get: PxJointLinearLimitPair.prototype.get_bounceThreshold, set: PxJointLinearLimitPair.prototype.set_bounceThreshold });
        PxJointLinearLimitPair.prototype["get_stiffness"] = PxJointLinearLimitPair.prototype.get_stiffness = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimitPair_get_stiffness_0(self2);
        };
        PxJointLinearLimitPair.prototype["set_stiffness"] = PxJointLinearLimitPair.prototype.set_stiffness = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimitPair_set_stiffness_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimitPair.prototype, "stiffness", { get: PxJointLinearLimitPair.prototype.get_stiffness, set: PxJointLinearLimitPair.prototype.set_stiffness });
        PxJointLinearLimitPair.prototype["get_damping"] = PxJointLinearLimitPair.prototype.get_damping = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimitPair_get_damping_0(self2);
        };
        PxJointLinearLimitPair.prototype["set_damping"] = PxJointLinearLimitPair.prototype.set_damping = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimitPair_set_damping_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimitPair.prototype, "damping", { get: PxJointLinearLimitPair.prototype.get_damping, set: PxJointLinearLimitPair.prototype.set_damping });
        PxJointLinearLimitPair.prototype["get_contactDistance"] = PxJointLinearLimitPair.prototype.get_contactDistance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxJointLinearLimitPair_get_contactDistance_0(self2);
        };
        PxJointLinearLimitPair.prototype["set_contactDistance"] = PxJointLinearLimitPair.prototype.set_contactDistance = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxJointLinearLimitPair_set_contactDistance_1(self2, arg0);
        };
        Object.defineProperty(PxJointLinearLimitPair.prototype, "contactDistance", { get: PxJointLinearLimitPair.prototype.get_contactDistance, set: PxJointLinearLimitPair.prototype.set_contactDistance });
        PxJointLinearLimitPair.prototype["__destroy__"] = PxJointLinearLimitPair.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxJointLinearLimitPair___destroy___0(self2);
        };
        function PxPrismaticJoint() {
          throw "cannot construct a PxPrismaticJoint, no constructor in IDL";
        }
        PxPrismaticJoint.prototype = Object.create(PxJoint.prototype);
        PxPrismaticJoint.prototype.constructor = PxPrismaticJoint;
        PxPrismaticJoint.prototype.__class__ = PxPrismaticJoint;
        PxPrismaticJoint.__cache__ = {};
        Module["PxPrismaticJoint"] = PxPrismaticJoint;
        PxPrismaticJoint.prototype["getPosition"] = PxPrismaticJoint.prototype.getPosition = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPrismaticJoint_getPosition_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["getVelocity"] = PxPrismaticJoint.prototype.getVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPrismaticJoint_getVelocity_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["setLimit"] = PxPrismaticJoint.prototype.setLimit = function(limit) {
          var self2 = this.ptr;
          if (limit && typeof limit === "object")
            limit = limit.ptr;
          _emscripten_bind_PxPrismaticJoint_setLimit_1(self2, limit);
        };
        ;
        PxPrismaticJoint.prototype["setPrismaticJointFlags"] = PxPrismaticJoint.prototype.setPrismaticJointFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxPrismaticJoint_setPrismaticJointFlags_1(self2, flags);
        };
        ;
        PxPrismaticJoint.prototype["setPrismaticJointFlag"] = PxPrismaticJoint.prototype.setPrismaticJointFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxPrismaticJoint_setPrismaticJointFlag_2(self2, flag, value);
        };
        ;
        PxPrismaticJoint.prototype["getPrismaticJointFlags"] = PxPrismaticJoint.prototype.getPrismaticJointFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getPrismaticJointFlags_0(self2), PxPrismaticJointFlags);
        };
        ;
        PxPrismaticJoint.prototype["setProjectionLinearTolerance"] = PxPrismaticJoint.prototype.setProjectionLinearTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxPrismaticJoint_setProjectionLinearTolerance_1(self2, tolerance);
        };
        ;
        PxPrismaticJoint.prototype["getProjectionLinearTolerance"] = PxPrismaticJoint.prototype.getProjectionLinearTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPrismaticJoint_getProjectionLinearTolerance_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["setProjectionAngularTolerance"] = PxPrismaticJoint.prototype.setProjectionAngularTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxPrismaticJoint_setProjectionAngularTolerance_1(self2, tolerance);
        };
        ;
        PxPrismaticJoint.prototype["getProjectionAngularTolerance"] = PxPrismaticJoint.prototype.getProjectionAngularTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPrismaticJoint_getProjectionAngularTolerance_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["getConcreteTypeName"] = PxPrismaticJoint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxPrismaticJoint_getConcreteTypeName_0(self2));
        };
        ;
        PxPrismaticJoint.prototype["getConcreteType"] = PxPrismaticJoint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPrismaticJoint_getConcreteType_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["setBaseFlag"] = PxPrismaticJoint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxPrismaticJoint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxPrismaticJoint.prototype["setBaseFlags"] = PxPrismaticJoint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxPrismaticJoint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxPrismaticJoint.prototype["getBaseFlags"] = PxPrismaticJoint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxPrismaticJoint.prototype["isReleasable"] = PxPrismaticJoint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxPrismaticJoint_isReleasable_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["setActors"] = PxPrismaticJoint.prototype.setActors = function(actor0, actor1) {
          var self2 = this.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          _emscripten_bind_PxPrismaticJoint_setActors_2(self2, actor0, actor1);
        };
        ;
        PxPrismaticJoint.prototype["setLocalPose"] = PxPrismaticJoint.prototype.setLocalPose = function(actor, localPose) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (localPose && typeof localPose === "object")
            localPose = localPose.ptr;
          _emscripten_bind_PxPrismaticJoint_setLocalPose_2(self2, actor, localPose);
        };
        ;
        PxPrismaticJoint.prototype["getLocalPose"] = PxPrismaticJoint.prototype.getLocalPose = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getLocalPose_1(self2, actor), PxTransform);
        };
        ;
        PxPrismaticJoint.prototype["getRelativeTransform"] = PxPrismaticJoint.prototype.getRelativeTransform = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getRelativeTransform_0(self2), PxTransform);
        };
        ;
        PxPrismaticJoint.prototype["getRelativeLinearVelocity"] = PxPrismaticJoint.prototype.getRelativeLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getRelativeLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxPrismaticJoint.prototype["getRelativeAngularVelocity"] = PxPrismaticJoint.prototype.getRelativeAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getRelativeAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxPrismaticJoint.prototype["setBreakForce"] = PxPrismaticJoint.prototype.setBreakForce = function(force, torque) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          _emscripten_bind_PxPrismaticJoint_setBreakForce_2(self2, force, torque);
        };
        ;
        PxPrismaticJoint.prototype["setConstraintFlags"] = PxPrismaticJoint.prototype.setConstraintFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxPrismaticJoint_setConstraintFlags_1(self2, flags);
        };
        ;
        PxPrismaticJoint.prototype["setConstraintFlag"] = PxPrismaticJoint.prototype.setConstraintFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxPrismaticJoint_setConstraintFlag_2(self2, flag, value);
        };
        ;
        PxPrismaticJoint.prototype["getConstraintFlags"] = PxPrismaticJoint.prototype.getConstraintFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getConstraintFlags_0(self2), PxConstraintFlags);
        };
        ;
        PxPrismaticJoint.prototype["setInvMassScale0"] = PxPrismaticJoint.prototype.setInvMassScale0 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxPrismaticJoint_setInvMassScale0_1(self2, invMassScale);
        };
        ;
        PxPrismaticJoint.prototype["getInvMassScale0"] = PxPrismaticJoint.prototype.getInvMassScale0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPrismaticJoint_getInvMassScale0_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["setInvMassScale1"] = PxPrismaticJoint.prototype.setInvMassScale1 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxPrismaticJoint_setInvMassScale1_1(self2, invMassScale);
        };
        ;
        PxPrismaticJoint.prototype["getInvMassScale1"] = PxPrismaticJoint.prototype.getInvMassScale1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxPrismaticJoint_getInvMassScale1_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["getConstraint"] = PxPrismaticJoint.prototype.getConstraint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getConstraint_0(self2), PxConstraint);
        };
        ;
        PxPrismaticJoint.prototype["setName"] = PxPrismaticJoint.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxPrismaticJoint_setName_1(self2, name);
        };
        ;
        PxPrismaticJoint.prototype["getName"] = PxPrismaticJoint.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxPrismaticJoint_getName_0(self2));
        };
        ;
        PxPrismaticJoint.prototype["release"] = PxPrismaticJoint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPrismaticJoint_release_0(self2);
        };
        ;
        PxPrismaticJoint.prototype["getScene"] = PxPrismaticJoint.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxPrismaticJoint_getScene_0(self2), PxScene);
        };
        ;
        PxPrismaticJoint.prototype["__destroy__"] = PxPrismaticJoint.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPrismaticJoint___destroy___0(self2);
        };
        function PxPrismaticJointFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxPrismaticJointFlags_PxPrismaticJointFlags_1(flags);
          getCache(PxPrismaticJointFlags)[this.ptr] = this;
        }
        ;
        ;
        PxPrismaticJointFlags.prototype = Object.create(WrapperObject.prototype);
        PxPrismaticJointFlags.prototype.constructor = PxPrismaticJointFlags;
        PxPrismaticJointFlags.prototype.__class__ = PxPrismaticJointFlags;
        PxPrismaticJointFlags.__cache__ = {};
        Module["PxPrismaticJointFlags"] = PxPrismaticJointFlags;
        PxPrismaticJointFlags.prototype["isSet"] = PxPrismaticJointFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxPrismaticJointFlags_isSet_1(self2, flag);
        };
        ;
        PxPrismaticJointFlags.prototype["set"] = PxPrismaticJointFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxPrismaticJointFlags_set_1(self2, flag);
        };
        ;
        PxPrismaticJointFlags.prototype["clear"] = PxPrismaticJointFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxPrismaticJointFlags_clear_1(self2, flag);
        };
        ;
        PxPrismaticJointFlags.prototype["__destroy__"] = PxPrismaticJointFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPrismaticJointFlags___destroy___0(self2);
        };
        function PxRigidActorExt() {
          throw "cannot construct a PxRigidActorExt, no constructor in IDL";
        }
        PxRigidActorExt.prototype = Object.create(WrapperObject.prototype);
        PxRigidActorExt.prototype.constructor = PxRigidActorExt;
        PxRigidActorExt.prototype.__class__ = PxRigidActorExt;
        PxRigidActorExt.__cache__ = {};
        Module["PxRigidActorExt"] = PxRigidActorExt;
        PxRigidActorExt.prototype["createExclusiveShape"] = PxRigidActorExt.prototype.createExclusiveShape = function(actor, geometry, material, flags) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (geometry && typeof geometry === "object")
            geometry = geometry.ptr;
          if (material && typeof material === "object")
            material = material.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          if (flags === void 0) {
            return wrapPointer(_emscripten_bind_PxRigidActorExt_createExclusiveShape_3(self2, actor, geometry, material), PxShape);
          }
          return wrapPointer(_emscripten_bind_PxRigidActorExt_createExclusiveShape_4(self2, actor, geometry, material, flags), PxShape);
        };
        ;
        PxRigidActorExt.prototype["__destroy__"] = PxRigidActorExt.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidActorExt___destroy___0(self2);
        };
        function PxRigidBodyExt() {
          throw "cannot construct a PxRigidBodyExt, no constructor in IDL";
        }
        PxRigidBodyExt.prototype = Object.create(WrapperObject.prototype);
        PxRigidBodyExt.prototype.constructor = PxRigidBodyExt;
        PxRigidBodyExt.prototype.__class__ = PxRigidBodyExt;
        PxRigidBodyExt.__cache__ = {};
        Module["PxRigidBodyExt"] = PxRigidBodyExt;
        PxRigidBodyExt.prototype["updateMassAndInertia"] = PxRigidBodyExt.prototype.updateMassAndInertia = function(body, density, massLocalPose, includeNonSimShapes) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (density && typeof density === "object")
            density = density.ptr;
          if (massLocalPose && typeof massLocalPose === "object")
            massLocalPose = massLocalPose.ptr;
          if (includeNonSimShapes && typeof includeNonSimShapes === "object")
            includeNonSimShapes = includeNonSimShapes.ptr;
          if (massLocalPose === void 0) {
            return !!_emscripten_bind_PxRigidBodyExt_updateMassAndInertia_2(self2, body, density);
          }
          if (includeNonSimShapes === void 0) {
            return !!_emscripten_bind_PxRigidBodyExt_updateMassAndInertia_3(self2, body, density, massLocalPose);
          }
          return !!_emscripten_bind_PxRigidBodyExt_updateMassAndInertia_4(self2, body, density, massLocalPose, includeNonSimShapes);
        };
        ;
        PxRigidBodyExt.prototype["setMassAndUpdateInertia"] = PxRigidBodyExt.prototype.setMassAndUpdateInertia = function(body, mass, massLocalPose, includeNonSimShapes) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (mass && typeof mass === "object")
            mass = mass.ptr;
          if (massLocalPose && typeof massLocalPose === "object")
            massLocalPose = massLocalPose.ptr;
          if (includeNonSimShapes && typeof includeNonSimShapes === "object")
            includeNonSimShapes = includeNonSimShapes.ptr;
          if (massLocalPose === void 0) {
            return !!_emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_2(self2, body, mass);
          }
          if (includeNonSimShapes === void 0) {
            return !!_emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_3(self2, body, mass, massLocalPose);
          }
          return !!_emscripten_bind_PxRigidBodyExt_setMassAndUpdateInertia_4(self2, body, mass, massLocalPose, includeNonSimShapes);
        };
        ;
        PxRigidBodyExt.prototype["addForceAtPos"] = PxRigidBodyExt.prototype.addForceAtPos = function(body, force, pos, mode, wakeup) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (wakeup && typeof wakeup === "object")
            wakeup = wakeup.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidBodyExt_addForceAtPos_3(self2, body, force, pos);
            return;
          }
          if (wakeup === void 0) {
            _emscripten_bind_PxRigidBodyExt_addForceAtPos_4(self2, body, force, pos, mode);
            return;
          }
          _emscripten_bind_PxRigidBodyExt_addForceAtPos_5(self2, body, force, pos, mode, wakeup);
        };
        ;
        PxRigidBodyExt.prototype["addForceAtLocalPos"] = PxRigidBodyExt.prototype.addForceAtLocalPos = function(body, force, pos, mode, wakeup) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (wakeup && typeof wakeup === "object")
            wakeup = wakeup.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_3(self2, body, force, pos);
            return;
          }
          if (wakeup === void 0) {
            _emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_4(self2, body, force, pos, mode);
            return;
          }
          _emscripten_bind_PxRigidBodyExt_addForceAtLocalPos_5(self2, body, force, pos, mode, wakeup);
        };
        ;
        PxRigidBodyExt.prototype["addLocalForceAtPos"] = PxRigidBodyExt.prototype.addLocalForceAtPos = function(body, force, pos, mode, wakeup) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (wakeup && typeof wakeup === "object")
            wakeup = wakeup.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_3(self2, body, force, pos);
            return;
          }
          if (wakeup === void 0) {
            _emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_4(self2, body, force, pos, mode);
            return;
          }
          _emscripten_bind_PxRigidBodyExt_addLocalForceAtPos_5(self2, body, force, pos, mode, wakeup);
        };
        ;
        PxRigidBodyExt.prototype["addLocalForceAtLocalPos"] = PxRigidBodyExt.prototype.addLocalForceAtLocalPos = function(body, force, pos, mode, wakeup) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          if (wakeup && typeof wakeup === "object")
            wakeup = wakeup.ptr;
          if (mode === void 0) {
            _emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_3(self2, body, force, pos);
            return;
          }
          if (wakeup === void 0) {
            _emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_4(self2, body, force, pos, mode);
            return;
          }
          _emscripten_bind_PxRigidBodyExt_addLocalForceAtLocalPos_5(self2, body, force, pos, mode, wakeup);
        };
        ;
        PxRigidBodyExt.prototype["getVelocityAtPos"] = PxRigidBodyExt.prototype.getVelocityAtPos = function(body, pos) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBodyExt_getVelocityAtPos_2(self2, body, pos), PxVec3);
        };
        ;
        PxRigidBodyExt.prototype["getLocalVelocityAtLocalPos"] = PxRigidBodyExt.prototype.getLocalVelocityAtLocalPos = function(body, pos) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBodyExt_getLocalVelocityAtLocalPos_2(self2, body, pos), PxVec3);
        };
        ;
        PxRigidBodyExt.prototype["getVelocityAtOffset"] = PxRigidBodyExt.prototype.getVelocityAtOffset = function(body, pos) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (pos && typeof pos === "object")
            pos = pos.ptr;
          return wrapPointer(_emscripten_bind_PxRigidBodyExt_getVelocityAtOffset_2(self2, body, pos), PxVec3);
        };
        ;
        PxRigidBodyExt.prototype["computeVelocityDeltaFromImpulse"] = PxRigidBodyExt.prototype.computeVelocityDeltaFromImpulse = function(body, globalPose, point, impulse, invMassScale, invInertiaScale, deltaLinearVelocity, deltaAngularVelocity) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (globalPose && typeof globalPose === "object")
            globalPose = globalPose.ptr;
          if (point && typeof point === "object")
            point = point.ptr;
          if (impulse && typeof impulse === "object")
            impulse = impulse.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          if (invInertiaScale && typeof invInertiaScale === "object")
            invInertiaScale = invInertiaScale.ptr;
          if (deltaLinearVelocity && typeof deltaLinearVelocity === "object")
            deltaLinearVelocity = deltaLinearVelocity.ptr;
          if (deltaAngularVelocity && typeof deltaAngularVelocity === "object")
            deltaAngularVelocity = deltaAngularVelocity.ptr;
          if (invInertiaScale === void 0) {
            _emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_5(self2, body, globalPose, point, impulse, invMassScale);
            return;
          }
          if (deltaLinearVelocity === void 0) {
            _emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_6(self2, body, globalPose, point, impulse, invMassScale, invInertiaScale);
            return;
          }
          if (deltaAngularVelocity === void 0) {
            _emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_7(self2, body, globalPose, point, impulse, invMassScale, invInertiaScale, deltaLinearVelocity);
            return;
          }
          _emscripten_bind_PxRigidBodyExt_computeVelocityDeltaFromImpulse_8(self2, body, globalPose, point, impulse, invMassScale, invInertiaScale, deltaLinearVelocity, deltaAngularVelocity);
        };
        ;
        PxRigidBodyExt.prototype["computeLinearAngularImpulse"] = PxRigidBodyExt.prototype.computeLinearAngularImpulse = function(body, globalPose, point, impulse, invMassScale, invInertiaScale, linearImpulse, angularImpulse) {
          var self2 = this.ptr;
          if (body && typeof body === "object")
            body = body.ptr;
          if (globalPose && typeof globalPose === "object")
            globalPose = globalPose.ptr;
          if (point && typeof point === "object")
            point = point.ptr;
          if (impulse && typeof impulse === "object")
            impulse = impulse.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          if (invInertiaScale && typeof invInertiaScale === "object")
            invInertiaScale = invInertiaScale.ptr;
          if (linearImpulse && typeof linearImpulse === "object")
            linearImpulse = linearImpulse.ptr;
          if (angularImpulse && typeof angularImpulse === "object")
            angularImpulse = angularImpulse.ptr;
          _emscripten_bind_PxRigidBodyExt_computeLinearAngularImpulse_8(self2, body, globalPose, point, impulse, invMassScale, invInertiaScale, linearImpulse, angularImpulse);
        };
        ;
        PxRigidBodyExt.prototype["__destroy__"] = PxRigidBodyExt.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRigidBodyExt___destroy___0(self2);
        };
        function PxRevoluteJoint() {
          throw "cannot construct a PxRevoluteJoint, no constructor in IDL";
        }
        PxRevoluteJoint.prototype = Object.create(PxJoint.prototype);
        PxRevoluteJoint.prototype.constructor = PxRevoluteJoint;
        PxRevoluteJoint.prototype.__class__ = PxRevoluteJoint;
        PxRevoluteJoint.__cache__ = {};
        Module["PxRevoluteJoint"] = PxRevoluteJoint;
        PxRevoluteJoint.prototype["getAngle"] = PxRevoluteJoint.prototype.getAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getAngle_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["getVelocity"] = PxRevoluteJoint.prototype.getVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getVelocity_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setLimit"] = PxRevoluteJoint.prototype.setLimit = function(limits) {
          var self2 = this.ptr;
          if (limits && typeof limits === "object")
            limits = limits.ptr;
          _emscripten_bind_PxRevoluteJoint_setLimit_1(self2, limits);
        };
        ;
        PxRevoluteJoint.prototype["setDriveVelocity"] = PxRevoluteJoint.prototype.setDriveVelocity = function(velocity, autowake) {
          var self2 = this.ptr;
          if (velocity && typeof velocity === "object")
            velocity = velocity.ptr;
          if (autowake && typeof autowake === "object")
            autowake = autowake.ptr;
          if (autowake === void 0) {
            _emscripten_bind_PxRevoluteJoint_setDriveVelocity_1(self2, velocity);
            return;
          }
          _emscripten_bind_PxRevoluteJoint_setDriveVelocity_2(self2, velocity, autowake);
        };
        ;
        PxRevoluteJoint.prototype["getDriveVelocity"] = PxRevoluteJoint.prototype.getDriveVelocity = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getDriveVelocity_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setDriveForceLimit"] = PxRevoluteJoint.prototype.setDriveForceLimit = function(limit) {
          var self2 = this.ptr;
          if (limit && typeof limit === "object")
            limit = limit.ptr;
          _emscripten_bind_PxRevoluteJoint_setDriveForceLimit_1(self2, limit);
        };
        ;
        PxRevoluteJoint.prototype["getDriveForceLimit"] = PxRevoluteJoint.prototype.getDriveForceLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getDriveForceLimit_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setDriveGearRatio"] = PxRevoluteJoint.prototype.setDriveGearRatio = function(ratio) {
          var self2 = this.ptr;
          if (ratio && typeof ratio === "object")
            ratio = ratio.ptr;
          _emscripten_bind_PxRevoluteJoint_setDriveGearRatio_1(self2, ratio);
        };
        ;
        PxRevoluteJoint.prototype["getDriveGearRatio"] = PxRevoluteJoint.prototype.getDriveGearRatio = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getDriveGearRatio_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setRevoluteJointFlags"] = PxRevoluteJoint.prototype.setRevoluteJointFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxRevoluteJoint_setRevoluteJointFlags_1(self2, flags);
        };
        ;
        PxRevoluteJoint.prototype["setRevoluteJointFlag"] = PxRevoluteJoint.prototype.setRevoluteJointFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRevoluteJoint_setRevoluteJointFlag_2(self2, flag, value);
        };
        ;
        PxRevoluteJoint.prototype["getRevoluteJointFlags"] = PxRevoluteJoint.prototype.getRevoluteJointFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getRevoluteJointFlags_0(self2), PxRevoluteJointFlags);
        };
        ;
        PxRevoluteJoint.prototype["setProjectionLinearTolerance"] = PxRevoluteJoint.prototype.setProjectionLinearTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxRevoluteJoint_setProjectionLinearTolerance_1(self2, tolerance);
        };
        ;
        PxRevoluteJoint.prototype["getProjectionLinearTolerance"] = PxRevoluteJoint.prototype.getProjectionLinearTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getProjectionLinearTolerance_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setProjectionAngularTolerance"] = PxRevoluteJoint.prototype.setProjectionAngularTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxRevoluteJoint_setProjectionAngularTolerance_1(self2, tolerance);
        };
        ;
        PxRevoluteJoint.prototype["getProjectionAngularTolerance"] = PxRevoluteJoint.prototype.getProjectionAngularTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getProjectionAngularTolerance_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["getConcreteTypeName"] = PxRevoluteJoint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRevoluteJoint_getConcreteTypeName_0(self2));
        };
        ;
        PxRevoluteJoint.prototype["getConcreteType"] = PxRevoluteJoint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getConcreteType_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setBaseFlag"] = PxRevoluteJoint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRevoluteJoint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxRevoluteJoint.prototype["setBaseFlags"] = PxRevoluteJoint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxRevoluteJoint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxRevoluteJoint.prototype["getBaseFlags"] = PxRevoluteJoint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxRevoluteJoint.prototype["isReleasable"] = PxRevoluteJoint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxRevoluteJoint_isReleasable_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setActors"] = PxRevoluteJoint.prototype.setActors = function(actor0, actor1) {
          var self2 = this.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          _emscripten_bind_PxRevoluteJoint_setActors_2(self2, actor0, actor1);
        };
        ;
        PxRevoluteJoint.prototype["setLocalPose"] = PxRevoluteJoint.prototype.setLocalPose = function(actor, localPose) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (localPose && typeof localPose === "object")
            localPose = localPose.ptr;
          _emscripten_bind_PxRevoluteJoint_setLocalPose_2(self2, actor, localPose);
        };
        ;
        PxRevoluteJoint.prototype["getLocalPose"] = PxRevoluteJoint.prototype.getLocalPose = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getLocalPose_1(self2, actor), PxTransform);
        };
        ;
        PxRevoluteJoint.prototype["getRelativeTransform"] = PxRevoluteJoint.prototype.getRelativeTransform = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getRelativeTransform_0(self2), PxTransform);
        };
        ;
        PxRevoluteJoint.prototype["getRelativeLinearVelocity"] = PxRevoluteJoint.prototype.getRelativeLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getRelativeLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxRevoluteJoint.prototype["getRelativeAngularVelocity"] = PxRevoluteJoint.prototype.getRelativeAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getRelativeAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxRevoluteJoint.prototype["setBreakForce"] = PxRevoluteJoint.prototype.setBreakForce = function(force, torque) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          _emscripten_bind_PxRevoluteJoint_setBreakForce_2(self2, force, torque);
        };
        ;
        PxRevoluteJoint.prototype["setConstraintFlags"] = PxRevoluteJoint.prototype.setConstraintFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxRevoluteJoint_setConstraintFlags_1(self2, flags);
        };
        ;
        PxRevoluteJoint.prototype["setConstraintFlag"] = PxRevoluteJoint.prototype.setConstraintFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxRevoluteJoint_setConstraintFlag_2(self2, flag, value);
        };
        ;
        PxRevoluteJoint.prototype["getConstraintFlags"] = PxRevoluteJoint.prototype.getConstraintFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getConstraintFlags_0(self2), PxConstraintFlags);
        };
        ;
        PxRevoluteJoint.prototype["setInvMassScale0"] = PxRevoluteJoint.prototype.setInvMassScale0 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxRevoluteJoint_setInvMassScale0_1(self2, invMassScale);
        };
        ;
        PxRevoluteJoint.prototype["getInvMassScale0"] = PxRevoluteJoint.prototype.getInvMassScale0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getInvMassScale0_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["setInvMassScale1"] = PxRevoluteJoint.prototype.setInvMassScale1 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxRevoluteJoint_setInvMassScale1_1(self2, invMassScale);
        };
        ;
        PxRevoluteJoint.prototype["getInvMassScale1"] = PxRevoluteJoint.prototype.getInvMassScale1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxRevoluteJoint_getInvMassScale1_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["getConstraint"] = PxRevoluteJoint.prototype.getConstraint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getConstraint_0(self2), PxConstraint);
        };
        ;
        PxRevoluteJoint.prototype["setName"] = PxRevoluteJoint.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxRevoluteJoint_setName_1(self2, name);
        };
        ;
        PxRevoluteJoint.prototype["getName"] = PxRevoluteJoint.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxRevoluteJoint_getName_0(self2));
        };
        ;
        PxRevoluteJoint.prototype["release"] = PxRevoluteJoint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRevoluteJoint_release_0(self2);
        };
        ;
        PxRevoluteJoint.prototype["getScene"] = PxRevoluteJoint.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxRevoluteJoint_getScene_0(self2), PxScene);
        };
        ;
        PxRevoluteJoint.prototype["__destroy__"] = PxRevoluteJoint.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRevoluteJoint___destroy___0(self2);
        };
        function PxRevoluteJointFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxRevoluteJointFlags_PxRevoluteJointFlags_1(flags);
          getCache(PxRevoluteJointFlags)[this.ptr] = this;
        }
        ;
        ;
        PxRevoluteJointFlags.prototype = Object.create(WrapperObject.prototype);
        PxRevoluteJointFlags.prototype.constructor = PxRevoluteJointFlags;
        PxRevoluteJointFlags.prototype.__class__ = PxRevoluteJointFlags;
        PxRevoluteJointFlags.__cache__ = {};
        Module["PxRevoluteJointFlags"] = PxRevoluteJointFlags;
        PxRevoluteJointFlags.prototype["isSet"] = PxRevoluteJointFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxRevoluteJointFlags_isSet_1(self2, flag);
        };
        ;
        PxRevoluteJointFlags.prototype["set"] = PxRevoluteJointFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxRevoluteJointFlags_set_1(self2, flag);
        };
        ;
        PxRevoluteJointFlags.prototype["clear"] = PxRevoluteJointFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxRevoluteJointFlags_clear_1(self2, flag);
        };
        ;
        PxRevoluteJointFlags.prototype["__destroy__"] = PxRevoluteJointFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRevoluteJointFlags___destroy___0(self2);
        };
        function PxSerialization() {
          throw "cannot construct a PxSerialization, no constructor in IDL";
        }
        PxSerialization.prototype = Object.create(WrapperObject.prototype);
        PxSerialization.prototype.constructor = PxSerialization;
        PxSerialization.prototype.__class__ = PxSerialization;
        PxSerialization.__cache__ = {};
        Module["PxSerialization"] = PxSerialization;
        PxSerialization.prototype["isSerializable"] = PxSerialization.prototype.isSerializable = function(collection, sr, externalReferences) {
          var self2 = this.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          if (sr && typeof sr === "object")
            sr = sr.ptr;
          if (externalReferences && typeof externalReferences === "object")
            externalReferences = externalReferences.ptr;
          if (externalReferences === void 0) {
            return !!_emscripten_bind_PxSerialization_isSerializable_2(self2, collection, sr);
          }
          return !!_emscripten_bind_PxSerialization_isSerializable_3(self2, collection, sr, externalReferences);
        };
        ;
        PxSerialization.prototype["complete"] = PxSerialization.prototype.complete = function(collection, sr, exceptFor, followJoints) {
          var self2 = this.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          if (sr && typeof sr === "object")
            sr = sr.ptr;
          if (exceptFor && typeof exceptFor === "object")
            exceptFor = exceptFor.ptr;
          if (followJoints && typeof followJoints === "object")
            followJoints = followJoints.ptr;
          if (exceptFor === void 0) {
            _emscripten_bind_PxSerialization_complete_2(self2, collection, sr);
            return;
          }
          if (followJoints === void 0) {
            _emscripten_bind_PxSerialization_complete_3(self2, collection, sr, exceptFor);
            return;
          }
          _emscripten_bind_PxSerialization_complete_4(self2, collection, sr, exceptFor, followJoints);
        };
        ;
        PxSerialization.prototype["createSerialObjectIds"] = PxSerialization.prototype.createSerialObjectIds = function(collection, base) {
          var self2 = this.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          _emscripten_bind_PxSerialization_createSerialObjectIds_2(self2, collection, base);
        };
        ;
        PxSerialization.prototype["createCollectionFromXml"] = PxSerialization.prototype.createCollectionFromXml = function(inputData, cooking, sr, externalRefs) {
          var self2 = this.ptr;
          if (inputData && typeof inputData === "object")
            inputData = inputData.ptr;
          if (cooking && typeof cooking === "object")
            cooking = cooking.ptr;
          if (sr && typeof sr === "object")
            sr = sr.ptr;
          if (externalRefs && typeof externalRefs === "object")
            externalRefs = externalRefs.ptr;
          if (externalRefs === void 0) {
            return wrapPointer(_emscripten_bind_PxSerialization_createCollectionFromXml_3(self2, inputData, cooking, sr), PxCollection);
          }
          return wrapPointer(_emscripten_bind_PxSerialization_createCollectionFromXml_4(self2, inputData, cooking, sr, externalRefs), PxCollection);
        };
        ;
        PxSerialization.prototype["createCollectionFromBinary"] = PxSerialization.prototype.createCollectionFromBinary = function(memBlock, sr, externalRefs) {
          var self2 = this.ptr;
          if (memBlock && typeof memBlock === "object")
            memBlock = memBlock.ptr;
          if (sr && typeof sr === "object")
            sr = sr.ptr;
          if (externalRefs && typeof externalRefs === "object")
            externalRefs = externalRefs.ptr;
          if (externalRefs === void 0) {
            return wrapPointer(_emscripten_bind_PxSerialization_createCollectionFromBinary_2(self2, memBlock, sr), PxCollection);
          }
          return wrapPointer(_emscripten_bind_PxSerialization_createCollectionFromBinary_3(self2, memBlock, sr, externalRefs), PxCollection);
        };
        ;
        PxSerialization.prototype["serializeCollectionToXml"] = PxSerialization.prototype.serializeCollectionToXml = function(outputStream, collection, sr, cooking, externalRefs) {
          var self2 = this.ptr;
          if (outputStream && typeof outputStream === "object")
            outputStream = outputStream.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          if (sr && typeof sr === "object")
            sr = sr.ptr;
          if (cooking && typeof cooking === "object")
            cooking = cooking.ptr;
          if (externalRefs && typeof externalRefs === "object")
            externalRefs = externalRefs.ptr;
          if (cooking === void 0) {
            return !!_emscripten_bind_PxSerialization_serializeCollectionToXml_3(self2, outputStream, collection, sr);
          }
          if (externalRefs === void 0) {
            return !!_emscripten_bind_PxSerialization_serializeCollectionToXml_4(self2, outputStream, collection, sr, cooking);
          }
          return !!_emscripten_bind_PxSerialization_serializeCollectionToXml_5(self2, outputStream, collection, sr, cooking, externalRefs);
        };
        ;
        PxSerialization.prototype["serializeCollectionToBinary"] = PxSerialization.prototype.serializeCollectionToBinary = function(outputStream, collection, sr, externalRefs, exportNames) {
          var self2 = this.ptr;
          if (outputStream && typeof outputStream === "object")
            outputStream = outputStream.ptr;
          if (collection && typeof collection === "object")
            collection = collection.ptr;
          if (sr && typeof sr === "object")
            sr = sr.ptr;
          if (externalRefs && typeof externalRefs === "object")
            externalRefs = externalRefs.ptr;
          if (exportNames && typeof exportNames === "object")
            exportNames = exportNames.ptr;
          if (externalRefs === void 0) {
            return !!_emscripten_bind_PxSerialization_serializeCollectionToBinary_3(self2, outputStream, collection, sr);
          }
          if (exportNames === void 0) {
            return !!_emscripten_bind_PxSerialization_serializeCollectionToBinary_4(self2, outputStream, collection, sr, externalRefs);
          }
          return !!_emscripten_bind_PxSerialization_serializeCollectionToBinary_5(self2, outputStream, collection, sr, externalRefs, exportNames);
        };
        ;
        PxSerialization.prototype["createSerializationRegistry"] = PxSerialization.prototype.createSerializationRegistry = function(physics) {
          var self2 = this.ptr;
          if (physics && typeof physics === "object")
            physics = physics.ptr;
          return wrapPointer(_emscripten_bind_PxSerialization_createSerializationRegistry_1(self2, physics), PxSerializationRegistry);
        };
        ;
        PxSerialization.prototype["__destroy__"] = PxSerialization.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSerialization___destroy___0(self2);
        };
        function PxSerializationRegistry() {
          throw "cannot construct a PxSerializationRegistry, no constructor in IDL";
        }
        PxSerializationRegistry.prototype = Object.create(WrapperObject.prototype);
        PxSerializationRegistry.prototype.constructor = PxSerializationRegistry;
        PxSerializationRegistry.prototype.__class__ = PxSerializationRegistry;
        PxSerializationRegistry.__cache__ = {};
        Module["PxSerializationRegistry"] = PxSerializationRegistry;
        PxSerializationRegistry.prototype["release"] = PxSerializationRegistry.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSerializationRegistry_release_0(self2);
        };
        ;
        function PxSphericalJoint() {
          throw "cannot construct a PxSphericalJoint, no constructor in IDL";
        }
        PxSphericalJoint.prototype = Object.create(PxJoint.prototype);
        PxSphericalJoint.prototype.constructor = PxSphericalJoint;
        PxSphericalJoint.prototype.__class__ = PxSphericalJoint;
        PxSphericalJoint.__cache__ = {};
        Module["PxSphericalJoint"] = PxSphericalJoint;
        PxSphericalJoint.prototype["setLimitCone"] = PxSphericalJoint.prototype.setLimitCone = function(limitCone) {
          var self2 = this.ptr;
          if (limitCone && typeof limitCone === "object")
            limitCone = limitCone.ptr;
          _emscripten_bind_PxSphericalJoint_setLimitCone_1(self2, limitCone);
        };
        ;
        PxSphericalJoint.prototype["getSwingYAngle"] = PxSphericalJoint.prototype.getSwingYAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphericalJoint_getSwingYAngle_0(self2);
        };
        ;
        PxSphericalJoint.prototype["getSwingZAngle"] = PxSphericalJoint.prototype.getSwingZAngle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphericalJoint_getSwingZAngle_0(self2);
        };
        ;
        PxSphericalJoint.prototype["setSphericalJointFlags"] = PxSphericalJoint.prototype.setSphericalJointFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxSphericalJoint_setSphericalJointFlags_1(self2, flags);
        };
        ;
        PxSphericalJoint.prototype["setSphericalJointFlag"] = PxSphericalJoint.prototype.setSphericalJointFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxSphericalJoint_setSphericalJointFlag_2(self2, flag, value);
        };
        ;
        PxSphericalJoint.prototype["getSphericalJointFlags"] = PxSphericalJoint.prototype.getSphericalJointFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getSphericalJointFlags_0(self2), PxSphericalJointFlags);
        };
        ;
        PxSphericalJoint.prototype["setProjectionLinearTolerance"] = PxSphericalJoint.prototype.setProjectionLinearTolerance = function(tolerance) {
          var self2 = this.ptr;
          if (tolerance && typeof tolerance === "object")
            tolerance = tolerance.ptr;
          _emscripten_bind_PxSphericalJoint_setProjectionLinearTolerance_1(self2, tolerance);
        };
        ;
        PxSphericalJoint.prototype["getProjectionLinearTolerance"] = PxSphericalJoint.prototype.getProjectionLinearTolerance = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphericalJoint_getProjectionLinearTolerance_0(self2);
        };
        ;
        PxSphericalJoint.prototype["getConcreteTypeName"] = PxSphericalJoint.prototype.getConcreteTypeName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxSphericalJoint_getConcreteTypeName_0(self2));
        };
        ;
        PxSphericalJoint.prototype["getConcreteType"] = PxSphericalJoint.prototype.getConcreteType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphericalJoint_getConcreteType_0(self2);
        };
        ;
        PxSphericalJoint.prototype["setBaseFlag"] = PxSphericalJoint.prototype.setBaseFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxSphericalJoint_setBaseFlag_2(self2, flag, value);
        };
        ;
        PxSphericalJoint.prototype["setBaseFlags"] = PxSphericalJoint.prototype.setBaseFlags = function(inFlags) {
          var self2 = this.ptr;
          if (inFlags && typeof inFlags === "object")
            inFlags = inFlags.ptr;
          _emscripten_bind_PxSphericalJoint_setBaseFlags_1(self2, inFlags);
        };
        ;
        PxSphericalJoint.prototype["getBaseFlags"] = PxSphericalJoint.prototype.getBaseFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getBaseFlags_0(self2), PxBaseFlags);
        };
        ;
        PxSphericalJoint.prototype["isReleasable"] = PxSphericalJoint.prototype.isReleasable = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxSphericalJoint_isReleasable_0(self2);
        };
        ;
        PxSphericalJoint.prototype["setActors"] = PxSphericalJoint.prototype.setActors = function(actor0, actor1) {
          var self2 = this.ptr;
          if (actor0 && typeof actor0 === "object")
            actor0 = actor0.ptr;
          if (actor1 && typeof actor1 === "object")
            actor1 = actor1.ptr;
          _emscripten_bind_PxSphericalJoint_setActors_2(self2, actor0, actor1);
        };
        ;
        PxSphericalJoint.prototype["setLocalPose"] = PxSphericalJoint.prototype.setLocalPose = function(actor, localPose) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (localPose && typeof localPose === "object")
            localPose = localPose.ptr;
          _emscripten_bind_PxSphericalJoint_setLocalPose_2(self2, actor, localPose);
        };
        ;
        PxSphericalJoint.prototype["getLocalPose"] = PxSphericalJoint.prototype.getLocalPose = function(actor) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getLocalPose_1(self2, actor), PxTransform);
        };
        ;
        PxSphericalJoint.prototype["getRelativeTransform"] = PxSphericalJoint.prototype.getRelativeTransform = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getRelativeTransform_0(self2), PxTransform);
        };
        ;
        PxSphericalJoint.prototype["getRelativeLinearVelocity"] = PxSphericalJoint.prototype.getRelativeLinearVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getRelativeLinearVelocity_0(self2), PxVec3);
        };
        ;
        PxSphericalJoint.prototype["getRelativeAngularVelocity"] = PxSphericalJoint.prototype.getRelativeAngularVelocity = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getRelativeAngularVelocity_0(self2), PxVec3);
        };
        ;
        PxSphericalJoint.prototype["setBreakForce"] = PxSphericalJoint.prototype.setBreakForce = function(force, torque) {
          var self2 = this.ptr;
          if (force && typeof force === "object")
            force = force.ptr;
          if (torque && typeof torque === "object")
            torque = torque.ptr;
          _emscripten_bind_PxSphericalJoint_setBreakForce_2(self2, force, torque);
        };
        ;
        PxSphericalJoint.prototype["setConstraintFlags"] = PxSphericalJoint.prototype.setConstraintFlags = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxSphericalJoint_setConstraintFlags_1(self2, flags);
        };
        ;
        PxSphericalJoint.prototype["setConstraintFlag"] = PxSphericalJoint.prototype.setConstraintFlag = function(flag, value) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_PxSphericalJoint_setConstraintFlag_2(self2, flag, value);
        };
        ;
        PxSphericalJoint.prototype["getConstraintFlags"] = PxSphericalJoint.prototype.getConstraintFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getConstraintFlags_0(self2), PxConstraintFlags);
        };
        ;
        PxSphericalJoint.prototype["setInvMassScale0"] = PxSphericalJoint.prototype.setInvMassScale0 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxSphericalJoint_setInvMassScale0_1(self2, invMassScale);
        };
        ;
        PxSphericalJoint.prototype["getInvMassScale0"] = PxSphericalJoint.prototype.getInvMassScale0 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphericalJoint_getInvMassScale0_0(self2);
        };
        ;
        PxSphericalJoint.prototype["setInvMassScale1"] = PxSphericalJoint.prototype.setInvMassScale1 = function(invMassScale) {
          var self2 = this.ptr;
          if (invMassScale && typeof invMassScale === "object")
            invMassScale = invMassScale.ptr;
          _emscripten_bind_PxSphericalJoint_setInvMassScale1_1(self2, invMassScale);
        };
        ;
        PxSphericalJoint.prototype["getInvMassScale1"] = PxSphericalJoint.prototype.getInvMassScale1 = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxSphericalJoint_getInvMassScale1_0(self2);
        };
        ;
        PxSphericalJoint.prototype["getConstraint"] = PxSphericalJoint.prototype.getConstraint = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getConstraint_0(self2), PxConstraint);
        };
        ;
        PxSphericalJoint.prototype["setName"] = PxSphericalJoint.prototype.setName = function(name) {
          var self2 = this.ptr;
          ensureCache.prepare();
          if (name && typeof name === "object")
            name = name.ptr;
          else
            name = ensureString(name);
          _emscripten_bind_PxSphericalJoint_setName_1(self2, name);
        };
        ;
        PxSphericalJoint.prototype["getName"] = PxSphericalJoint.prototype.getName = function() {
          var self2 = this.ptr;
          return UTF8ToString(_emscripten_bind_PxSphericalJoint_getName_0(self2));
        };
        ;
        PxSphericalJoint.prototype["release"] = PxSphericalJoint.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSphericalJoint_release_0(self2);
        };
        ;
        PxSphericalJoint.prototype["getScene"] = PxSphericalJoint.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxSphericalJoint_getScene_0(self2), PxScene);
        };
        ;
        PxSphericalJoint.prototype["__destroy__"] = PxSphericalJoint.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSphericalJoint___destroy___0(self2);
        };
        function PxSphericalJointFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxSphericalJointFlags_PxSphericalJointFlags_1(flags);
          getCache(PxSphericalJointFlags)[this.ptr] = this;
        }
        ;
        ;
        PxSphericalJointFlags.prototype = Object.create(WrapperObject.prototype);
        PxSphericalJointFlags.prototype.constructor = PxSphericalJointFlags;
        PxSphericalJointFlags.prototype.__class__ = PxSphericalJointFlags;
        PxSphericalJointFlags.__cache__ = {};
        Module["PxSphericalJointFlags"] = PxSphericalJointFlags;
        PxSphericalJointFlags.prototype["isSet"] = PxSphericalJointFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxSphericalJointFlags_isSet_1(self2, flag);
        };
        ;
        PxSphericalJointFlags.prototype["set"] = PxSphericalJointFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxSphericalJointFlags_set_1(self2, flag);
        };
        ;
        PxSphericalJointFlags.prototype["clear"] = PxSphericalJointFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxSphericalJointFlags_clear_1(self2, flag);
        };
        ;
        PxSphericalJointFlags.prototype["__destroy__"] = PxSphericalJointFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxSphericalJointFlags___destroy___0(self2);
        };
        function BatchVehicleUpdateDesc() {
          this.ptr = _emscripten_bind_BatchVehicleUpdateDesc_BatchVehicleUpdateDesc_0();
          getCache(BatchVehicleUpdateDesc)[this.ptr] = this;
        }
        ;
        ;
        BatchVehicleUpdateDesc.prototype = Object.create(WrapperObject.prototype);
        BatchVehicleUpdateDesc.prototype.constructor = BatchVehicleUpdateDesc;
        BatchVehicleUpdateDesc.prototype.__class__ = BatchVehicleUpdateDesc;
        BatchVehicleUpdateDesc.__cache__ = {};
        Module["BatchVehicleUpdateDesc"] = BatchVehicleUpdateDesc;
        BatchVehicleUpdateDesc.prototype["get_foundation"] = BatchVehicleUpdateDesc.prototype.get_foundation = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_BatchVehicleUpdateDesc_get_foundation_0(self2), PxFoundation);
        };
        BatchVehicleUpdateDesc.prototype["set_foundation"] = BatchVehicleUpdateDesc.prototype.set_foundation = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_foundation_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "foundation", { get: BatchVehicleUpdateDesc.prototype.get_foundation, set: BatchVehicleUpdateDesc.prototype.set_foundation });
        BatchVehicleUpdateDesc.prototype["get_scene"] = BatchVehicleUpdateDesc.prototype.get_scene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_BatchVehicleUpdateDesc_get_scene_0(self2), PxScene);
        };
        BatchVehicleUpdateDesc.prototype["set_scene"] = BatchVehicleUpdateDesc.prototype.set_scene = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_scene_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "scene", { get: BatchVehicleUpdateDesc.prototype.get_scene, set: BatchVehicleUpdateDesc.prototype.set_scene });
        BatchVehicleUpdateDesc.prototype["get_frictionPairs"] = BatchVehicleUpdateDesc.prototype.get_frictionPairs = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_BatchVehicleUpdateDesc_get_frictionPairs_0(self2), PxVehicleDrivableSurfaceToTireFrictionPairs);
        };
        BatchVehicleUpdateDesc.prototype["set_frictionPairs"] = BatchVehicleUpdateDesc.prototype.set_frictionPairs = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_frictionPairs_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "frictionPairs", { get: BatchVehicleUpdateDesc.prototype.get_frictionPairs, set: BatchVehicleUpdateDesc.prototype.set_frictionPairs });
        BatchVehicleUpdateDesc.prototype["get_maxNbVehicles"] = BatchVehicleUpdateDesc.prototype.get_maxNbVehicles = function() {
          var self2 = this.ptr;
          return _emscripten_bind_BatchVehicleUpdateDesc_get_maxNbVehicles_0(self2);
        };
        BatchVehicleUpdateDesc.prototype["set_maxNbVehicles"] = BatchVehicleUpdateDesc.prototype.set_maxNbVehicles = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_maxNbVehicles_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "maxNbVehicles", { get: BatchVehicleUpdateDesc.prototype.get_maxNbVehicles, set: BatchVehicleUpdateDesc.prototype.set_maxNbVehicles });
        BatchVehicleUpdateDesc.prototype["get_maxNbWheelsPerVehicle"] = BatchVehicleUpdateDesc.prototype.get_maxNbWheelsPerVehicle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_BatchVehicleUpdateDesc_get_maxNbWheelsPerVehicle_0(self2);
        };
        BatchVehicleUpdateDesc.prototype["set_maxNbWheelsPerVehicle"] = BatchVehicleUpdateDesc.prototype.set_maxNbWheelsPerVehicle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_maxNbWheelsPerVehicle_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "maxNbWheelsPerVehicle", { get: BatchVehicleUpdateDesc.prototype.get_maxNbWheelsPerVehicle, set: BatchVehicleUpdateDesc.prototype.set_maxNbWheelsPerVehicle });
        BatchVehicleUpdateDesc.prototype["get_maxNbHitPointsPerWheel"] = BatchVehicleUpdateDesc.prototype.get_maxNbHitPointsPerWheel = function() {
          var self2 = this.ptr;
          return _emscripten_bind_BatchVehicleUpdateDesc_get_maxNbHitPointsPerWheel_0(self2);
        };
        BatchVehicleUpdateDesc.prototype["set_maxNbHitPointsPerWheel"] = BatchVehicleUpdateDesc.prototype.set_maxNbHitPointsPerWheel = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_maxNbHitPointsPerWheel_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "maxNbHitPointsPerWheel", { get: BatchVehicleUpdateDesc.prototype.get_maxNbHitPointsPerWheel, set: BatchVehicleUpdateDesc.prototype.set_maxNbHitPointsPerWheel });
        BatchVehicleUpdateDesc.prototype["get_numWorkers"] = BatchVehicleUpdateDesc.prototype.get_numWorkers = function() {
          var self2 = this.ptr;
          return _emscripten_bind_BatchVehicleUpdateDesc_get_numWorkers_0(self2);
        };
        BatchVehicleUpdateDesc.prototype["set_numWorkers"] = BatchVehicleUpdateDesc.prototype.set_numWorkers = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_numWorkers_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "numWorkers", { get: BatchVehicleUpdateDesc.prototype.get_numWorkers, set: BatchVehicleUpdateDesc.prototype.set_numWorkers });
        BatchVehicleUpdateDesc.prototype["get_batchSize"] = BatchVehicleUpdateDesc.prototype.get_batchSize = function() {
          var self2 = this.ptr;
          return _emscripten_bind_BatchVehicleUpdateDesc_get_batchSize_0(self2);
        };
        BatchVehicleUpdateDesc.prototype["set_batchSize"] = BatchVehicleUpdateDesc.prototype.set_batchSize = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_batchSize_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "batchSize", { get: BatchVehicleUpdateDesc.prototype.get_batchSize, set: BatchVehicleUpdateDesc.prototype.set_batchSize });
        BatchVehicleUpdateDesc.prototype["get_preFilterShader"] = BatchVehicleUpdateDesc.prototype.get_preFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_BatchVehicleUpdateDesc_get_preFilterShader_0(self2), PxBatchQueryPreFilterShader);
        };
        BatchVehicleUpdateDesc.prototype["set_preFilterShader"] = BatchVehicleUpdateDesc.prototype.set_preFilterShader = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_preFilterShader_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "preFilterShader", { get: BatchVehicleUpdateDesc.prototype.get_preFilterShader, set: BatchVehicleUpdateDesc.prototype.set_preFilterShader });
        BatchVehicleUpdateDesc.prototype["get_postFilterShader"] = BatchVehicleUpdateDesc.prototype.get_postFilterShader = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_BatchVehicleUpdateDesc_get_postFilterShader_0(self2), PxBatchQueryPostFilterShader);
        };
        BatchVehicleUpdateDesc.prototype["set_postFilterShader"] = BatchVehicleUpdateDesc.prototype.set_postFilterShader = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc_set_postFilterShader_1(self2, arg0);
        };
        Object.defineProperty(BatchVehicleUpdateDesc.prototype, "postFilterShader", { get: BatchVehicleUpdateDesc.prototype.get_postFilterShader, set: BatchVehicleUpdateDesc.prototype.set_postFilterShader });
        BatchVehicleUpdateDesc.prototype["__destroy__"] = BatchVehicleUpdateDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_BatchVehicleUpdateDesc___destroy___0(self2);
        };
        function BatchVehicleUpdate(desc) {
          if (desc && typeof desc === "object")
            desc = desc.ptr;
          this.ptr = _emscripten_bind_BatchVehicleUpdate_BatchVehicleUpdate_1(desc);
          getCache(BatchVehicleUpdate)[this.ptr] = this;
        }
        ;
        ;
        BatchVehicleUpdate.prototype = Object.create(WrapperObject.prototype);
        BatchVehicleUpdate.prototype.constructor = BatchVehicleUpdate;
        BatchVehicleUpdate.prototype.__class__ = BatchVehicleUpdate;
        BatchVehicleUpdate.__cache__ = {};
        Module["BatchVehicleUpdate"] = BatchVehicleUpdate;
        BatchVehicleUpdate.prototype["addVehicle"] = BatchVehicleUpdate.prototype.addVehicle = function(vehicle) {
          var self2 = this.ptr;
          if (vehicle && typeof vehicle === "object")
            vehicle = vehicle.ptr;
          _emscripten_bind_BatchVehicleUpdate_addVehicle_1(self2, vehicle);
        };
        ;
        BatchVehicleUpdate.prototype["removeVehicle"] = BatchVehicleUpdate.prototype.removeVehicle = function(vehicle) {
          var self2 = this.ptr;
          if (vehicle && typeof vehicle === "object")
            vehicle = vehicle.ptr;
          _emscripten_bind_BatchVehicleUpdate_removeVehicle_1(self2, vehicle);
        };
        ;
        BatchVehicleUpdate.prototype["removeAllVehicles"] = BatchVehicleUpdate.prototype.removeAllVehicles = function() {
          var self2 = this.ptr;
          _emscripten_bind_BatchVehicleUpdate_removeAllVehicles_0(self2);
        };
        ;
        BatchVehicleUpdate.prototype["indexOf"] = BatchVehicleUpdate.prototype.indexOf = function(vehicle) {
          var self2 = this.ptr;
          if (vehicle && typeof vehicle === "object")
            vehicle = vehicle.ptr;
          return _emscripten_bind_BatchVehicleUpdate_indexOf_1(self2, vehicle);
        };
        ;
        BatchVehicleUpdate.prototype["batchUpdate"] = BatchVehicleUpdate.prototype.batchUpdate = function(timestep) {
          var self2 = this.ptr;
          if (timestep && typeof timestep === "object")
            timestep = timestep.ptr;
          _emscripten_bind_BatchVehicleUpdate_batchUpdate_1(self2, timestep);
        };
        ;
        BatchVehicleUpdate.prototype["getWheelQueryResult"] = BatchVehicleUpdate.prototype.getWheelQueryResult = function(vehicleId, wheelId) {
          var self2 = this.ptr;
          if (vehicleId && typeof vehicleId === "object")
            vehicleId = vehicleId.ptr;
          if (wheelId && typeof wheelId === "object")
            wheelId = wheelId.ptr;
          return wrapPointer(_emscripten_bind_BatchVehicleUpdate_getWheelQueryResult_2(self2, vehicleId, wheelId), PxWheelQueryResult);
        };
        ;
        BatchVehicleUpdate.prototype["__destroy__"] = BatchVehicleUpdate.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_BatchVehicleUpdate___destroy___0(self2);
        };
        function PxBoxController() {
          throw "cannot construct a PxBoxController, no constructor in IDL";
        }
        PxBoxController.prototype = Object.create(PxController.prototype);
        PxBoxController.prototype.constructor = PxBoxController;
        PxBoxController.prototype.__class__ = PxBoxController;
        PxBoxController.__cache__ = {};
        Module["PxBoxController"] = PxBoxController;
        PxBoxController.prototype["getHalfHeight"] = PxBoxController.prototype.getHalfHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getHalfHeight_0(self2);
        };
        ;
        PxBoxController.prototype["getHalfSideExtent"] = PxBoxController.prototype.getHalfSideExtent = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getHalfSideExtent_0(self2);
        };
        ;
        PxBoxController.prototype["getHalfForwardExtent"] = PxBoxController.prototype.getHalfForwardExtent = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getHalfForwardExtent_0(self2);
        };
        ;
        PxBoxController.prototype["setHalfHeight"] = PxBoxController.prototype.setHalfHeight = function(halfHeight) {
          var self2 = this.ptr;
          if (halfHeight && typeof halfHeight === "object")
            halfHeight = halfHeight.ptr;
          _emscripten_bind_PxBoxController_setHalfHeight_1(self2, halfHeight);
        };
        ;
        PxBoxController.prototype["setHalfSideExtent"] = PxBoxController.prototype.setHalfSideExtent = function(halfSideExtent) {
          var self2 = this.ptr;
          if (halfSideExtent && typeof halfSideExtent === "object")
            halfSideExtent = halfSideExtent.ptr;
          _emscripten_bind_PxBoxController_setHalfSideExtent_1(self2, halfSideExtent);
        };
        ;
        PxBoxController.prototype["setHalfForwardExtent"] = PxBoxController.prototype.setHalfForwardExtent = function(halfForwardExtent) {
          var self2 = this.ptr;
          if (halfForwardExtent && typeof halfForwardExtent === "object")
            halfForwardExtent = halfForwardExtent.ptr;
          _emscripten_bind_PxBoxController_setHalfForwardExtent_1(self2, halfForwardExtent);
        };
        ;
        PxBoxController.prototype["getType"] = PxBoxController.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getType_0(self2);
        };
        ;
        PxBoxController.prototype["release"] = PxBoxController.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBoxController_release_0(self2);
        };
        ;
        PxBoxController.prototype["move"] = PxBoxController.prototype.move = function(disp, minDist, elapsedTime, filters, obstacles) {
          var self2 = this.ptr;
          if (disp && typeof disp === "object")
            disp = disp.ptr;
          if (minDist && typeof minDist === "object")
            minDist = minDist.ptr;
          if (elapsedTime && typeof elapsedTime === "object")
            elapsedTime = elapsedTime.ptr;
          if (filters && typeof filters === "object")
            filters = filters.ptr;
          if (obstacles && typeof obstacles === "object")
            obstacles = obstacles.ptr;
          if (obstacles === void 0) {
            return wrapPointer(_emscripten_bind_PxBoxController_move_4(self2, disp, minDist, elapsedTime, filters), PxControllerCollisionFlags);
          }
          return wrapPointer(_emscripten_bind_PxBoxController_move_5(self2, disp, minDist, elapsedTime, filters, obstacles), PxControllerCollisionFlags);
        };
        ;
        PxBoxController.prototype["setPosition"] = PxBoxController.prototype.setPosition = function(position) {
          var self2 = this.ptr;
          if (position && typeof position === "object")
            position = position.ptr;
          return !!_emscripten_bind_PxBoxController_setPosition_1(self2, position);
        };
        ;
        PxBoxController.prototype["getPosition"] = PxBoxController.prototype.getPosition = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxController_getPosition_0(self2), PxExtendedVec3);
        };
        ;
        PxBoxController.prototype["setFootPosition"] = PxBoxController.prototype.setFootPosition = function(position) {
          var self2 = this.ptr;
          if (position && typeof position === "object")
            position = position.ptr;
          return !!_emscripten_bind_PxBoxController_setFootPosition_1(self2, position);
        };
        ;
        PxBoxController.prototype["getFootPosition"] = PxBoxController.prototype.getFootPosition = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxController_getFootPosition_0(self2), PxExtendedVec3);
        };
        ;
        PxBoxController.prototype["getActor"] = PxBoxController.prototype.getActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxController_getActor_0(self2), PxRigidDynamic);
        };
        ;
        PxBoxController.prototype["setStepOffset"] = PxBoxController.prototype.setStepOffset = function(offset) {
          var self2 = this.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxBoxController_setStepOffset_1(self2, offset);
        };
        ;
        PxBoxController.prototype["getStepOffset"] = PxBoxController.prototype.getStepOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getStepOffset_0(self2);
        };
        ;
        PxBoxController.prototype["setNonWalkableMode"] = PxBoxController.prototype.setNonWalkableMode = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxBoxController_setNonWalkableMode_1(self2, flag);
        };
        ;
        PxBoxController.prototype["getNonWalkableMode"] = PxBoxController.prototype.getNonWalkableMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getNonWalkableMode_0(self2);
        };
        ;
        PxBoxController.prototype["getContactOffset"] = PxBoxController.prototype.getContactOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getContactOffset_0(self2);
        };
        ;
        PxBoxController.prototype["setContactOffset"] = PxBoxController.prototype.setContactOffset = function(offset) {
          var self2 = this.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxBoxController_setContactOffset_1(self2, offset);
        };
        ;
        PxBoxController.prototype["getUpDirection"] = PxBoxController.prototype.getUpDirection = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxController_getUpDirection_0(self2), PxVec3);
        };
        ;
        PxBoxController.prototype["setUpDirection"] = PxBoxController.prototype.setUpDirection = function(up) {
          var self2 = this.ptr;
          if (up && typeof up === "object")
            up = up.ptr;
          _emscripten_bind_PxBoxController_setUpDirection_1(self2, up);
        };
        ;
        PxBoxController.prototype["getSlopeLimit"] = PxBoxController.prototype.getSlopeLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxController_getSlopeLimit_0(self2);
        };
        ;
        PxBoxController.prototype["setSlopeLimit"] = PxBoxController.prototype.setSlopeLimit = function(slopeLimit) {
          var self2 = this.ptr;
          if (slopeLimit && typeof slopeLimit === "object")
            slopeLimit = slopeLimit.ptr;
          _emscripten_bind_PxBoxController_setSlopeLimit_1(self2, slopeLimit);
        };
        ;
        PxBoxController.prototype["invalidateCache"] = PxBoxController.prototype.invalidateCache = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBoxController_invalidateCache_0(self2);
        };
        ;
        PxBoxController.prototype["getScene"] = PxBoxController.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxController_getScene_0(self2), PxScene);
        };
        ;
        PxBoxController.prototype["getUserData"] = PxBoxController.prototype.getUserData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxController_getUserData_0(self2), VoidPtr);
        };
        ;
        PxBoxController.prototype["setUserData"] = PxBoxController.prototype.setUserData = function(userData) {
          var self2 = this.ptr;
          if (userData && typeof userData === "object")
            userData = userData.ptr;
          _emscripten_bind_PxBoxController_setUserData_1(self2, userData);
        };
        ;
        PxBoxController.prototype["getState"] = PxBoxController.prototype.getState = function(state) {
          var self2 = this.ptr;
          if (state && typeof state === "object")
            state = state.ptr;
          _emscripten_bind_PxBoxController_getState_1(self2, state);
        };
        ;
        PxBoxController.prototype["getStats"] = PxBoxController.prototype.getStats = function(stats) {
          var self2 = this.ptr;
          if (stats && typeof stats === "object")
            stats = stats.ptr;
          _emscripten_bind_PxBoxController_getStats_1(self2, stats);
        };
        ;
        PxBoxController.prototype["resize"] = PxBoxController.prototype.resize = function(height) {
          var self2 = this.ptr;
          if (height && typeof height === "object")
            height = height.ptr;
          _emscripten_bind_PxBoxController_resize_1(self2, height);
        };
        ;
        function PxBoxControllerDesc() {
          this.ptr = _emscripten_bind_PxBoxControllerDesc_PxBoxControllerDesc_0();
          getCache(PxBoxControllerDesc)[this.ptr] = this;
        }
        ;
        ;
        PxBoxControllerDesc.prototype = Object.create(PxControllerDesc.prototype);
        PxBoxControllerDesc.prototype.constructor = PxBoxControllerDesc;
        PxBoxControllerDesc.prototype.__class__ = PxBoxControllerDesc;
        PxBoxControllerDesc.__cache__ = {};
        Module["PxBoxControllerDesc"] = PxBoxControllerDesc;
        PxBoxControllerDesc.prototype["setToDefault"] = PxBoxControllerDesc.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBoxControllerDesc_setToDefault_0(self2);
        };
        ;
        PxBoxControllerDesc.prototype["isValid"] = PxBoxControllerDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBoxControllerDesc_isValid_0(self2);
        };
        ;
        PxBoxControllerDesc.prototype["getType"] = PxBoxControllerDesc.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_getType_0(self2);
        };
        ;
        PxBoxControllerDesc.prototype["get_halfHeight"] = PxBoxControllerDesc.prototype.get_halfHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_halfHeight_0(self2);
        };
        PxBoxControllerDesc.prototype["set_halfHeight"] = PxBoxControllerDesc.prototype.set_halfHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_halfHeight_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "halfHeight", { get: PxBoxControllerDesc.prototype.get_halfHeight, set: PxBoxControllerDesc.prototype.set_halfHeight });
        PxBoxControllerDesc.prototype["get_halfSideExtent"] = PxBoxControllerDesc.prototype.get_halfSideExtent = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_halfSideExtent_0(self2);
        };
        PxBoxControllerDesc.prototype["set_halfSideExtent"] = PxBoxControllerDesc.prototype.set_halfSideExtent = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_halfSideExtent_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "halfSideExtent", { get: PxBoxControllerDesc.prototype.get_halfSideExtent, set: PxBoxControllerDesc.prototype.set_halfSideExtent });
        PxBoxControllerDesc.prototype["get_halfForwardExtent"] = PxBoxControllerDesc.prototype.get_halfForwardExtent = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_halfForwardExtent_0(self2);
        };
        PxBoxControllerDesc.prototype["set_halfForwardExtent"] = PxBoxControllerDesc.prototype.set_halfForwardExtent = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_halfForwardExtent_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "halfForwardExtent", { get: PxBoxControllerDesc.prototype.get_halfForwardExtent, set: PxBoxControllerDesc.prototype.set_halfForwardExtent });
        PxBoxControllerDesc.prototype["get_position"] = PxBoxControllerDesc.prototype.get_position = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxControllerDesc_get_position_0(self2), PxExtendedVec3);
        };
        PxBoxControllerDesc.prototype["set_position"] = PxBoxControllerDesc.prototype.set_position = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_position_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "position", { get: PxBoxControllerDesc.prototype.get_position, set: PxBoxControllerDesc.prototype.set_position });
        PxBoxControllerDesc.prototype["get_upDirection"] = PxBoxControllerDesc.prototype.get_upDirection = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxControllerDesc_get_upDirection_0(self2), PxVec3);
        };
        PxBoxControllerDesc.prototype["set_upDirection"] = PxBoxControllerDesc.prototype.set_upDirection = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_upDirection_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "upDirection", { get: PxBoxControllerDesc.prototype.get_upDirection, set: PxBoxControllerDesc.prototype.set_upDirection });
        PxBoxControllerDesc.prototype["get_slopeLimit"] = PxBoxControllerDesc.prototype.get_slopeLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_slopeLimit_0(self2);
        };
        PxBoxControllerDesc.prototype["set_slopeLimit"] = PxBoxControllerDesc.prototype.set_slopeLimit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_slopeLimit_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "slopeLimit", { get: PxBoxControllerDesc.prototype.get_slopeLimit, set: PxBoxControllerDesc.prototype.set_slopeLimit });
        PxBoxControllerDesc.prototype["get_invisibleWallHeight"] = PxBoxControllerDesc.prototype.get_invisibleWallHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_invisibleWallHeight_0(self2);
        };
        PxBoxControllerDesc.prototype["set_invisibleWallHeight"] = PxBoxControllerDesc.prototype.set_invisibleWallHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_invisibleWallHeight_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "invisibleWallHeight", { get: PxBoxControllerDesc.prototype.get_invisibleWallHeight, set: PxBoxControllerDesc.prototype.set_invisibleWallHeight });
        PxBoxControllerDesc.prototype["get_maxJumpHeight"] = PxBoxControllerDesc.prototype.get_maxJumpHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_maxJumpHeight_0(self2);
        };
        PxBoxControllerDesc.prototype["set_maxJumpHeight"] = PxBoxControllerDesc.prototype.set_maxJumpHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_maxJumpHeight_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "maxJumpHeight", { get: PxBoxControllerDesc.prototype.get_maxJumpHeight, set: PxBoxControllerDesc.prototype.set_maxJumpHeight });
        PxBoxControllerDesc.prototype["get_contactOffset"] = PxBoxControllerDesc.prototype.get_contactOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_contactOffset_0(self2);
        };
        PxBoxControllerDesc.prototype["set_contactOffset"] = PxBoxControllerDesc.prototype.set_contactOffset = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_contactOffset_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "contactOffset", { get: PxBoxControllerDesc.prototype.get_contactOffset, set: PxBoxControllerDesc.prototype.set_contactOffset });
        PxBoxControllerDesc.prototype["get_stepOffset"] = PxBoxControllerDesc.prototype.get_stepOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_stepOffset_0(self2);
        };
        PxBoxControllerDesc.prototype["set_stepOffset"] = PxBoxControllerDesc.prototype.set_stepOffset = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_stepOffset_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "stepOffset", { get: PxBoxControllerDesc.prototype.get_stepOffset, set: PxBoxControllerDesc.prototype.set_stepOffset });
        PxBoxControllerDesc.prototype["get_density"] = PxBoxControllerDesc.prototype.get_density = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_density_0(self2);
        };
        PxBoxControllerDesc.prototype["set_density"] = PxBoxControllerDesc.prototype.set_density = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_density_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "density", { get: PxBoxControllerDesc.prototype.get_density, set: PxBoxControllerDesc.prototype.set_density });
        PxBoxControllerDesc.prototype["get_scaleCoeff"] = PxBoxControllerDesc.prototype.get_scaleCoeff = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_scaleCoeff_0(self2);
        };
        PxBoxControllerDesc.prototype["set_scaleCoeff"] = PxBoxControllerDesc.prototype.set_scaleCoeff = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_scaleCoeff_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "scaleCoeff", { get: PxBoxControllerDesc.prototype.get_scaleCoeff, set: PxBoxControllerDesc.prototype.set_scaleCoeff });
        PxBoxControllerDesc.prototype["get_volumeGrowth"] = PxBoxControllerDesc.prototype.get_volumeGrowth = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_volumeGrowth_0(self2);
        };
        PxBoxControllerDesc.prototype["set_volumeGrowth"] = PxBoxControllerDesc.prototype.set_volumeGrowth = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_volumeGrowth_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "volumeGrowth", { get: PxBoxControllerDesc.prototype.get_volumeGrowth, set: PxBoxControllerDesc.prototype.set_volumeGrowth });
        PxBoxControllerDesc.prototype["get_reportCallback"] = PxBoxControllerDesc.prototype.get_reportCallback = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxControllerDesc_get_reportCallback_0(self2), PxUserControllerHitReport);
        };
        PxBoxControllerDesc.prototype["set_reportCallback"] = PxBoxControllerDesc.prototype.set_reportCallback = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_reportCallback_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "reportCallback", { get: PxBoxControllerDesc.prototype.get_reportCallback, set: PxBoxControllerDesc.prototype.set_reportCallback });
        PxBoxControllerDesc.prototype["get_nonWalkableMode"] = PxBoxControllerDesc.prototype.get_nonWalkableMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxControllerDesc_get_nonWalkableMode_0(self2);
        };
        PxBoxControllerDesc.prototype["set_nonWalkableMode"] = PxBoxControllerDesc.prototype.set_nonWalkableMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_nonWalkableMode_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "nonWalkableMode", { get: PxBoxControllerDesc.prototype.get_nonWalkableMode, set: PxBoxControllerDesc.prototype.set_nonWalkableMode });
        PxBoxControllerDesc.prototype["get_material"] = PxBoxControllerDesc.prototype.get_material = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxControllerDesc_get_material_0(self2), PxMaterial);
        };
        PxBoxControllerDesc.prototype["set_material"] = PxBoxControllerDesc.prototype.set_material = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_material_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "material", { get: PxBoxControllerDesc.prototype.get_material, set: PxBoxControllerDesc.prototype.set_material });
        PxBoxControllerDesc.prototype["get_registerDeletionListener"] = PxBoxControllerDesc.prototype.get_registerDeletionListener = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxBoxControllerDesc_get_registerDeletionListener_0(self2);
        };
        PxBoxControllerDesc.prototype["set_registerDeletionListener"] = PxBoxControllerDesc.prototype.set_registerDeletionListener = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_registerDeletionListener_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "registerDeletionListener", { get: PxBoxControllerDesc.prototype.get_registerDeletionListener, set: PxBoxControllerDesc.prototype.set_registerDeletionListener });
        PxBoxControllerDesc.prototype["get_userData"] = PxBoxControllerDesc.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxControllerDesc_get_userData_0(self2), VoidPtr);
        };
        PxBoxControllerDesc.prototype["set_userData"] = PxBoxControllerDesc.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxControllerDesc_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxBoxControllerDesc.prototype, "userData", { get: PxBoxControllerDesc.prototype.get_userData, set: PxBoxControllerDesc.prototype.set_userData });
        PxBoxControllerDesc.prototype["__destroy__"] = PxBoxControllerDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBoxControllerDesc___destroy___0(self2);
        };
        function PxBoxObstacle() {
          this.ptr = _emscripten_bind_PxBoxObstacle_PxBoxObstacle_0();
          getCache(PxBoxObstacle)[this.ptr] = this;
        }
        ;
        ;
        PxBoxObstacle.prototype = Object.create(PxObstacle.prototype);
        PxBoxObstacle.prototype.constructor = PxBoxObstacle;
        PxBoxObstacle.prototype.__class__ = PxBoxObstacle;
        PxBoxObstacle.__cache__ = {};
        Module["PxBoxObstacle"] = PxBoxObstacle;
        PxBoxObstacle.prototype["getType"] = PxBoxObstacle.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxBoxObstacle_getType_0(self2);
        };
        ;
        PxBoxObstacle.prototype["get_mHalfExtents"] = PxBoxObstacle.prototype.get_mHalfExtents = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxObstacle_get_mHalfExtents_0(self2), PxVec3);
        };
        PxBoxObstacle.prototype["set_mHalfExtents"] = PxBoxObstacle.prototype.set_mHalfExtents = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxObstacle_set_mHalfExtents_1(self2, arg0);
        };
        Object.defineProperty(PxBoxObstacle.prototype, "mHalfExtents", { get: PxBoxObstacle.prototype.get_mHalfExtents, set: PxBoxObstacle.prototype.set_mHalfExtents });
        PxBoxObstacle.prototype["get_mUserData"] = PxBoxObstacle.prototype.get_mUserData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxObstacle_get_mUserData_0(self2), VoidPtr);
        };
        PxBoxObstacle.prototype["set_mUserData"] = PxBoxObstacle.prototype.set_mUserData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxObstacle_set_mUserData_1(self2, arg0);
        };
        Object.defineProperty(PxBoxObstacle.prototype, "mUserData", { get: PxBoxObstacle.prototype.get_mUserData, set: PxBoxObstacle.prototype.set_mUserData });
        PxBoxObstacle.prototype["get_mPos"] = PxBoxObstacle.prototype.get_mPos = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxObstacle_get_mPos_0(self2), PxExtendedVec3);
        };
        PxBoxObstacle.prototype["set_mPos"] = PxBoxObstacle.prototype.set_mPos = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxObstacle_set_mPos_1(self2, arg0);
        };
        Object.defineProperty(PxBoxObstacle.prototype, "mPos", { get: PxBoxObstacle.prototype.get_mPos, set: PxBoxObstacle.prototype.set_mPos });
        PxBoxObstacle.prototype["get_mRot"] = PxBoxObstacle.prototype.get_mRot = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxBoxObstacle_get_mRot_0(self2), PxQuat);
        };
        PxBoxObstacle.prototype["set_mRot"] = PxBoxObstacle.prototype.set_mRot = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxBoxObstacle_set_mRot_1(self2, arg0);
        };
        Object.defineProperty(PxBoxObstacle.prototype, "mRot", { get: PxBoxObstacle.prototype.get_mRot, set: PxBoxObstacle.prototype.set_mRot });
        PxBoxObstacle.prototype["__destroy__"] = PxBoxObstacle.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxBoxObstacle___destroy___0(self2);
        };
        function PxCapsuleController() {
          throw "cannot construct a PxCapsuleController, no constructor in IDL";
        }
        PxCapsuleController.prototype = Object.create(PxController.prototype);
        PxCapsuleController.prototype.constructor = PxCapsuleController;
        PxCapsuleController.prototype.__class__ = PxCapsuleController;
        PxCapsuleController.__cache__ = {};
        Module["PxCapsuleController"] = PxCapsuleController;
        PxCapsuleController.prototype["getRadius"] = PxCapsuleController.prototype.getRadius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getRadius_0(self2);
        };
        ;
        PxCapsuleController.prototype["setRadius"] = PxCapsuleController.prototype.setRadius = function(radius) {
          var self2 = this.ptr;
          if (radius && typeof radius === "object")
            radius = radius.ptr;
          _emscripten_bind_PxCapsuleController_setRadius_1(self2, radius);
        };
        ;
        PxCapsuleController.prototype["getHeight"] = PxCapsuleController.prototype.getHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getHeight_0(self2);
        };
        ;
        PxCapsuleController.prototype["setHeight"] = PxCapsuleController.prototype.setHeight = function(height) {
          var self2 = this.ptr;
          if (height && typeof height === "object")
            height = height.ptr;
          _emscripten_bind_PxCapsuleController_setHeight_1(self2, height);
        };
        ;
        PxCapsuleController.prototype["getClimbingMode"] = PxCapsuleController.prototype.getClimbingMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getClimbingMode_0(self2);
        };
        ;
        PxCapsuleController.prototype["setClimbingMode"] = PxCapsuleController.prototype.setClimbingMode = function(mode) {
          var self2 = this.ptr;
          if (mode && typeof mode === "object")
            mode = mode.ptr;
          return !!_emscripten_bind_PxCapsuleController_setClimbingMode_1(self2, mode);
        };
        ;
        PxCapsuleController.prototype["getType"] = PxCapsuleController.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getType_0(self2);
        };
        ;
        PxCapsuleController.prototype["release"] = PxCapsuleController.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCapsuleController_release_0(self2);
        };
        ;
        PxCapsuleController.prototype["move"] = PxCapsuleController.prototype.move = function(disp, minDist, elapsedTime, filters, obstacles) {
          var self2 = this.ptr;
          if (disp && typeof disp === "object")
            disp = disp.ptr;
          if (minDist && typeof minDist === "object")
            minDist = minDist.ptr;
          if (elapsedTime && typeof elapsedTime === "object")
            elapsedTime = elapsedTime.ptr;
          if (filters && typeof filters === "object")
            filters = filters.ptr;
          if (obstacles && typeof obstacles === "object")
            obstacles = obstacles.ptr;
          if (obstacles === void 0) {
            return wrapPointer(_emscripten_bind_PxCapsuleController_move_4(self2, disp, minDist, elapsedTime, filters), PxControllerCollisionFlags);
          }
          return wrapPointer(_emscripten_bind_PxCapsuleController_move_5(self2, disp, minDist, elapsedTime, filters, obstacles), PxControllerCollisionFlags);
        };
        ;
        PxCapsuleController.prototype["setPosition"] = PxCapsuleController.prototype.setPosition = function(position) {
          var self2 = this.ptr;
          if (position && typeof position === "object")
            position = position.ptr;
          return !!_emscripten_bind_PxCapsuleController_setPosition_1(self2, position);
        };
        ;
        PxCapsuleController.prototype["getPosition"] = PxCapsuleController.prototype.getPosition = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleController_getPosition_0(self2), PxExtendedVec3);
        };
        ;
        PxCapsuleController.prototype["setFootPosition"] = PxCapsuleController.prototype.setFootPosition = function(position) {
          var self2 = this.ptr;
          if (position && typeof position === "object")
            position = position.ptr;
          return !!_emscripten_bind_PxCapsuleController_setFootPosition_1(self2, position);
        };
        ;
        PxCapsuleController.prototype["getFootPosition"] = PxCapsuleController.prototype.getFootPosition = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleController_getFootPosition_0(self2), PxExtendedVec3);
        };
        ;
        PxCapsuleController.prototype["getActor"] = PxCapsuleController.prototype.getActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleController_getActor_0(self2), PxRigidDynamic);
        };
        ;
        PxCapsuleController.prototype["setStepOffset"] = PxCapsuleController.prototype.setStepOffset = function(offset) {
          var self2 = this.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxCapsuleController_setStepOffset_1(self2, offset);
        };
        ;
        PxCapsuleController.prototype["getStepOffset"] = PxCapsuleController.prototype.getStepOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getStepOffset_0(self2);
        };
        ;
        PxCapsuleController.prototype["setNonWalkableMode"] = PxCapsuleController.prototype.setNonWalkableMode = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxCapsuleController_setNonWalkableMode_1(self2, flag);
        };
        ;
        PxCapsuleController.prototype["getNonWalkableMode"] = PxCapsuleController.prototype.getNonWalkableMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getNonWalkableMode_0(self2);
        };
        ;
        PxCapsuleController.prototype["getContactOffset"] = PxCapsuleController.prototype.getContactOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getContactOffset_0(self2);
        };
        ;
        PxCapsuleController.prototype["setContactOffset"] = PxCapsuleController.prototype.setContactOffset = function(offset) {
          var self2 = this.ptr;
          if (offset && typeof offset === "object")
            offset = offset.ptr;
          _emscripten_bind_PxCapsuleController_setContactOffset_1(self2, offset);
        };
        ;
        PxCapsuleController.prototype["getUpDirection"] = PxCapsuleController.prototype.getUpDirection = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleController_getUpDirection_0(self2), PxVec3);
        };
        ;
        PxCapsuleController.prototype["setUpDirection"] = PxCapsuleController.prototype.setUpDirection = function(up) {
          var self2 = this.ptr;
          if (up && typeof up === "object")
            up = up.ptr;
          _emscripten_bind_PxCapsuleController_setUpDirection_1(self2, up);
        };
        ;
        PxCapsuleController.prototype["getSlopeLimit"] = PxCapsuleController.prototype.getSlopeLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleController_getSlopeLimit_0(self2);
        };
        ;
        PxCapsuleController.prototype["setSlopeLimit"] = PxCapsuleController.prototype.setSlopeLimit = function(slopeLimit) {
          var self2 = this.ptr;
          if (slopeLimit && typeof slopeLimit === "object")
            slopeLimit = slopeLimit.ptr;
          _emscripten_bind_PxCapsuleController_setSlopeLimit_1(self2, slopeLimit);
        };
        ;
        PxCapsuleController.prototype["invalidateCache"] = PxCapsuleController.prototype.invalidateCache = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCapsuleController_invalidateCache_0(self2);
        };
        ;
        PxCapsuleController.prototype["getScene"] = PxCapsuleController.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleController_getScene_0(self2), PxScene);
        };
        ;
        PxCapsuleController.prototype["getUserData"] = PxCapsuleController.prototype.getUserData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleController_getUserData_0(self2), VoidPtr);
        };
        ;
        PxCapsuleController.prototype["setUserData"] = PxCapsuleController.prototype.setUserData = function(userData) {
          var self2 = this.ptr;
          if (userData && typeof userData === "object")
            userData = userData.ptr;
          _emscripten_bind_PxCapsuleController_setUserData_1(self2, userData);
        };
        ;
        PxCapsuleController.prototype["getState"] = PxCapsuleController.prototype.getState = function(state) {
          var self2 = this.ptr;
          if (state && typeof state === "object")
            state = state.ptr;
          _emscripten_bind_PxCapsuleController_getState_1(self2, state);
        };
        ;
        PxCapsuleController.prototype["getStats"] = PxCapsuleController.prototype.getStats = function(stats) {
          var self2 = this.ptr;
          if (stats && typeof stats === "object")
            stats = stats.ptr;
          _emscripten_bind_PxCapsuleController_getStats_1(self2, stats);
        };
        ;
        PxCapsuleController.prototype["resize"] = PxCapsuleController.prototype.resize = function(height) {
          var self2 = this.ptr;
          if (height && typeof height === "object")
            height = height.ptr;
          _emscripten_bind_PxCapsuleController_resize_1(self2, height);
        };
        ;
        function PxCapsuleControllerDesc() {
          this.ptr = _emscripten_bind_PxCapsuleControllerDesc_PxCapsuleControllerDesc_0();
          getCache(PxCapsuleControllerDesc)[this.ptr] = this;
        }
        ;
        ;
        PxCapsuleControllerDesc.prototype = Object.create(PxControllerDesc.prototype);
        PxCapsuleControllerDesc.prototype.constructor = PxCapsuleControllerDesc;
        PxCapsuleControllerDesc.prototype.__class__ = PxCapsuleControllerDesc;
        PxCapsuleControllerDesc.__cache__ = {};
        Module["PxCapsuleControllerDesc"] = PxCapsuleControllerDesc;
        PxCapsuleControllerDesc.prototype["setToDefault"] = PxCapsuleControllerDesc.prototype.setToDefault = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_setToDefault_0(self2);
        };
        ;
        PxCapsuleControllerDesc.prototype["isValid"] = PxCapsuleControllerDesc.prototype.isValid = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCapsuleControllerDesc_isValid_0(self2);
        };
        ;
        PxCapsuleControllerDesc.prototype["getType"] = PxCapsuleControllerDesc.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_getType_0(self2);
        };
        ;
        PxCapsuleControllerDesc.prototype["get_radius"] = PxCapsuleControllerDesc.prototype.get_radius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_radius_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_radius"] = PxCapsuleControllerDesc.prototype.set_radius = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_radius_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "radius", { get: PxCapsuleControllerDesc.prototype.get_radius, set: PxCapsuleControllerDesc.prototype.set_radius });
        PxCapsuleControllerDesc.prototype["get_height"] = PxCapsuleControllerDesc.prototype.get_height = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_height_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_height"] = PxCapsuleControllerDesc.prototype.set_height = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_height_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "height", { get: PxCapsuleControllerDesc.prototype.get_height, set: PxCapsuleControllerDesc.prototype.set_height });
        PxCapsuleControllerDesc.prototype["get_climbingMode"] = PxCapsuleControllerDesc.prototype.get_climbingMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_climbingMode_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_climbingMode"] = PxCapsuleControllerDesc.prototype.set_climbingMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_climbingMode_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "climbingMode", { get: PxCapsuleControllerDesc.prototype.get_climbingMode, set: PxCapsuleControllerDesc.prototype.set_climbingMode });
        PxCapsuleControllerDesc.prototype["get_position"] = PxCapsuleControllerDesc.prototype.get_position = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleControllerDesc_get_position_0(self2), PxExtendedVec3);
        };
        PxCapsuleControllerDesc.prototype["set_position"] = PxCapsuleControllerDesc.prototype.set_position = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_position_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "position", { get: PxCapsuleControllerDesc.prototype.get_position, set: PxCapsuleControllerDesc.prototype.set_position });
        PxCapsuleControllerDesc.prototype["get_upDirection"] = PxCapsuleControllerDesc.prototype.get_upDirection = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleControllerDesc_get_upDirection_0(self2), PxVec3);
        };
        PxCapsuleControllerDesc.prototype["set_upDirection"] = PxCapsuleControllerDesc.prototype.set_upDirection = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_upDirection_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "upDirection", { get: PxCapsuleControllerDesc.prototype.get_upDirection, set: PxCapsuleControllerDesc.prototype.set_upDirection });
        PxCapsuleControllerDesc.prototype["get_slopeLimit"] = PxCapsuleControllerDesc.prototype.get_slopeLimit = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_slopeLimit_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_slopeLimit"] = PxCapsuleControllerDesc.prototype.set_slopeLimit = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_slopeLimit_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "slopeLimit", { get: PxCapsuleControllerDesc.prototype.get_slopeLimit, set: PxCapsuleControllerDesc.prototype.set_slopeLimit });
        PxCapsuleControllerDesc.prototype["get_invisibleWallHeight"] = PxCapsuleControllerDesc.prototype.get_invisibleWallHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_invisibleWallHeight_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_invisibleWallHeight"] = PxCapsuleControllerDesc.prototype.set_invisibleWallHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_invisibleWallHeight_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "invisibleWallHeight", { get: PxCapsuleControllerDesc.prototype.get_invisibleWallHeight, set: PxCapsuleControllerDesc.prototype.set_invisibleWallHeight });
        PxCapsuleControllerDesc.prototype["get_maxJumpHeight"] = PxCapsuleControllerDesc.prototype.get_maxJumpHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_maxJumpHeight_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_maxJumpHeight"] = PxCapsuleControllerDesc.prototype.set_maxJumpHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_maxJumpHeight_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "maxJumpHeight", { get: PxCapsuleControllerDesc.prototype.get_maxJumpHeight, set: PxCapsuleControllerDesc.prototype.set_maxJumpHeight });
        PxCapsuleControllerDesc.prototype["get_contactOffset"] = PxCapsuleControllerDesc.prototype.get_contactOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_contactOffset_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_contactOffset"] = PxCapsuleControllerDesc.prototype.set_contactOffset = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_contactOffset_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "contactOffset", { get: PxCapsuleControllerDesc.prototype.get_contactOffset, set: PxCapsuleControllerDesc.prototype.set_contactOffset });
        PxCapsuleControllerDesc.prototype["get_stepOffset"] = PxCapsuleControllerDesc.prototype.get_stepOffset = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_stepOffset_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_stepOffset"] = PxCapsuleControllerDesc.prototype.set_stepOffset = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_stepOffset_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "stepOffset", { get: PxCapsuleControllerDesc.prototype.get_stepOffset, set: PxCapsuleControllerDesc.prototype.set_stepOffset });
        PxCapsuleControllerDesc.prototype["get_density"] = PxCapsuleControllerDesc.prototype.get_density = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_density_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_density"] = PxCapsuleControllerDesc.prototype.set_density = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_density_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "density", { get: PxCapsuleControllerDesc.prototype.get_density, set: PxCapsuleControllerDesc.prototype.set_density });
        PxCapsuleControllerDesc.prototype["get_scaleCoeff"] = PxCapsuleControllerDesc.prototype.get_scaleCoeff = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_scaleCoeff_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_scaleCoeff"] = PxCapsuleControllerDesc.prototype.set_scaleCoeff = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_scaleCoeff_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "scaleCoeff", { get: PxCapsuleControllerDesc.prototype.get_scaleCoeff, set: PxCapsuleControllerDesc.prototype.set_scaleCoeff });
        PxCapsuleControllerDesc.prototype["get_volumeGrowth"] = PxCapsuleControllerDesc.prototype.get_volumeGrowth = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_volumeGrowth_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_volumeGrowth"] = PxCapsuleControllerDesc.prototype.set_volumeGrowth = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_volumeGrowth_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "volumeGrowth", { get: PxCapsuleControllerDesc.prototype.get_volumeGrowth, set: PxCapsuleControllerDesc.prototype.set_volumeGrowth });
        PxCapsuleControllerDesc.prototype["get_reportCallback"] = PxCapsuleControllerDesc.prototype.get_reportCallback = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleControllerDesc_get_reportCallback_0(self2), PxUserControllerHitReport);
        };
        PxCapsuleControllerDesc.prototype["set_reportCallback"] = PxCapsuleControllerDesc.prototype.set_reportCallback = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_reportCallback_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "reportCallback", { get: PxCapsuleControllerDesc.prototype.get_reportCallback, set: PxCapsuleControllerDesc.prototype.set_reportCallback });
        PxCapsuleControllerDesc.prototype["get_nonWalkableMode"] = PxCapsuleControllerDesc.prototype.get_nonWalkableMode = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleControllerDesc_get_nonWalkableMode_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_nonWalkableMode"] = PxCapsuleControllerDesc.prototype.set_nonWalkableMode = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_nonWalkableMode_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "nonWalkableMode", { get: PxCapsuleControllerDesc.prototype.get_nonWalkableMode, set: PxCapsuleControllerDesc.prototype.set_nonWalkableMode });
        PxCapsuleControllerDesc.prototype["get_material"] = PxCapsuleControllerDesc.prototype.get_material = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleControllerDesc_get_material_0(self2), PxMaterial);
        };
        PxCapsuleControllerDesc.prototype["set_material"] = PxCapsuleControllerDesc.prototype.set_material = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_material_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "material", { get: PxCapsuleControllerDesc.prototype.get_material, set: PxCapsuleControllerDesc.prototype.set_material });
        PxCapsuleControllerDesc.prototype["get_registerDeletionListener"] = PxCapsuleControllerDesc.prototype.get_registerDeletionListener = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxCapsuleControllerDesc_get_registerDeletionListener_0(self2);
        };
        PxCapsuleControllerDesc.prototype["set_registerDeletionListener"] = PxCapsuleControllerDesc.prototype.set_registerDeletionListener = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_registerDeletionListener_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "registerDeletionListener", { get: PxCapsuleControllerDesc.prototype.get_registerDeletionListener, set: PxCapsuleControllerDesc.prototype.set_registerDeletionListener });
        PxCapsuleControllerDesc.prototype["get_userData"] = PxCapsuleControllerDesc.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleControllerDesc_get_userData_0(self2), VoidPtr);
        };
        PxCapsuleControllerDesc.prototype["set_userData"] = PxCapsuleControllerDesc.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleControllerDesc_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleControllerDesc.prototype, "userData", { get: PxCapsuleControllerDesc.prototype.get_userData, set: PxCapsuleControllerDesc.prototype.set_userData });
        PxCapsuleControllerDesc.prototype["__destroy__"] = PxCapsuleControllerDesc.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCapsuleControllerDesc___destroy___0(self2);
        };
        function PxCapsuleObstacle() {
          this.ptr = _emscripten_bind_PxCapsuleObstacle_PxCapsuleObstacle_0();
          getCache(PxCapsuleObstacle)[this.ptr] = this;
        }
        ;
        ;
        PxCapsuleObstacle.prototype = Object.create(PxObstacle.prototype);
        PxCapsuleObstacle.prototype.constructor = PxCapsuleObstacle;
        PxCapsuleObstacle.prototype.__class__ = PxCapsuleObstacle;
        PxCapsuleObstacle.__cache__ = {};
        Module["PxCapsuleObstacle"] = PxCapsuleObstacle;
        PxCapsuleObstacle.prototype["getType"] = PxCapsuleObstacle.prototype.getType = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleObstacle_getType_0(self2);
        };
        ;
        PxCapsuleObstacle.prototype["get_mHalfHeight"] = PxCapsuleObstacle.prototype.get_mHalfHeight = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleObstacle_get_mHalfHeight_0(self2);
        };
        PxCapsuleObstacle.prototype["set_mHalfHeight"] = PxCapsuleObstacle.prototype.set_mHalfHeight = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleObstacle_set_mHalfHeight_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleObstacle.prototype, "mHalfHeight", { get: PxCapsuleObstacle.prototype.get_mHalfHeight, set: PxCapsuleObstacle.prototype.set_mHalfHeight });
        PxCapsuleObstacle.prototype["get_mRadius"] = PxCapsuleObstacle.prototype.get_mRadius = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxCapsuleObstacle_get_mRadius_0(self2);
        };
        PxCapsuleObstacle.prototype["set_mRadius"] = PxCapsuleObstacle.prototype.set_mRadius = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleObstacle_set_mRadius_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleObstacle.prototype, "mRadius", { get: PxCapsuleObstacle.prototype.get_mRadius, set: PxCapsuleObstacle.prototype.set_mRadius });
        PxCapsuleObstacle.prototype["get_mUserData"] = PxCapsuleObstacle.prototype.get_mUserData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleObstacle_get_mUserData_0(self2), VoidPtr);
        };
        PxCapsuleObstacle.prototype["set_mUserData"] = PxCapsuleObstacle.prototype.set_mUserData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleObstacle_set_mUserData_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleObstacle.prototype, "mUserData", { get: PxCapsuleObstacle.prototype.get_mUserData, set: PxCapsuleObstacle.prototype.set_mUserData });
        PxCapsuleObstacle.prototype["get_mPos"] = PxCapsuleObstacle.prototype.get_mPos = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleObstacle_get_mPos_0(self2), PxExtendedVec3);
        };
        PxCapsuleObstacle.prototype["set_mPos"] = PxCapsuleObstacle.prototype.set_mPos = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleObstacle_set_mPos_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleObstacle.prototype, "mPos", { get: PxCapsuleObstacle.prototype.get_mPos, set: PxCapsuleObstacle.prototype.set_mPos });
        PxCapsuleObstacle.prototype["get_mRot"] = PxCapsuleObstacle.prototype.get_mRot = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxCapsuleObstacle_get_mRot_0(self2), PxQuat);
        };
        PxCapsuleObstacle.prototype["set_mRot"] = PxCapsuleObstacle.prototype.set_mRot = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxCapsuleObstacle_set_mRot_1(self2, arg0);
        };
        Object.defineProperty(PxCapsuleObstacle.prototype, "mRot", { get: PxCapsuleObstacle.prototype.get_mRot, set: PxCapsuleObstacle.prototype.set_mRot });
        PxCapsuleObstacle.prototype["__destroy__"] = PxCapsuleObstacle.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxCapsuleObstacle___destroy___0(self2);
        };
        function PxControllerCollisionFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxControllerCollisionFlags_PxControllerCollisionFlags_1(flags);
          getCache(PxControllerCollisionFlags)[this.ptr] = this;
        }
        ;
        ;
        PxControllerCollisionFlags.prototype = Object.create(WrapperObject.prototype);
        PxControllerCollisionFlags.prototype.constructor = PxControllerCollisionFlags;
        PxControllerCollisionFlags.prototype.__class__ = PxControllerCollisionFlags;
        PxControllerCollisionFlags.__cache__ = {};
        Module["PxControllerCollisionFlags"] = PxControllerCollisionFlags;
        PxControllerCollisionFlags.prototype["isSet"] = PxControllerCollisionFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxControllerCollisionFlags_isSet_1(self2, flag);
        };
        ;
        PxControllerCollisionFlags.prototype["set"] = PxControllerCollisionFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxControllerCollisionFlags_set_1(self2, flag);
        };
        ;
        PxControllerCollisionFlags.prototype["clear"] = PxControllerCollisionFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxControllerCollisionFlags_clear_1(self2, flag);
        };
        ;
        PxControllerCollisionFlags.prototype["__destroy__"] = PxControllerCollisionFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerCollisionFlags___destroy___0(self2);
        };
        function PxControllerFilters(filterData) {
          if (filterData && typeof filterData === "object")
            filterData = filterData.ptr;
          if (filterData === void 0) {
            this.ptr = _emscripten_bind_PxControllerFilters_PxControllerFilters_0();
            getCache(PxControllerFilters)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxControllerFilters_PxControllerFilters_1(filterData);
          getCache(PxControllerFilters)[this.ptr] = this;
        }
        ;
        ;
        PxControllerFilters.prototype = Object.create(WrapperObject.prototype);
        PxControllerFilters.prototype.constructor = PxControllerFilters;
        PxControllerFilters.prototype.__class__ = PxControllerFilters;
        PxControllerFilters.__cache__ = {};
        Module["PxControllerFilters"] = PxControllerFilters;
        PxControllerFilters.prototype["get_mFilterData"] = PxControllerFilters.prototype.get_mFilterData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerFilters_get_mFilterData_0(self2), PxFilterData);
        };
        PxControllerFilters.prototype["set_mFilterData"] = PxControllerFilters.prototype.set_mFilterData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerFilters_set_mFilterData_1(self2, arg0);
        };
        Object.defineProperty(PxControllerFilters.prototype, "mFilterData", { get: PxControllerFilters.prototype.get_mFilterData, set: PxControllerFilters.prototype.set_mFilterData });
        PxControllerFilters.prototype["get_mFilterFlags"] = PxControllerFilters.prototype.get_mFilterFlags = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerFilters_get_mFilterFlags_0(self2), PxQueryFlags);
        };
        PxControllerFilters.prototype["set_mFilterFlags"] = PxControllerFilters.prototype.set_mFilterFlags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerFilters_set_mFilterFlags_1(self2, arg0);
        };
        Object.defineProperty(PxControllerFilters.prototype, "mFilterFlags", { get: PxControllerFilters.prototype.get_mFilterFlags, set: PxControllerFilters.prototype.set_mFilterFlags });
        PxControllerFilters.prototype["__destroy__"] = PxControllerFilters.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerFilters___destroy___0(self2);
        };
        function PxControllerManager() {
          throw "cannot construct a PxControllerManager, no constructor in IDL";
        }
        PxControllerManager.prototype = Object.create(WrapperObject.prototype);
        PxControllerManager.prototype.constructor = PxControllerManager;
        PxControllerManager.prototype.__class__ = PxControllerManager;
        PxControllerManager.__cache__ = {};
        Module["PxControllerManager"] = PxControllerManager;
        PxControllerManager.prototype["release"] = PxControllerManager.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerManager_release_0(self2);
        };
        ;
        PxControllerManager.prototype["getScene"] = PxControllerManager.prototype.getScene = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerManager_getScene_0(self2), PxScene);
        };
        ;
        PxControllerManager.prototype["getNbControllers"] = PxControllerManager.prototype.getNbControllers = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerManager_getNbControllers_0(self2);
        };
        ;
        PxControllerManager.prototype["getController"] = PxControllerManager.prototype.getController = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxControllerManager_getController_1(self2, index), PxController);
        };
        ;
        PxControllerManager.prototype["createController"] = PxControllerManager.prototype.createController = function(desc) {
          var self2 = this.ptr;
          if (desc && typeof desc === "object")
            desc = desc.ptr;
          return wrapPointer(_emscripten_bind_PxControllerManager_createController_1(self2, desc), PxController);
        };
        ;
        PxControllerManager.prototype["purgeControllers"] = PxControllerManager.prototype.purgeControllers = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerManager_purgeControllers_0(self2);
        };
        ;
        PxControllerManager.prototype["getNbObstacleContexts"] = PxControllerManager.prototype.getNbObstacleContexts = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerManager_getNbObstacleContexts_0(self2);
        };
        ;
        PxControllerManager.prototype["getObstacleContext"] = PxControllerManager.prototype.getObstacleContext = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_PxControllerManager_getObstacleContext_1(self2, index), PxObstacleContext);
        };
        ;
        PxControllerManager.prototype["createObstacleContext"] = PxControllerManager.prototype.createObstacleContext = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerManager_createObstacleContext_0(self2), PxObstacleContext);
        };
        ;
        PxControllerManager.prototype["computeInteractions"] = PxControllerManager.prototype.computeInteractions = function(elapsedTime) {
          var self2 = this.ptr;
          if (elapsedTime && typeof elapsedTime === "object")
            elapsedTime = elapsedTime.ptr;
          _emscripten_bind_PxControllerManager_computeInteractions_1(self2, elapsedTime);
        };
        ;
        PxControllerManager.prototype["setTessellation"] = PxControllerManager.prototype.setTessellation = function(flag, maxEdgeLength) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          if (maxEdgeLength && typeof maxEdgeLength === "object")
            maxEdgeLength = maxEdgeLength.ptr;
          _emscripten_bind_PxControllerManager_setTessellation_2(self2, flag, maxEdgeLength);
        };
        ;
        PxControllerManager.prototype["setOverlapRecoveryModule"] = PxControllerManager.prototype.setOverlapRecoveryModule = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxControllerManager_setOverlapRecoveryModule_1(self2, flag);
        };
        ;
        PxControllerManager.prototype["setPreciseSweeps"] = PxControllerManager.prototype.setPreciseSweeps = function(flags) {
          var self2 = this.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          _emscripten_bind_PxControllerManager_setPreciseSweeps_1(self2, flags);
        };
        ;
        PxControllerManager.prototype["setPreventVerticalSlidingAgainstCeiling"] = PxControllerManager.prototype.setPreventVerticalSlidingAgainstCeiling = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxControllerManager_setPreventVerticalSlidingAgainstCeiling_1(self2, flag);
        };
        ;
        PxControllerManager.prototype["shiftOrigin"] = PxControllerManager.prototype.shiftOrigin = function(shift) {
          var self2 = this.ptr;
          if (shift && typeof shift === "object")
            shift = shift.ptr;
          _emscripten_bind_PxControllerManager_shiftOrigin_1(self2, shift);
        };
        ;
        function PxControllerObstacleHit() {
          throw "cannot construct a PxControllerObstacleHit, no constructor in IDL";
        }
        PxControllerObstacleHit.prototype = Object.create(PxControllerHit.prototype);
        PxControllerObstacleHit.prototype.constructor = PxControllerObstacleHit;
        PxControllerObstacleHit.prototype.__class__ = PxControllerObstacleHit;
        PxControllerObstacleHit.__cache__ = {};
        Module["PxControllerObstacleHit"] = PxControllerObstacleHit;
        PxControllerObstacleHit.prototype["get_userData"] = PxControllerObstacleHit.prototype.get_userData = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerObstacleHit_get_userData_0(self2), VoidPtr);
        };
        PxControllerObstacleHit.prototype["set_userData"] = PxControllerObstacleHit.prototype.set_userData = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerObstacleHit_set_userData_1(self2, arg0);
        };
        Object.defineProperty(PxControllerObstacleHit.prototype, "userData", { get: PxControllerObstacleHit.prototype.get_userData, set: PxControllerObstacleHit.prototype.set_userData });
        PxControllerObstacleHit.prototype["get_controller"] = PxControllerObstacleHit.prototype.get_controller = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerObstacleHit_get_controller_0(self2), PxController);
        };
        PxControllerObstacleHit.prototype["set_controller"] = PxControllerObstacleHit.prototype.set_controller = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerObstacleHit_set_controller_1(self2, arg0);
        };
        Object.defineProperty(PxControllerObstacleHit.prototype, "controller", { get: PxControllerObstacleHit.prototype.get_controller, set: PxControllerObstacleHit.prototype.set_controller });
        PxControllerObstacleHit.prototype["get_worldPos"] = PxControllerObstacleHit.prototype.get_worldPos = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerObstacleHit_get_worldPos_0(self2), PxExtendedVec3);
        };
        PxControllerObstacleHit.prototype["set_worldPos"] = PxControllerObstacleHit.prototype.set_worldPos = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerObstacleHit_set_worldPos_1(self2, arg0);
        };
        Object.defineProperty(PxControllerObstacleHit.prototype, "worldPos", { get: PxControllerObstacleHit.prototype.get_worldPos, set: PxControllerObstacleHit.prototype.set_worldPos });
        PxControllerObstacleHit.prototype["get_worldNormal"] = PxControllerObstacleHit.prototype.get_worldNormal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerObstacleHit_get_worldNormal_0(self2), PxVec3);
        };
        PxControllerObstacleHit.prototype["set_worldNormal"] = PxControllerObstacleHit.prototype.set_worldNormal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerObstacleHit_set_worldNormal_1(self2, arg0);
        };
        Object.defineProperty(PxControllerObstacleHit.prototype, "worldNormal", { get: PxControllerObstacleHit.prototype.get_worldNormal, set: PxControllerObstacleHit.prototype.set_worldNormal });
        PxControllerObstacleHit.prototype["get_dir"] = PxControllerObstacleHit.prototype.get_dir = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerObstacleHit_get_dir_0(self2), PxVec3);
        };
        PxControllerObstacleHit.prototype["set_dir"] = PxControllerObstacleHit.prototype.set_dir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerObstacleHit_set_dir_1(self2, arg0);
        };
        Object.defineProperty(PxControllerObstacleHit.prototype, "dir", { get: PxControllerObstacleHit.prototype.get_dir, set: PxControllerObstacleHit.prototype.set_dir });
        PxControllerObstacleHit.prototype["get_length"] = PxControllerObstacleHit.prototype.get_length = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerObstacleHit_get_length_0(self2);
        };
        PxControllerObstacleHit.prototype["set_length"] = PxControllerObstacleHit.prototype.set_length = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerObstacleHit_set_length_1(self2, arg0);
        };
        Object.defineProperty(PxControllerObstacleHit.prototype, "length", { get: PxControllerObstacleHit.prototype.get_length, set: PxControllerObstacleHit.prototype.set_length });
        PxControllerObstacleHit.prototype["__destroy__"] = PxControllerObstacleHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerObstacleHit___destroy___0(self2);
        };
        function PxControllerShapeHit() {
          throw "cannot construct a PxControllerShapeHit, no constructor in IDL";
        }
        PxControllerShapeHit.prototype = Object.create(PxControllerHit.prototype);
        PxControllerShapeHit.prototype.constructor = PxControllerShapeHit;
        PxControllerShapeHit.prototype.__class__ = PxControllerShapeHit;
        PxControllerShapeHit.__cache__ = {};
        Module["PxControllerShapeHit"] = PxControllerShapeHit;
        PxControllerShapeHit.prototype["get_shape"] = PxControllerShapeHit.prototype.get_shape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerShapeHit_get_shape_0(self2), PxShape);
        };
        PxControllerShapeHit.prototype["set_shape"] = PxControllerShapeHit.prototype.set_shape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_shape_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "shape", { get: PxControllerShapeHit.prototype.get_shape, set: PxControllerShapeHit.prototype.set_shape });
        PxControllerShapeHit.prototype["get_actor"] = PxControllerShapeHit.prototype.get_actor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerShapeHit_get_actor_0(self2), PxRigidActor);
        };
        PxControllerShapeHit.prototype["set_actor"] = PxControllerShapeHit.prototype.set_actor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_actor_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "actor", { get: PxControllerShapeHit.prototype.get_actor, set: PxControllerShapeHit.prototype.set_actor });
        PxControllerShapeHit.prototype["get_triangleIndex"] = PxControllerShapeHit.prototype.get_triangleIndex = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerShapeHit_get_triangleIndex_0(self2);
        };
        PxControllerShapeHit.prototype["set_triangleIndex"] = PxControllerShapeHit.prototype.set_triangleIndex = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_triangleIndex_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "triangleIndex", { get: PxControllerShapeHit.prototype.get_triangleIndex, set: PxControllerShapeHit.prototype.set_triangleIndex });
        PxControllerShapeHit.prototype["get_controller"] = PxControllerShapeHit.prototype.get_controller = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerShapeHit_get_controller_0(self2), PxController);
        };
        PxControllerShapeHit.prototype["set_controller"] = PxControllerShapeHit.prototype.set_controller = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_controller_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "controller", { get: PxControllerShapeHit.prototype.get_controller, set: PxControllerShapeHit.prototype.set_controller });
        PxControllerShapeHit.prototype["get_worldPos"] = PxControllerShapeHit.prototype.get_worldPos = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerShapeHit_get_worldPos_0(self2), PxExtendedVec3);
        };
        PxControllerShapeHit.prototype["set_worldPos"] = PxControllerShapeHit.prototype.set_worldPos = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_worldPos_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "worldPos", { get: PxControllerShapeHit.prototype.get_worldPos, set: PxControllerShapeHit.prototype.set_worldPos });
        PxControllerShapeHit.prototype["get_worldNormal"] = PxControllerShapeHit.prototype.get_worldNormal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerShapeHit_get_worldNormal_0(self2), PxVec3);
        };
        PxControllerShapeHit.prototype["set_worldNormal"] = PxControllerShapeHit.prototype.set_worldNormal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_worldNormal_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "worldNormal", { get: PxControllerShapeHit.prototype.get_worldNormal, set: PxControllerShapeHit.prototype.set_worldNormal });
        PxControllerShapeHit.prototype["get_dir"] = PxControllerShapeHit.prototype.get_dir = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerShapeHit_get_dir_0(self2), PxVec3);
        };
        PxControllerShapeHit.prototype["set_dir"] = PxControllerShapeHit.prototype.set_dir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_dir_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "dir", { get: PxControllerShapeHit.prototype.get_dir, set: PxControllerShapeHit.prototype.set_dir });
        PxControllerShapeHit.prototype["get_length"] = PxControllerShapeHit.prototype.get_length = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerShapeHit_get_length_0(self2);
        };
        PxControllerShapeHit.prototype["set_length"] = PxControllerShapeHit.prototype.set_length = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerShapeHit_set_length_1(self2, arg0);
        };
        Object.defineProperty(PxControllerShapeHit.prototype, "length", { get: PxControllerShapeHit.prototype.get_length, set: PxControllerShapeHit.prototype.set_length });
        PxControllerShapeHit.prototype["__destroy__"] = PxControllerShapeHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerShapeHit___destroy___0(self2);
        };
        function PxControllersHit() {
          throw "cannot construct a PxControllersHit, no constructor in IDL";
        }
        PxControllersHit.prototype = Object.create(PxControllerHit.prototype);
        PxControllersHit.prototype.constructor = PxControllersHit;
        PxControllersHit.prototype.__class__ = PxControllersHit;
        PxControllersHit.__cache__ = {};
        Module["PxControllersHit"] = PxControllersHit;
        PxControllersHit.prototype["get_other"] = PxControllersHit.prototype.get_other = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllersHit_get_other_0(self2), PxController);
        };
        PxControllersHit.prototype["set_other"] = PxControllersHit.prototype.set_other = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllersHit_set_other_1(self2, arg0);
        };
        Object.defineProperty(PxControllersHit.prototype, "other", { get: PxControllersHit.prototype.get_other, set: PxControllersHit.prototype.set_other });
        PxControllersHit.prototype["get_controller"] = PxControllersHit.prototype.get_controller = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllersHit_get_controller_0(self2), PxController);
        };
        PxControllersHit.prototype["set_controller"] = PxControllersHit.prototype.set_controller = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllersHit_set_controller_1(self2, arg0);
        };
        Object.defineProperty(PxControllersHit.prototype, "controller", { get: PxControllersHit.prototype.get_controller, set: PxControllersHit.prototype.set_controller });
        PxControllersHit.prototype["get_worldPos"] = PxControllersHit.prototype.get_worldPos = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllersHit_get_worldPos_0(self2), PxExtendedVec3);
        };
        PxControllersHit.prototype["set_worldPos"] = PxControllersHit.prototype.set_worldPos = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllersHit_set_worldPos_1(self2, arg0);
        };
        Object.defineProperty(PxControllersHit.prototype, "worldPos", { get: PxControllersHit.prototype.get_worldPos, set: PxControllersHit.prototype.set_worldPos });
        PxControllersHit.prototype["get_worldNormal"] = PxControllersHit.prototype.get_worldNormal = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllersHit_get_worldNormal_0(self2), PxVec3);
        };
        PxControllersHit.prototype["set_worldNormal"] = PxControllersHit.prototype.set_worldNormal = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllersHit_set_worldNormal_1(self2, arg0);
        };
        Object.defineProperty(PxControllersHit.prototype, "worldNormal", { get: PxControllersHit.prototype.get_worldNormal, set: PxControllersHit.prototype.set_worldNormal });
        PxControllersHit.prototype["get_dir"] = PxControllersHit.prototype.get_dir = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllersHit_get_dir_0(self2), PxVec3);
        };
        PxControllersHit.prototype["set_dir"] = PxControllersHit.prototype.set_dir = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllersHit_set_dir_1(self2, arg0);
        };
        Object.defineProperty(PxControllersHit.prototype, "dir", { get: PxControllersHit.prototype.get_dir, set: PxControllersHit.prototype.set_dir });
        PxControllersHit.prototype["get_length"] = PxControllersHit.prototype.get_length = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllersHit_get_length_0(self2);
        };
        PxControllersHit.prototype["set_length"] = PxControllersHit.prototype.set_length = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllersHit_set_length_1(self2, arg0);
        };
        Object.defineProperty(PxControllersHit.prototype, "length", { get: PxControllersHit.prototype.get_length, set: PxControllersHit.prototype.set_length });
        PxControllersHit.prototype["__destroy__"] = PxControllersHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllersHit___destroy___0(self2);
        };
        function PxControllerState() {
          this.ptr = _emscripten_bind_PxControllerState_PxControllerState_0();
          getCache(PxControllerState)[this.ptr] = this;
        }
        ;
        ;
        PxControllerState.prototype = Object.create(WrapperObject.prototype);
        PxControllerState.prototype.constructor = PxControllerState;
        PxControllerState.prototype.__class__ = PxControllerState;
        PxControllerState.__cache__ = {};
        Module["PxControllerState"] = PxControllerState;
        PxControllerState.prototype["get_deltaXP"] = PxControllerState.prototype.get_deltaXP = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerState_get_deltaXP_0(self2), PxVec3);
        };
        PxControllerState.prototype["set_deltaXP"] = PxControllerState.prototype.set_deltaXP = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_deltaXP_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "deltaXP", { get: PxControllerState.prototype.get_deltaXP, set: PxControllerState.prototype.set_deltaXP });
        PxControllerState.prototype["get_touchedShape"] = PxControllerState.prototype.get_touchedShape = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerState_get_touchedShape_0(self2), PxShape);
        };
        PxControllerState.prototype["set_touchedShape"] = PxControllerState.prototype.set_touchedShape = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_touchedShape_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "touchedShape", { get: PxControllerState.prototype.get_touchedShape, set: PxControllerState.prototype.set_touchedShape });
        PxControllerState.prototype["get_touchedActor"] = PxControllerState.prototype.get_touchedActor = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxControllerState_get_touchedActor_0(self2), PxRigidActor);
        };
        PxControllerState.prototype["set_touchedActor"] = PxControllerState.prototype.set_touchedActor = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_touchedActor_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "touchedActor", { get: PxControllerState.prototype.get_touchedActor, set: PxControllerState.prototype.set_touchedActor });
        PxControllerState.prototype["get_touchedObstacleHandle"] = PxControllerState.prototype.get_touchedObstacleHandle = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerState_get_touchedObstacleHandle_0(self2);
        };
        PxControllerState.prototype["set_touchedObstacleHandle"] = PxControllerState.prototype.set_touchedObstacleHandle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_touchedObstacleHandle_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "touchedObstacleHandle", { get: PxControllerState.prototype.get_touchedObstacleHandle, set: PxControllerState.prototype.set_touchedObstacleHandle });
        PxControllerState.prototype["get_collisionFlags"] = PxControllerState.prototype.get_collisionFlags = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerState_get_collisionFlags_0(self2);
        };
        PxControllerState.prototype["set_collisionFlags"] = PxControllerState.prototype.set_collisionFlags = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_collisionFlags_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "collisionFlags", { get: PxControllerState.prototype.get_collisionFlags, set: PxControllerState.prototype.set_collisionFlags });
        PxControllerState.prototype["get_standOnAnotherCCT"] = PxControllerState.prototype.get_standOnAnotherCCT = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxControllerState_get_standOnAnotherCCT_0(self2);
        };
        PxControllerState.prototype["set_standOnAnotherCCT"] = PxControllerState.prototype.set_standOnAnotherCCT = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_standOnAnotherCCT_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "standOnAnotherCCT", { get: PxControllerState.prototype.get_standOnAnotherCCT, set: PxControllerState.prototype.set_standOnAnotherCCT });
        PxControllerState.prototype["get_standOnObstacle"] = PxControllerState.prototype.get_standOnObstacle = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxControllerState_get_standOnObstacle_0(self2);
        };
        PxControllerState.prototype["set_standOnObstacle"] = PxControllerState.prototype.set_standOnObstacle = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_standOnObstacle_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "standOnObstacle", { get: PxControllerState.prototype.get_standOnObstacle, set: PxControllerState.prototype.set_standOnObstacle });
        PxControllerState.prototype["get_isMovingUp"] = PxControllerState.prototype.get_isMovingUp = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_PxControllerState_get_isMovingUp_0(self2);
        };
        PxControllerState.prototype["set_isMovingUp"] = PxControllerState.prototype.set_isMovingUp = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerState_set_isMovingUp_1(self2, arg0);
        };
        Object.defineProperty(PxControllerState.prototype, "isMovingUp", { get: PxControllerState.prototype.get_isMovingUp, set: PxControllerState.prototype.set_isMovingUp });
        PxControllerState.prototype["__destroy__"] = PxControllerState.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerState___destroy___0(self2);
        };
        function PxControllerStats() {
          throw "cannot construct a PxControllerStats, no constructor in IDL";
        }
        PxControllerStats.prototype = Object.create(WrapperObject.prototype);
        PxControllerStats.prototype.constructor = PxControllerStats;
        PxControllerStats.prototype.__class__ = PxControllerStats;
        PxControllerStats.__cache__ = {};
        Module["PxControllerStats"] = PxControllerStats;
        PxControllerStats.prototype["get_nbIterations"] = PxControllerStats.prototype.get_nbIterations = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerStats_get_nbIterations_0(self2);
        };
        PxControllerStats.prototype["set_nbIterations"] = PxControllerStats.prototype.set_nbIterations = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerStats_set_nbIterations_1(self2, arg0);
        };
        Object.defineProperty(PxControllerStats.prototype, "nbIterations", { get: PxControllerStats.prototype.get_nbIterations, set: PxControllerStats.prototype.set_nbIterations });
        PxControllerStats.prototype["get_nbFullUpdates"] = PxControllerStats.prototype.get_nbFullUpdates = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerStats_get_nbFullUpdates_0(self2);
        };
        PxControllerStats.prototype["set_nbFullUpdates"] = PxControllerStats.prototype.set_nbFullUpdates = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerStats_set_nbFullUpdates_1(self2, arg0);
        };
        Object.defineProperty(PxControllerStats.prototype, "nbFullUpdates", { get: PxControllerStats.prototype.get_nbFullUpdates, set: PxControllerStats.prototype.set_nbFullUpdates });
        PxControllerStats.prototype["get_nbPartialUpdates"] = PxControllerStats.prototype.get_nbPartialUpdates = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerStats_get_nbPartialUpdates_0(self2);
        };
        PxControllerStats.prototype["set_nbPartialUpdates"] = PxControllerStats.prototype.set_nbPartialUpdates = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerStats_set_nbPartialUpdates_1(self2, arg0);
        };
        Object.defineProperty(PxControllerStats.prototype, "nbPartialUpdates", { get: PxControllerStats.prototype.get_nbPartialUpdates, set: PxControllerStats.prototype.set_nbPartialUpdates });
        PxControllerStats.prototype["get_nbTessellation"] = PxControllerStats.prototype.get_nbTessellation = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxControllerStats_get_nbTessellation_0(self2);
        };
        PxControllerStats.prototype["set_nbTessellation"] = PxControllerStats.prototype.set_nbTessellation = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxControllerStats_set_nbTessellation_1(self2, arg0);
        };
        Object.defineProperty(PxControllerStats.prototype, "nbTessellation", { get: PxControllerStats.prototype.get_nbTessellation, set: PxControllerStats.prototype.set_nbTessellation });
        PxControllerStats.prototype["__destroy__"] = PxControllerStats.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxControllerStats___destroy___0(self2);
        };
        function PxExtendedVec3(x, y, z) {
          if (x && typeof x === "object")
            x = x.ptr;
          if (y && typeof y === "object")
            y = y.ptr;
          if (z && typeof z === "object")
            z = z.ptr;
          if (x === void 0) {
            this.ptr = _emscripten_bind_PxExtendedVec3_PxExtendedVec3_0();
            getCache(PxExtendedVec3)[this.ptr] = this;
            return;
          }
          if (y === void 0) {
            this.ptr = _emscripten_bind_PxExtendedVec3_PxExtendedVec3_1(x);
            getCache(PxExtendedVec3)[this.ptr] = this;
            return;
          }
          if (z === void 0) {
            this.ptr = _emscripten_bind_PxExtendedVec3_PxExtendedVec3_2(x, y);
            getCache(PxExtendedVec3)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_PxExtendedVec3_PxExtendedVec3_3(x, y, z);
          getCache(PxExtendedVec3)[this.ptr] = this;
        }
        ;
        ;
        PxExtendedVec3.prototype = Object.create(WrapperObject.prototype);
        PxExtendedVec3.prototype.constructor = PxExtendedVec3;
        PxExtendedVec3.prototype.__class__ = PxExtendedVec3;
        PxExtendedVec3.__cache__ = {};
        Module["PxExtendedVec3"] = PxExtendedVec3;
        PxExtendedVec3.prototype["get_x"] = PxExtendedVec3.prototype.get_x = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxExtendedVec3_get_x_0(self2);
        };
        PxExtendedVec3.prototype["set_x"] = PxExtendedVec3.prototype.set_x = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxExtendedVec3_set_x_1(self2, arg0);
        };
        Object.defineProperty(PxExtendedVec3.prototype, "x", { get: PxExtendedVec3.prototype.get_x, set: PxExtendedVec3.prototype.set_x });
        PxExtendedVec3.prototype["get_y"] = PxExtendedVec3.prototype.get_y = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxExtendedVec3_get_y_0(self2);
        };
        PxExtendedVec3.prototype["set_y"] = PxExtendedVec3.prototype.set_y = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxExtendedVec3_set_y_1(self2, arg0);
        };
        Object.defineProperty(PxExtendedVec3.prototype, "y", { get: PxExtendedVec3.prototype.get_y, set: PxExtendedVec3.prototype.set_y });
        PxExtendedVec3.prototype["get_z"] = PxExtendedVec3.prototype.get_z = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxExtendedVec3_get_z_0(self2);
        };
        PxExtendedVec3.prototype["set_z"] = PxExtendedVec3.prototype.set_z = function(arg0) {
          var self2 = this.ptr;
          if (arg0 && typeof arg0 === "object")
            arg0 = arg0.ptr;
          _emscripten_bind_PxExtendedVec3_set_z_1(self2, arg0);
        };
        Object.defineProperty(PxExtendedVec3.prototype, "z", { get: PxExtendedVec3.prototype.get_z, set: PxExtendedVec3.prototype.set_z });
        PxExtendedVec3.prototype["__destroy__"] = PxExtendedVec3.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxExtendedVec3___destroy___0(self2);
        };
        function PxObstacleContext() {
          throw "cannot construct a PxObstacleContext, no constructor in IDL";
        }
        PxObstacleContext.prototype = Object.create(WrapperObject.prototype);
        PxObstacleContext.prototype.constructor = PxObstacleContext;
        PxObstacleContext.prototype.__class__ = PxObstacleContext;
        PxObstacleContext.__cache__ = {};
        Module["PxObstacleContext"] = PxObstacleContext;
        PxObstacleContext.prototype["release"] = PxObstacleContext.prototype.release = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxObstacleContext_release_0(self2);
        };
        ;
        PxObstacleContext.prototype["getControllerManager"] = PxObstacleContext.prototype.getControllerManager = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_PxObstacleContext_getControllerManager_0(self2), PxControllerManager);
        };
        ;
        PxObstacleContext.prototype["addObstacle"] = PxObstacleContext.prototype.addObstacle = function(obstacle) {
          var self2 = this.ptr;
          if (obstacle && typeof obstacle === "object")
            obstacle = obstacle.ptr;
          return _emscripten_bind_PxObstacleContext_addObstacle_1(self2, obstacle);
        };
        ;
        PxObstacleContext.prototype["removeObstacle"] = PxObstacleContext.prototype.removeObstacle = function(handle) {
          var self2 = this.ptr;
          if (handle && typeof handle === "object")
            handle = handle.ptr;
          return !!_emscripten_bind_PxObstacleContext_removeObstacle_1(self2, handle);
        };
        ;
        PxObstacleContext.prototype["updateObstacle"] = PxObstacleContext.prototype.updateObstacle = function(handle, obstacle) {
          var self2 = this.ptr;
          if (handle && typeof handle === "object")
            handle = handle.ptr;
          if (obstacle && typeof obstacle === "object")
            obstacle = obstacle.ptr;
          return !!_emscripten_bind_PxObstacleContext_updateObstacle_2(self2, handle, obstacle);
        };
        ;
        PxObstacleContext.prototype["getNbObstacles"] = PxObstacleContext.prototype.getNbObstacles = function() {
          var self2 = this.ptr;
          return _emscripten_bind_PxObstacleContext_getNbObstacles_0(self2);
        };
        ;
        PxObstacleContext.prototype["getObstacle"] = PxObstacleContext.prototype.getObstacle = function(i) {
          var self2 = this.ptr;
          if (i && typeof i === "object")
            i = i.ptr;
          return wrapPointer(_emscripten_bind_PxObstacleContext_getObstacle_1(self2, i), PxObstacle);
        };
        ;
        PxObstacleContext.prototype["getObstacleByHandle"] = PxObstacleContext.prototype.getObstacleByHandle = function(handle) {
          var self2 = this.ptr;
          if (handle && typeof handle === "object")
            handle = handle.ptr;
          return wrapPointer(_emscripten_bind_PxObstacleContext_getObstacleByHandle_1(self2, handle), PxObstacle);
        };
        ;
        PxObstacleContext.prototype["__destroy__"] = PxObstacleContext.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxObstacleContext___destroy___0(self2);
        };
        function JavaUserControllerHitReport() {
          this.ptr = _emscripten_bind_JavaUserControllerHitReport_JavaUserControllerHitReport_0();
          getCache(JavaUserControllerHitReport)[this.ptr] = this;
        }
        ;
        ;
        JavaUserControllerHitReport.prototype = Object.create(PxUserControllerHitReport.prototype);
        JavaUserControllerHitReport.prototype.constructor = JavaUserControllerHitReport;
        JavaUserControllerHitReport.prototype.__class__ = JavaUserControllerHitReport;
        JavaUserControllerHitReport.__cache__ = {};
        Module["JavaUserControllerHitReport"] = JavaUserControllerHitReport;
        JavaUserControllerHitReport.prototype["onShapeHit"] = JavaUserControllerHitReport.prototype.onShapeHit = function(hit) {
          var self2 = this.ptr;
          if (hit && typeof hit === "object")
            hit = hit.ptr;
          _emscripten_bind_JavaUserControllerHitReport_onShapeHit_1(self2, hit);
        };
        ;
        JavaUserControllerHitReport.prototype["onControllerHit"] = JavaUserControllerHitReport.prototype.onControllerHit = function(hit) {
          var self2 = this.ptr;
          if (hit && typeof hit === "object")
            hit = hit.ptr;
          _emscripten_bind_JavaUserControllerHitReport_onControllerHit_1(self2, hit);
        };
        ;
        JavaUserControllerHitReport.prototype["onObstacleHit"] = JavaUserControllerHitReport.prototype.onObstacleHit = function(hit) {
          var self2 = this.ptr;
          if (hit && typeof hit === "object")
            hit = hit.ptr;
          _emscripten_bind_JavaUserControllerHitReport_onObstacleHit_1(self2, hit);
        };
        ;
        JavaUserControllerHitReport.prototype["__destroy__"] = JavaUserControllerHitReport.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_JavaUserControllerHitReport___destroy___0(self2);
        };
        function SupportFunctions() {
          throw "cannot construct a SupportFunctions, no constructor in IDL";
        }
        SupportFunctions.prototype = Object.create(WrapperObject.prototype);
        SupportFunctions.prototype.constructor = SupportFunctions;
        SupportFunctions.prototype.__class__ = SupportFunctions;
        SupportFunctions.__cache__ = {};
        Module["SupportFunctions"] = SupportFunctions;
        SupportFunctions.prototype["PxActor_getShape"] = SupportFunctions.prototype.PxActor_getShape = function(actor, index) {
          var self2 = this.ptr;
          if (actor && typeof actor === "object")
            actor = actor.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_SupportFunctions_PxActor_getShape_2(self2, actor, index), PxShape);
        };
        ;
        SupportFunctions.prototype["__destroy__"] = SupportFunctions.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_SupportFunctions___destroy___0(self2);
        };
        function PxActorPtr() {
          throw "cannot construct a PxActorPtr, no constructor in IDL";
        }
        PxActorPtr.prototype = Object.create(WrapperObject.prototype);
        PxActorPtr.prototype.constructor = PxActorPtr;
        PxActorPtr.prototype.__class__ = PxActorPtr;
        PxActorPtr.__cache__ = {};
        Module["PxActorPtr"] = PxActorPtr;
        PxActorPtr.prototype["__destroy__"] = PxActorPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxActorPtr___destroy___0(self2);
        };
        function PxMaterialPtr() {
          throw "cannot construct a PxMaterialPtr, no constructor in IDL";
        }
        PxMaterialPtr.prototype = Object.create(WrapperObject.prototype);
        PxMaterialPtr.prototype.constructor = PxMaterialPtr;
        PxMaterialPtr.prototype.__class__ = PxMaterialPtr;
        PxMaterialPtr.__cache__ = {};
        Module["PxMaterialPtr"] = PxMaterialPtr;
        PxMaterialPtr.prototype["__destroy__"] = PxMaterialPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxMaterialPtr___destroy___0(self2);
        };
        function PxMaterialConstPtr() {
          throw "cannot construct a PxMaterialConstPtr, no constructor in IDL";
        }
        PxMaterialConstPtr.prototype = Object.create(WrapperObject.prototype);
        PxMaterialConstPtr.prototype.constructor = PxMaterialConstPtr;
        PxMaterialConstPtr.prototype.__class__ = PxMaterialConstPtr;
        PxMaterialConstPtr.__cache__ = {};
        Module["PxMaterialConstPtr"] = PxMaterialConstPtr;
        PxMaterialConstPtr.prototype["__destroy__"] = PxMaterialConstPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxMaterialConstPtr___destroy___0(self2);
        };
        function PxVehicleWheelsPtr() {
          throw "cannot construct a PxVehicleWheelsPtr, no constructor in IDL";
        }
        PxVehicleWheelsPtr.prototype = Object.create(WrapperObject.prototype);
        PxVehicleWheelsPtr.prototype.constructor = PxVehicleWheelsPtr;
        PxVehicleWheelsPtr.prototype.__class__ = PxVehicleWheelsPtr;
        PxVehicleWheelsPtr.__cache__ = {};
        Module["PxVehicleWheelsPtr"] = PxVehicleWheelsPtr;
        PxVehicleWheelsPtr.prototype["__destroy__"] = PxVehicleWheelsPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxVehicleWheelsPtr___destroy___0(self2);
        };
        function PxRealPtr() {
          throw "cannot construct a PxRealPtr, no constructor in IDL";
        }
        PxRealPtr.prototype = Object.create(WrapperObject.prototype);
        PxRealPtr.prototype.constructor = PxRealPtr;
        PxRealPtr.prototype.__class__ = PxRealPtr;
        PxRealPtr.__cache__ = {};
        Module["PxRealPtr"] = PxRealPtr;
        PxRealPtr.prototype["__destroy__"] = PxRealPtr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxRealPtr___destroy___0(self2);
        };
        function PxU8Ptr() {
          throw "cannot construct a PxU8Ptr, no constructor in IDL";
        }
        PxU8Ptr.prototype = Object.create(PxU8ConstPtr.prototype);
        PxU8Ptr.prototype.constructor = PxU8Ptr;
        PxU8Ptr.prototype.__class__ = PxU8Ptr;
        PxU8Ptr.__cache__ = {};
        Module["PxU8Ptr"] = PxU8Ptr;
        PxU8Ptr.prototype["__destroy__"] = PxU8Ptr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxU8Ptr___destroy___0(self2);
        };
        function PxU16Ptr() {
          throw "cannot construct a PxU16Ptr, no constructor in IDL";
        }
        PxU16Ptr.prototype = Object.create(PxU16ConstPtr.prototype);
        PxU16Ptr.prototype.constructor = PxU16Ptr;
        PxU16Ptr.prototype.__class__ = PxU16Ptr;
        PxU16Ptr.__cache__ = {};
        Module["PxU16Ptr"] = PxU16Ptr;
        PxU16Ptr.prototype["__destroy__"] = PxU16Ptr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxU16Ptr___destroy___0(self2);
        };
        function PxU32Ptr() {
          throw "cannot construct a PxU32Ptr, no constructor in IDL";
        }
        PxU32Ptr.prototype = Object.create(PxU32ConstPtr.prototype);
        PxU32Ptr.prototype.constructor = PxU32Ptr;
        PxU32Ptr.prototype.__class__ = PxU32Ptr;
        PxU32Ptr.__cache__ = {};
        Module["PxU32Ptr"] = PxU32Ptr;
        PxU32Ptr.prototype["__destroy__"] = PxU32Ptr.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxU32Ptr___destroy___0(self2);
        };
        function TypeHelpers() {
          throw "cannot construct a TypeHelpers, no constructor in IDL";
        }
        TypeHelpers.prototype = Object.create(WrapperObject.prototype);
        TypeHelpers.prototype.constructor = TypeHelpers;
        TypeHelpers.prototype.__class__ = TypeHelpers;
        TypeHelpers.__cache__ = {};
        Module["TypeHelpers"] = TypeHelpers;
        TypeHelpers.prototype["getU8At"] = TypeHelpers.prototype.getU8At = function(base, index) {
          var self2 = this.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_TypeHelpers_getU8At_2(self2, base, index);
        };
        ;
        TypeHelpers.prototype["getU16At"] = TypeHelpers.prototype.getU16At = function(base, index) {
          var self2 = this.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_TypeHelpers_getU16At_2(self2, base, index);
        };
        ;
        TypeHelpers.prototype["getU32At"] = TypeHelpers.prototype.getU32At = function(base, index) {
          var self2 = this.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_TypeHelpers_getU32At_2(self2, base, index);
        };
        ;
        TypeHelpers.prototype["getRealAt"] = TypeHelpers.prototype.getRealAt = function(base, index) {
          var self2 = this.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_TypeHelpers_getRealAt_2(self2, base, index);
        };
        ;
        TypeHelpers.prototype["getContactPairAt"] = TypeHelpers.prototype.getContactPairAt = function(base, index) {
          var self2 = this.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_getContactPairAt_2(self2, base, index), PxContactPair);
        };
        ;
        TypeHelpers.prototype["getTriggerPairAt"] = TypeHelpers.prototype.getTriggerPairAt = function(base, index) {
          var self2 = this.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_getTriggerPairAt_2(self2, base, index), PxTriggerPair);
        };
        ;
        TypeHelpers.prototype["getVec3At"] = TypeHelpers.prototype.getVec3At = function(base, index) {
          var self2 = this.ptr;
          if (base && typeof base === "object")
            base = base.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_getVec3At_2(self2, base, index), PxVec3);
        };
        ;
        TypeHelpers.prototype["voidToU8Ptr"] = TypeHelpers.prototype.voidToU8Ptr = function(voidPtr) {
          var self2 = this.ptr;
          if (voidPtr && typeof voidPtr === "object")
            voidPtr = voidPtr.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_voidToU8Ptr_1(self2, voidPtr), PxU8Ptr);
        };
        ;
        TypeHelpers.prototype["voidToU16Ptr"] = TypeHelpers.prototype.voidToU16Ptr = function(voidPtr) {
          var self2 = this.ptr;
          if (voidPtr && typeof voidPtr === "object")
            voidPtr = voidPtr.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_voidToU16Ptr_1(self2, voidPtr), PxU16Ptr);
        };
        ;
        TypeHelpers.prototype["voidToU32Ptr"] = TypeHelpers.prototype.voidToU32Ptr = function(voidPtr) {
          var self2 = this.ptr;
          if (voidPtr && typeof voidPtr === "object")
            voidPtr = voidPtr.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_voidToU32Ptr_1(self2, voidPtr), PxU32Ptr);
        };
        ;
        TypeHelpers.prototype["voidToRealPtr"] = TypeHelpers.prototype.voidToRealPtr = function(voidPtr) {
          var self2 = this.ptr;
          if (voidPtr && typeof voidPtr === "object")
            voidPtr = voidPtr.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_voidToRealPtr_1(self2, voidPtr), PxRealPtr);
        };
        ;
        TypeHelpers.prototype["articulationBaseJointToJoint"] = TypeHelpers.prototype.articulationBaseJointToJoint = function(baseJoint) {
          var self2 = this.ptr;
          if (baseJoint && typeof baseJoint === "object")
            baseJoint = baseJoint.ptr;
          return wrapPointer(_emscripten_bind_TypeHelpers_articulationBaseJointToJoint_1(self2, baseJoint), PxArticulationJoint);
        };
        ;
        TypeHelpers.prototype["voidToAny"] = TypeHelpers.prototype.voidToAny = function(voidPtr) {
          var self2 = this.ptr;
          if (voidPtr && typeof voidPtr === "object")
            voidPtr = voidPtr.ptr;
          return _emscripten_bind_TypeHelpers_voidToAny_1(self2, voidPtr);
        };
        ;
        TypeHelpers.prototype["__destroy__"] = TypeHelpers.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_TypeHelpers___destroy___0(self2);
        };
        function Vector_PxMaterialConst(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_0();
            getCache(Vector_PxMaterialConst)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxMaterialConst_Vector_PxMaterialConst_1(size);
          getCache(Vector_PxMaterialConst)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxMaterialConst.prototype = Object.create(WrapperObject.prototype);
        Vector_PxMaterialConst.prototype.constructor = Vector_PxMaterialConst;
        Vector_PxMaterialConst.prototype.__class__ = Vector_PxMaterialConst;
        Vector_PxMaterialConst.__cache__ = {};
        Module["Vector_PxMaterialConst"] = Vector_PxMaterialConst;
        Vector_PxMaterialConst.prototype["at"] = Vector_PxMaterialConst.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxMaterialConst_at_1(self2, index), PxMaterial);
        };
        ;
        Vector_PxMaterialConst.prototype["data"] = Vector_PxMaterialConst.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxMaterialConst_data_0(self2), PxMaterialConstPtr);
        };
        ;
        Vector_PxMaterialConst.prototype["size"] = Vector_PxMaterialConst.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxMaterialConst_size_0(self2);
        };
        ;
        Vector_PxMaterialConst.prototype["push_back"] = Vector_PxMaterialConst.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxMaterialConst_push_back_1(self2, value);
        };
        ;
        Vector_PxMaterialConst.prototype["clear"] = Vector_PxMaterialConst.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxMaterialConst_clear_0(self2);
        };
        ;
        Vector_PxMaterialConst.prototype["__destroy__"] = Vector_PxMaterialConst.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxMaterialConst___destroy___0(self2);
        };
        function Vector_PxHeightFieldSample(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_0();
            getCache(Vector_PxHeightFieldSample)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxHeightFieldSample_Vector_PxHeightFieldSample_1(size);
          getCache(Vector_PxHeightFieldSample)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxHeightFieldSample.prototype = Object.create(WrapperObject.prototype);
        Vector_PxHeightFieldSample.prototype.constructor = Vector_PxHeightFieldSample;
        Vector_PxHeightFieldSample.prototype.__class__ = Vector_PxHeightFieldSample;
        Vector_PxHeightFieldSample.__cache__ = {};
        Module["Vector_PxHeightFieldSample"] = Vector_PxHeightFieldSample;
        Vector_PxHeightFieldSample.prototype["at"] = Vector_PxHeightFieldSample.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxHeightFieldSample_at_1(self2, index), PxHeightFieldSample);
        };
        ;
        Vector_PxHeightFieldSample.prototype["data"] = Vector_PxHeightFieldSample.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxHeightFieldSample_data_0(self2), PxHeightFieldSample);
        };
        ;
        Vector_PxHeightFieldSample.prototype["size"] = Vector_PxHeightFieldSample.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxHeightFieldSample_size_0(self2);
        };
        ;
        Vector_PxHeightFieldSample.prototype["push_back"] = Vector_PxHeightFieldSample.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxHeightFieldSample_push_back_1(self2, value);
        };
        ;
        Vector_PxHeightFieldSample.prototype["clear"] = Vector_PxHeightFieldSample.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxHeightFieldSample_clear_0(self2);
        };
        ;
        Vector_PxHeightFieldSample.prototype["__destroy__"] = Vector_PxHeightFieldSample.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxHeightFieldSample___destroy___0(self2);
        };
        function Vector_PxReal(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxReal_Vector_PxReal_0();
            getCache(Vector_PxReal)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxReal_Vector_PxReal_1(size);
          getCache(Vector_PxReal)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxReal.prototype = Object.create(WrapperObject.prototype);
        Vector_PxReal.prototype.constructor = Vector_PxReal;
        Vector_PxReal.prototype.__class__ = Vector_PxReal;
        Vector_PxReal.__cache__ = {};
        Module["Vector_PxReal"] = Vector_PxReal;
        Vector_PxReal.prototype["at"] = Vector_PxReal.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_Vector_PxReal_at_1(self2, index);
        };
        ;
        Vector_PxReal.prototype["data"] = Vector_PxReal.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxReal_data_0(self2), VoidPtr);
        };
        ;
        Vector_PxReal.prototype["size"] = Vector_PxReal.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxReal_size_0(self2);
        };
        ;
        Vector_PxReal.prototype["push_back"] = Vector_PxReal.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxReal_push_back_1(self2, value);
        };
        ;
        Vector_PxReal.prototype["clear"] = Vector_PxReal.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxReal_clear_0(self2);
        };
        ;
        Vector_PxReal.prototype["__destroy__"] = Vector_PxReal.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxReal___destroy___0(self2);
        };
        function Vector_PxU8(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxU8_Vector_PxU8_0();
            getCache(Vector_PxU8)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxU8_Vector_PxU8_1(size);
          getCache(Vector_PxU8)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxU8.prototype = Object.create(WrapperObject.prototype);
        Vector_PxU8.prototype.constructor = Vector_PxU8;
        Vector_PxU8.prototype.__class__ = Vector_PxU8;
        Vector_PxU8.__cache__ = {};
        Module["Vector_PxU8"] = Vector_PxU8;
        Vector_PxU8.prototype["at"] = Vector_PxU8.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_Vector_PxU8_at_1(self2, index);
        };
        ;
        Vector_PxU8.prototype["data"] = Vector_PxU8.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxU8_data_0(self2), VoidPtr);
        };
        ;
        Vector_PxU8.prototype["size"] = Vector_PxU8.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxU8_size_0(self2);
        };
        ;
        Vector_PxU8.prototype["push_back"] = Vector_PxU8.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxU8_push_back_1(self2, value);
        };
        ;
        Vector_PxU8.prototype["clear"] = Vector_PxU8.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxU8_clear_0(self2);
        };
        ;
        Vector_PxU8.prototype["__destroy__"] = Vector_PxU8.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxU8___destroy___0(self2);
        };
        function Vector_PxU16(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxU16_Vector_PxU16_0();
            getCache(Vector_PxU16)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxU16_Vector_PxU16_1(size);
          getCache(Vector_PxU16)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxU16.prototype = Object.create(WrapperObject.prototype);
        Vector_PxU16.prototype.constructor = Vector_PxU16;
        Vector_PxU16.prototype.__class__ = Vector_PxU16;
        Vector_PxU16.__cache__ = {};
        Module["Vector_PxU16"] = Vector_PxU16;
        Vector_PxU16.prototype["at"] = Vector_PxU16.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_Vector_PxU16_at_1(self2, index);
        };
        ;
        Vector_PxU16.prototype["data"] = Vector_PxU16.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxU16_data_0(self2), VoidPtr);
        };
        ;
        Vector_PxU16.prototype["size"] = Vector_PxU16.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxU16_size_0(self2);
        };
        ;
        Vector_PxU16.prototype["push_back"] = Vector_PxU16.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxU16_push_back_1(self2, value);
        };
        ;
        Vector_PxU16.prototype["clear"] = Vector_PxU16.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxU16_clear_0(self2);
        };
        ;
        Vector_PxU16.prototype["__destroy__"] = Vector_PxU16.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxU16___destroy___0(self2);
        };
        function Vector_PxU32(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxU32_Vector_PxU32_0();
            getCache(Vector_PxU32)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxU32_Vector_PxU32_1(size);
          getCache(Vector_PxU32)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxU32.prototype = Object.create(WrapperObject.prototype);
        Vector_PxU32.prototype.constructor = Vector_PxU32;
        Vector_PxU32.prototype.__class__ = Vector_PxU32;
        Vector_PxU32.__cache__ = {};
        Module["Vector_PxU32"] = Vector_PxU32;
        Vector_PxU32.prototype["at"] = Vector_PxU32.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return _emscripten_bind_Vector_PxU32_at_1(self2, index);
        };
        ;
        Vector_PxU32.prototype["data"] = Vector_PxU32.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxU32_data_0(self2), VoidPtr);
        };
        ;
        Vector_PxU32.prototype["size"] = Vector_PxU32.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxU32_size_0(self2);
        };
        ;
        Vector_PxU32.prototype["push_back"] = Vector_PxU32.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxU32_push_back_1(self2, value);
        };
        ;
        Vector_PxU32.prototype["clear"] = Vector_PxU32.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxU32_clear_0(self2);
        };
        ;
        Vector_PxU32.prototype["__destroy__"] = Vector_PxU32.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxU32___destroy___0(self2);
        };
        function Vector_PxVec3(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxVec3_Vector_PxVec3_0();
            getCache(Vector_PxVec3)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxVec3_Vector_PxVec3_1(size);
          getCache(Vector_PxVec3)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxVec3.prototype = Object.create(WrapperObject.prototype);
        Vector_PxVec3.prototype.constructor = Vector_PxVec3;
        Vector_PxVec3.prototype.__class__ = Vector_PxVec3;
        Vector_PxVec3.__cache__ = {};
        Module["Vector_PxVec3"] = Vector_PxVec3;
        Vector_PxVec3.prototype["at"] = Vector_PxVec3.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxVec3_at_1(self2, index), PxVec3);
        };
        ;
        Vector_PxVec3.prototype["data"] = Vector_PxVec3.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxVec3_data_0(self2), PxVec3);
        };
        ;
        Vector_PxVec3.prototype["size"] = Vector_PxVec3.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxVec3_size_0(self2);
        };
        ;
        Vector_PxVec3.prototype["push_back"] = Vector_PxVec3.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxVec3_push_back_1(self2, value);
        };
        ;
        Vector_PxVec3.prototype["clear"] = Vector_PxVec3.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxVec3_clear_0(self2);
        };
        ;
        Vector_PxVec3.prototype["__destroy__"] = Vector_PxVec3.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxVec3___destroy___0(self2);
        };
        function Vector_PxRaycastQueryResult(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_0();
            getCache(Vector_PxRaycastQueryResult)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxRaycastQueryResult_Vector_PxRaycastQueryResult_1(size);
          getCache(Vector_PxRaycastQueryResult)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxRaycastQueryResult.prototype = Object.create(WrapperObject.prototype);
        Vector_PxRaycastQueryResult.prototype.constructor = Vector_PxRaycastQueryResult;
        Vector_PxRaycastQueryResult.prototype.__class__ = Vector_PxRaycastQueryResult;
        Vector_PxRaycastQueryResult.__cache__ = {};
        Module["Vector_PxRaycastQueryResult"] = Vector_PxRaycastQueryResult;
        Vector_PxRaycastQueryResult.prototype["at"] = Vector_PxRaycastQueryResult.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxRaycastQueryResult_at_1(self2, index), PxRaycastQueryResult);
        };
        ;
        Vector_PxRaycastQueryResult.prototype["data"] = Vector_PxRaycastQueryResult.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxRaycastQueryResult_data_0(self2), PxRaycastQueryResult);
        };
        ;
        Vector_PxRaycastQueryResult.prototype["size"] = Vector_PxRaycastQueryResult.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxRaycastQueryResult_size_0(self2);
        };
        ;
        Vector_PxRaycastQueryResult.prototype["push_back"] = Vector_PxRaycastQueryResult.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxRaycastQueryResult_push_back_1(self2, value);
        };
        ;
        Vector_PxRaycastQueryResult.prototype["clear"] = Vector_PxRaycastQueryResult.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxRaycastQueryResult_clear_0(self2);
        };
        ;
        Vector_PxRaycastQueryResult.prototype["__destroy__"] = Vector_PxRaycastQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxRaycastQueryResult___destroy___0(self2);
        };
        function Vector_PxSweepQueryResult(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_0();
            getCache(Vector_PxSweepQueryResult)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxSweepQueryResult_Vector_PxSweepQueryResult_1(size);
          getCache(Vector_PxSweepQueryResult)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxSweepQueryResult.prototype = Object.create(WrapperObject.prototype);
        Vector_PxSweepQueryResult.prototype.constructor = Vector_PxSweepQueryResult;
        Vector_PxSweepQueryResult.prototype.__class__ = Vector_PxSweepQueryResult;
        Vector_PxSweepQueryResult.__cache__ = {};
        Module["Vector_PxSweepQueryResult"] = Vector_PxSweepQueryResult;
        Vector_PxSweepQueryResult.prototype["at"] = Vector_PxSweepQueryResult.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxSweepQueryResult_at_1(self2, index), PxSweepQueryResult);
        };
        ;
        Vector_PxSweepQueryResult.prototype["data"] = Vector_PxSweepQueryResult.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxSweepQueryResult_data_0(self2), PxSweepQueryResult);
        };
        ;
        Vector_PxSweepQueryResult.prototype["size"] = Vector_PxSweepQueryResult.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxSweepQueryResult_size_0(self2);
        };
        ;
        Vector_PxSweepQueryResult.prototype["push_back"] = Vector_PxSweepQueryResult.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxSweepQueryResult_push_back_1(self2, value);
        };
        ;
        Vector_PxSweepQueryResult.prototype["clear"] = Vector_PxSweepQueryResult.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxSweepQueryResult_clear_0(self2);
        };
        ;
        Vector_PxSweepQueryResult.prototype["__destroy__"] = Vector_PxSweepQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxSweepQueryResult___destroy___0(self2);
        };
        function Vector_PxRaycastHit(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_0();
            getCache(Vector_PxRaycastHit)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxRaycastHit_Vector_PxRaycastHit_1(size);
          getCache(Vector_PxRaycastHit)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxRaycastHit.prototype = Object.create(WrapperObject.prototype);
        Vector_PxRaycastHit.prototype.constructor = Vector_PxRaycastHit;
        Vector_PxRaycastHit.prototype.__class__ = Vector_PxRaycastHit;
        Vector_PxRaycastHit.__cache__ = {};
        Module["Vector_PxRaycastHit"] = Vector_PxRaycastHit;
        Vector_PxRaycastHit.prototype["at"] = Vector_PxRaycastHit.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxRaycastHit_at_1(self2, index), PxRaycastHit);
        };
        ;
        Vector_PxRaycastHit.prototype["data"] = Vector_PxRaycastHit.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxRaycastHit_data_0(self2), PxRaycastHit);
        };
        ;
        Vector_PxRaycastHit.prototype["size"] = Vector_PxRaycastHit.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxRaycastHit_size_0(self2);
        };
        ;
        Vector_PxRaycastHit.prototype["push_back"] = Vector_PxRaycastHit.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxRaycastHit_push_back_1(self2, value);
        };
        ;
        Vector_PxRaycastHit.prototype["clear"] = Vector_PxRaycastHit.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxRaycastHit_clear_0(self2);
        };
        ;
        Vector_PxRaycastHit.prototype["__destroy__"] = Vector_PxRaycastHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxRaycastHit___destroy___0(self2);
        };
        function Vector_PxSweepHit(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_0();
            getCache(Vector_PxSweepHit)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxSweepHit_Vector_PxSweepHit_1(size);
          getCache(Vector_PxSweepHit)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxSweepHit.prototype = Object.create(WrapperObject.prototype);
        Vector_PxSweepHit.prototype.constructor = Vector_PxSweepHit;
        Vector_PxSweepHit.prototype.__class__ = Vector_PxSweepHit;
        Vector_PxSweepHit.__cache__ = {};
        Module["Vector_PxSweepHit"] = Vector_PxSweepHit;
        Vector_PxSweepHit.prototype["at"] = Vector_PxSweepHit.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxSweepHit_at_1(self2, index), PxSweepHit);
        };
        ;
        Vector_PxSweepHit.prototype["data"] = Vector_PxSweepHit.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxSweepHit_data_0(self2), PxSweepHit);
        };
        ;
        Vector_PxSweepHit.prototype["size"] = Vector_PxSweepHit.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxSweepHit_size_0(self2);
        };
        ;
        Vector_PxSweepHit.prototype["push_back"] = Vector_PxSweepHit.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxSweepHit_push_back_1(self2, value);
        };
        ;
        Vector_PxSweepHit.prototype["clear"] = Vector_PxSweepHit.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxSweepHit_clear_0(self2);
        };
        ;
        Vector_PxSweepHit.prototype["__destroy__"] = Vector_PxSweepHit.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxSweepHit___destroy___0(self2);
        };
        function Vector_PxVehicleDrivableSurfaceType(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_0();
            getCache(Vector_PxVehicleDrivableSurfaceType)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_Vector_PxVehicleDrivableSurfaceType_1(size);
          getCache(Vector_PxVehicleDrivableSurfaceType)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxVehicleDrivableSurfaceType.prototype = Object.create(WrapperObject.prototype);
        Vector_PxVehicleDrivableSurfaceType.prototype.constructor = Vector_PxVehicleDrivableSurfaceType;
        Vector_PxVehicleDrivableSurfaceType.prototype.__class__ = Vector_PxVehicleDrivableSurfaceType;
        Vector_PxVehicleDrivableSurfaceType.__cache__ = {};
        Module["Vector_PxVehicleDrivableSurfaceType"] = Vector_PxVehicleDrivableSurfaceType;
        Vector_PxVehicleDrivableSurfaceType.prototype["at"] = Vector_PxVehicleDrivableSurfaceType.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_at_1(self2, index), PxVehicleDrivableSurfaceType);
        };
        ;
        Vector_PxVehicleDrivableSurfaceType.prototype["data"] = Vector_PxVehicleDrivableSurfaceType.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxVehicleDrivableSurfaceType_data_0(self2), PxVehicleDrivableSurfaceType);
        };
        ;
        Vector_PxVehicleDrivableSurfaceType.prototype["size"] = Vector_PxVehicleDrivableSurfaceType.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_size_0(self2);
        };
        ;
        Vector_PxVehicleDrivableSurfaceType.prototype["push_back"] = Vector_PxVehicleDrivableSurfaceType.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_push_back_1(self2, value);
        };
        ;
        Vector_PxVehicleDrivableSurfaceType.prototype["clear"] = Vector_PxVehicleDrivableSurfaceType.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxVehicleDrivableSurfaceType_clear_0(self2);
        };
        ;
        Vector_PxVehicleDrivableSurfaceType.prototype["__destroy__"] = Vector_PxVehicleDrivableSurfaceType.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxVehicleDrivableSurfaceType___destroy___0(self2);
        };
        function Vector_PxWheelQueryResult(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_0();
            getCache(Vector_PxWheelQueryResult)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxWheelQueryResult_Vector_PxWheelQueryResult_1(size);
          getCache(Vector_PxWheelQueryResult)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxWheelQueryResult.prototype = Object.create(WrapperObject.prototype);
        Vector_PxWheelQueryResult.prototype.constructor = Vector_PxWheelQueryResult;
        Vector_PxWheelQueryResult.prototype.__class__ = Vector_PxWheelQueryResult;
        Vector_PxWheelQueryResult.__cache__ = {};
        Module["Vector_PxWheelQueryResult"] = Vector_PxWheelQueryResult;
        Vector_PxWheelQueryResult.prototype["at"] = Vector_PxWheelQueryResult.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxWheelQueryResult_at_1(self2, index), PxWheelQueryResult);
        };
        ;
        Vector_PxWheelQueryResult.prototype["data"] = Vector_PxWheelQueryResult.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxWheelQueryResult_data_0(self2), PxWheelQueryResult);
        };
        ;
        Vector_PxWheelQueryResult.prototype["size"] = Vector_PxWheelQueryResult.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxWheelQueryResult_size_0(self2);
        };
        ;
        Vector_PxWheelQueryResult.prototype["push_back"] = Vector_PxWheelQueryResult.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxWheelQueryResult_push_back_1(self2, value);
        };
        ;
        Vector_PxWheelQueryResult.prototype["clear"] = Vector_PxWheelQueryResult.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxWheelQueryResult_clear_0(self2);
        };
        ;
        Vector_PxWheelQueryResult.prototype["__destroy__"] = Vector_PxWheelQueryResult.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxWheelQueryResult___destroy___0(self2);
        };
        function Vector_PxVehicleWheels(size) {
          if (size && typeof size === "object")
            size = size.ptr;
          if (size === void 0) {
            this.ptr = _emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_0();
            getCache(Vector_PxVehicleWheels)[this.ptr] = this;
            return;
          }
          this.ptr = _emscripten_bind_Vector_PxVehicleWheels_Vector_PxVehicleWheels_1(size);
          getCache(Vector_PxVehicleWheels)[this.ptr] = this;
        }
        ;
        ;
        Vector_PxVehicleWheels.prototype = Object.create(WrapperObject.prototype);
        Vector_PxVehicleWheels.prototype.constructor = Vector_PxVehicleWheels;
        Vector_PxVehicleWheels.prototype.__class__ = Vector_PxVehicleWheels;
        Vector_PxVehicleWheels.__cache__ = {};
        Module["Vector_PxVehicleWheels"] = Vector_PxVehicleWheels;
        Vector_PxVehicleWheels.prototype["at"] = Vector_PxVehicleWheels.prototype.at = function(index) {
          var self2 = this.ptr;
          if (index && typeof index === "object")
            index = index.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxVehicleWheels_at_1(self2, index), PxVehicleWheels);
        };
        ;
        Vector_PxVehicleWheels.prototype["data"] = Vector_PxVehicleWheels.prototype.data = function() {
          var self2 = this.ptr;
          return wrapPointer(_emscripten_bind_Vector_PxVehicleWheels_data_0(self2), PxVehicleWheelsPtr);
        };
        ;
        Vector_PxVehicleWheels.prototype["size"] = Vector_PxVehicleWheels.prototype.size = function() {
          var self2 = this.ptr;
          return _emscripten_bind_Vector_PxVehicleWheels_size_0(self2);
        };
        ;
        Vector_PxVehicleWheels.prototype["push_back"] = Vector_PxVehicleWheels.prototype.push_back = function(value) {
          var self2 = this.ptr;
          if (value && typeof value === "object")
            value = value.ptr;
          _emscripten_bind_Vector_PxVehicleWheels_push_back_1(self2, value);
        };
        ;
        Vector_PxVehicleWheels.prototype["clear"] = Vector_PxVehicleWheels.prototype.clear = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxVehicleWheels_clear_0(self2);
        };
        ;
        Vector_PxVehicleWheels.prototype["__destroy__"] = Vector_PxVehicleWheels.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_Vector_PxVehicleWheels___destroy___0(self2);
        };
        function JSPvdTransport() {
          this.ptr = _emscripten_bind_JSPvdTransport_JSPvdTransport_0();
          getCache(JSPvdTransport)[this.ptr] = this;
        }
        ;
        ;
        JSPvdTransport.prototype = Object.create(SimplePvdTransport.prototype);
        JSPvdTransport.prototype.constructor = JSPvdTransport;
        JSPvdTransport.prototype.__class__ = JSPvdTransport;
        JSPvdTransport.__cache__ = {};
        Module["JSPvdTransport"] = JSPvdTransport;
        JSPvdTransport.prototype["connect"] = JSPvdTransport.prototype.connect = function() {
          var self2 = this.ptr;
          return !!_emscripten_bind_JSPvdTransport_connect_0(self2);
        };
        ;
        JSPvdTransport.prototype["send"] = JSPvdTransport.prototype.send = function(inBytes, inLength) {
          var self2 = this.ptr;
          if (inBytes && typeof inBytes === "object")
            inBytes = inBytes.ptr;
          if (inLength && typeof inLength === "object")
            inLength = inLength.ptr;
          _emscripten_bind_JSPvdTransport_send_2(self2, inBytes, inLength);
        };
        ;
        JSPvdTransport.prototype["__destroy__"] = JSPvdTransport.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_JSPvdTransport___destroy___0(self2);
        };
        function PxPvdInstrumentationFlags(flags) {
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          this.ptr = _emscripten_bind_PxPvdInstrumentationFlags_PxPvdInstrumentationFlags_1(flags);
          getCache(PxPvdInstrumentationFlags)[this.ptr] = this;
        }
        ;
        ;
        PxPvdInstrumentationFlags.prototype = Object.create(WrapperObject.prototype);
        PxPvdInstrumentationFlags.prototype.constructor = PxPvdInstrumentationFlags;
        PxPvdInstrumentationFlags.prototype.__class__ = PxPvdInstrumentationFlags;
        PxPvdInstrumentationFlags.__cache__ = {};
        Module["PxPvdInstrumentationFlags"] = PxPvdInstrumentationFlags;
        PxPvdInstrumentationFlags.prototype["isSet"] = PxPvdInstrumentationFlags.prototype.isSet = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          return !!_emscripten_bind_PxPvdInstrumentationFlags_isSet_1(self2, flag);
        };
        ;
        PxPvdInstrumentationFlags.prototype["set"] = PxPvdInstrumentationFlags.prototype.set = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxPvdInstrumentationFlags_set_1(self2, flag);
        };
        ;
        PxPvdInstrumentationFlags.prototype["clear"] = PxPvdInstrumentationFlags.prototype.clear = function(flag) {
          var self2 = this.ptr;
          if (flag && typeof flag === "object")
            flag = flag.ptr;
          _emscripten_bind_PxPvdInstrumentationFlags_clear_1(self2, flag);
        };
        ;
        PxPvdInstrumentationFlags.prototype["__destroy__"] = PxPvdInstrumentationFlags.prototype.__destroy__ = function() {
          var self2 = this.ptr;
          _emscripten_bind_PxPvdInstrumentationFlags___destroy___0(self2);
        };
        function PxPvd() {
          throw "cannot construct a PxPvd, no constructor in IDL";
        }
        PxPvd.prototype = Object.create(WrapperObject.prototype);
        PxPvd.prototype.constructor = PxPvd;
        PxPvd.prototype.__class__ = PxPvd;
        PxPvd.__cache__ = {};
        Module["PxPvd"] = PxPvd;
        PxPvd.prototype["connect"] = PxPvd.prototype.connect = function(transport, flags) {
          var self2 = this.ptr;
          if (transport && typeof transport === "object")
            transport = transport.ptr;
          if (flags && typeof flags === "object")
            flags = flags.ptr;
          return !!_emscripten_bind_PxPvd_connect_2(self2, transport, flags);
        };
        ;
        (function() {
          function setupEnums() {
            Module["eVISUALIZATION"] = _emscripten_enum_PxActorFlagEnum_eVISUALIZATION();
            Module["eDISABLE_GRAVITY"] = _emscripten_enum_PxActorFlagEnum_eDISABLE_GRAVITY();
            Module["eSEND_SLEEP_NOTIFIES"] = _emscripten_enum_PxActorFlagEnum_eSEND_SLEEP_NOTIFIES();
            Module["eDISABLE_SIMULATION"] = _emscripten_enum_PxActorFlagEnum_eDISABLE_SIMULATION();
            Module["eRIGID_STATIC"] = _emscripten_enum_PxActorTypeEnum_eRIGID_STATIC();
            Module["eRIGID_DYNAMIC"] = _emscripten_enum_PxActorTypeEnum_eRIGID_DYNAMIC();
            Module["eARTICULATION_LINK"] = _emscripten_enum_PxActorTypeEnum_eARTICULATION_LINK();
            Module["eACTOR_COUNT"] = _emscripten_enum_PxActorTypeEnum_eACTOR_COUNT();
            Module["eACTOR_FORCE_DWORD"] = _emscripten_enum_PxActorTypeEnum_eACTOR_FORCE_DWORD();
            Module["eRIGID_STATIC"] = _emscripten_enum_PxActorTypeFlagEnum_eRIGID_STATIC();
            Module["eRIGID_DYNAMIC"] = _emscripten_enum_PxActorTypeFlagEnum_eRIGID_DYNAMIC();
            Module["eTWIST"] = _emscripten_enum_PxArticulationAxisEnum_eTWIST();
            Module["eSWING1"] = _emscripten_enum_PxArticulationAxisEnum_eSWING1();
            Module["eSWING2"] = _emscripten_enum_PxArticulationAxisEnum_eSWING2();
            Module["eX"] = _emscripten_enum_PxArticulationAxisEnum_eX();
            Module["eY"] = _emscripten_enum_PxArticulationAxisEnum_eY();
            Module["eZ"] = _emscripten_enum_PxArticulationAxisEnum_eZ();
            Module["eCOUNT"] = _emscripten_enum_PxArticulationAxisEnum_eCOUNT();
            Module["eVELOCITY"] = _emscripten_enum_PxArticulationCacheEnum_eVELOCITY();
            Module["eACCELERATION"] = _emscripten_enum_PxArticulationCacheEnum_eACCELERATION();
            Module["ePOSITION"] = _emscripten_enum_PxArticulationCacheEnum_ePOSITION();
            Module["eFORCE"] = _emscripten_enum_PxArticulationCacheEnum_eFORCE();
            Module["eLINKVELOCITY"] = _emscripten_enum_PxArticulationCacheEnum_eLINKVELOCITY();
            Module["eLINKACCELERATION"] = _emscripten_enum_PxArticulationCacheEnum_eLINKACCELERATION();
            Module["eROOT"] = _emscripten_enum_PxArticulationCacheEnum_eROOT();
            Module["eALL"] = _emscripten_enum_PxArticulationCacheEnum_eALL();
            Module["eFORCE"] = _emscripten_enum_PxArticulationDriveTypeEnum_eFORCE();
            Module["eACCELERATION"] = _emscripten_enum_PxArticulationDriveTypeEnum_eACCELERATION();
            Module["eTARGET"] = _emscripten_enum_PxArticulationDriveTypeEnum_eTARGET();
            Module["eVELOCITY"] = _emscripten_enum_PxArticulationDriveTypeEnum_eVELOCITY();
            Module["eNONE"] = _emscripten_enum_PxArticulationDriveTypeEnum_eNONE();
            Module["eFIX_BASE"] = _emscripten_enum_PxArticulationFlagEnum_eFIX_BASE();
            Module["eDRIVE_LIMITS_ARE_FORCES"] = _emscripten_enum_PxArticulationFlagEnum_eDRIVE_LIMITS_ARE_FORCES();
            Module["eTARGET"] = _emscripten_enum_PxArticulationJointDriveTypeEnum_eTARGET();
            Module["eERROR"] = _emscripten_enum_PxArticulationJointDriveTypeEnum_eERROR();
            Module["eLOCKED"] = _emscripten_enum_PxArticulationMotionEnum_eLOCKED();
            Module["eLIMITED"] = _emscripten_enum_PxArticulationMotionEnum_eLIMITED();
            Module["eFREE"] = _emscripten_enum_PxArticulationMotionEnum_eFREE();
            Module["ePRISMATIC"] = _emscripten_enum_PxArticulationJointTypeEnum_ePRISMATIC();
            Module["eREVOLUTE"] = _emscripten_enum_PxArticulationJointTypeEnum_eREVOLUTE();
            Module["eSPHERICAL"] = _emscripten_enum_PxArticulationJointTypeEnum_eSPHERICAL();
            Module["eFIX"] = _emscripten_enum_PxArticulationJointTypeEnum_eFIX();
            Module["eUNDEFINED"] = _emscripten_enum_PxArticulationJointTypeEnum_eUNDEFINED();
            Module["eSAP"] = _emscripten_enum_PxBroadPhaseTypeEnum_eSAP();
            Module["eMBP"] = _emscripten_enum_PxBroadPhaseTypeEnum_eMBP();
            Module["eABP"] = _emscripten_enum_PxBroadPhaseTypeEnum_eABP();
            Module["eGPU"] = _emscripten_enum_PxBroadPhaseTypeEnum_eGPU();
            Module["eLAST"] = _emscripten_enum_PxBroadPhaseTypeEnum_eLAST();
            Module["eBROKEN"] = _emscripten_enum_PxConstraintFlagEnum_eBROKEN();
            Module["ePROJECT_TO_ACTOR0"] = _emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR0();
            Module["ePROJECT_TO_ACTOR1"] = _emscripten_enum_PxConstraintFlagEnum_ePROJECT_TO_ACTOR1();
            Module["ePROJECTION"] = _emscripten_enum_PxConstraintFlagEnum_ePROJECTION();
            Module["eCOLLISION_ENABLED"] = _emscripten_enum_PxConstraintFlagEnum_eCOLLISION_ENABLED();
            Module["eVISUALIZATION"] = _emscripten_enum_PxConstraintFlagEnum_eVISUALIZATION();
            Module["eDRIVE_LIMITS_ARE_FORCES"] = _emscripten_enum_PxConstraintFlagEnum_eDRIVE_LIMITS_ARE_FORCES();
            Module["eIMPROVED_SLERP"] = _emscripten_enum_PxConstraintFlagEnum_eIMPROVED_SLERP();
            Module["eDISABLE_PREPROCESSING"] = _emscripten_enum_PxConstraintFlagEnum_eDISABLE_PREPROCESSING();
            Module["eENABLE_EXTENDED_LIMITS"] = _emscripten_enum_PxConstraintFlagEnum_eENABLE_EXTENDED_LIMITS();
            Module["eGPU_COMPATIBLE"] = _emscripten_enum_PxConstraintFlagEnum_eGPU_COMPATIBLE();
            Module["eREMOVED_ACTOR_0"] = _emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_0();
            Module["eREMOVED_ACTOR_1"] = _emscripten_enum_PxContactPairHeaderFlagEnum_eREMOVED_ACTOR_1();
            Module["eREMOVED_SHAPE_0"] = _emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_0();
            Module["eREMOVED_SHAPE_1"] = _emscripten_enum_PxContactPairFlagEnum_eREMOVED_SHAPE_1();
            Module["eACTOR_PAIR_HAS_FIRST_TOUCH"] = _emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_HAS_FIRST_TOUCH();
            Module["eACTOR_PAIR_LOST_TOUCH"] = _emscripten_enum_PxContactPairFlagEnum_eACTOR_PAIR_LOST_TOUCH();
            Module["eINTERNAL_HAS_IMPULSES"] = _emscripten_enum_PxContactPairFlagEnum_eINTERNAL_HAS_IMPULSES();
            Module["eINTERNAL_CONTACTS_ARE_FLIPPED"] = _emscripten_enum_PxContactPairFlagEnum_eINTERNAL_CONTACTS_ARE_FLIPPED();
            Module["eFORCE"] = _emscripten_enum_PxForceModeEnum_eFORCE();
            Module["eIMPULSE"] = _emscripten_enum_PxForceModeEnum_eIMPULSE();
            Module["eVELOCITY_CHANGE"] = _emscripten_enum_PxForceModeEnum_eVELOCITY_CHANGE();
            Module["eACCELERATION"] = _emscripten_enum_PxForceModeEnum_eACCELERATION();
            Module["ePATCH"] = _emscripten_enum_PxFrictionTypeEnum_ePATCH();
            Module["eONE_DIRECTIONAL"] = _emscripten_enum_PxFrictionTypeEnum_eONE_DIRECTIONAL();
            Module["eTWO_DIRECTIONAL"] = _emscripten_enum_PxFrictionTypeEnum_eTWO_DIRECTIONAL();
            Module["eFRICTION_COUNT"] = _emscripten_enum_PxFrictionTypeEnum_eFRICTION_COUNT();
            Module["ePOSITION"] = _emscripten_enum_PxHitFlagEnum_ePOSITION();
            Module["eNORMAL"] = _emscripten_enum_PxHitFlagEnum_eNORMAL();
            Module["eUV"] = _emscripten_enum_PxHitFlagEnum_eUV();
            Module["eASSUME_NO_INITIAL_OVERLAP"] = _emscripten_enum_PxHitFlagEnum_eASSUME_NO_INITIAL_OVERLAP();
            Module["eMESH_MULTIPLE"] = _emscripten_enum_PxHitFlagEnum_eMESH_MULTIPLE();
            Module["eMESH_ANY"] = _emscripten_enum_PxHitFlagEnum_eMESH_ANY();
            Module["eMESH_BOTH_SIDES"] = _emscripten_enum_PxHitFlagEnum_eMESH_BOTH_SIDES();
            Module["ePRECISE_SWEEP"] = _emscripten_enum_PxHitFlagEnum_ePRECISE_SWEEP();
            Module["eMTD"] = _emscripten_enum_PxHitFlagEnum_eMTD();
            Module["eFACE_INDEX"] = _emscripten_enum_PxHitFlagEnum_eFACE_INDEX();
            Module["eDEFAULT"] = _emscripten_enum_PxHitFlagEnum_eDEFAULT();
            Module["eMODIFIABLE_FLAGS"] = _emscripten_enum_PxHitFlagEnum_eMODIFIABLE_FLAGS();
            Module["eKEEP"] = _emscripten_enum_PxPairFilteringModeEnum_eKEEP();
            Module["eSUPPRESS"] = _emscripten_enum_PxPairFilteringModeEnum_eSUPPRESS();
            Module["eKILL"] = _emscripten_enum_PxPairFilteringModeEnum_eKILL();
            Module["eDEFAULT"] = _emscripten_enum_PxPairFilteringModeEnum_eDEFAULT();
            Module["eSOLVE_CONTACT"] = _emscripten_enum_PxPairFlagEnum_eSOLVE_CONTACT();
            Module["eMODIFY_CONTACTS"] = _emscripten_enum_PxPairFlagEnum_eMODIFY_CONTACTS();
            Module["eNOTIFY_TOUCH_FOUND"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_FOUND();
            Module["eNOTIFY_TOUCH_PERSISTS"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_PERSISTS();
            Module["eNOTIFY_TOUCH_LOST"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_LOST();
            Module["eNOTIFY_TOUCH_CCD"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_TOUCH_CCD();
            Module["eNOTIFY_THRESHOLD_FORCE_FOUND"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_FOUND();
            Module["eNOTIFY_THRESHOLD_FORCE_PERSISTS"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_PERSISTS();
            Module["eNOTIFY_THRESHOLD_FORCE_LOST"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_THRESHOLD_FORCE_LOST();
            Module["eNOTIFY_CONTACT_POINTS"] = _emscripten_enum_PxPairFlagEnum_eNOTIFY_CONTACT_POINTS();
            Module["eDETECT_DISCRETE_CONTACT"] = _emscripten_enum_PxPairFlagEnum_eDETECT_DISCRETE_CONTACT();
            Module["eDETECT_CCD_CONTACT"] = _emscripten_enum_PxPairFlagEnum_eDETECT_CCD_CONTACT();
            Module["ePRE_SOLVER_VELOCITY"] = _emscripten_enum_PxPairFlagEnum_ePRE_SOLVER_VELOCITY();
            Module["ePOST_SOLVER_VELOCITY"] = _emscripten_enum_PxPairFlagEnum_ePOST_SOLVER_VELOCITY();
            Module["eCONTACT_EVENT_POSE"] = _emscripten_enum_PxPairFlagEnum_eCONTACT_EVENT_POSE();
            Module["eNEXT_FREE"] = _emscripten_enum_PxPairFlagEnum_eNEXT_FREE();
            Module["eCONTACT_DEFAULT"] = _emscripten_enum_PxPairFlagEnum_eCONTACT_DEFAULT();
            Module["eNONE"] = _emscripten_enum_PxPruningStructureTypeEnum_eNONE();
            Module["eDYNAMIC_AABB_TREE"] = _emscripten_enum_PxPruningStructureTypeEnum_eDYNAMIC_AABB_TREE();
            Module["eSTATIC_AABB_TREE"] = _emscripten_enum_PxPruningStructureTypeEnum_eSTATIC_AABB_TREE();
            Module["eLAST"] = _emscripten_enum_PxPruningStructureTypeEnum_eLAST();
            Module["eSTATIC"] = _emscripten_enum_PxQueryFlagEnum_eSTATIC();
            Module["eDYNAMIC"] = _emscripten_enum_PxQueryFlagEnum_eDYNAMIC();
            Module["ePREFILTER"] = _emscripten_enum_PxQueryFlagEnum_ePREFILTER();
            Module["ePOSTFILTER"] = _emscripten_enum_PxQueryFlagEnum_ePOSTFILTER();
            Module["eANY_HIT"] = _emscripten_enum_PxQueryFlagEnum_eANY_HIT();
            Module["eNO_BLOCK"] = _emscripten_enum_PxQueryFlagEnum_eNO_BLOCK();
            Module["eKINEMATIC"] = _emscripten_enum_PxRigidBodyFlagEnum_eKINEMATIC();
            Module["eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES"] = _emscripten_enum_PxRigidBodyFlagEnum_eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES();
            Module["eENABLE_CCD"] = _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD();
            Module["eENABLE_CCD_FRICTION"] = _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_FRICTION();
            Module["eENABLE_POSE_INTEGRATION_PREVIEW"] = _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_POSE_INTEGRATION_PREVIEW();
            Module["eENABLE_SPECULATIVE_CCD"] = _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_SPECULATIVE_CCD();
            Module["eENABLE_CCD_MAX_CONTACT_IMPULSE"] = _emscripten_enum_PxRigidBodyFlagEnum_eENABLE_CCD_MAX_CONTACT_IMPULSE();
            Module["eRETAIN_ACCELERATIONS"] = _emscripten_enum_PxRigidBodyFlagEnum_eRETAIN_ACCELERATIONS();
            Module["eLOCK_LINEAR_X"] = _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_X();
            Module["eLOCK_LINEAR_Y"] = _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Y();
            Module["eLOCK_LINEAR_Z"] = _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_LINEAR_Z();
            Module["eLOCK_ANGULAR_X"] = _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_X();
            Module["eLOCK_ANGULAR_Y"] = _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Y();
            Module["eLOCK_ANGULAR_Z"] = _emscripten_enum_PxRigidDynamicLockFlagEnum_eLOCK_ANGULAR_Z();
            Module["eENABLE_ACTIVE_ACTORS"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_ACTIVE_ACTORS();
            Module["eENABLE_CCD"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_CCD();
            Module["eDISABLE_CCD_RESWEEP"] = _emscripten_enum_PxSceneFlagEnum_eDISABLE_CCD_RESWEEP();
            Module["eADAPTIVE_FORCE"] = _emscripten_enum_PxSceneFlagEnum_eADAPTIVE_FORCE();
            Module["eENABLE_PCM"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_PCM();
            Module["eDISABLE_CONTACT_REPORT_BUFFER_RESIZE"] = _emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_REPORT_BUFFER_RESIZE();
            Module["eDISABLE_CONTACT_CACHE"] = _emscripten_enum_PxSceneFlagEnum_eDISABLE_CONTACT_CACHE();
            Module["eREQUIRE_RW_LOCK"] = _emscripten_enum_PxSceneFlagEnum_eREQUIRE_RW_LOCK();
            Module["eENABLE_STABILIZATION"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_STABILIZATION();
            Module["eENABLE_AVERAGE_POINT"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_AVERAGE_POINT();
            Module["eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS"] = _emscripten_enum_PxSceneFlagEnum_eEXCLUDE_KINEMATICS_FROM_ACTIVE_ACTORS();
            Module["eENABLE_GPU_DYNAMICS"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_GPU_DYNAMICS();
            Module["eENABLE_ENHANCED_DETERMINISM"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_ENHANCED_DETERMINISM();
            Module["eENABLE_FRICTION_EVERY_ITERATION"] = _emscripten_enum_PxSceneFlagEnum_eENABLE_FRICTION_EVERY_ITERATION();
            Module["eMUTABLE_FLAGS"] = _emscripten_enum_PxSceneFlagEnum_eMUTABLE_FLAGS();
            Module["eBUILD_ENABLED_COMMIT_ENABLED"] = _emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_ENABLED();
            Module["eBUILD_ENABLED_COMMIT_DISABLED"] = _emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_ENABLED_COMMIT_DISABLED();
            Module["eBUILD_DISABLED_COMMIT_DISABLED"] = _emscripten_enum_PxSceneQueryUpdateModeEnum_eBUILD_DISABLED_COMMIT_DISABLED();
            Module["eSIMULATION_SHAPE"] = _emscripten_enum_PxShapeFlagEnum_eSIMULATION_SHAPE();
            Module["eSCENE_QUERY_SHAPE"] = _emscripten_enum_PxShapeFlagEnum_eSCENE_QUERY_SHAPE();
            Module["eTRIGGER_SHAPE"] = _emscripten_enum_PxShapeFlagEnum_eTRIGGER_SHAPE();
            Module["eVISUALIZATION"] = _emscripten_enum_PxShapeFlagEnum_eVISUALIZATION();
            Module["ePGS"] = _emscripten_enum_PxSolverTypeEnum_ePGS();
            Module["eTGS"] = _emscripten_enum_PxSolverTypeEnum_eTGS();
            Module["eREMOVED_SHAPE_TRIGGER"] = _emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_TRIGGER();
            Module["eREMOVED_SHAPE_OTHER"] = _emscripten_enum_PxTriggerPairFlagEnum_eREMOVED_SHAPE_OTHER();
            Module["eNEXT_FREE"] = _emscripten_enum_PxTriggerPairFlagEnum_eNEXT_FREE();
            Module["eESTIMATE"] = _emscripten_enum_PxVehicleClutchAccuracyModeEnum_eESTIMATE();
            Module["eBEST_POSSIBLE"] = _emscripten_enum_PxVehicleClutchAccuracyModeEnum_eBEST_POSSIBLE();
            Module["eDIFF_TYPE_LS_4WD"] = _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_4WD();
            Module["eDIFF_TYPE_LS_FRONTWD"] = _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_FRONTWD();
            Module["eDIFF_TYPE_LS_REARWD"] = _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_LS_REARWD();
            Module["eDIFF_TYPE_OPEN_4WD"] = _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_4WD();
            Module["eDIFF_TYPE_OPEN_FRONTWD"] = _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_FRONTWD();
            Module["eDIFF_TYPE_OPEN_REARWD"] = _emscripten_enum_PxVehicleDifferential4WDataEnum_eDIFF_TYPE_OPEN_REARWD();
            Module["eMAX_NB_DIFF_TYPES"] = _emscripten_enum_PxVehicleDifferential4WDataEnum_eMAX_NB_DIFF_TYPES();
            Module["eANALOG_INPUT_ACCEL"] = _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_ACCEL();
            Module["eANALOG_INPUT_BRAKE"] = _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_BRAKE();
            Module["eANALOG_INPUT_HANDBRAKE"] = _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_HANDBRAKE();
            Module["eANALOG_INPUT_STEER_LEFT"] = _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_LEFT();
            Module["eANALOG_INPUT_STEER_RIGHT"] = _emscripten_enum_PxVehicleDrive4WControlEnum_eANALOG_INPUT_STEER_RIGHT();
            Module["eMAX_NB_DRIVE4W_ANALOG_INPUTS"] = _emscripten_enum_PxVehicleDrive4WControlEnum_eMAX_NB_DRIVE4W_ANALOG_INPUTS();
            Module["eSTANDARD"] = _emscripten_enum_PxVehicleDriveTankControlModelEnum_eSTANDARD();
            Module["eSPECIAL"] = _emscripten_enum_PxVehicleDriveTankControlModelEnum_eSPECIAL();
            Module["eREVERSE"] = _emscripten_enum_PxVehicleGearEnum_eREVERSE();
            Module["eNEUTRAL"] = _emscripten_enum_PxVehicleGearEnum_eNEUTRAL();
            Module["eFIRST"] = _emscripten_enum_PxVehicleGearEnum_eFIRST();
            Module["eSECOND"] = _emscripten_enum_PxVehicleGearEnum_eSECOND();
            Module["eTHIRD"] = _emscripten_enum_PxVehicleGearEnum_eTHIRD();
            Module["eFOURTH"] = _emscripten_enum_PxVehicleGearEnum_eFOURTH();
            Module["eFIFTH"] = _emscripten_enum_PxVehicleGearEnum_eFIFTH();
            Module["eSIXTH"] = _emscripten_enum_PxVehicleGearEnum_eSIXTH();
            Module["eSEVENTH"] = _emscripten_enum_PxVehicleGearEnum_eSEVENTH();
            Module["eEIGHTH"] = _emscripten_enum_PxVehicleGearEnum_eEIGHTH();
            Module["eNINTH"] = _emscripten_enum_PxVehicleGearEnum_eNINTH();
            Module["eTENTH"] = _emscripten_enum_PxVehicleGearEnum_eTENTH();
            Module["eELEVENTH"] = _emscripten_enum_PxVehicleGearEnum_eELEVENTH();
            Module["eTWELFTH"] = _emscripten_enum_PxVehicleGearEnum_eTWELFTH();
            Module["eTHIRTEENTH"] = _emscripten_enum_PxVehicleGearEnum_eTHIRTEENTH();
            Module["eFOURTEENTH"] = _emscripten_enum_PxVehicleGearEnum_eFOURTEENTH();
            Module["eFIFTEENTH"] = _emscripten_enum_PxVehicleGearEnum_eFIFTEENTH();
            Module["eSIXTEENTH"] = _emscripten_enum_PxVehicleGearEnum_eSIXTEENTH();
            Module["eSEVENTEENTH"] = _emscripten_enum_PxVehicleGearEnum_eSEVENTEENTH();
            Module["eEIGHTEENTH"] = _emscripten_enum_PxVehicleGearEnum_eEIGHTEENTH();
            Module["eNINETEENTH"] = _emscripten_enum_PxVehicleGearEnum_eNINETEENTH();
            Module["eTWENTIETH"] = _emscripten_enum_PxVehicleGearEnum_eTWENTIETH();
            Module["eTWENTYFIRST"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYFIRST();
            Module["eTWENTYSECOND"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYSECOND();
            Module["eTWENTYTHIRD"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYTHIRD();
            Module["eTWENTYFOURTH"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYFOURTH();
            Module["eTWENTYFIFTH"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYFIFTH();
            Module["eTWENTYSIXTH"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYSIXTH();
            Module["eTWENTYSEVENTH"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYSEVENTH();
            Module["eTWENTYEIGHTH"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYEIGHTH();
            Module["eTWENTYNINTH"] = _emscripten_enum_PxVehicleGearEnum_eTWENTYNINTH();
            Module["eTHIRTIETH"] = _emscripten_enum_PxVehicleGearEnum_eTHIRTIETH();
            Module["eGEARSRATIO_COUNT"] = _emscripten_enum_PxVehicleGearEnum_eGEARSRATIO_COUNT();
            Module["eVELOCITY_CHANGE"] = _emscripten_enum_PxVehicleUpdateModeEnum_eVELOCITY_CHANGE();
            Module["eACCELERATION"] = _emscripten_enum_PxVehicleUpdateModeEnum_eACCELERATION();
            Module["eLIMIT_SUSPENSION_EXPANSION_VELOCITY"] = _emscripten_enum_PxVehicleWheelsSimFlagEnum_eLIMIT_SUSPENSION_EXPANSION_VELOCITY();
            Module["DRIVABLE_SURFACE"] = _emscripten_enum_VehicleSurfaceTypeMask_DRIVABLE_SURFACE();
            Module["UNDRIVABLE_SURFACE"] = _emscripten_enum_VehicleSurfaceTypeMask_UNDRIVABLE_SURFACE();
            Module["eTIGHT_BOUNDS"] = _emscripten_enum_PxConvexMeshGeometryFlagEnum_eTIGHT_BOUNDS();
            Module["eSPHERE"] = _emscripten_enum_PxGeometryTypeEnum_eSPHERE();
            Module["ePLANE"] = _emscripten_enum_PxGeometryTypeEnum_ePLANE();
            Module["eCAPSULE"] = _emscripten_enum_PxGeometryTypeEnum_eCAPSULE();
            Module["eBOX"] = _emscripten_enum_PxGeometryTypeEnum_eBOX();
            Module["eCONVEXMESH"] = _emscripten_enum_PxGeometryTypeEnum_eCONVEXMESH();
            Module["eTRIANGLEMESH"] = _emscripten_enum_PxGeometryTypeEnum_eTRIANGLEMESH();
            Module["eHEIGHTFIELD"] = _emscripten_enum_PxGeometryTypeEnum_eHEIGHTFIELD();
            Module["eNO_BOUNDARY_EDGES"] = _emscripten_enum_PxHeightFieldFlagEnum_eNO_BOUNDARY_EDGES();
            Module["eS16_TM"] = _emscripten_enum_PxHeightFieldFormatEnum_eS16_TM();
            Module["eFLIPNORMALS"] = _emscripten_enum_PxMeshFlagEnum_eFLIPNORMALS();
            Module["e16_BIT_INDICES"] = _emscripten_enum_PxMeshFlagEnum_e16_BIT_INDICES();
            Module["eDOUBLE_SIDED"] = _emscripten_enum_PxMeshGeometryFlagEnum_eDOUBLE_SIDED();
            Module["e16_BIT_INDICES"] = _emscripten_enum_PxTriangleMeshFlagEnum_e16_BIT_INDICES();
            Module["eADJACENCY_INFO"] = _emscripten_enum_PxTriangleMeshFlagEnum_eADJACENCY_INFO();
            Module["e16_BIT_INDICES"] = _emscripten_enum_PxConvexFlagEnum_e16_BIT_INDICES();
            Module["eCOMPUTE_CONVEX"] = _emscripten_enum_PxConvexFlagEnum_eCOMPUTE_CONVEX();
            Module["eCHECK_ZERO_AREA_TRIANGLES"] = _emscripten_enum_PxConvexFlagEnum_eCHECK_ZERO_AREA_TRIANGLES();
            Module["eQUANTIZE_INPUT"] = _emscripten_enum_PxConvexFlagEnum_eQUANTIZE_INPUT();
            Module["eDISABLE_MESH_VALIDATION"] = _emscripten_enum_PxConvexFlagEnum_eDISABLE_MESH_VALIDATION();
            Module["ePLANE_SHIFTING"] = _emscripten_enum_PxConvexFlagEnum_ePLANE_SHIFTING();
            Module["eFAST_INERTIA_COMPUTATION"] = _emscripten_enum_PxConvexFlagEnum_eFAST_INERTIA_COMPUTATION();
            Module["eGPU_COMPATIBLE"] = _emscripten_enum_PxConvexFlagEnum_eGPU_COMPATIBLE();
            Module["eSHIFT_VERTICES"] = _emscripten_enum_PxConvexFlagEnum_eSHIFT_VERTICES();
            Module["eQUICKHULL"] = _emscripten_enum_PxConvexMeshCookingTypeEnum_eQUICKHULL();
            Module["eSIM_PERFORMANCE"] = _emscripten_enum_PxMeshCookingHintEnum_eSIM_PERFORMANCE();
            Module["eCOOKING_PERFORMANCE"] = _emscripten_enum_PxMeshCookingHintEnum_eCOOKING_PERFORMANCE();
            Module["eWELD_VERTICES"] = _emscripten_enum_PxMeshPreprocessingFlagEnum_eWELD_VERTICES();
            Module["eDISABLE_CLEAN_MESH"] = _emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_CLEAN_MESH();
            Module["eDISABLE_ACTIVE_EDGES_PRECOMPUTE"] = _emscripten_enum_PxMeshPreprocessingFlagEnum_eDISABLE_ACTIVE_EDGES_PRECOMPUTE();
            Module["eFORCE_32BIT_INDICES"] = _emscripten_enum_PxMeshPreprocessingFlagEnum_eFORCE_32BIT_INDICES();
            Module["eBVH33"] = _emscripten_enum_PxMeshMidPhaseEnum_eBVH33();
            Module["eBVH34"] = _emscripten_enum_PxMeshMidPhaseEnum_eBVH34();
            Module["eOWNS_MEMORY"] = _emscripten_enum_PxBaseFlagEnum_eOWNS_MEMORY();
            Module["eIS_RELEASABLE"] = _emscripten_enum_PxBaseFlagEnum_eIS_RELEASABLE();
            Module["T_GPU"] = _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_GPU();
            Module["T_PINNED_HOST"] = _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_PINNED_HOST();
            Module["T_WRITE_COMBINED"] = _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_WRITE_COMBINED();
            Module["T_HOST"] = _emscripten_enum_PxCudaBufferMemorySpaceEnum_T_HOST();
            Module["NO_INTEROP"] = _emscripten_enum_PxCudaInteropModeEnum_NO_INTEROP();
            Module["D3D10_INTEROP"] = _emscripten_enum_PxCudaInteropModeEnum_D3D10_INTEROP();
            Module["D3D11_INTEROP"] = _emscripten_enum_PxCudaInteropModeEnum_D3D11_INTEROP();
            Module["OGL_INTEROP"] = _emscripten_enum_PxCudaInteropModeEnum_OGL_INTEROP();
            Module["eNO_ERROR"] = _emscripten_enum_PxErrorCodeEnum_eNO_ERROR();
            Module["eDEBUG_INFO"] = _emscripten_enum_PxErrorCodeEnum_eDEBUG_INFO();
            Module["eDEBUG_WARNING"] = _emscripten_enum_PxErrorCodeEnum_eDEBUG_WARNING();
            Module["eINVALID_PARAMETER"] = _emscripten_enum_PxErrorCodeEnum_eINVALID_PARAMETER();
            Module["eINVALID_OPERATION"] = _emscripten_enum_PxErrorCodeEnum_eINVALID_OPERATION();
            Module["eOUT_OF_MEMORY"] = _emscripten_enum_PxErrorCodeEnum_eOUT_OF_MEMORY();
            Module["eINTERNAL_ERROR"] = _emscripten_enum_PxErrorCodeEnum_eINTERNAL_ERROR();
            Module["eABORT"] = _emscripten_enum_PxErrorCodeEnum_eABORT();
            Module["ePERF_WARNING"] = _emscripten_enum_PxErrorCodeEnum_ePERF_WARNING();
            Module["eMASK_ALL"] = _emscripten_enum_PxErrorCodeEnum_eMASK_ALL();
            Module["PxIdentity"] = _emscripten_enum_PxIDENTITYEnum_PxIdentity();
            Module["eX"] = _emscripten_enum_PxD6AxisEnum_eX();
            Module["eY"] = _emscripten_enum_PxD6AxisEnum_eY();
            Module["eZ"] = _emscripten_enum_PxD6AxisEnum_eZ();
            Module["eTWIST"] = _emscripten_enum_PxD6AxisEnum_eTWIST();
            Module["eSWING1"] = _emscripten_enum_PxD6AxisEnum_eSWING1();
            Module["eSWING2"] = _emscripten_enum_PxD6AxisEnum_eSWING2();
            Module["eCOUNT"] = _emscripten_enum_PxD6AxisEnum_eCOUNT();
            Module["eX"] = _emscripten_enum_PxD6DriveEnum_eX();
            Module["eY"] = _emscripten_enum_PxD6DriveEnum_eY();
            Module["eZ"] = _emscripten_enum_PxD6DriveEnum_eZ();
            Module["eSWING"] = _emscripten_enum_PxD6DriveEnum_eSWING();
            Module["eTWIST"] = _emscripten_enum_PxD6DriveEnum_eTWIST();
            Module["eSLERP"] = _emscripten_enum_PxD6DriveEnum_eSLERP();
            Module["eCOUNT"] = _emscripten_enum_PxD6DriveEnum_eCOUNT();
            Module["eACCELERATION"] = _emscripten_enum_PxD6JointDriveFlagEnum_eACCELERATION();
            Module["eLOCKED"] = _emscripten_enum_PxD6MotionEnum_eLOCKED();
            Module["eLIMITED"] = _emscripten_enum_PxD6MotionEnum_eLIMITED();
            Module["eFREE"] = _emscripten_enum_PxD6MotionEnum_eFREE();
            Module["eMAX_DISTANCE_ENABLED"] = _emscripten_enum_PxDistanceJointFlagEnum_eMAX_DISTANCE_ENABLED();
            Module["eMIN_DISTANCE_ENABLED"] = _emscripten_enum_PxDistanceJointFlagEnum_eMIN_DISTANCE_ENABLED();
            Module["eSPRING_ENABLED"] = _emscripten_enum_PxDistanceJointFlagEnum_eSPRING_ENABLED();
            Module["eACTOR0"] = _emscripten_enum_PxJointActorIndexEnum_eACTOR0();
            Module["eACTOR1"] = _emscripten_enum_PxJointActorIndexEnum_eACTOR1();
            Module["COUNT"] = _emscripten_enum_PxJointActorIndexEnum_COUNT();
            Module["eLIMIT_ENABLED"] = _emscripten_enum_PxPrismaticJointFlagEnum_eLIMIT_ENABLED();
            Module["eLIMIT_ENABLED"] = _emscripten_enum_PxRevoluteJointFlagEnum_eLIMIT_ENABLED();
            Module["eDRIVE_ENABLED"] = _emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_ENABLED();
            Module["eDRIVE_FREESPIN"] = _emscripten_enum_PxRevoluteJointFlagEnum_eDRIVE_FREESPIN();
            Module["eLIMIT_ENABLED"] = _emscripten_enum_PxSphericalJointFlagEnum_eLIMIT_ENABLED();
            Module["eEASY"] = _emscripten_enum_PxCapsuleClimbingModeEnum_eEASY();
            Module["eCONSTRAINED"] = _emscripten_enum_PxCapsuleClimbingModeEnum_eCONSTRAINED();
            Module["eCOLLISION_SIDES"] = _emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_SIDES();
            Module["eCOLLISION_UP"] = _emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_UP();
            Module["eCOLLISION_DOWN"] = _emscripten_enum_PxControllerCollisionFlagEnum_eCOLLISION_DOWN();
            Module["ePREVENT_CLIMBING"] = _emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING();
            Module["ePREVENT_CLIMBING_AND_FORCE_SLIDING"] = _emscripten_enum_PxControllerNonWalkableModeEnum_ePREVENT_CLIMBING_AND_FORCE_SLIDING();
            Module["eBOX"] = _emscripten_enum_PxControllerShapeTypeEnum_eBOX();
            Module["eCAPSULE"] = _emscripten_enum_PxControllerShapeTypeEnum_eCAPSULE();
            Module["eDEBUG"] = _emscripten_enum_PxPvdInstrumentationFlagEnum_eDEBUG();
            Module["ePROFILE"] = _emscripten_enum_PxPvdInstrumentationFlagEnum_ePROFILE();
            Module["eMEMORY"] = _emscripten_enum_PxPvdInstrumentationFlagEnum_eMEMORY();
            Module["eALL"] = _emscripten_enum_PxPvdInstrumentationFlagEnum_eALL();
          }
          if (runtimeInitialized)
            setupEnums();
          else
            addOnPreMain(setupEnums);
        })();
        return PhysX9.ready;
      };
    }();
    if (typeof exports === "object" && typeof module === "object")
      module.exports = PhysX9;
    else if (typeof define === "function" && define["amd"])
      define([], function() {
        return PhysX9;
      });
    else if (typeof exports === "object")
      exports["PhysX"] = PhysX9;
  }
});

// node_modules/three/build/three.module.js
var three_module_exports = {};
__export(three_module_exports, {
  ACESFilmicToneMapping: () => ACESFilmicToneMapping,
  AddEquation: () => AddEquation,
  AddOperation: () => AddOperation,
  AdditiveAnimationBlendMode: () => AdditiveAnimationBlendMode,
  AdditiveBlending: () => AdditiveBlending,
  AlphaFormat: () => AlphaFormat,
  AlwaysDepth: () => AlwaysDepth,
  AlwaysStencilFunc: () => AlwaysStencilFunc,
  AmbientLight: () => AmbientLight,
  AmbientLightProbe: () => AmbientLightProbe,
  AnimationClip: () => AnimationClip,
  AnimationLoader: () => AnimationLoader,
  AnimationMixer: () => AnimationMixer,
  AnimationObjectGroup: () => AnimationObjectGroup,
  AnimationUtils: () => AnimationUtils,
  ArcCurve: () => ArcCurve,
  ArrayCamera: () => ArrayCamera,
  ArrowHelper: () => ArrowHelper,
  Audio: () => Audio,
  AudioAnalyser: () => AudioAnalyser,
  AudioContext: () => AudioContext,
  AudioListener: () => AudioListener,
  AudioLoader: () => AudioLoader,
  AxesHelper: () => AxesHelper,
  AxisHelper: () => AxisHelper,
  BackSide: () => BackSide,
  BasicDepthPacking: () => BasicDepthPacking,
  BasicShadowMap: () => BasicShadowMap,
  BinaryTextureLoader: () => BinaryTextureLoader,
  Bone: () => Bone,
  BooleanKeyframeTrack: () => BooleanKeyframeTrack,
  BoundingBoxHelper: () => BoundingBoxHelper,
  Box2: () => Box2,
  Box3: () => Box3,
  Box3Helper: () => Box3Helper,
  BoxBufferGeometry: () => BoxBufferGeometry,
  BoxGeometry: () => BoxGeometry,
  BoxHelper: () => BoxHelper,
  BufferAttribute: () => BufferAttribute,
  BufferGeometry: () => BufferGeometry,
  BufferGeometryLoader: () => BufferGeometryLoader,
  ByteType: () => ByteType,
  Cache: () => Cache,
  Camera: () => Camera,
  CameraHelper: () => CameraHelper,
  CanvasRenderer: () => CanvasRenderer,
  CanvasTexture: () => CanvasTexture,
  CatmullRomCurve3: () => CatmullRomCurve3,
  CineonToneMapping: () => CineonToneMapping,
  CircleBufferGeometry: () => CircleBufferGeometry,
  CircleGeometry: () => CircleGeometry,
  ClampToEdgeWrapping: () => ClampToEdgeWrapping,
  Clock: () => Clock,
  ClosedSplineCurve3: () => ClosedSplineCurve3,
  Color: () => Color,
  ColorKeyframeTrack: () => ColorKeyframeTrack,
  CompressedTexture: () => CompressedTexture,
  CompressedTextureLoader: () => CompressedTextureLoader,
  ConeBufferGeometry: () => ConeBufferGeometry,
  ConeGeometry: () => ConeGeometry,
  CubeCamera: () => CubeCamera,
  CubeGeometry: () => BoxGeometry,
  CubeReflectionMapping: () => CubeReflectionMapping,
  CubeRefractionMapping: () => CubeRefractionMapping,
  CubeTexture: () => CubeTexture,
  CubeTextureLoader: () => CubeTextureLoader,
  CubeUVReflectionMapping: () => CubeUVReflectionMapping,
  CubeUVRefractionMapping: () => CubeUVRefractionMapping,
  CubicBezierCurve: () => CubicBezierCurve,
  CubicBezierCurve3: () => CubicBezierCurve3,
  CubicInterpolant: () => CubicInterpolant,
  CullFaceBack: () => CullFaceBack,
  CullFaceFront: () => CullFaceFront,
  CullFaceFrontBack: () => CullFaceFrontBack,
  CullFaceNone: () => CullFaceNone,
  Curve: () => Curve,
  CurvePath: () => CurvePath,
  CustomBlending: () => CustomBlending,
  CustomToneMapping: () => CustomToneMapping,
  CylinderBufferGeometry: () => CylinderBufferGeometry,
  CylinderGeometry: () => CylinderGeometry,
  Cylindrical: () => Cylindrical,
  DataTexture: () => DataTexture,
  DataTexture2DArray: () => DataTexture2DArray,
  DataTexture3D: () => DataTexture3D,
  DataTextureLoader: () => DataTextureLoader,
  DataUtils: () => DataUtils,
  DecrementStencilOp: () => DecrementStencilOp,
  DecrementWrapStencilOp: () => DecrementWrapStencilOp,
  DefaultLoadingManager: () => DefaultLoadingManager,
  DepthFormat: () => DepthFormat,
  DepthStencilFormat: () => DepthStencilFormat,
  DepthTexture: () => DepthTexture,
  DirectionalLight: () => DirectionalLight,
  DirectionalLightHelper: () => DirectionalLightHelper,
  DiscreteInterpolant: () => DiscreteInterpolant,
  DodecahedronBufferGeometry: () => DodecahedronBufferGeometry,
  DodecahedronGeometry: () => DodecahedronGeometry,
  DoubleSide: () => DoubleSide,
  DstAlphaFactor: () => DstAlphaFactor,
  DstColorFactor: () => DstColorFactor,
  DynamicBufferAttribute: () => DynamicBufferAttribute,
  DynamicCopyUsage: () => DynamicCopyUsage,
  DynamicDrawUsage: () => DynamicDrawUsage,
  DynamicReadUsage: () => DynamicReadUsage,
  EdgesGeometry: () => EdgesGeometry,
  EdgesHelper: () => EdgesHelper,
  EllipseCurve: () => EllipseCurve,
  EqualDepth: () => EqualDepth,
  EqualStencilFunc: () => EqualStencilFunc,
  EquirectangularReflectionMapping: () => EquirectangularReflectionMapping,
  EquirectangularRefractionMapping: () => EquirectangularRefractionMapping,
  Euler: () => Euler,
  EventDispatcher: () => EventDispatcher,
  ExtrudeBufferGeometry: () => ExtrudeBufferGeometry,
  ExtrudeGeometry: () => ExtrudeGeometry,
  Face3: () => Face3,
  Face4: () => Face4,
  FaceColors: () => FaceColors,
  FileLoader: () => FileLoader,
  FlatShading: () => FlatShading,
  Float16BufferAttribute: () => Float16BufferAttribute,
  Float32Attribute: () => Float32Attribute,
  Float32BufferAttribute: () => Float32BufferAttribute,
  Float64Attribute: () => Float64Attribute,
  Float64BufferAttribute: () => Float64BufferAttribute,
  FloatType: () => FloatType,
  Fog: () => Fog,
  FogExp2: () => FogExp2,
  Font: () => Font,
  FontLoader: () => FontLoader,
  FrontSide: () => FrontSide,
  Frustum: () => Frustum,
  GLBufferAttribute: () => GLBufferAttribute,
  GLSL1: () => GLSL1,
  GLSL3: () => GLSL3,
  GammaEncoding: () => GammaEncoding,
  Geometry: () => Geometry,
  GeometryUtils: () => GeometryUtils,
  GreaterDepth: () => GreaterDepth,
  GreaterEqualDepth: () => GreaterEqualDepth,
  GreaterEqualStencilFunc: () => GreaterEqualStencilFunc,
  GreaterStencilFunc: () => GreaterStencilFunc,
  GridHelper: () => GridHelper,
  Group: () => Group,
  HalfFloatType: () => HalfFloatType,
  HemisphereLight: () => HemisphereLight,
  HemisphereLightHelper: () => HemisphereLightHelper,
  HemisphereLightProbe: () => HemisphereLightProbe,
  IcosahedronBufferGeometry: () => IcosahedronBufferGeometry,
  IcosahedronGeometry: () => IcosahedronGeometry,
  ImageBitmapLoader: () => ImageBitmapLoader,
  ImageLoader: () => ImageLoader,
  ImageUtils: () => ImageUtils,
  ImmediateRenderObject: () => ImmediateRenderObject,
  IncrementStencilOp: () => IncrementStencilOp,
  IncrementWrapStencilOp: () => IncrementWrapStencilOp,
  InstancedBufferAttribute: () => InstancedBufferAttribute,
  InstancedBufferGeometry: () => InstancedBufferGeometry,
  InstancedInterleavedBuffer: () => InstancedInterleavedBuffer,
  InstancedMesh: () => InstancedMesh,
  Int16Attribute: () => Int16Attribute,
  Int16BufferAttribute: () => Int16BufferAttribute,
  Int32Attribute: () => Int32Attribute,
  Int32BufferAttribute: () => Int32BufferAttribute,
  Int8Attribute: () => Int8Attribute,
  Int8BufferAttribute: () => Int8BufferAttribute,
  IntType: () => IntType,
  InterleavedBuffer: () => InterleavedBuffer,
  InterleavedBufferAttribute: () => InterleavedBufferAttribute,
  Interpolant: () => Interpolant,
  InterpolateDiscrete: () => InterpolateDiscrete,
  InterpolateLinear: () => InterpolateLinear,
  InterpolateSmooth: () => InterpolateSmooth,
  InvertStencilOp: () => InvertStencilOp,
  JSONLoader: () => JSONLoader,
  KeepStencilOp: () => KeepStencilOp,
  KeyframeTrack: () => KeyframeTrack,
  LOD: () => LOD,
  LatheBufferGeometry: () => LatheBufferGeometry,
  LatheGeometry: () => LatheGeometry,
  Layers: () => Layers,
  LensFlare: () => LensFlare,
  LessDepth: () => LessDepth,
  LessEqualDepth: () => LessEqualDepth,
  LessEqualStencilFunc: () => LessEqualStencilFunc,
  LessStencilFunc: () => LessStencilFunc,
  Light: () => Light,
  LightProbe: () => LightProbe,
  Line: () => Line,
  Line3: () => Line3,
  LineBasicMaterial: () => LineBasicMaterial,
  LineCurve: () => LineCurve,
  LineCurve3: () => LineCurve3,
  LineDashedMaterial: () => LineDashedMaterial,
  LineLoop: () => LineLoop,
  LinePieces: () => LinePieces,
  LineSegments: () => LineSegments,
  LineStrip: () => LineStrip,
  LinearEncoding: () => LinearEncoding,
  LinearFilter: () => LinearFilter,
  LinearInterpolant: () => LinearInterpolant,
  LinearMipMapLinearFilter: () => LinearMipMapLinearFilter,
  LinearMipMapNearestFilter: () => LinearMipMapNearestFilter,
  LinearMipmapLinearFilter: () => LinearMipmapLinearFilter,
  LinearMipmapNearestFilter: () => LinearMipmapNearestFilter,
  LinearToneMapping: () => LinearToneMapping,
  Loader: () => Loader,
  LoaderUtils: () => LoaderUtils,
  LoadingManager: () => LoadingManager,
  LogLuvEncoding: () => LogLuvEncoding,
  LoopOnce: () => LoopOnce,
  LoopPingPong: () => LoopPingPong,
  LoopRepeat: () => LoopRepeat,
  LuminanceAlphaFormat: () => LuminanceAlphaFormat,
  LuminanceFormat: () => LuminanceFormat,
  MOUSE: () => MOUSE,
  Material: () => Material,
  MaterialLoader: () => MaterialLoader,
  Math: () => MathUtils,
  MathUtils: () => MathUtils,
  Matrix3: () => Matrix3,
  Matrix4: () => Matrix4,
  MaxEquation: () => MaxEquation,
  Mesh: () => Mesh,
  MeshBasicMaterial: () => MeshBasicMaterial,
  MeshDepthMaterial: () => MeshDepthMaterial,
  MeshDistanceMaterial: () => MeshDistanceMaterial,
  MeshFaceMaterial: () => MeshFaceMaterial,
  MeshLambertMaterial: () => MeshLambertMaterial,
  MeshMatcapMaterial: () => MeshMatcapMaterial,
  MeshNormalMaterial: () => MeshNormalMaterial,
  MeshPhongMaterial: () => MeshPhongMaterial,
  MeshPhysicalMaterial: () => MeshPhysicalMaterial,
  MeshStandardMaterial: () => MeshStandardMaterial,
  MeshToonMaterial: () => MeshToonMaterial,
  MinEquation: () => MinEquation,
  MirroredRepeatWrapping: () => MirroredRepeatWrapping,
  MixOperation: () => MixOperation,
  MultiMaterial: () => MultiMaterial,
  MultiplyBlending: () => MultiplyBlending,
  MultiplyOperation: () => MultiplyOperation,
  NearestFilter: () => NearestFilter,
  NearestMipMapLinearFilter: () => NearestMipMapLinearFilter,
  NearestMipMapNearestFilter: () => NearestMipMapNearestFilter,
  NearestMipmapLinearFilter: () => NearestMipmapLinearFilter,
  NearestMipmapNearestFilter: () => NearestMipmapNearestFilter,
  NeverDepth: () => NeverDepth,
  NeverStencilFunc: () => NeverStencilFunc,
  NoBlending: () => NoBlending,
  NoColors: () => NoColors,
  NoToneMapping: () => NoToneMapping,
  NormalAnimationBlendMode: () => NormalAnimationBlendMode,
  NormalBlending: () => NormalBlending,
  NotEqualDepth: () => NotEqualDepth,
  NotEqualStencilFunc: () => NotEqualStencilFunc,
  NumberKeyframeTrack: () => NumberKeyframeTrack,
  Object3D: () => Object3D,
  ObjectLoader: () => ObjectLoader,
  ObjectSpaceNormalMap: () => ObjectSpaceNormalMap,
  OctahedronBufferGeometry: () => OctahedronBufferGeometry,
  OctahedronGeometry: () => OctahedronGeometry,
  OneFactor: () => OneFactor,
  OneMinusDstAlphaFactor: () => OneMinusDstAlphaFactor,
  OneMinusDstColorFactor: () => OneMinusDstColorFactor,
  OneMinusSrcAlphaFactor: () => OneMinusSrcAlphaFactor,
  OneMinusSrcColorFactor: () => OneMinusSrcColorFactor,
  OrthographicCamera: () => OrthographicCamera,
  PCFShadowMap: () => PCFShadowMap,
  PCFSoftShadowMap: () => PCFSoftShadowMap,
  PMREMGenerator: () => PMREMGenerator,
  ParametricBufferGeometry: () => ParametricBufferGeometry,
  ParametricGeometry: () => ParametricGeometry,
  Particle: () => Particle,
  ParticleBasicMaterial: () => ParticleBasicMaterial,
  ParticleSystem: () => ParticleSystem,
  ParticleSystemMaterial: () => ParticleSystemMaterial,
  Path: () => Path,
  PerspectiveCamera: () => PerspectiveCamera,
  Plane: () => Plane,
  PlaneBufferGeometry: () => PlaneBufferGeometry,
  PlaneGeometry: () => PlaneGeometry,
  PlaneHelper: () => PlaneHelper,
  PointCloud: () => PointCloud,
  PointCloudMaterial: () => PointCloudMaterial,
  PointLight: () => PointLight,
  PointLightHelper: () => PointLightHelper,
  Points: () => Points,
  PointsMaterial: () => PointsMaterial,
  PolarGridHelper: () => PolarGridHelper,
  PolyhedronBufferGeometry: () => PolyhedronBufferGeometry,
  PolyhedronGeometry: () => PolyhedronGeometry,
  PositionalAudio: () => PositionalAudio,
  PropertyBinding: () => PropertyBinding,
  PropertyMixer: () => PropertyMixer,
  QuadraticBezierCurve: () => QuadraticBezierCurve,
  QuadraticBezierCurve3: () => QuadraticBezierCurve3,
  Quaternion: () => Quaternion,
  QuaternionKeyframeTrack: () => QuaternionKeyframeTrack,
  QuaternionLinearInterpolant: () => QuaternionLinearInterpolant,
  REVISION: () => REVISION,
  RGBADepthPacking: () => RGBADepthPacking,
  RGBAFormat: () => RGBAFormat,
  RGBAIntegerFormat: () => RGBAIntegerFormat,
  RGBA_ASTC_10x10_Format: () => RGBA_ASTC_10x10_Format,
  RGBA_ASTC_10x5_Format: () => RGBA_ASTC_10x5_Format,
  RGBA_ASTC_10x6_Format: () => RGBA_ASTC_10x6_Format,
  RGBA_ASTC_10x8_Format: () => RGBA_ASTC_10x8_Format,
  RGBA_ASTC_12x10_Format: () => RGBA_ASTC_12x10_Format,
  RGBA_ASTC_12x12_Format: () => RGBA_ASTC_12x12_Format,
  RGBA_ASTC_4x4_Format: () => RGBA_ASTC_4x4_Format,
  RGBA_ASTC_5x4_Format: () => RGBA_ASTC_5x4_Format,
  RGBA_ASTC_5x5_Format: () => RGBA_ASTC_5x5_Format,
  RGBA_ASTC_6x5_Format: () => RGBA_ASTC_6x5_Format,
  RGBA_ASTC_6x6_Format: () => RGBA_ASTC_6x6_Format,
  RGBA_ASTC_8x5_Format: () => RGBA_ASTC_8x5_Format,
  RGBA_ASTC_8x6_Format: () => RGBA_ASTC_8x6_Format,
  RGBA_ASTC_8x8_Format: () => RGBA_ASTC_8x8_Format,
  RGBA_BPTC_Format: () => RGBA_BPTC_Format,
  RGBA_ETC2_EAC_Format: () => RGBA_ETC2_EAC_Format,
  RGBA_PVRTC_2BPPV1_Format: () => RGBA_PVRTC_2BPPV1_Format,
  RGBA_PVRTC_4BPPV1_Format: () => RGBA_PVRTC_4BPPV1_Format,
  RGBA_S3TC_DXT1_Format: () => RGBA_S3TC_DXT1_Format,
  RGBA_S3TC_DXT3_Format: () => RGBA_S3TC_DXT3_Format,
  RGBA_S3TC_DXT5_Format: () => RGBA_S3TC_DXT5_Format,
  RGBDEncoding: () => RGBDEncoding,
  RGBEEncoding: () => RGBEEncoding,
  RGBEFormat: () => RGBEFormat,
  RGBFormat: () => RGBFormat,
  RGBIntegerFormat: () => RGBIntegerFormat,
  RGBM16Encoding: () => RGBM16Encoding,
  RGBM7Encoding: () => RGBM7Encoding,
  RGB_ETC1_Format: () => RGB_ETC1_Format,
  RGB_ETC2_Format: () => RGB_ETC2_Format,
  RGB_PVRTC_2BPPV1_Format: () => RGB_PVRTC_2BPPV1_Format,
  RGB_PVRTC_4BPPV1_Format: () => RGB_PVRTC_4BPPV1_Format,
  RGB_S3TC_DXT1_Format: () => RGB_S3TC_DXT1_Format,
  RGFormat: () => RGFormat,
  RGIntegerFormat: () => RGIntegerFormat,
  RawShaderMaterial: () => RawShaderMaterial,
  Ray: () => Ray,
  Raycaster: () => Raycaster,
  RectAreaLight: () => RectAreaLight,
  RedFormat: () => RedFormat,
  RedIntegerFormat: () => RedIntegerFormat,
  ReinhardToneMapping: () => ReinhardToneMapping,
  RepeatWrapping: () => RepeatWrapping,
  ReplaceStencilOp: () => ReplaceStencilOp,
  ReverseSubtractEquation: () => ReverseSubtractEquation,
  RingBufferGeometry: () => RingBufferGeometry,
  RingGeometry: () => RingGeometry,
  SRGB8_ALPHA8_ASTC_10x10_Format: () => SRGB8_ALPHA8_ASTC_10x10_Format,
  SRGB8_ALPHA8_ASTC_10x5_Format: () => SRGB8_ALPHA8_ASTC_10x5_Format,
  SRGB8_ALPHA8_ASTC_10x6_Format: () => SRGB8_ALPHA8_ASTC_10x6_Format,
  SRGB8_ALPHA8_ASTC_10x8_Format: () => SRGB8_ALPHA8_ASTC_10x8_Format,
  SRGB8_ALPHA8_ASTC_12x10_Format: () => SRGB8_ALPHA8_ASTC_12x10_Format,
  SRGB8_ALPHA8_ASTC_12x12_Format: () => SRGB8_ALPHA8_ASTC_12x12_Format,
  SRGB8_ALPHA8_ASTC_4x4_Format: () => SRGB8_ALPHA8_ASTC_4x4_Format,
  SRGB8_ALPHA8_ASTC_5x4_Format: () => SRGB8_ALPHA8_ASTC_5x4_Format,
  SRGB8_ALPHA8_ASTC_5x5_Format: () => SRGB8_ALPHA8_ASTC_5x5_Format,
  SRGB8_ALPHA8_ASTC_6x5_Format: () => SRGB8_ALPHA8_ASTC_6x5_Format,
  SRGB8_ALPHA8_ASTC_6x6_Format: () => SRGB8_ALPHA8_ASTC_6x6_Format,
  SRGB8_ALPHA8_ASTC_8x5_Format: () => SRGB8_ALPHA8_ASTC_8x5_Format,
  SRGB8_ALPHA8_ASTC_8x6_Format: () => SRGB8_ALPHA8_ASTC_8x6_Format,
  SRGB8_ALPHA8_ASTC_8x8_Format: () => SRGB8_ALPHA8_ASTC_8x8_Format,
  Scene: () => Scene,
  SceneUtils: () => SceneUtils,
  ShaderChunk: () => ShaderChunk,
  ShaderLib: () => ShaderLib,
  ShaderMaterial: () => ShaderMaterial,
  ShadowMaterial: () => ShadowMaterial,
  Shape: () => Shape,
  ShapeBufferGeometry: () => ShapeBufferGeometry,
  ShapeGeometry: () => ShapeGeometry,
  ShapePath: () => ShapePath,
  ShapeUtils: () => ShapeUtils,
  ShortType: () => ShortType,
  Skeleton: () => Skeleton,
  SkeletonHelper: () => SkeletonHelper,
  SkinnedMesh: () => SkinnedMesh,
  SmoothShading: () => SmoothShading,
  Sphere: () => Sphere,
  SphereBufferGeometry: () => SphereBufferGeometry,
  SphereGeometry: () => SphereGeometry,
  Spherical: () => Spherical,
  SphericalHarmonics3: () => SphericalHarmonics3,
  Spline: () => Spline,
  SplineCurve: () => SplineCurve,
  SplineCurve3: () => SplineCurve3,
  SpotLight: () => SpotLight,
  SpotLightHelper: () => SpotLightHelper,
  Sprite: () => Sprite,
  SpriteMaterial: () => SpriteMaterial,
  SrcAlphaFactor: () => SrcAlphaFactor,
  SrcAlphaSaturateFactor: () => SrcAlphaSaturateFactor,
  SrcColorFactor: () => SrcColorFactor,
  StaticCopyUsage: () => StaticCopyUsage,
  StaticDrawUsage: () => StaticDrawUsage,
  StaticReadUsage: () => StaticReadUsage,
  StereoCamera: () => StereoCamera,
  StreamCopyUsage: () => StreamCopyUsage,
  StreamDrawUsage: () => StreamDrawUsage,
  StreamReadUsage: () => StreamReadUsage,
  StringKeyframeTrack: () => StringKeyframeTrack,
  SubtractEquation: () => SubtractEquation,
  SubtractiveBlending: () => SubtractiveBlending,
  TOUCH: () => TOUCH,
  TangentSpaceNormalMap: () => TangentSpaceNormalMap,
  TetrahedronBufferGeometry: () => TetrahedronBufferGeometry,
  TetrahedronGeometry: () => TetrahedronGeometry,
  TextBufferGeometry: () => TextBufferGeometry,
  TextGeometry: () => TextGeometry,
  Texture: () => Texture,
  TextureLoader: () => TextureLoader,
  TorusBufferGeometry: () => TorusBufferGeometry,
  TorusGeometry: () => TorusGeometry,
  TorusKnotBufferGeometry: () => TorusKnotBufferGeometry,
  TorusKnotGeometry: () => TorusKnotGeometry,
  Triangle: () => Triangle,
  TriangleFanDrawMode: () => TriangleFanDrawMode,
  TriangleStripDrawMode: () => TriangleStripDrawMode,
  TrianglesDrawMode: () => TrianglesDrawMode,
  TubeBufferGeometry: () => TubeBufferGeometry,
  TubeGeometry: () => TubeGeometry,
  UVMapping: () => UVMapping,
  Uint16Attribute: () => Uint16Attribute,
  Uint16BufferAttribute: () => Uint16BufferAttribute,
  Uint32Attribute: () => Uint32Attribute,
  Uint32BufferAttribute: () => Uint32BufferAttribute,
  Uint8Attribute: () => Uint8Attribute,
  Uint8BufferAttribute: () => Uint8BufferAttribute,
  Uint8ClampedAttribute: () => Uint8ClampedAttribute,
  Uint8ClampedBufferAttribute: () => Uint8ClampedBufferAttribute,
  Uniform: () => Uniform,
  UniformsLib: () => UniformsLib,
  UniformsUtils: () => UniformsUtils,
  UnsignedByteType: () => UnsignedByteType,
  UnsignedInt248Type: () => UnsignedInt248Type,
  UnsignedIntType: () => UnsignedIntType,
  UnsignedShort4444Type: () => UnsignedShort4444Type,
  UnsignedShort5551Type: () => UnsignedShort5551Type,
  UnsignedShort565Type: () => UnsignedShort565Type,
  UnsignedShortType: () => UnsignedShortType,
  VSMShadowMap: () => VSMShadowMap,
  Vector2: () => Vector2,
  Vector3: () => Vector3,
  Vector4: () => Vector4,
  VectorKeyframeTrack: () => VectorKeyframeTrack,
  Vertex: () => Vertex,
  VertexColors: () => VertexColors,
  VideoTexture: () => VideoTexture,
  WebGL1Renderer: () => WebGL1Renderer,
  WebGLCubeRenderTarget: () => WebGLCubeRenderTarget,
  WebGLMultisampleRenderTarget: () => WebGLMultisampleRenderTarget,
  WebGLRenderTarget: () => WebGLRenderTarget,
  WebGLRenderTargetCube: () => WebGLRenderTargetCube,
  WebGLRenderer: () => WebGLRenderer,
  WebGLUtils: () => WebGLUtils,
  WireframeGeometry: () => WireframeGeometry,
  WireframeHelper: () => WireframeHelper,
  WrapAroundEnding: () => WrapAroundEnding,
  XHRLoader: () => XHRLoader,
  ZeroCurvatureEnding: () => ZeroCurvatureEnding,
  ZeroFactor: () => ZeroFactor,
  ZeroSlopeEnding: () => ZeroSlopeEnding,
  ZeroStencilOp: () => ZeroStencilOp,
  sRGBEncoding: () => sRGBEncoding
});
var REVISION = "123";
var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var CullFaceFrontBack = 3;
var BasicShadowMap = 0;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var VSMShadowMap = 3;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var FlatShading = 1;
var SmoothShading = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var CineonToneMapping = 3;
var ACESFilmicToneMapping = 4;
var CustomToneMapping = 5;
var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var CubeUVReflectionMapping = 306;
var CubeUVRefractionMapping = 307;
var RepeatWrapping = 1e3;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipmapNearestFilter = 1004;
var NearestMipMapNearestFilter = 1004;
var NearestMipmapLinearFilter = 1005;
var NearestMipMapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipmapNearestFilter = 1007;
var LinearMipMapNearestFilter = 1007;
var LinearMipmapLinearFilter = 1008;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedShort565Type = 1019;
var UnsignedInt248Type = 1020;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var RGBEFormat = RGBAFormat;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RedFormat = 1028;
var RedIntegerFormat = 1029;
var RGFormat = 1030;
var RGIntegerFormat = 1031;
var RGBIntegerFormat = 1032;
var RGBAIntegerFormat = 1033;
var RGB_S3TC_DXT1_Format = 33776;
var RGBA_S3TC_DXT1_Format = 33777;
var RGBA_S3TC_DXT3_Format = 33778;
var RGBA_S3TC_DXT5_Format = 33779;
var RGB_PVRTC_4BPPV1_Format = 35840;
var RGB_PVRTC_2BPPV1_Format = 35841;
var RGBA_PVRTC_4BPPV1_Format = 35842;
var RGBA_PVRTC_2BPPV1_Format = 35843;
var RGB_ETC1_Format = 36196;
var RGB_ETC2_Format = 37492;
var RGBA_ETC2_EAC_Format = 37496;
var RGBA_ASTC_4x4_Format = 37808;
var RGBA_ASTC_5x4_Format = 37809;
var RGBA_ASTC_5x5_Format = 37810;
var RGBA_ASTC_6x5_Format = 37811;
var RGBA_ASTC_6x6_Format = 37812;
var RGBA_ASTC_8x5_Format = 37813;
var RGBA_ASTC_8x6_Format = 37814;
var RGBA_ASTC_8x8_Format = 37815;
var RGBA_ASTC_10x5_Format = 37816;
var RGBA_ASTC_10x6_Format = 37817;
var RGBA_ASTC_10x8_Format = 37818;
var RGBA_ASTC_10x10_Format = 37819;
var RGBA_ASTC_12x10_Format = 37820;
var RGBA_ASTC_12x12_Format = 37821;
var RGBA_BPTC_Format = 36492;
var SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
var SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
var SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
var SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
var SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
var SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
var SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
var SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
var SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
var SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
var SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
var SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
var SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
var SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
var LoopOnce = 2200;
var LoopRepeat = 2201;
var LoopPingPong = 2202;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var NormalAnimationBlendMode = 2500;
var AdditiveAnimationBlendMode = 2501;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var LinearEncoding = 3e3;
var sRGBEncoding = 3001;
var GammaEncoding = 3007;
var RGBEEncoding = 3002;
var LogLuvEncoding = 3003;
var RGBM7Encoding = 3004;
var RGBM16Encoding = 3005;
var RGBDEncoding = 3006;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;
var TangentSpaceNormalMap = 0;
var ObjectSpaceNormalMap = 1;
var ZeroStencilOp = 0;
var KeepStencilOp = 7680;
var ReplaceStencilOp = 7681;
var IncrementStencilOp = 7682;
var DecrementStencilOp = 7683;
var IncrementWrapStencilOp = 34055;
var DecrementWrapStencilOp = 34056;
var InvertStencilOp = 5386;
var NeverStencilFunc = 512;
var LessStencilFunc = 513;
var EqualStencilFunc = 514;
var LessEqualStencilFunc = 515;
var GreaterStencilFunc = 516;
var NotEqualStencilFunc = 517;
var GreaterEqualStencilFunc = 518;
var AlwaysStencilFunc = 519;
var StaticDrawUsage = 35044;
var DynamicDrawUsage = 35048;
var StreamDrawUsage = 35040;
var StaticReadUsage = 35045;
var DynamicReadUsage = 35049;
var StreamReadUsage = 35041;
var StaticCopyUsage = 35046;
var DynamicCopyUsage = 35050;
var StreamCopyUsage = 35042;
var GLSL1 = "100";
var GLSL3 = "300 es";
function EventDispatcher() {
}
Object.assign(EventDispatcher.prototype, {
  addEventListener: function(type, listener) {
    if (this._listeners === void 0)
      this._listeners = {};
    const listeners = this._listeners;
    if (listeners[type] === void 0) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  },
  hasEventListener: function(type, listener) {
    if (this._listeners === void 0)
      return false;
    const listeners = this._listeners;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  },
  removeEventListener: function(type, listener) {
    if (this._listeners === void 0)
      return;
    const listeners = this._listeners;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index = listenerArray.indexOf(listener);
      if (index !== -1) {
        listenerArray.splice(index, 1);
      }
    }
  },
  dispatchEvent: function(event) {
    if (this._listeners === void 0)
      return;
    const listeners = this._listeners;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      event.target = this;
      const array = listenerArray.slice(0);
      for (let i = 0, l = array.length; i < l; i++) {
        array[i].call(this, event);
      }
    }
  }
});
var _lut = [];
for (let i = 0; i < 256; i++) {
  _lut[i] = (i < 16 ? "0" : "") + i.toString(16);
}
var _seed = 1234567;
var MathUtils = {
  DEG2RAD: Math.PI / 180,
  RAD2DEG: 180 / Math.PI,
  generateUUID: function() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toUpperCase();
  },
  clamp: function(value, min, max) {
    return Math.max(min, Math.min(max, value));
  },
  euclideanModulo: function(n, m) {
    return (n % m + m) % m;
  },
  mapLinear: function(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
  },
  lerp: function(x, y, t) {
    return (1 - t) * x + t * y;
  },
  smoothstep: function(x, min, max) {
    if (x <= min)
      return 0;
    if (x >= max)
      return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  },
  smootherstep: function(x, min, max) {
    if (x <= min)
      return 0;
    if (x >= max)
      return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  },
  randInt: function(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
  },
  randFloat: function(low, high) {
    return low + Math.random() * (high - low);
  },
  randFloatSpread: function(range) {
    return range * (0.5 - Math.random());
  },
  seededRandom: function(s) {
    if (s !== void 0)
      _seed = s % 2147483647;
    _seed = _seed * 16807 % 2147483647;
    return (_seed - 1) / 2147483646;
  },
  degToRad: function(degrees) {
    return degrees * MathUtils.DEG2RAD;
  },
  radToDeg: function(radians) {
    return radians * MathUtils.RAD2DEG;
  },
  isPowerOfTwo: function(value) {
    return (value & value - 1) === 0 && value !== 0;
  },
  ceilPowerOfTwo: function(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  },
  floorPowerOfTwo: function(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  },
  setQuaternionFromProperEuler: function(q, a, b, c, order) {
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch (order) {
      case "XYX":
        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
        break;
      case "YZY":
        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
        break;
      case "ZXZ":
        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
        break;
      case "XZX":
        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
        break;
      case "YXY":
        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
        break;
      case "ZYZ":
        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
  }
};
var Vector2 = class {
  constructor(x = 0, y = 0) {
    Object.defineProperty(this, "isVector2", { value: true });
    this.x = x;
    this.y = y;
  }
  get width() {
    return this.x;
  }
  set width(value) {
    this.x = value;
  }
  get height() {
    return this.y;
  }
  set height(value) {
    this.y = value;
  }
  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    return this;
  }
  add(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
      return this.addVectors(v, w);
    }
    this.x += v.x;
    this.y += v.y;
    return this;
  }
  addScalar(s) {
    this.x += s;
    this.y += s;
    return this;
  }
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    return this;
  }
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    return this;
  }
  sub(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
      return this.subVectors(v, w);
    }
    this.x -= v.x;
    this.y -= v.y;
    return this;
  }
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    return this;
  }
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    return this;
  }
  multiply(v) {
    this.x *= v.x;
    this.y *= v.y;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }
  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  applyMatrix3(m) {
    const x = this.x, y = this.y;
    const e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6];
    this.y = e[1] * x + e[4] * y + e[7];
    return this;
  }
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    return this;
  }
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  dot(v) {
    return this.x * v.x + this.y * v.y;
  }
  cross(v) {
    return this.x * v.y - this.y * v.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    const angle = Math.atan2(-this.y, -this.x) + Math.PI;
    return angle;
  }
  distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  }
  distanceToSquared(v) {
    const dx = this.x - v.x, dy = this.y - v.y;
    return dx * dx + dy * dy;
  }
  manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    return this;
  }
  equals(v) {
    return v.x === this.x && v.y === this.y;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    return array;
  }
  fromBufferAttribute(attribute, index, offset) {
    if (offset !== void 0) {
      console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
    }
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    return this;
  }
  rotateAround(center, angle) {
    const c = Math.cos(angle), s = Math.sin(angle);
    const x = this.x - center.x;
    const y = this.y - center.y;
    this.x = x * c - y * s + center.x;
    this.y = x * s + y * c + center.y;
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }
};
var Matrix3 = class {
  constructor() {
    Object.defineProperty(this, "isMatrix3", { value: true });
    this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
    if (arguments.length > 0) {
      console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
    }
  }
  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    const te = this.elements;
    te[0] = n11;
    te[1] = n21;
    te[2] = n31;
    te[3] = n12;
    te[4] = n22;
    te[5] = n32;
    te[6] = n13;
    te[7] = n23;
    te[8] = n33;
    return this;
  }
  identity() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
  copy(m) {
    const te = this.elements;
    const me = m.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrix3Column(this, 0);
    yAxis.setFromMatrix3Column(this, 1);
    zAxis.setFromMatrix3Column(this, 2);
    return this;
  }
  setFromMatrix4(m) {
    const me = m.elements;
    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
    return this;
  }
  multiply(m) {
    return this.multiplyMatrices(this, m);
  }
  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[3], a13 = ae[6];
    const a21 = ae[1], a22 = ae[4], a23 = ae[7];
    const a31 = ae[2], a32 = ae[5], a33 = ae[8];
    const b11 = be[0], b12 = be[3], b13 = be[6];
    const b21 = be[1], b22 = be[4], b23 = be[7];
    const b31 = be[2], b32 = be[5], b33 = be[8];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31;
    te[3] = a11 * b12 + a12 * b22 + a13 * b32;
    te[6] = a11 * b13 + a12 * b23 + a13 * b33;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31;
    te[4] = a21 * b12 + a22 * b22 + a23 * b32;
    te[7] = a21 * b13 + a22 * b23 + a23 * b33;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31;
    te[5] = a31 * b12 + a32 * b22 + a33 * b32;
    te[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  }
  multiplyScalar(s) {
    const te = this.elements;
    te[0] *= s;
    te[3] *= s;
    te[6] *= s;
    te[1] *= s;
    te[4] *= s;
    te[7] *= s;
    te[2] *= s;
    te[5] *= s;
    te[8] *= s;
    return this;
  }
  determinant() {
    const te = this.elements;
    const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
    if (det === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n31 * n23 - n33 * n21) * detInv;
    te[2] = (n32 * n21 - n31 * n22) * detInv;
    te[3] = t12 * detInv;
    te[4] = (n33 * n11 - n31 * n13) * detInv;
    te[5] = (n31 * n12 - n32 * n11) * detInv;
    te[6] = t13 * detInv;
    te[7] = (n21 * n13 - n23 * n11) * detInv;
    te[8] = (n22 * n11 - n21 * n12) * detInv;
    return this;
  }
  transpose() {
    let tmp2;
    const m = this.elements;
    tmp2 = m[1];
    m[1] = m[3];
    m[3] = tmp2;
    tmp2 = m[2];
    m[2] = m[6];
    m[6] = tmp2;
    tmp2 = m[5];
    m[5] = m[7];
    m[7] = tmp2;
    return this;
  }
  getNormalMatrix(matrix4) {
    return this.setFromMatrix4(matrix4).copy(this).invert().transpose();
  }
  transposeIntoArray(r) {
    const m = this.elements;
    r[0] = m[0];
    r[1] = m[3];
    r[2] = m[6];
    r[3] = m[1];
    r[4] = m[4];
    r[5] = m[7];
    r[6] = m[2];
    r[7] = m[5];
    r[8] = m[8];
    return this;
  }
  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
    const c = Math.cos(rotation);
    const s = Math.sin(rotation);
    this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
  }
  scale(sx, sy) {
    const te = this.elements;
    te[0] *= sx;
    te[3] *= sx;
    te[6] *= sx;
    te[1] *= sy;
    te[4] *= sy;
    te[7] *= sy;
    return this;
  }
  rotate(theta) {
    const c = Math.cos(theta);
    const s = Math.sin(theta);
    const te = this.elements;
    const a11 = te[0], a12 = te[3], a13 = te[6];
    const a21 = te[1], a22 = te[4], a23 = te[7];
    te[0] = c * a11 + s * a21;
    te[3] = c * a12 + s * a22;
    te[6] = c * a13 + s * a23;
    te[1] = -s * a11 + c * a21;
    te[4] = -s * a12 + c * a22;
    te[7] = -s * a13 + c * a23;
    return this;
  }
  translate(tx, ty) {
    const te = this.elements;
    te[0] += tx * te[2];
    te[3] += tx * te[5];
    te[6] += tx * te[8];
    te[1] += ty * te[2];
    te[4] += ty * te[5];
    te[7] += ty * te[8];
    return this;
  }
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i = 0; i < 9; i++) {
      if (te[i] !== me[i])
        return false;
    }
    return true;
  }
  fromArray(array, offset = 0) {
    for (let i = 0; i < 9; i++) {
      this.elements[i] = array[i + offset];
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    return array;
  }
};
var _canvas;
var ImageUtils = {
  getDataURL: function(image) {
    if (/^data:/i.test(image.src)) {
      return image.src;
    }
    if (typeof HTMLCanvasElement == "undefined") {
      return image.src;
    }
    let canvas;
    if (image instanceof HTMLCanvasElement) {
      canvas = image;
    } else {
      if (_canvas === void 0)
        _canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      _canvas.width = image.width;
      _canvas.height = image.height;
      const context = _canvas.getContext("2d");
      if (image instanceof ImageData) {
        context.putImageData(image, 0, 0);
      } else {
        context.drawImage(image, 0, 0, image.width, image.height);
      }
      canvas = _canvas;
    }
    if (canvas.width > 2048 || canvas.height > 2048) {
      return canvas.toDataURL("image/jpeg", 0.6);
    } else {
      return canvas.toDataURL("image/png");
    }
  }
};
var textureId = 0;
function Texture(image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding) {
  Object.defineProperty(this, "id", { value: textureId++ });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.image = image;
  this.mipmaps = [];
  this.mapping = mapping;
  this.wrapS = wrapS;
  this.wrapT = wrapT;
  this.magFilter = magFilter;
  this.minFilter = minFilter;
  this.anisotropy = anisotropy;
  this.format = format;
  this.internalFormat = null;
  this.type = type;
  this.offset = new Vector2(0, 0);
  this.repeat = new Vector2(1, 1);
  this.center = new Vector2(0, 0);
  this.rotation = 0;
  this.matrixAutoUpdate = true;
  this.matrix = new Matrix3();
  this.generateMipmaps = true;
  this.premultiplyAlpha = false;
  this.flipY = true;
  this.unpackAlignment = 4;
  this.encoding = encoding;
  this.version = 0;
  this.onUpdate = null;
}
Texture.DEFAULT_IMAGE = void 0;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Texture,
  isTexture: true,
  updateMatrix: function() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.name = source.name;
    this.image = source.image;
    this.mipmaps = source.mipmaps.slice(0);
    this.mapping = source.mapping;
    this.wrapS = source.wrapS;
    this.wrapT = source.wrapT;
    this.magFilter = source.magFilter;
    this.minFilter = source.minFilter;
    this.anisotropy = source.anisotropy;
    this.format = source.format;
    this.internalFormat = source.internalFormat;
    this.type = source.type;
    this.offset.copy(source.offset);
    this.repeat.copy(source.repeat);
    this.center.copy(source.center);
    this.rotation = source.rotation;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrix.copy(source.matrix);
    this.generateMipmaps = source.generateMipmaps;
    this.premultiplyAlpha = source.premultiplyAlpha;
    this.flipY = source.flipY;
    this.unpackAlignment = source.unpackAlignment;
    this.encoding = source.encoding;
    return this;
  },
  toJSON: function(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.textures[this.uuid] !== void 0) {
      return meta.textures[this.uuid];
    }
    const output = {
      metadata: {
        version: 4.5,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      mapping: this.mapping,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      type: this.type,
      encoding: this.encoding,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    if (this.image !== void 0) {
      const image = this.image;
      if (image.uuid === void 0) {
        image.uuid = MathUtils.generateUUID();
      }
      if (!isRootObject && meta.images[image.uuid] === void 0) {
        let url;
        if (Array.isArray(image)) {
          url = [];
          for (let i = 0, l = image.length; i < l; i++) {
            if (image[i].isDataTexture) {
              url.push(serializeImage(image[i].image));
            } else {
              url.push(serializeImage(image[i]));
            }
          }
        } else {
          url = serializeImage(image);
        }
        meta.images[image.uuid] = {
          uuid: image.uuid,
          url
        };
      }
      output.image = image.uuid;
    }
    if (!isRootObject) {
      meta.textures[this.uuid] = output;
    }
    return output;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  },
  transformUv: function(uv) {
    if (this.mapping !== UVMapping)
      return uv;
    uv.applyMatrix3(this.matrix);
    if (uv.x < 0 || uv.x > 1) {
      switch (this.wrapS) {
        case RepeatWrapping:
          uv.x = uv.x - Math.floor(uv.x);
          break;
        case ClampToEdgeWrapping:
          uv.x = uv.x < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.x) % 2) === 1) {
            uv.x = Math.ceil(uv.x) - uv.x;
          } else {
            uv.x = uv.x - Math.floor(uv.x);
          }
          break;
      }
    }
    if (uv.y < 0 || uv.y > 1) {
      switch (this.wrapT) {
        case RepeatWrapping:
          uv.y = uv.y - Math.floor(uv.y);
          break;
        case ClampToEdgeWrapping:
          uv.y = uv.y < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.y) % 2) === 1) {
            uv.y = Math.ceil(uv.y) - uv.y;
          } else {
            uv.y = uv.y - Math.floor(uv.y);
          }
          break;
      }
    }
    if (this.flipY) {
      uv.y = 1 - uv.y;
    }
    return uv;
  }
});
Object.defineProperty(Texture.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
function serializeImage(image) {
  if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
    return ImageUtils.getDataURL(image);
  } else {
    if (image.data) {
      return {
        data: Array.prototype.slice.call(image.data),
        width: image.width,
        height: image.height,
        type: image.data.constructor.name
      };
    } else {
      console.warn("THREE.Texture: Unable to serialize Texture.");
      return {};
    }
  }
}
var Vector4 = class {
  constructor(x = 0, y = 0, z = 0, w = 1) {
    Object.defineProperty(this, "isVector4", { value: true });
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }
  get width() {
    return this.z;
  }
  set width(value) {
    this.z = value;
  }
  get height() {
    return this.w;
  }
  set height(value) {
    this.w = value;
  }
  set(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    this.w = scalar;
    return this;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setZ(z) {
    this.z = z;
    return this;
  }
  setW(w) {
    this.w = w;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      case 3:
        this.w = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    this.w = v.w !== void 0 ? v.w : 1;
    return this;
  }
  add(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
      return this.addVectors(v, w);
    }
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    this.w += v.w;
    return this;
  }
  addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    this.w += s;
    return this;
  }
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;
    return this;
  }
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    this.w += v.w * s;
    return this;
  }
  sub(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
      return this.subVectors(v, w);
    }
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    this.w -= v.w;
    return this;
  }
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    this.w -= s;
    return this;
  }
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  }
  applyMatrix4(m) {
    const x = this.x, y = this.y, z = this.z, w = this.w;
    const e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  setAxisAngleFromQuaternion(q) {
    this.w = 2 * Math.acos(q.w);
    const s = Math.sqrt(1 - q.w * q.w);
    if (s < 1e-4) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = q.x / s;
      this.y = q.y / s;
      this.z = q.z / s;
    }
    return this;
  }
  setAxisAngleFromRotationMatrix(m) {
    let angle, x, y, z;
    const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
        this.set(1, 0, 0, 0);
        return this;
      }
      angle = Math.PI;
      const xx = (m11 + 1) / 2;
      const yy = (m22 + 1) / 2;
      const zz = (m33 + 1) / 2;
      const xy = (m12 + m21) / 4;
      const xz = (m13 + m31) / 4;
      const yz = (m23 + m32) / 4;
      if (xx > yy && xx > zz) {
        if (xx < epsilon) {
          x = 0;
          y = 0.707106781;
          z = 0.707106781;
        } else {
          x = Math.sqrt(xx);
          y = xy / x;
          z = xz / x;
        }
      } else if (yy > zz) {
        if (yy < epsilon) {
          x = 0.707106781;
          y = 0;
          z = 0.707106781;
        } else {
          y = Math.sqrt(yy);
          x = xy / y;
          z = yz / y;
        }
      } else {
        if (zz < epsilon) {
          x = 0.707106781;
          y = 0.707106781;
          z = 0;
        } else {
          z = Math.sqrt(zz);
          x = xz / z;
          y = yz / z;
        }
      }
      this.set(x, y, z, angle);
      return this;
    }
    let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
    if (Math.abs(s) < 1e-3)
      s = 1;
    this.x = (m32 - m23) / s;
    this.y = (m13 - m31) / s;
    this.z = (m21 - m12) / s;
    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
    return this;
  }
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    this.w = Math.min(this.w, v.w);
    return this;
  }
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    this.w = Math.max(this.w, v.w);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    this.w = Math.max(min.w, Math.min(max.w, this.w));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    this.w = Math.max(minVal, Math.min(maxVal, this.w));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    this.w += (v.w - this.w) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    this.w = v1.w + (v2.w - v1.w) * alpha;
    return this;
  }
  equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    this.w = array[offset + 3];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    array[offset + 3] = this.w;
    return array;
  }
  fromBufferAttribute(attribute, index, offset) {
    if (offset !== void 0) {
      console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
    }
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    this.w = attribute.getW(index);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }
};
function WebGLRenderTarget(width, height, options) {
  this.width = width;
  this.height = height;
  this.scissor = new Vector4(0, 0, width, height);
  this.scissorTest = false;
  this.viewport = new Vector4(0, 0, width, height);
  options = options || {};
  this.texture = new Texture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
  this.texture.image = {};
  this.texture.image.width = width;
  this.texture.image.height = height;
  this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
  this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
  this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
  this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
  this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
}
WebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: WebGLRenderTarget,
  isWebGLRenderTarget: true,
  setSize: function(width, height) {
    if (this.width !== width || this.height !== height) {
      this.width = width;
      this.height = height;
      this.texture.image.width = width;
      this.texture.image.height = height;
      this.dispose();
    }
    this.viewport.set(0, 0, width, height);
    this.scissor.set(0, 0, width, height);
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.width = source.width;
    this.height = source.height;
    this.viewport.copy(source.viewport);
    this.texture = source.texture.clone();
    this.depthBuffer = source.depthBuffer;
    this.stencilBuffer = source.stencilBuffer;
    this.depthTexture = source.depthTexture;
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
function WebGLMultisampleRenderTarget(width, height, options) {
  WebGLRenderTarget.call(this, width, height, options);
  this.samples = 4;
}
WebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {
  constructor: WebGLMultisampleRenderTarget,
  isWebGLMultisampleRenderTarget: true,
  copy: function(source) {
    WebGLRenderTarget.prototype.copy.call(this, source);
    this.samples = source.samples;
    return this;
  }
});
var Quaternion = class {
  constructor(x = 0, y = 0, z = 0, w = 1) {
    Object.defineProperty(this, "isQuaternion", { value: true });
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
  }
  static slerp(qa, qb, qm, t) {
    return qm.copy(qa).slerp(qb, t);
  }
  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
    let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
      let s = 1 - t;
      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
      if (sqrSin > Number.EPSILON) {
        const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
        s = Math.sin(s * len) / sin;
        t = Math.sin(t * len) / sin;
      }
      const tDir = t * dir;
      x0 = x0 * s + x1 * tDir;
      y0 = y0 * s + y1 * tDir;
      z0 = z0 * s + z1 * tDir;
      w0 = w0 * s + w1 * tDir;
      if (s === 1 - t) {
        const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
        x0 *= f;
        y0 *= f;
        z0 *= f;
        w0 *= f;
      }
    }
    dst[dstOffset] = x0;
    dst[dstOffset + 1] = y0;
    dst[dstOffset + 2] = z0;
    dst[dstOffset + 3] = w0;
  }
  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
    const x0 = src0[srcOffset0];
    const y0 = src0[srcOffset0 + 1];
    const z0 = src0[srcOffset0 + 2];
    const w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1];
    const y1 = src1[srcOffset1 + 1];
    const z1 = src1[srcOffset1 + 2];
    const w1 = src1[srcOffset1 + 3];
    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
    return dst;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(value) {
    this._w = value;
    this._onChangeCallback();
  }
  set(x, y, z, w) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(quaternion) {
    this._x = quaternion.x;
    this._y = quaternion.y;
    this._z = quaternion.z;
    this._w = quaternion.w;
    this._onChangeCallback();
    return this;
  }
  setFromEuler(euler, update) {
    if (!(euler && euler.isEuler)) {
      throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
    const cos = Math.cos;
    const sin = Math.sin;
    const c1 = cos(x / 2);
    const c2 = cos(y / 2);
    const c3 = cos(z / 2);
    const s1 = sin(x / 2);
    const s2 = sin(y / 2);
    const s3 = sin(z / 2);
    switch (order) {
      case "XYZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "YXZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "ZXY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "ZYX":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "YZX":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "XZY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
    }
    if (update !== false)
      this._onChangeCallback();
    return this;
  }
  setFromAxisAngle(axis, angle) {
    const halfAngle = angle / 2, s = Math.sin(halfAngle);
    this._x = axis.x * s;
    this._y = axis.y * s;
    this._z = axis.z * s;
    this._w = Math.cos(halfAngle);
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m) {
    const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
    if (trace > 0) {
      const s = 0.5 / Math.sqrt(trace + 1);
      this._w = 0.25 / s;
      this._x = (m32 - m23) * s;
      this._y = (m13 - m31) * s;
      this._z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this._w = (m32 - m23) / s;
      this._x = 0.25 * s;
      this._y = (m12 + m21) / s;
      this._z = (m13 + m31) / s;
    } else if (m22 > m33) {
      const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
      this._w = (m13 - m31) / s;
      this._x = (m12 + m21) / s;
      this._y = 0.25 * s;
      this._z = (m23 + m32) / s;
    } else {
      const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
      this._w = (m21 - m12) / s;
      this._x = (m13 + m31) / s;
      this._y = (m23 + m32) / s;
      this._z = 0.25 * s;
    }
    this._onChangeCallback();
    return this;
  }
  setFromUnitVectors(vFrom, vTo) {
    const EPS = 1e-6;
    let r = vFrom.dot(vTo) + 1;
    if (r < EPS) {
      r = 0;
      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
        this._x = -vFrom.y;
        this._y = vFrom.x;
        this._z = 0;
        this._w = r;
      } else {
        this._x = 0;
        this._y = -vFrom.z;
        this._z = vFrom.y;
        this._w = r;
      }
    } else {
      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
      this._w = r;
    }
    return this.normalize();
  }
  angleTo(q) {
    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));
  }
  rotateTowards(q, step) {
    const angle = this.angleTo(q);
    if (angle === 0)
      return this;
    const t = Math.min(1, step / angle);
    this.slerp(q, t);
    return this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }
  dot(v) {
    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let l = this.length();
    if (l === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      l = 1 / l;
      this._x = this._x * l;
      this._y = this._y * l;
      this._z = this._z * l;
      this._w = this._w * l;
    }
    this._onChangeCallback();
    return this;
  }
  multiply(q, p) {
    if (p !== void 0) {
      console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
      return this.multiplyQuaternions(q, p);
    }
    return this.multiplyQuaternions(this, q);
  }
  premultiply(q) {
    return this.multiplyQuaternions(q, this);
  }
  multiplyQuaternions(a, b) {
    const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
    const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    this._onChangeCallback();
    return this;
  }
  slerp(qb, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(qb);
    const x = this._x, y = this._y, z = this._z, w = this._w;
    let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
    if (cosHalfTheta < 0) {
      this._w = -qb._w;
      this._x = -qb._x;
      this._y = -qb._y;
      this._z = -qb._z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(qb);
    }
    if (cosHalfTheta >= 1) {
      this._w = w;
      this._x = x;
      this._y = y;
      this._z = z;
      return this;
    }
    const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
    if (sqrSinHalfTheta <= Number.EPSILON) {
      const s = 1 - t;
      this._w = s * w + t * this._w;
      this._x = s * x + t * this._x;
      this._y = s * y + t * this._y;
      this._z = s * z + t * this._z;
      this.normalize();
      this._onChangeCallback();
      return this;
    }
    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
    this._w = w * ratioA + this._w * ratioB;
    this._x = x * ratioA + this._x * ratioB;
    this._y = y * ratioA + this._y * ratioB;
    this._z = z * ratioA + this._z * ratioB;
    this._onChangeCallback();
    return this;
  }
  equals(quaternion) {
    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
  }
  fromArray(array, offset = 0) {
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._w = array[offset + 3];
    this._onChangeCallback();
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._w;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this._x = attribute.getX(index);
    this._y = attribute.getY(index);
    this._z = attribute.getZ(index);
    this._w = attribute.getW(index);
    return this;
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
};
var Vector3 = class {
  constructor(x = 0, y = 0, z = 0) {
    Object.defineProperty(this, "isVector3", { value: true });
    this.x = x;
    this.y = y;
    this.z = z;
  }
  set(x, y, z) {
    if (z === void 0)
      z = this.z;
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  }
  setX(x) {
    this.x = x;
    return this;
  }
  setY(y) {
    this.y = y;
    return this;
  }
  setZ(z) {
    this.z = z;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    return this;
  }
  add(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
      return this.addVectors(v, w);
    }
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  }
  addScalar(s) {
    this.x += s;
    this.y += s;
    this.z += s;
    return this;
  }
  addVectors(a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  }
  addScaledVector(v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    return this;
  }
  sub(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
      return this.subVectors(v, w);
    }
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  }
  subScalar(s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    return this;
  }
  subVectors(a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  }
  multiply(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
      return this.multiplyVectors(v, w);
    }
    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }
  multiplyVectors(a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  }
  applyEuler(euler) {
    if (!(euler && euler.isEuler)) {
      console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    return this.applyQuaternion(_quaternion.setFromEuler(euler));
  }
  applyAxisAngle(axis, angle) {
    return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));
  }
  applyMatrix3(m) {
    const x = this.x, y = this.y, z = this.z;
    const e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6] * z;
    this.y = e[1] * x + e[4] * y + e[7] * z;
    this.z = e[2] * x + e[5] * y + e[8] * z;
    return this;
  }
  applyNormalMatrix(m) {
    return this.applyMatrix3(m).normalize();
  }
  applyMatrix4(m) {
    const x = this.x, y = this.y, z = this.z;
    const e = m.elements;
    const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
    return this;
  }
  applyQuaternion(q) {
    const x = this.x, y = this.y, z = this.z;
    const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
    const ix = qw * x + qy * z - qz * y;
    const iy = qw * y + qz * x - qx * z;
    const iz = qw * z + qx * y - qy * x;
    const iw = -qx * x - qy * y - qz * z;
    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return this;
  }
  project(camera) {
    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
  }
  unproject(camera) {
    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
  }
  transformDirection(m) {
    const x = this.x, y = this.y, z = this.z;
    const e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z;
    this.y = e[1] * x + e[5] * y + e[9] * z;
    this.z = e[2] * x + e[6] * y + e[10] * z;
    return this.normalize();
  }
  divide(v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  min(v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    return this;
  }
  max(v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }
  dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    return this;
  }
  cross(v, w) {
    if (w !== void 0) {
      console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
      return this.crossVectors(v, w);
    }
    return this.crossVectors(this, v);
  }
  crossVectors(a, b) {
    const ax = a.x, ay = a.y, az = a.z;
    const bx = b.x, by = b.y, bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  projectOnVector(v) {
    const denominator = v.lengthSq();
    if (denominator === 0)
      return this.set(0, 0, 0);
    const scalar = v.dot(this) / denominator;
    return this.copy(v).multiplyScalar(scalar);
  }
  projectOnPlane(planeNormal) {
    _vector.copy(this).projectOnVector(planeNormal);
    return this.sub(_vector);
  }
  reflect(normal) {
    return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));
  }
  angleTo(v) {
    const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
    if (denominator === 0)
      return Math.PI / 2;
    const theta = this.dot(v) / denominator;
    return Math.acos(MathUtils.clamp(theta, -1, 1));
  }
  distanceTo(v) {
    return Math.sqrt(this.distanceToSquared(v));
  }
  distanceToSquared(v) {
    const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
    return dx * dx + dy * dy + dz * dz;
  }
  manhattanDistanceTo(v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
  }
  setFromSpherical(s) {
    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
  }
  setFromSphericalCoords(radius, phi, theta) {
    const sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  }
  setFromCylindrical(c) {
    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
  }
  setFromCylindricalCoords(radius, theta, y) {
    this.x = radius * Math.sin(theta);
    this.y = y;
    this.z = radius * Math.cos(theta);
    return this;
  }
  setFromMatrixPosition(m) {
    const e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    return this;
  }
  setFromMatrixScale(m) {
    const sx = this.setFromMatrixColumn(m, 0).length();
    const sy = this.setFromMatrixColumn(m, 1).length();
    const sz = this.setFromMatrixColumn(m, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  }
  setFromMatrixColumn(m, index) {
    return this.fromArray(m.elements, index * 4);
  }
  setFromMatrix3Column(m, index) {
    return this.fromArray(m.elements, index * 3);
  }
  equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    return array;
  }
  fromBufferAttribute(attribute, index, offset) {
    if (offset !== void 0) {
      console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
    }
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }
};
var _vector = /* @__PURE__ */ new Vector3();
var _quaternion = /* @__PURE__ */ new Quaternion();
var Box3 = class {
  constructor(min, max) {
    Object.defineProperty(this, "isBox3", { value: true });
    this.min = min !== void 0 ? min : new Vector3(Infinity, Infinity, Infinity);
    this.max = max !== void 0 ? max : new Vector3(-Infinity, -Infinity, -Infinity);
  }
  set(min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  }
  setFromArray(array) {
    let minX = Infinity;
    let minY = Infinity;
    let minZ = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let maxZ = -Infinity;
    for (let i = 0, l = array.length; i < l; i += 3) {
      const x = array[i];
      const y = array[i + 1];
      const z = array[i + 2];
      if (x < minX)
        minX = x;
      if (y < minY)
        minY = y;
      if (z < minZ)
        minZ = z;
      if (x > maxX)
        maxX = x;
      if (y > maxY)
        maxY = y;
      if (z > maxZ)
        maxZ = z;
    }
    this.min.set(minX, minY, minZ);
    this.max.set(maxX, maxY, maxZ);
    return this;
  }
  setFromBufferAttribute(attribute) {
    let minX = Infinity;
    let minY = Infinity;
    let minZ = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let maxZ = -Infinity;
    for (let i = 0, l = attribute.count; i < l; i++) {
      const x = attribute.getX(i);
      const y = attribute.getY(i);
      const z = attribute.getZ(i);
      if (x < minX)
        minX = x;
      if (y < minY)
        minY = y;
      if (z < minZ)
        minZ = z;
      if (x > maxX)
        maxX = x;
      if (y > maxY)
        maxY = y;
      if (z > maxZ)
        maxZ = z;
    }
    this.min.set(minX, minY, minZ);
    this.max.set(maxX, maxY, maxZ);
    return this;
  }
  setFromPoints(points) {
    this.makeEmpty();
    for (let i = 0, il = points.length; i < il; i++) {
      this.expandByPoint(points[i]);
    }
    return this;
  }
  setFromCenterAndSize(center, size) {
    const halfSize = _vector$1.copy(size).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  setFromObject(object) {
    this.makeEmpty();
    return this.expandByObject(object);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .getCenter() target is now required");
      target = new Vector3();
    }
    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .getSize() target is now required");
      target = new Vector3();
    }
    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
  }
  expandByPoint(point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  }
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  expandByObject(object) {
    object.updateWorldMatrix(false, false);
    const geometry = object.geometry;
    if (geometry !== void 0) {
      if (geometry.boundingBox === null) {
        geometry.computeBoundingBox();
      }
      _box.copy(geometry.boundingBox);
      _box.applyMatrix4(object.matrixWorld);
      this.union(_box);
    }
    const children = object.children;
    for (let i = 0, l = children.length; i < l; i++) {
      this.expandByObject(children[i]);
    }
    return this;
  }
  containsPoint(point) {
    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
  }
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
  }
  getParameter(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .getParameter() target is now required");
      target = new Vector3();
    }
    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
  }
  intersectsBox(box) {
    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
  }
  intersectsSphere(sphere) {
    this.clampPoint(sphere.center, _vector$1);
    return _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
  }
  intersectsPlane(plane) {
    let min, max;
    if (plane.normal.x > 0) {
      min = plane.normal.x * this.min.x;
      max = plane.normal.x * this.max.x;
    } else {
      min = plane.normal.x * this.max.x;
      max = plane.normal.x * this.min.x;
    }
    if (plane.normal.y > 0) {
      min += plane.normal.y * this.min.y;
      max += plane.normal.y * this.max.y;
    } else {
      min += plane.normal.y * this.max.y;
      max += plane.normal.y * this.min.y;
    }
    if (plane.normal.z > 0) {
      min += plane.normal.z * this.min.z;
      max += plane.normal.z * this.max.z;
    } else {
      min += plane.normal.z * this.max.z;
      max += plane.normal.z * this.min.z;
    }
    return min <= -plane.constant && max >= -plane.constant;
  }
  intersectsTriangle(triangle) {
    if (this.isEmpty()) {
      return false;
    }
    this.getCenter(_center);
    _extents.subVectors(this.max, _center);
    _v0.subVectors(triangle.a, _center);
    _v1.subVectors(triangle.b, _center);
    _v2.subVectors(triangle.c, _center);
    _f0.subVectors(_v1, _v0);
    _f1.subVectors(_v2, _v1);
    _f2.subVectors(_v0, _v2);
    let axes = [
      0,
      -_f0.z,
      _f0.y,
      0,
      -_f1.z,
      _f1.y,
      0,
      -_f2.z,
      _f2.y,
      _f0.z,
      0,
      -_f0.x,
      _f1.z,
      0,
      -_f1.x,
      _f2.z,
      0,
      -_f2.x,
      -_f0.y,
      _f0.x,
      0,
      -_f1.y,
      _f1.x,
      0,
      -_f2.y,
      _f2.x,
      0
    ];
    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
      return false;
    }
    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
      return false;
    }
    _triangleNormal.crossVectors(_f0, _f1);
    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
    return satForAxes(axes, _v0, _v1, _v2, _extents);
  }
  clampPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .clampPoint() target is now required");
      target = new Vector3();
    }
    return target.copy(point).clamp(this.min, this.max);
  }
  distanceToPoint(point) {
    const clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);
    return clampedPoint.sub(point).length();
  }
  getBoundingSphere(target) {
    if (target === void 0) {
      console.error("THREE.Box3: .getBoundingSphere() target is now required");
    }
    this.getCenter(target.center);
    target.radius = this.getSize(_vector$1).length() * 0.5;
    return target;
  }
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    if (this.isEmpty())
      this.makeEmpty();
    return this;
  }
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  applyMatrix4(matrix) {
    if (this.isEmpty())
      return this;
    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
    this.setFromPoints(_points);
    return this;
  }
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
};
function satForAxes(axes, v0, v1, v2, extents) {
  for (let i = 0, j = axes.length - 3; i <= j; i += 3) {
    _testAxis.fromArray(axes, i);
    const r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
    const p0 = v0.dot(_testAxis);
    const p1 = v1.dot(_testAxis);
    const p2 = v2.dot(_testAxis);
    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
      return false;
    }
  }
  return true;
}
var _points = [
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3()
];
var _vector$1 = /* @__PURE__ */ new Vector3();
var _box = /* @__PURE__ */ new Box3();
var _v0 = /* @__PURE__ */ new Vector3();
var _v1 = /* @__PURE__ */ new Vector3();
var _v2 = /* @__PURE__ */ new Vector3();
var _f0 = /* @__PURE__ */ new Vector3();
var _f1 = /* @__PURE__ */ new Vector3();
var _f2 = /* @__PURE__ */ new Vector3();
var _center = /* @__PURE__ */ new Vector3();
var _extents = /* @__PURE__ */ new Vector3();
var _triangleNormal = /* @__PURE__ */ new Vector3();
var _testAxis = /* @__PURE__ */ new Vector3();
var _box$1 = /* @__PURE__ */ new Box3();
var Sphere = class {
  constructor(center, radius) {
    this.center = center !== void 0 ? center : new Vector3();
    this.radius = radius !== void 0 ? radius : -1;
  }
  set(center, radius) {
    this.center.copy(center);
    this.radius = radius;
    return this;
  }
  setFromPoints(points, optionalCenter) {
    const center = this.center;
    if (optionalCenter !== void 0) {
      center.copy(optionalCenter);
    } else {
      _box$1.setFromPoints(points).getCenter(center);
    }
    let maxRadiusSq = 0;
    for (let i = 0, il = points.length; i < il; i++) {
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
    }
    this.radius = Math.sqrt(maxRadiusSq);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }
  containsPoint(point) {
    return point.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(point) {
    return point.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(sphere) {
    const radiusSum = this.radius + sphere.radius;
    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
  }
  intersectsBox(box) {
    return box.intersectsSphere(this);
  }
  intersectsPlane(plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(point, target) {
    const deltaLengthSq = this.center.distanceToSquared(point);
    if (target === void 0) {
      console.warn("THREE.Sphere: .clampPoint() target is now required");
      target = new Vector3();
    }
    target.copy(point);
    if (deltaLengthSq > this.radius * this.radius) {
      target.sub(this.center).normalize();
      target.multiplyScalar(this.radius).add(this.center);
    }
    return target;
  }
  getBoundingBox(target) {
    if (target === void 0) {
      console.warn("THREE.Sphere: .getBoundingBox() target is now required");
      target = new Box3();
    }
    if (this.isEmpty()) {
      target.makeEmpty();
      return target;
    }
    target.set(this.center, this.center);
    target.expandByScalar(this.radius);
    return target;
  }
  applyMatrix4(matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScaleOnAxis();
    return this;
  }
  translate(offset) {
    this.center.add(offset);
    return this;
  }
  equals(sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
};
var _vector$2 = /* @__PURE__ */ new Vector3();
var _segCenter = /* @__PURE__ */ new Vector3();
var _segDir = /* @__PURE__ */ new Vector3();
var _diff = /* @__PURE__ */ new Vector3();
var _edge1 = /* @__PURE__ */ new Vector3();
var _edge2 = /* @__PURE__ */ new Vector3();
var _normal = /* @__PURE__ */ new Vector3();
var Ray = class {
  constructor(origin, direction) {
    this.origin = origin !== void 0 ? origin : new Vector3();
    this.direction = direction !== void 0 ? direction : new Vector3(0, 0, -1);
  }
  set(origin, direction) {
    this.origin.copy(origin);
    this.direction.copy(direction);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  }
  at(t, target) {
    if (target === void 0) {
      console.warn("THREE.Ray: .at() target is now required");
      target = new Vector3();
    }
    return target.copy(this.direction).multiplyScalar(t).add(this.origin);
  }
  lookAt(v) {
    this.direction.copy(v).sub(this.origin).normalize();
    return this;
  }
  recast(t) {
    this.origin.copy(this.at(t, _vector$2));
    return this;
  }
  closestPointToPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Ray: .closestPointToPoint() target is now required");
      target = new Vector3();
    }
    target.subVectors(point, this.origin);
    const directionDistance = target.dot(this.direction);
    if (directionDistance < 0) {
      return target.copy(this.origin);
    }
    return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
  }
  distanceToPoint(point) {
    return Math.sqrt(this.distanceSqToPoint(point));
  }
  distanceSqToPoint(point) {
    const directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction);
    if (directionDistance < 0) {
      return this.origin.distanceToSquared(point);
    }
    _vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    return _vector$2.distanceToSquared(point);
  }
  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
    _segDir.copy(v1).sub(v0).normalize();
    _diff.copy(this.origin).sub(_segCenter);
    const segExtent = v0.distanceTo(v1) * 0.5;
    const a01 = -this.direction.dot(_segDir);
    const b0 = _diff.dot(this.direction);
    const b1 = -_diff.dot(_segDir);
    const c = _diff.lengthSq();
    const det = Math.abs(1 - a01 * a01);
    let s0, s1, sqrDist, extDet;
    if (det > 0) {
      s0 = a01 * b1 - b0;
      s1 = a01 * b0 - b1;
      extDet = segExtent * det;
      if (s0 >= 0) {
        if (s1 >= -extDet) {
          if (s1 <= extDet) {
            const invDet = 1 / det;
            s0 *= invDet;
            s1 *= invDet;
            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
          } else {
            s1 = segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          s1 = -segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
      } else {
        if (s1 <= -extDet) {
          s0 = Math.max(0, -(-a01 * segExtent + b0));
          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        } else if (s1 <= extDet) {
          s0 = 0;
          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = s1 * (s1 + 2 * b1) + c;
        } else {
          s0 = Math.max(0, -(a01 * segExtent + b0));
          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
      }
    } else {
      s1 = a01 > 0 ? -segExtent : segExtent;
      s0 = Math.max(0, -(a01 * s1 + b0));
      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
    }
    if (optionalPointOnRay) {
      optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
    }
    if (optionalPointOnSegment) {
      optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
    }
    return sqrDist;
  }
  intersectSphere(sphere, target) {
    _vector$2.subVectors(sphere.center, this.origin);
    const tca = _vector$2.dot(this.direction);
    const d2 = _vector$2.dot(_vector$2) - tca * tca;
    const radius2 = sphere.radius * sphere.radius;
    if (d2 > radius2)
      return null;
    const thc = Math.sqrt(radius2 - d2);
    const t0 = tca - thc;
    const t1 = tca + thc;
    if (t0 < 0 && t1 < 0)
      return null;
    if (t0 < 0)
      return this.at(t1, target);
    return this.at(t0, target);
  }
  intersectsSphere(sphere) {
    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
  }
  distanceToPlane(plane) {
    const denominator = plane.normal.dot(this.direction);
    if (denominator === 0) {
      if (plane.distanceToPoint(this.origin) === 0) {
        return 0;
      }
      return null;
    }
    const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
    return t >= 0 ? t : null;
  }
  intersectPlane(plane, target) {
    const t = this.distanceToPlane(plane);
    if (t === null) {
      return null;
    }
    return this.at(t, target);
  }
  intersectsPlane(plane) {
    const distToPoint = plane.distanceToPoint(this.origin);
    if (distToPoint === 0) {
      return true;
    }
    const denominator = plane.normal.dot(this.direction);
    if (denominator * distToPoint < 0) {
      return true;
    }
    return false;
  }
  intersectBox(box, target) {
    let tmin, tmax, tymin, tymax, tzmin, tzmax;
    const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
    const origin = this.origin;
    if (invdirx >= 0) {
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;
    } else {
      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }
    if (invdiry >= 0) {
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;
    } else {
      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }
    if (tmin > tymax || tymin > tmax)
      return null;
    if (tymin > tmin || tmin !== tmin)
      tmin = tymin;
    if (tymax < tmax || tmax !== tmax)
      tmax = tymax;
    if (invdirz >= 0) {
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;
    } else {
      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }
    if (tmin > tzmax || tzmin > tmax)
      return null;
    if (tzmin > tmin || tmin !== tmin)
      tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax)
      tmax = tzmax;
    if (tmax < 0)
      return null;
    return this.at(tmin >= 0 ? tmin : tmax, target);
  }
  intersectsBox(box) {
    return this.intersectBox(box, _vector$2) !== null;
  }
  intersectTriangle(a, b, c, backfaceCulling, target) {
    _edge1.subVectors(b, a);
    _edge2.subVectors(c, a);
    _normal.crossVectors(_edge1, _edge2);
    let DdN = this.direction.dot(_normal);
    let sign2;
    if (DdN > 0) {
      if (backfaceCulling)
        return null;
      sign2 = 1;
    } else if (DdN < 0) {
      sign2 = -1;
      DdN = -DdN;
    } else {
      return null;
    }
    _diff.subVectors(this.origin, a);
    const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
    if (DdQxE2 < 0) {
      return null;
    }
    const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
    if (DdE1xQ < 0) {
      return null;
    }
    if (DdQxE2 + DdE1xQ > DdN) {
      return null;
    }
    const QdN = -sign2 * _diff.dot(_normal);
    if (QdN < 0) {
      return null;
    }
    return this.at(QdN / DdN, target);
  }
  applyMatrix4(matrix4) {
    this.origin.applyMatrix4(matrix4);
    this.direction.transformDirection(matrix4);
    return this;
  }
  equals(ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }
};
var Matrix4 = class {
  constructor() {
    Object.defineProperty(this, "isMatrix4", { value: true });
    this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
    if (arguments.length > 0) {
      console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
    }
  }
  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const te = this.elements;
    te[0] = n11;
    te[4] = n12;
    te[8] = n13;
    te[12] = n14;
    te[1] = n21;
    te[5] = n22;
    te[9] = n23;
    te[13] = n24;
    te[2] = n31;
    te[6] = n32;
    te[10] = n33;
    te[14] = n34;
    te[3] = n41;
    te[7] = n42;
    te[11] = n43;
    te[15] = n44;
    return this;
  }
  identity() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }
  clone() {
    return new Matrix4().fromArray(this.elements);
  }
  copy(m) {
    const te = this.elements;
    const me = m.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];
    te[11] = me[11];
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    te[15] = me[15];
    return this;
  }
  copyPosition(m) {
    const te = this.elements, me = m.elements;
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrixColumn(this, 0);
    yAxis.setFromMatrixColumn(this, 1);
    zAxis.setFromMatrixColumn(this, 2);
    return this;
  }
  makeBasis(xAxis, yAxis, zAxis) {
    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
    return this;
  }
  extractRotation(m) {
    const te = this.elements;
    const me = m.elements;
    const scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();
    const scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();
    const scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();
    te[0] = me[0] * scaleX;
    te[1] = me[1] * scaleX;
    te[2] = me[2] * scaleX;
    te[3] = 0;
    te[4] = me[4] * scaleY;
    te[5] = me[5] * scaleY;
    te[6] = me[6] * scaleY;
    te[7] = 0;
    te[8] = me[8] * scaleZ;
    te[9] = me[9] * scaleZ;
    te[10] = me[10] * scaleZ;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromEuler(euler) {
    if (!(euler && euler.isEuler)) {
      console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    }
    const te = this.elements;
    const x = euler.x, y = euler.y, z = euler.z;
    const a = Math.cos(x), b = Math.sin(x);
    const c = Math.cos(y), d = Math.sin(y);
    const e = Math.cos(z), f = Math.sin(z);
    if (euler.order === "XYZ") {
      const ae = a * e, af = a * f, be = b * e, bf = b * f;
      te[0] = c * e;
      te[4] = -c * f;
      te[8] = d;
      te[1] = af + be * d;
      te[5] = ae - bf * d;
      te[9] = -b * c;
      te[2] = bf - ae * d;
      te[6] = be + af * d;
      te[10] = a * c;
    } else if (euler.order === "YXZ") {
      const ce = c * e, cf = c * f, de = d * e, df = d * f;
      te[0] = ce + df * b;
      te[4] = de * b - cf;
      te[8] = a * d;
      te[1] = a * f;
      te[5] = a * e;
      te[9] = -b;
      te[2] = cf * b - de;
      te[6] = df + ce * b;
      te[10] = a * c;
    } else if (euler.order === "ZXY") {
      const ce = c * e, cf = c * f, de = d * e, df = d * f;
      te[0] = ce - df * b;
      te[4] = -a * f;
      te[8] = de + cf * b;
      te[1] = cf + de * b;
      te[5] = a * e;
      te[9] = df - ce * b;
      te[2] = -a * d;
      te[6] = b;
      te[10] = a * c;
    } else if (euler.order === "ZYX") {
      const ae = a * e, af = a * f, be = b * e, bf = b * f;
      te[0] = c * e;
      te[4] = be * d - af;
      te[8] = ae * d + bf;
      te[1] = c * f;
      te[5] = bf * d + ae;
      te[9] = af * d - be;
      te[2] = -d;
      te[6] = b * c;
      te[10] = a * c;
    } else if (euler.order === "YZX") {
      const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
      te[0] = c * e;
      te[4] = bd - ac * f;
      te[8] = bc * f + ad;
      te[1] = f;
      te[5] = a * e;
      te[9] = -b * e;
      te[2] = -d * e;
      te[6] = ad * f + bc;
      te[10] = ac - bd * f;
    } else if (euler.order === "XZY") {
      const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
      te[0] = c * e;
      te[4] = -f;
      te[8] = d * e;
      te[1] = ac * f + bd;
      te[5] = a * e;
      te[9] = ad * f - bc;
      te[2] = bc * f - ad;
      te[6] = b * e;
      te[10] = bd * f + ac;
    }
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromQuaternion(q) {
    return this.compose(_zero, q, _one);
  }
  lookAt(eye, target, up) {
    const te = this.elements;
    _z.subVectors(eye, target);
    if (_z.lengthSq() === 0) {
      _z.z = 1;
    }
    _z.normalize();
    _x.crossVectors(up, _z);
    if (_x.lengthSq() === 0) {
      if (Math.abs(up.z) === 1) {
        _z.x += 1e-4;
      } else {
        _z.z += 1e-4;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
    }
    _x.normalize();
    _y.crossVectors(_z, _x);
    te[0] = _x.x;
    te[4] = _y.x;
    te[8] = _z.x;
    te[1] = _x.y;
    te[5] = _y.y;
    te[9] = _z.y;
    te[2] = _x.z;
    te[6] = _y.z;
    te[10] = _z.z;
    return this;
  }
  multiply(m, n) {
    if (n !== void 0) {
      console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
      return this.multiplyMatrices(m, n);
    }
    return this.multiplyMatrices(this, m);
  }
  premultiply(m) {
    return this.multiplyMatrices(m, this);
  }
  multiplyMatrices(a, b) {
    const ae = a.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
    const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
    const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
    const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
    const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  multiplyScalar(s) {
    const te = this.elements;
    te[0] *= s;
    te[4] *= s;
    te[8] *= s;
    te[12] *= s;
    te[1] *= s;
    te[5] *= s;
    te[9] *= s;
    te[13] *= s;
    te[2] *= s;
    te[6] *= s;
    te[10] *= s;
    te[14] *= s;
    te[3] *= s;
    te[7] *= s;
    te[11] *= s;
    te[15] *= s;
    return this;
  }
  determinant() {
    const te = this.elements;
    const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
    const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
    const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
    const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
  }
  transpose() {
    const te = this.elements;
    let tmp2;
    tmp2 = te[1];
    te[1] = te[4];
    te[4] = tmp2;
    tmp2 = te[2];
    te[2] = te[8];
    te[8] = tmp2;
    tmp2 = te[6];
    te[6] = te[9];
    te[9] = tmp2;
    tmp2 = te[3];
    te[3] = te[12];
    te[12] = tmp2;
    tmp2 = te[7];
    te[7] = te[13];
    te[13] = tmp2;
    tmp2 = te[11];
    te[11] = te[14];
    te[14] = tmp2;
    return this;
  }
  setPosition(x, y, z) {
    const te = this.elements;
    if (x.isVector3) {
      te[12] = x.x;
      te[13] = x.y;
      te[14] = x.z;
    } else {
      te[12] = x;
      te[13] = y;
      te[14] = z;
    }
    return this;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    if (det === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te[4] = t12 * detInv;
    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te[8] = t13 * detInv;
    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te[12] = t14 * detInv;
    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  }
  scale(v) {
    const te = this.elements;
    const x = v.x, y = v.y, z = v.z;
    te[0] *= x;
    te[4] *= y;
    te[8] *= z;
    te[1] *= x;
    te[5] *= y;
    te[9] *= z;
    te[2] *= x;
    te[6] *= y;
    te[10] *= z;
    te[3] *= x;
    te[7] *= y;
    te[11] *= z;
    return this;
  }
  getMaxScaleOnAxis() {
    const te = this.elements;
    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  }
  makeTranslation(x, y, z) {
    this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
    return this;
  }
  makeRotationX(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
    return this;
  }
  makeRotationY(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
    return this;
  }
  makeRotationZ(theta) {
    const c = Math.cos(theta), s = Math.sin(theta);
    this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }
  makeRotationAxis(axis, angle) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);
    const t = 1 - c;
    const x = axis.x, y = axis.y, z = axis.z;
    const tx = t * x, ty = t * y;
    this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
    return this;
  }
  makeScale(x, y, z) {
    this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
    return this;
  }
  makeShear(x, y, z) {
    this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);
    return this;
  }
  compose(position, quaternion, scale) {
    const te = this.elements;
    const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
    const x2 = x + x, y2 = y + y, z2 = z + z;
    const xx = x * x2, xy = x * y2, xz = x * z2;
    const yy = y * y2, yz = y * z2, zz = z * z2;
    const wx = w * x2, wy = w * y2, wz = w * z2;
    const sx = scale.x, sy = scale.y, sz = scale.z;
    te[0] = (1 - (yy + zz)) * sx;
    te[1] = (xy + wz) * sx;
    te[2] = (xz - wy) * sx;
    te[3] = 0;
    te[4] = (xy - wz) * sy;
    te[5] = (1 - (xx + zz)) * sy;
    te[6] = (yz + wx) * sy;
    te[7] = 0;
    te[8] = (xz + wy) * sz;
    te[9] = (yz - wx) * sz;
    te[10] = (1 - (xx + yy)) * sz;
    te[11] = 0;
    te[12] = position.x;
    te[13] = position.y;
    te[14] = position.z;
    te[15] = 1;
    return this;
  }
  decompose(position, quaternion, scale) {
    const te = this.elements;
    let sx = _v1$1.set(te[0], te[1], te[2]).length();
    const sy = _v1$1.set(te[4], te[5], te[6]).length();
    const sz = _v1$1.set(te[8], te[9], te[10]).length();
    const det = this.determinant();
    if (det < 0)
      sx = -sx;
    position.x = te[12];
    position.y = te[13];
    position.z = te[14];
    _m1.copy(this);
    const invSX = 1 / sx;
    const invSY = 1 / sy;
    const invSZ = 1 / sz;
    _m1.elements[0] *= invSX;
    _m1.elements[1] *= invSX;
    _m1.elements[2] *= invSX;
    _m1.elements[4] *= invSY;
    _m1.elements[5] *= invSY;
    _m1.elements[6] *= invSY;
    _m1.elements[8] *= invSZ;
    _m1.elements[9] *= invSZ;
    _m1.elements[10] *= invSZ;
    quaternion.setFromRotationMatrix(_m1);
    scale.x = sx;
    scale.y = sy;
    scale.z = sz;
    return this;
  }
  makePerspective(left, right, top, bottom, near, far) {
    if (far === void 0) {
      console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    }
    const te = this.elements;
    const x = 2 * near / (right - left);
    const y = 2 * near / (top - bottom);
    const a = (right + left) / (right - left);
    const b = (top + bottom) / (top - bottom);
    const c = -(far + near) / (far - near);
    const d = -2 * far * near / (far - near);
    te[0] = x;
    te[4] = 0;
    te[8] = a;
    te[12] = 0;
    te[1] = 0;
    te[5] = y;
    te[9] = b;
    te[13] = 0;
    te[2] = 0;
    te[6] = 0;
    te[10] = c;
    te[14] = d;
    te[3] = 0;
    te[7] = 0;
    te[11] = -1;
    te[15] = 0;
    return this;
  }
  makeOrthographic(left, right, top, bottom, near, far) {
    const te = this.elements;
    const w = 1 / (right - left);
    const h = 1 / (top - bottom);
    const p = 1 / (far - near);
    const x = (right + left) * w;
    const y = (top + bottom) * h;
    const z = (far + near) * p;
    te[0] = 2 * w;
    te[4] = 0;
    te[8] = 0;
    te[12] = -x;
    te[1] = 0;
    te[5] = 2 * h;
    te[9] = 0;
    te[13] = -y;
    te[2] = 0;
    te[6] = 0;
    te[10] = -2 * p;
    te[14] = -z;
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[15] = 1;
    return this;
  }
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i = 0; i < 16; i++) {
      if (te[i] !== me[i])
        return false;
    }
    return true;
  }
  fromArray(array, offset = 0) {
    for (let i = 0; i < 16; i++) {
      this.elements[i] = array[i + offset];
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    array[offset + 9] = te[9];
    array[offset + 10] = te[10];
    array[offset + 11] = te[11];
    array[offset + 12] = te[12];
    array[offset + 13] = te[13];
    array[offset + 14] = te[14];
    array[offset + 15] = te[15];
    return array;
  }
};
var _v1$1 = /* @__PURE__ */ new Vector3();
var _m1 = /* @__PURE__ */ new Matrix4();
var _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
var _one = /* @__PURE__ */ new Vector3(1, 1, 1);
var _x = /* @__PURE__ */ new Vector3();
var _y = /* @__PURE__ */ new Vector3();
var _z = /* @__PURE__ */ new Vector3();
var Euler = class {
  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {
    Object.defineProperty(this, "isEuler", { value: true });
    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(value) {
    this._order = value;
    this._onChangeCallback();
  }
  set(x, y, z, order) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order || this._order;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(euler) {
    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m, order, update) {
    const clamp = MathUtils.clamp;
    const te = m.elements;
    const m11 = te[0], m12 = te[4], m13 = te[8];
    const m21 = te[1], m22 = te[5], m23 = te[9];
    const m31 = te[2], m32 = te[6], m33 = te[10];
    order = order || this._order;
    switch (order) {
      case "XYZ":
        this._y = Math.asin(clamp(m13, -1, 1));
        if (Math.abs(m13) < 0.9999999) {
          this._x = Math.atan2(-m23, m33);
          this._z = Math.atan2(-m12, m11);
        } else {
          this._x = Math.atan2(m32, m22);
          this._z = 0;
        }
        break;
      case "YXZ":
        this._x = Math.asin(-clamp(m23, -1, 1));
        if (Math.abs(m23) < 0.9999999) {
          this._y = Math.atan2(m13, m33);
          this._z = Math.atan2(m21, m22);
        } else {
          this._y = Math.atan2(-m31, m11);
          this._z = 0;
        }
        break;
      case "ZXY":
        this._x = Math.asin(clamp(m32, -1, 1));
        if (Math.abs(m32) < 0.9999999) {
          this._y = Math.atan2(-m31, m33);
          this._z = Math.atan2(-m12, m22);
        } else {
          this._y = 0;
          this._z = Math.atan2(m21, m11);
        }
        break;
      case "ZYX":
        this._y = Math.asin(-clamp(m31, -1, 1));
        if (Math.abs(m31) < 0.9999999) {
          this._x = Math.atan2(m32, m33);
          this._z = Math.atan2(m21, m11);
        } else {
          this._x = 0;
          this._z = Math.atan2(-m12, m22);
        }
        break;
      case "YZX":
        this._z = Math.asin(clamp(m21, -1, 1));
        if (Math.abs(m21) < 0.9999999) {
          this._x = Math.atan2(-m23, m22);
          this._y = Math.atan2(-m31, m11);
        } else {
          this._x = 0;
          this._y = Math.atan2(m13, m33);
        }
        break;
      case "XZY":
        this._z = Math.asin(-clamp(m12, -1, 1));
        if (Math.abs(m12) < 0.9999999) {
          this._x = Math.atan2(m32, m22);
          this._y = Math.atan2(m13, m11);
        } else {
          this._x = Math.atan2(-m23, m33);
          this._y = 0;
        }
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
    }
    this._order = order;
    if (update !== false)
      this._onChangeCallback();
    return this;
  }
  setFromQuaternion(q, order, update) {
    _matrix.makeRotationFromQuaternion(q);
    return this.setFromRotationMatrix(_matrix, order, update);
  }
  setFromVector3(v, order) {
    return this.set(v.x, v.y, v.z, order || this._order);
  }
  reorder(newOrder) {
    _quaternion$1.setFromEuler(this);
    return this.setFromQuaternion(_quaternion$1, newOrder);
  }
  equals(euler) {
    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
  }
  fromArray(array) {
    this._x = array[0];
    this._y = array[1];
    this._z = array[2];
    if (array[3] !== void 0)
      this._order = array[3];
    this._onChangeCallback();
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._order;
    return array;
  }
  toVector3(optionalResult) {
    if (optionalResult) {
      return optionalResult.set(this._x, this._y, this._z);
    } else {
      return new Vector3(this._x, this._y, this._z);
    }
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
};
Euler.DefaultOrder = "XYZ";
Euler.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
var _matrix = /* @__PURE__ */ new Matrix4();
var _quaternion$1 = /* @__PURE__ */ new Quaternion();
var Layers = class {
  constructor() {
    this.mask = 1 | 0;
  }
  set(channel) {
    this.mask = 1 << channel | 0;
  }
  enable(channel) {
    this.mask |= 1 << channel | 0;
  }
  enableAll() {
    this.mask = 4294967295 | 0;
  }
  toggle(channel) {
    this.mask ^= 1 << channel | 0;
  }
  disable(channel) {
    this.mask &= ~(1 << channel | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(layers) {
    return (this.mask & layers.mask) !== 0;
  }
};
var _object3DId = 0;
var _v1$2 = new Vector3();
var _q1 = new Quaternion();
var _m1$1 = new Matrix4();
var _target = new Vector3();
var _position = new Vector3();
var _scale = new Vector3();
var _quaternion$2 = new Quaternion();
var _xAxis = new Vector3(1, 0, 0);
var _yAxis = new Vector3(0, 1, 0);
var _zAxis = new Vector3(0, 0, 1);
var _addedEvent = { type: "added" };
var _removedEvent = { type: "removed" };
function Object3D() {
  Object.defineProperty(this, "id", { value: _object3DId++ });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "Object3D";
  this.parent = null;
  this.children = [];
  this.up = Object3D.DefaultUp.clone();
  const position = new Vector3();
  const rotation = new Euler();
  const quaternion = new Quaternion();
  const scale = new Vector3(1, 1, 1);
  function onRotationChange() {
    quaternion.setFromEuler(rotation, false);
  }
  function onQuaternionChange() {
    rotation.setFromQuaternion(quaternion, void 0, false);
  }
  rotation._onChange(onRotationChange);
  quaternion._onChange(onQuaternionChange);
  Object.defineProperties(this, {
    position: {
      configurable: true,
      enumerable: true,
      value: position
    },
    rotation: {
      configurable: true,
      enumerable: true,
      value: rotation
    },
    quaternion: {
      configurable: true,
      enumerable: true,
      value: quaternion
    },
    scale: {
      configurable: true,
      enumerable: true,
      value: scale
    },
    modelViewMatrix: {
      value: new Matrix4()
    },
    normalMatrix: {
      value: new Matrix3()
    }
  });
  this.matrix = new Matrix4();
  this.matrixWorld = new Matrix4();
  this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
  this.matrixWorldNeedsUpdate = false;
  this.layers = new Layers();
  this.visible = true;
  this.castShadow = false;
  this.receiveShadow = false;
  this.frustumCulled = true;
  this.renderOrder = 0;
  this.animations = [];
  this.userData = {};
}
Object3D.DefaultUp = new Vector3(0, 1, 0);
Object3D.DefaultMatrixAutoUpdate = true;
Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Object3D,
  isObject3D: true,
  onBeforeRender: function() {
  },
  onAfterRender: function() {
  },
  applyMatrix4: function(matrix) {
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    this.matrix.premultiply(matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  },
  applyQuaternion: function(q) {
    this.quaternion.premultiply(q);
    return this;
  },
  setRotationFromAxisAngle: function(axis, angle) {
    this.quaternion.setFromAxisAngle(axis, angle);
  },
  setRotationFromEuler: function(euler) {
    this.quaternion.setFromEuler(euler, true);
  },
  setRotationFromMatrix: function(m) {
    this.quaternion.setFromRotationMatrix(m);
  },
  setRotationFromQuaternion: function(q) {
    this.quaternion.copy(q);
  },
  rotateOnAxis: function(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.multiply(_q1);
    return this;
  },
  rotateOnWorldAxis: function(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.premultiply(_q1);
    return this;
  },
  rotateX: function(angle) {
    return this.rotateOnAxis(_xAxis, angle);
  },
  rotateY: function(angle) {
    return this.rotateOnAxis(_yAxis, angle);
  },
  rotateZ: function(angle) {
    return this.rotateOnAxis(_zAxis, angle);
  },
  translateOnAxis: function(axis, distance) {
    _v1$2.copy(axis).applyQuaternion(this.quaternion);
    this.position.add(_v1$2.multiplyScalar(distance));
    return this;
  },
  translateX: function(distance) {
    return this.translateOnAxis(_xAxis, distance);
  },
  translateY: function(distance) {
    return this.translateOnAxis(_yAxis, distance);
  },
  translateZ: function(distance) {
    return this.translateOnAxis(_zAxis, distance);
  },
  localToWorld: function(vector) {
    return vector.applyMatrix4(this.matrixWorld);
  },
  worldToLocal: function(vector) {
    return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
  },
  lookAt: function(x, y, z) {
    if (x.isVector3) {
      _target.copy(x);
    } else {
      _target.set(x, y, z);
    }
    const parent = this.parent;
    this.updateWorldMatrix(true, false);
    _position.setFromMatrixPosition(this.matrixWorld);
    if (this.isCamera || this.isLight) {
      _m1$1.lookAt(_position, _target, this.up);
    } else {
      _m1$1.lookAt(_target, _position, this.up);
    }
    this.quaternion.setFromRotationMatrix(_m1$1);
    if (parent) {
      _m1$1.extractRotation(parent.matrixWorld);
      _q1.setFromRotationMatrix(_m1$1);
      this.quaternion.premultiply(_q1.invert());
    }
  },
  add: function(object) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++) {
        this.add(arguments[i]);
      }
      return this;
    }
    if (object === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
      return this;
    }
    if (object && object.isObject3D) {
      if (object.parent !== null) {
        object.parent.remove(object);
      }
      object.parent = this;
      this.children.push(object);
      object.dispatchEvent(_addedEvent);
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
    }
    return this;
  },
  remove: function(object) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++) {
        this.remove(arguments[i]);
      }
      return this;
    }
    const index = this.children.indexOf(object);
    if (index !== -1) {
      object.parent = null;
      this.children.splice(index, 1);
      object.dispatchEvent(_removedEvent);
    }
    return this;
  },
  clear: function() {
    for (let i = 0; i < this.children.length; i++) {
      const object = this.children[i];
      object.parent = null;
      object.dispatchEvent(_removedEvent);
    }
    this.children.length = 0;
    return this;
  },
  attach: function(object) {
    this.updateWorldMatrix(true, false);
    _m1$1.copy(this.matrixWorld).invert();
    if (object.parent !== null) {
      object.parent.updateWorldMatrix(true, false);
      _m1$1.multiply(object.parent.matrixWorld);
    }
    object.applyMatrix4(_m1$1);
    object.updateWorldMatrix(false, false);
    this.add(object);
    return this;
  },
  getObjectById: function(id) {
    return this.getObjectByProperty("id", id);
  },
  getObjectByName: function(name) {
    return this.getObjectByProperty("name", name);
  },
  getObjectByProperty: function(name, value) {
    if (this[name] === value)
      return this;
    for (let i = 0, l = this.children.length; i < l; i++) {
      const child = this.children[i];
      const object = child.getObjectByProperty(name, value);
      if (object !== void 0) {
        return object;
      }
    }
    return void 0;
  },
  getWorldPosition: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldPosition() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    return target.setFromMatrixPosition(this.matrixWorld);
  },
  getWorldQuaternion: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldQuaternion() target is now required");
      target = new Quaternion();
    }
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position, target, _scale);
    return target;
  },
  getWorldScale: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldScale() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position, _quaternion$2, target);
    return target;
  },
  getWorldDirection: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldDirection() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    const e = this.matrixWorld.elements;
    return target.set(e[8], e[9], e[10]).normalize();
  },
  raycast: function() {
  },
  traverse: function(callback) {
    callback(this);
    const children = this.children;
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].traverse(callback);
    }
  },
  traverseVisible: function(callback) {
    if (this.visible === false)
      return;
    callback(this);
    const children = this.children;
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].traverseVisible(callback);
    }
  },
  traverseAncestors: function(callback) {
    const parent = this.parent;
    if (parent !== null) {
      callback(parent);
      parent.traverseAncestors(callback);
    }
  },
  updateMatrix: function() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  },
  updateMatrixWorld: function(force) {
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || force) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
      this.matrixWorldNeedsUpdate = false;
      force = true;
    }
    const children = this.children;
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].updateMatrixWorld(force);
    }
  },
  updateWorldMatrix: function(updateParents, updateChildren) {
    const parent = this.parent;
    if (updateParents === true && parent !== null) {
      parent.updateWorldMatrix(true, false);
    }
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    if (this.parent === null) {
      this.matrixWorld.copy(this.matrix);
    } else {
      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
    }
    if (updateChildren === true) {
      const children = this.children;
      for (let i = 0, l = children.length; i < l; i++) {
        children[i].updateWorldMatrix(false, true);
      }
    }
  },
  toJSON: function(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    const output = {};
    if (isRootObject) {
      meta = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {}
      };
      output.metadata = {
        version: 4.5,
        type: "Object",
        generator: "Object3D.toJSON"
      };
    }
    const object = {};
    object.uuid = this.uuid;
    object.type = this.type;
    if (this.name !== "")
      object.name = this.name;
    if (this.castShadow === true)
      object.castShadow = true;
    if (this.receiveShadow === true)
      object.receiveShadow = true;
    if (this.visible === false)
      object.visible = false;
    if (this.frustumCulled === false)
      object.frustumCulled = false;
    if (this.renderOrder !== 0)
      object.renderOrder = this.renderOrder;
    if (JSON.stringify(this.userData) !== "{}")
      object.userData = this.userData;
    object.layers = this.layers.mask;
    object.matrix = this.matrix.toArray();
    if (this.matrixAutoUpdate === false)
      object.matrixAutoUpdate = false;
    if (this.isInstancedMesh) {
      object.type = "InstancedMesh";
      object.count = this.count;
      object.instanceMatrix = this.instanceMatrix.toJSON();
    }
    function serialize(library, element) {
      if (library[element.uuid] === void 0) {
        library[element.uuid] = element.toJSON(meta);
      }
      return element.uuid;
    }
    if (this.isMesh || this.isLine || this.isPoints) {
      object.geometry = serialize(meta.geometries, this.geometry);
      const parameters = this.geometry.parameters;
      if (parameters !== void 0 && parameters.shapes !== void 0) {
        const shapes = parameters.shapes;
        if (Array.isArray(shapes)) {
          for (let i = 0, l = shapes.length; i < l; i++) {
            const shape = shapes[i];
            serialize(meta.shapes, shape);
          }
        } else {
          serialize(meta.shapes, shapes);
        }
      }
    }
    if (this.isSkinnedMesh) {
      object.bindMode = this.bindMode;
      object.bindMatrix = this.bindMatrix.toArray();
      if (this.skeleton !== void 0) {
        serialize(meta.skeletons, this.skeleton);
        object.skeleton = this.skeleton.uuid;
      }
    }
    if (this.material !== void 0) {
      if (Array.isArray(this.material)) {
        const uuids = [];
        for (let i = 0, l = this.material.length; i < l; i++) {
          uuids.push(serialize(meta.materials, this.material[i]));
        }
        object.material = uuids;
      } else {
        object.material = serialize(meta.materials, this.material);
      }
    }
    if (this.children.length > 0) {
      object.children = [];
      for (let i = 0; i < this.children.length; i++) {
        object.children.push(this.children[i].toJSON(meta).object);
      }
    }
    if (this.animations.length > 0) {
      object.animations = [];
      for (let i = 0; i < this.animations.length; i++) {
        const animation = this.animations[i];
        object.animations.push(serialize(meta.animations, animation));
      }
    }
    if (isRootObject) {
      const geometries = extractFromCache(meta.geometries);
      const materials = extractFromCache(meta.materials);
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const shapes = extractFromCache(meta.shapes);
      const skeletons = extractFromCache(meta.skeletons);
      const animations = extractFromCache(meta.animations);
      if (geometries.length > 0)
        output.geometries = geometries;
      if (materials.length > 0)
        output.materials = materials;
      if (textures.length > 0)
        output.textures = textures;
      if (images.length > 0)
        output.images = images;
      if (shapes.length > 0)
        output.shapes = shapes;
      if (skeletons.length > 0)
        output.skeletons = skeletons;
      if (animations.length > 0)
        output.animations = animations;
    }
    output.object = object;
    return output;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data = cache[key];
        delete data.metadata;
        values.push(data);
      }
      return values;
    }
  },
  clone: function(recursive) {
    return new this.constructor().copy(this, recursive);
  },
  copy: function(source, recursive = true) {
    this.name = source.name;
    this.up.copy(source.up);
    this.position.copy(source.position);
    this.rotation.order = source.rotation.order;
    this.quaternion.copy(source.quaternion);
    this.scale.copy(source.scale);
    this.matrix.copy(source.matrix);
    this.matrixWorld.copy(source.matrixWorld);
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    this.layers.mask = source.layers.mask;
    this.visible = source.visible;
    this.castShadow = source.castShadow;
    this.receiveShadow = source.receiveShadow;
    this.frustumCulled = source.frustumCulled;
    this.renderOrder = source.renderOrder;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    if (recursive === true) {
      for (let i = 0; i < source.children.length; i++) {
        const child = source.children[i];
        this.add(child.clone());
      }
    }
    return this;
  }
});
var _vector1 = /* @__PURE__ */ new Vector3();
var _vector2 = /* @__PURE__ */ new Vector3();
var _normalMatrix = /* @__PURE__ */ new Matrix3();
var Plane = class {
  constructor(normal, constant) {
    Object.defineProperty(this, "isPlane", { value: true });
    this.normal = normal !== void 0 ? normal : new Vector3(1, 0, 0);
    this.constant = constant !== void 0 ? constant : 0;
  }
  set(normal, constant) {
    this.normal.copy(normal);
    this.constant = constant;
    return this;
  }
  setComponents(x, y, z, w) {
    this.normal.set(x, y, z);
    this.constant = w;
    return this;
  }
  setFromNormalAndCoplanarPoint(normal, point) {
    this.normal.copy(normal);
    this.constant = -point.dot(this.normal);
    return this;
  }
  setFromCoplanarPoints(a, b, c) {
    const normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
    this.setFromNormalAndCoplanarPoint(normal, a);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  }
  normalize() {
    const inverseNormalLength = 1 / this.normal.length();
    this.normal.multiplyScalar(inverseNormalLength);
    this.constant *= inverseNormalLength;
    return this;
  }
  negate() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }
  distanceToPoint(point) {
    return this.normal.dot(point) + this.constant;
  }
  distanceToSphere(sphere) {
    return this.distanceToPoint(sphere.center) - sphere.radius;
  }
  projectPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Plane: .projectPoint() target is now required");
      target = new Vector3();
    }
    return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
  }
  intersectLine(line, target) {
    if (target === void 0) {
      console.warn("THREE.Plane: .intersectLine() target is now required");
      target = new Vector3();
    }
    const direction = line.delta(_vector1);
    const denominator = this.normal.dot(direction);
    if (denominator === 0) {
      if (this.distanceToPoint(line.start) === 0) {
        return target.copy(line.start);
      }
      return void 0;
    }
    const t = -(line.start.dot(this.normal) + this.constant) / denominator;
    if (t < 0 || t > 1) {
      return void 0;
    }
    return target.copy(direction).multiplyScalar(t).add(line.start);
  }
  intersectsLine(line) {
    const startSign = this.distanceToPoint(line.start);
    const endSign = this.distanceToPoint(line.end);
    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
  }
  intersectsBox(box) {
    return box.intersectsPlane(this);
  }
  intersectsSphere(sphere) {
    return sphere.intersectsPlane(this);
  }
  coplanarPoint(target) {
    if (target === void 0) {
      console.warn("THREE.Plane: .coplanarPoint() target is now required");
      target = new Vector3();
    }
    return target.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(matrix, optionalNormalMatrix) {
    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
    const normal = this.normal.applyMatrix3(normalMatrix).normalize();
    this.constant = -referencePoint.dot(normal);
    return this;
  }
  translate(offset) {
    this.constant -= offset.dot(this.normal);
    return this;
  }
  equals(plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }
};
var _v0$1 = /* @__PURE__ */ new Vector3();
var _v1$3 = /* @__PURE__ */ new Vector3();
var _v2$1 = /* @__PURE__ */ new Vector3();
var _v3 = /* @__PURE__ */ new Vector3();
var _vab = /* @__PURE__ */ new Vector3();
var _vac = /* @__PURE__ */ new Vector3();
var _vbc = /* @__PURE__ */ new Vector3();
var _vap = /* @__PURE__ */ new Vector3();
var _vbp = /* @__PURE__ */ new Vector3();
var _vcp = /* @__PURE__ */ new Vector3();
var Triangle = class {
  constructor(a, b, c) {
    this.a = a !== void 0 ? a : new Vector3();
    this.b = b !== void 0 ? b : new Vector3();
    this.c = c !== void 0 ? c : new Vector3();
  }
  static getNormal(a, b, c, target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .getNormal() target is now required");
      target = new Vector3();
    }
    target.subVectors(c, b);
    _v0$1.subVectors(a, b);
    target.cross(_v0$1);
    const targetLengthSq = target.lengthSq();
    if (targetLengthSq > 0) {
      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
    }
    return target.set(0, 0, 0);
  }
  static getBarycoord(point, a, b, c, target) {
    _v0$1.subVectors(c, a);
    _v1$3.subVectors(b, a);
    _v2$1.subVectors(point, a);
    const dot00 = _v0$1.dot(_v0$1);
    const dot01 = _v0$1.dot(_v1$3);
    const dot02 = _v0$1.dot(_v2$1);
    const dot11 = _v1$3.dot(_v1$3);
    const dot12 = _v1$3.dot(_v2$1);
    const denom = dot00 * dot11 - dot01 * dot01;
    if (target === void 0) {
      console.warn("THREE.Triangle: .getBarycoord() target is now required");
      target = new Vector3();
    }
    if (denom === 0) {
      return target.set(-2, -1, -1);
    }
    const invDenom = 1 / denom;
    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return target.set(1 - u - v, v, u);
  }
  static containsPoint(point, a, b, c) {
    this.getBarycoord(point, a, b, c, _v3);
    return _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;
  }
  static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
    this.getBarycoord(point, p1, p2, p3, _v3);
    target.set(0, 0);
    target.addScaledVector(uv1, _v3.x);
    target.addScaledVector(uv2, _v3.y);
    target.addScaledVector(uv3, _v3.z);
    return target;
  }
  static isFrontFacing(a, b, c, direction) {
    _v0$1.subVectors(c, b);
    _v1$3.subVectors(a, b);
    return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
  }
  set(a, b, c) {
    this.a.copy(a);
    this.b.copy(b);
    this.c.copy(c);
    return this;
  }
  setFromPointsAndIndices(points, i0, i1, i2) {
    this.a.copy(points[i0]);
    this.b.copy(points[i1]);
    this.c.copy(points[i2]);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(triangle) {
    this.a.copy(triangle.a);
    this.b.copy(triangle.b);
    this.c.copy(triangle.c);
    return this;
  }
  getArea() {
    _v0$1.subVectors(this.c, this.b);
    _v1$3.subVectors(this.a, this.b);
    return _v0$1.cross(_v1$3).length() * 0.5;
  }
  getMidpoint(target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .getMidpoint() target is now required");
      target = new Vector3();
    }
    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(target) {
    return Triangle.getNormal(this.a, this.b, this.c, target);
  }
  getPlane(target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .getPlane() target is now required");
      target = new Plane();
    }
    return target.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(point, target) {
    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
  }
  getUV(point, uv1, uv2, uv3, target) {
    return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
  }
  containsPoint(point) {
    return Triangle.containsPoint(point, this.a, this.b, this.c);
  }
  isFrontFacing(direction) {
    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
  }
  intersectsBox(box) {
    return box.intersectsTriangle(this);
  }
  closestPointToPoint(p, target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .closestPointToPoint() target is now required");
      target = new Vector3();
    }
    const a = this.a, b = this.b, c = this.c;
    let v, w;
    _vab.subVectors(b, a);
    _vac.subVectors(c, a);
    _vap.subVectors(p, a);
    const d1 = _vab.dot(_vap);
    const d2 = _vac.dot(_vap);
    if (d1 <= 0 && d2 <= 0) {
      return target.copy(a);
    }
    _vbp.subVectors(p, b);
    const d3 = _vab.dot(_vbp);
    const d4 = _vac.dot(_vbp);
    if (d3 >= 0 && d4 <= d3) {
      return target.copy(b);
    }
    const vc = d1 * d4 - d3 * d2;
    if (vc <= 0 && d1 >= 0 && d3 <= 0) {
      v = d1 / (d1 - d3);
      return target.copy(a).addScaledVector(_vab, v);
    }
    _vcp.subVectors(p, c);
    const d5 = _vab.dot(_vcp);
    const d6 = _vac.dot(_vcp);
    if (d6 >= 0 && d5 <= d6) {
      return target.copy(c);
    }
    const vb = d5 * d2 - d1 * d6;
    if (vb <= 0 && d2 >= 0 && d6 <= 0) {
      w = d2 / (d2 - d6);
      return target.copy(a).addScaledVector(_vac, w);
    }
    const va = d3 * d6 - d5 * d4;
    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
      _vbc.subVectors(c, b);
      w = (d4 - d3) / (d4 - d3 + (d5 - d6));
      return target.copy(b).addScaledVector(_vbc, w);
    }
    const denom = 1 / (va + vb + vc);
    v = vb * denom;
    w = vc * denom;
    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
  }
  equals(triangle) {
    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
  }
};
var _colorKeywords = {
  "aliceblue": 15792383,
  "antiquewhite": 16444375,
  "aqua": 65535,
  "aquamarine": 8388564,
  "azure": 15794175,
  "beige": 16119260,
  "bisque": 16770244,
  "black": 0,
  "blanchedalmond": 16772045,
  "blue": 255,
  "blueviolet": 9055202,
  "brown": 10824234,
  "burlywood": 14596231,
  "cadetblue": 6266528,
  "chartreuse": 8388352,
  "chocolate": 13789470,
  "coral": 16744272,
  "cornflowerblue": 6591981,
  "cornsilk": 16775388,
  "crimson": 14423100,
  "cyan": 65535,
  "darkblue": 139,
  "darkcyan": 35723,
  "darkgoldenrod": 12092939,
  "darkgray": 11119017,
  "darkgreen": 25600,
  "darkgrey": 11119017,
  "darkkhaki": 12433259,
  "darkmagenta": 9109643,
  "darkolivegreen": 5597999,
  "darkorange": 16747520,
  "darkorchid": 10040012,
  "darkred": 9109504,
  "darksalmon": 15308410,
  "darkseagreen": 9419919,
  "darkslateblue": 4734347,
  "darkslategray": 3100495,
  "darkslategrey": 3100495,
  "darkturquoise": 52945,
  "darkviolet": 9699539,
  "deeppink": 16716947,
  "deepskyblue": 49151,
  "dimgray": 6908265,
  "dimgrey": 6908265,
  "dodgerblue": 2003199,
  "firebrick": 11674146,
  "floralwhite": 16775920,
  "forestgreen": 2263842,
  "fuchsia": 16711935,
  "gainsboro": 14474460,
  "ghostwhite": 16316671,
  "gold": 16766720,
  "goldenrod": 14329120,
  "gray": 8421504,
  "green": 32768,
  "greenyellow": 11403055,
  "grey": 8421504,
  "honeydew": 15794160,
  "hotpink": 16738740,
  "indianred": 13458524,
  "indigo": 4915330,
  "ivory": 16777200,
  "khaki": 15787660,
  "lavender": 15132410,
  "lavenderblush": 16773365,
  "lawngreen": 8190976,
  "lemonchiffon": 16775885,
  "lightblue": 11393254,
  "lightcoral": 15761536,
  "lightcyan": 14745599,
  "lightgoldenrodyellow": 16448210,
  "lightgray": 13882323,
  "lightgreen": 9498256,
  "lightgrey": 13882323,
  "lightpink": 16758465,
  "lightsalmon": 16752762,
  "lightseagreen": 2142890,
  "lightskyblue": 8900346,
  "lightslategray": 7833753,
  "lightslategrey": 7833753,
  "lightsteelblue": 11584734,
  "lightyellow": 16777184,
  "lime": 65280,
  "limegreen": 3329330,
  "linen": 16445670,
  "magenta": 16711935,
  "maroon": 8388608,
  "mediumaquamarine": 6737322,
  "mediumblue": 205,
  "mediumorchid": 12211667,
  "mediumpurple": 9662683,
  "mediumseagreen": 3978097,
  "mediumslateblue": 8087790,
  "mediumspringgreen": 64154,
  "mediumturquoise": 4772300,
  "mediumvioletred": 13047173,
  "midnightblue": 1644912,
  "mintcream": 16121850,
  "mistyrose": 16770273,
  "moccasin": 16770229,
  "navajowhite": 16768685,
  "navy": 128,
  "oldlace": 16643558,
  "olive": 8421376,
  "olivedrab": 7048739,
  "orange": 16753920,
  "orangered": 16729344,
  "orchid": 14315734,
  "palegoldenrod": 15657130,
  "palegreen": 10025880,
  "paleturquoise": 11529966,
  "palevioletred": 14381203,
  "papayawhip": 16773077,
  "peachpuff": 16767673,
  "peru": 13468991,
  "pink": 16761035,
  "plum": 14524637,
  "powderblue": 11591910,
  "purple": 8388736,
  "rebeccapurple": 6697881,
  "red": 16711680,
  "rosybrown": 12357519,
  "royalblue": 4286945,
  "saddlebrown": 9127187,
  "salmon": 16416882,
  "sandybrown": 16032864,
  "seagreen": 3050327,
  "seashell": 16774638,
  "sienna": 10506797,
  "silver": 12632256,
  "skyblue": 8900331,
  "slateblue": 6970061,
  "slategray": 7372944,
  "slategrey": 7372944,
  "snow": 16775930,
  "springgreen": 65407,
  "steelblue": 4620980,
  "tan": 13808780,
  "teal": 32896,
  "thistle": 14204888,
  "tomato": 16737095,
  "turquoise": 4251856,
  "violet": 15631086,
  "wheat": 16113331,
  "white": 16777215,
  "whitesmoke": 16119285,
  "yellow": 16776960,
  "yellowgreen": 10145074
};
var _hslA = { h: 0, s: 0, l: 0 };
var _hslB = { h: 0, s: 0, l: 0 };
function hue2rgb(p, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p + (q - p) * 6 * (2 / 3 - t);
  return p;
}
function SRGBToLinear(c) {
  return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c) {
  return c < 31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
var Color = class {
  constructor(r, g, b) {
    Object.defineProperty(this, "isColor", { value: true });
    if (g === void 0 && b === void 0) {
      return this.set(r);
    }
    return this.setRGB(r, g, b);
  }
  set(value) {
    if (value && value.isColor) {
      this.copy(value);
    } else if (typeof value === "number") {
      this.setHex(value);
    } else if (typeof value === "string") {
      this.setStyle(value);
    }
    return this;
  }
  setScalar(scalar) {
    this.r = scalar;
    this.g = scalar;
    this.b = scalar;
    return this;
  }
  setHex(hex) {
    hex = Math.floor(hex);
    this.r = (hex >> 16 & 255) / 255;
    this.g = (hex >> 8 & 255) / 255;
    this.b = (hex & 255) / 255;
    return this;
  }
  setRGB(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
    return this;
  }
  setHSL(h, s, l) {
    h = MathUtils.euclideanModulo(h, 1);
    s = MathUtils.clamp(s, 0, 1);
    l = MathUtils.clamp(l, 0, 1);
    if (s === 0) {
      this.r = this.g = this.b = l;
    } else {
      const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
      const q = 2 * l - p;
      this.r = hue2rgb(q, p, h + 1 / 3);
      this.g = hue2rgb(q, p, h);
      this.b = hue2rgb(q, p, h - 1 / 3);
    }
    return this;
  }
  setStyle(style) {
    function handleAlpha(string) {
      if (string === void 0)
        return;
      if (parseFloat(string) < 1) {
        console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
      }
    }
    let m;
    if (m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {
      let color;
      const name = m[1];
      const components = m[2];
      switch (name) {
        case "rgb":
        case "rgba":
          if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            this.r = Math.min(255, parseInt(color[1], 10)) / 255;
            this.g = Math.min(255, parseInt(color[2], 10)) / 255;
            this.b = Math.min(255, parseInt(color[3], 10)) / 255;
            handleAlpha(color[5]);
            return this;
          }
          if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            this.r = Math.min(100, parseInt(color[1], 10)) / 100;
            this.g = Math.min(100, parseInt(color[2], 10)) / 100;
            this.b = Math.min(100, parseInt(color[3], 10)) / 100;
            handleAlpha(color[5]);
            return this;
          }
          break;
        case "hsl":
        case "hsla":
          if (color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            const h = parseFloat(color[1]) / 360;
            const s = parseInt(color[2], 10) / 100;
            const l = parseInt(color[3], 10) / 100;
            handleAlpha(color[5]);
            return this.setHSL(h, s, l);
          }
          break;
      }
    } else if (m = /^\#([A-Fa-f0-9]+)$/.exec(style)) {
      const hex = m[1];
      const size = hex.length;
      if (size === 3) {
        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
        return this;
      } else if (size === 6) {
        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
        return this;
      }
    }
    if (style && style.length > 0) {
      return this.setColorName(style);
    }
    return this;
  }
  setColorName(style) {
    const hex = _colorKeywords[style];
    if (hex !== void 0) {
      this.setHex(hex);
    } else {
      console.warn("THREE.Color: Unknown color " + style);
    }
    return this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(color) {
    this.r = color.r;
    this.g = color.g;
    this.b = color.b;
    return this;
  }
  copyGammaToLinear(color, gammaFactor = 2) {
    this.r = Math.pow(color.r, gammaFactor);
    this.g = Math.pow(color.g, gammaFactor);
    this.b = Math.pow(color.b, gammaFactor);
    return this;
  }
  copyLinearToGamma(color, gammaFactor = 2) {
    const safeInverse = gammaFactor > 0 ? 1 / gammaFactor : 1;
    this.r = Math.pow(color.r, safeInverse);
    this.g = Math.pow(color.g, safeInverse);
    this.b = Math.pow(color.b, safeInverse);
    return this;
  }
  convertGammaToLinear(gammaFactor) {
    this.copyGammaToLinear(this, gammaFactor);
    return this;
  }
  convertLinearToGamma(gammaFactor) {
    this.copyLinearToGamma(this, gammaFactor);
    return this;
  }
  copySRGBToLinear(color) {
    this.r = SRGBToLinear(color.r);
    this.g = SRGBToLinear(color.g);
    this.b = SRGBToLinear(color.b);
    return this;
  }
  copyLinearToSRGB(color) {
    this.r = LinearToSRGB(color.r);
    this.g = LinearToSRGB(color.g);
    this.b = LinearToSRGB(color.b);
    return this;
  }
  convertSRGBToLinear() {
    this.copySRGBToLinear(this);
    return this;
  }
  convertLinearToSRGB() {
    this.copyLinearToSRGB(this);
    return this;
  }
  getHex() {
    return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
  }
  getHexString() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  }
  getHSL(target) {
    if (target === void 0) {
      console.warn("THREE.Color: .getHSL() target is now required");
      target = { h: 0, s: 0, l: 0 };
    }
    const r = this.r, g = this.g, b = this.b;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let hue, saturation;
    const lightness = (min + max) / 2;
    if (min === max) {
      hue = 0;
      saturation = 0;
    } else {
      const delta = max - min;
      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
      switch (max) {
        case r:
          hue = (g - b) / delta + (g < b ? 6 : 0);
          break;
        case g:
          hue = (b - r) / delta + 2;
          break;
        case b:
          hue = (r - g) / delta + 4;
          break;
      }
      hue /= 6;
    }
    target.h = hue;
    target.s = saturation;
    target.l = lightness;
    return target;
  }
  getStyle() {
    return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
  }
  offsetHSL(h, s, l) {
    this.getHSL(_hslA);
    _hslA.h += h;
    _hslA.s += s;
    _hslA.l += l;
    this.setHSL(_hslA.h, _hslA.s, _hslA.l);
    return this;
  }
  add(color) {
    this.r += color.r;
    this.g += color.g;
    this.b += color.b;
    return this;
  }
  addColors(color1, color2) {
    this.r = color1.r + color2.r;
    this.g = color1.g + color2.g;
    this.b = color1.b + color2.b;
    return this;
  }
  addScalar(s) {
    this.r += s;
    this.g += s;
    this.b += s;
    return this;
  }
  sub(color) {
    this.r = Math.max(0, this.r - color.r);
    this.g = Math.max(0, this.g - color.g);
    this.b = Math.max(0, this.b - color.b);
    return this;
  }
  multiply(color) {
    this.r *= color.r;
    this.g *= color.g;
    this.b *= color.b;
    return this;
  }
  multiplyScalar(s) {
    this.r *= s;
    this.g *= s;
    this.b *= s;
    return this;
  }
  lerp(color, alpha) {
    this.r += (color.r - this.r) * alpha;
    this.g += (color.g - this.g) * alpha;
    this.b += (color.b - this.b) * alpha;
    return this;
  }
  lerpHSL(color, alpha) {
    this.getHSL(_hslA);
    color.getHSL(_hslB);
    const h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);
    const s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);
    const l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);
    this.setHSL(h, s, l);
    return this;
  }
  equals(c) {
    return c.r === this.r && c.g === this.g && c.b === this.b;
  }
  fromArray(array, offset = 0) {
    this.r = array[offset];
    this.g = array[offset + 1];
    this.b = array[offset + 2];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.r;
    array[offset + 1] = this.g;
    array[offset + 2] = this.b;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this.r = attribute.getX(index);
    this.g = attribute.getY(index);
    this.b = attribute.getZ(index);
    if (attribute.normalized === true) {
      this.r /= 255;
      this.g /= 255;
      this.b /= 255;
    }
    return this;
  }
  toJSON() {
    return this.getHex();
  }
};
Color.NAMES = _colorKeywords;
Color.prototype.r = 1;
Color.prototype.g = 1;
Color.prototype.b = 1;
var Face3 = class {
  constructor(a, b, c, normal, color, materialIndex = 0) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.normal = normal && normal.isVector3 ? normal : new Vector3();
    this.vertexNormals = Array.isArray(normal) ? normal : [];
    this.color = color && color.isColor ? color : new Color();
    this.vertexColors = Array.isArray(color) ? color : [];
    this.materialIndex = materialIndex;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.a = source.a;
    this.b = source.b;
    this.c = source.c;
    this.normal.copy(source.normal);
    this.color.copy(source.color);
    this.materialIndex = source.materialIndex;
    for (let i = 0, il = source.vertexNormals.length; i < il; i++) {
      this.vertexNormals[i] = source.vertexNormals[i].clone();
    }
    for (let i = 0, il = source.vertexColors.length; i < il; i++) {
      this.vertexColors[i] = source.vertexColors[i].clone();
    }
    return this;
  }
};
var materialId = 0;
function Material() {
  Object.defineProperty(this, "id", { value: materialId++ });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "Material";
  this.fog = true;
  this.blending = NormalBlending;
  this.side = FrontSide;
  this.flatShading = false;
  this.vertexColors = false;
  this.opacity = 1;
  this.transparent = false;
  this.blendSrc = SrcAlphaFactor;
  this.blendDst = OneMinusSrcAlphaFactor;
  this.blendEquation = AddEquation;
  this.blendSrcAlpha = null;
  this.blendDstAlpha = null;
  this.blendEquationAlpha = null;
  this.depthFunc = LessEqualDepth;
  this.depthTest = true;
  this.depthWrite = true;
  this.stencilWriteMask = 255;
  this.stencilFunc = AlwaysStencilFunc;
  this.stencilRef = 0;
  this.stencilFuncMask = 255;
  this.stencilFail = KeepStencilOp;
  this.stencilZFail = KeepStencilOp;
  this.stencilZPass = KeepStencilOp;
  this.stencilWrite = false;
  this.clippingPlanes = null;
  this.clipIntersection = false;
  this.clipShadows = false;
  this.shadowSide = null;
  this.colorWrite = true;
  this.precision = null;
  this.polygonOffset = false;
  this.polygonOffsetFactor = 0;
  this.polygonOffsetUnits = 0;
  this.dithering = false;
  this.alphaTest = 0;
  this.premultipliedAlpha = false;
  this.visible = true;
  this.toneMapped = true;
  this.userData = {};
  this.version = 0;
}
Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Material,
  isMaterial: true,
  onBeforeCompile: function() {
  },
  customProgramCacheKey: function() {
    return this.onBeforeCompile.toString();
  },
  setValues: function(values) {
    if (values === void 0)
      return;
    for (const key in values) {
      const newValue = values[key];
      if (newValue === void 0) {
        console.warn("THREE.Material: '" + key + "' parameter is undefined.");
        continue;
      }
      if (key === "shading") {
        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        this.flatShading = newValue === FlatShading ? true : false;
        continue;
      }
      const currentValue = this[key];
      if (currentValue === void 0) {
        console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
        continue;
      }
      if (currentValue && currentValue.isColor) {
        currentValue.set(newValue);
      } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
        currentValue.copy(newValue);
      } else {
        this[key] = newValue;
      }
    }
  },
  toJSON: function(meta) {
    const isRoot = meta === void 0 || typeof meta === "string";
    if (isRoot) {
      meta = {
        textures: {},
        images: {}
      };
    }
    const data = {
      metadata: {
        version: 4.5,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "")
      data.name = this.name;
    if (this.color && this.color.isColor)
      data.color = this.color.getHex();
    if (this.roughness !== void 0)
      data.roughness = this.roughness;
    if (this.metalness !== void 0)
      data.metalness = this.metalness;
    if (this.sheen && this.sheen.isColor)
      data.sheen = this.sheen.getHex();
    if (this.emissive && this.emissive.isColor)
      data.emissive = this.emissive.getHex();
    if (this.emissiveIntensity && this.emissiveIntensity !== 1)
      data.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor)
      data.specular = this.specular.getHex();
    if (this.shininess !== void 0)
      data.shininess = this.shininess;
    if (this.clearcoat !== void 0)
      data.clearcoat = this.clearcoat;
    if (this.clearcoatRoughness !== void 0)
      data.clearcoatRoughness = this.clearcoatRoughness;
    if (this.clearcoatMap && this.clearcoatMap.isTexture) {
      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
    }
    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
    }
    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
    }
    if (this.map && this.map.isTexture)
      data.map = this.map.toJSON(meta).uuid;
    if (this.matcap && this.matcap.isTexture)
      data.matcap = this.matcap.toJSON(meta).uuid;
    if (this.alphaMap && this.alphaMap.isTexture)
      data.alphaMap = this.alphaMap.toJSON(meta).uuid;
    if (this.lightMap && this.lightMap.isTexture)
      data.lightMap = this.lightMap.toJSON(meta).uuid;
    if (this.aoMap && this.aoMap.isTexture) {
      data.aoMap = this.aoMap.toJSON(meta).uuid;
      data.aoMapIntensity = this.aoMapIntensity;
    }
    if (this.bumpMap && this.bumpMap.isTexture) {
      data.bumpMap = this.bumpMap.toJSON(meta).uuid;
      data.bumpScale = this.bumpScale;
    }
    if (this.normalMap && this.normalMap.isTexture) {
      data.normalMap = this.normalMap.toJSON(meta).uuid;
      data.normalMapType = this.normalMapType;
      data.normalScale = this.normalScale.toArray();
    }
    if (this.displacementMap && this.displacementMap.isTexture) {
      data.displacementMap = this.displacementMap.toJSON(meta).uuid;
      data.displacementScale = this.displacementScale;
      data.displacementBias = this.displacementBias;
    }
    if (this.roughnessMap && this.roughnessMap.isTexture)
      data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture)
      data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture)
      data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
    if (this.specularMap && this.specularMap.isTexture)
      data.specularMap = this.specularMap.toJSON(meta).uuid;
    if (this.envMap && this.envMap.isTexture) {
      data.envMap = this.envMap.toJSON(meta).uuid;
      data.reflectivity = this.reflectivity;
      data.refractionRatio = this.refractionRatio;
      if (this.combine !== void 0)
        data.combine = this.combine;
      if (this.envMapIntensity !== void 0)
        data.envMapIntensity = this.envMapIntensity;
    }
    if (this.gradientMap && this.gradientMap.isTexture) {
      data.gradientMap = this.gradientMap.toJSON(meta).uuid;
    }
    if (this.size !== void 0)
      data.size = this.size;
    if (this.sizeAttenuation !== void 0)
      data.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== NormalBlending)
      data.blending = this.blending;
    if (this.flatShading === true)
      data.flatShading = this.flatShading;
    if (this.side !== FrontSide)
      data.side = this.side;
    if (this.vertexColors)
      data.vertexColors = true;
    if (this.opacity < 1)
      data.opacity = this.opacity;
    if (this.transparent === true)
      data.transparent = this.transparent;
    data.depthFunc = this.depthFunc;
    data.depthTest = this.depthTest;
    data.depthWrite = this.depthWrite;
    data.stencilWrite = this.stencilWrite;
    data.stencilWriteMask = this.stencilWriteMask;
    data.stencilFunc = this.stencilFunc;
    data.stencilRef = this.stencilRef;
    data.stencilFuncMask = this.stencilFuncMask;
    data.stencilFail = this.stencilFail;
    data.stencilZFail = this.stencilZFail;
    data.stencilZPass = this.stencilZPass;
    if (this.rotation && this.rotation !== 0)
      data.rotation = this.rotation;
    if (this.polygonOffset === true)
      data.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0)
      data.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0)
      data.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth && this.linewidth !== 1)
      data.linewidth = this.linewidth;
    if (this.dashSize !== void 0)
      data.dashSize = this.dashSize;
    if (this.gapSize !== void 0)
      data.gapSize = this.gapSize;
    if (this.scale !== void 0)
      data.scale = this.scale;
    if (this.dithering === true)
      data.dithering = true;
    if (this.alphaTest > 0)
      data.alphaTest = this.alphaTest;
    if (this.premultipliedAlpha === true)
      data.premultipliedAlpha = this.premultipliedAlpha;
    if (this.wireframe === true)
      data.wireframe = this.wireframe;
    if (this.wireframeLinewidth > 1)
      data.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== "round")
      data.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== "round")
      data.wireframeLinejoin = this.wireframeLinejoin;
    if (this.morphTargets === true)
      data.morphTargets = true;
    if (this.morphNormals === true)
      data.morphNormals = true;
    if (this.skinning === true)
      data.skinning = true;
    if (this.visible === false)
      data.visible = false;
    if (this.toneMapped === false)
      data.toneMapped = false;
    if (JSON.stringify(this.userData) !== "{}")
      data.userData = this.userData;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data2 = cache[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRoot) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      if (textures.length > 0)
        data.textures = textures;
      if (images.length > 0)
        data.images = images;
    }
    return data;
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.name = source.name;
    this.fog = source.fog;
    this.blending = source.blending;
    this.side = source.side;
    this.flatShading = source.flatShading;
    this.vertexColors = source.vertexColors;
    this.opacity = source.opacity;
    this.transparent = source.transparent;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendEquationAlpha = source.blendEquationAlpha;
    this.depthFunc = source.depthFunc;
    this.depthTest = source.depthTest;
    this.depthWrite = source.depthWrite;
    this.stencilWriteMask = source.stencilWriteMask;
    this.stencilFunc = source.stencilFunc;
    this.stencilRef = source.stencilRef;
    this.stencilFuncMask = source.stencilFuncMask;
    this.stencilFail = source.stencilFail;
    this.stencilZFail = source.stencilZFail;
    this.stencilZPass = source.stencilZPass;
    this.stencilWrite = source.stencilWrite;
    const srcPlanes = source.clippingPlanes;
    let dstPlanes = null;
    if (srcPlanes !== null) {
      const n = srcPlanes.length;
      dstPlanes = new Array(n);
      for (let i = 0; i !== n; ++i) {
        dstPlanes[i] = srcPlanes[i].clone();
      }
    }
    this.clippingPlanes = dstPlanes;
    this.clipIntersection = source.clipIntersection;
    this.clipShadows = source.clipShadows;
    this.shadowSide = source.shadowSide;
    this.colorWrite = source.colorWrite;
    this.precision = source.precision;
    this.polygonOffset = source.polygonOffset;
    this.polygonOffsetFactor = source.polygonOffsetFactor;
    this.polygonOffsetUnits = source.polygonOffsetUnits;
    this.dithering = source.dithering;
    this.alphaTest = source.alphaTest;
    this.premultipliedAlpha = source.premultipliedAlpha;
    this.visible = source.visible;
    this.toneMapped = source.toneMapped;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
Object.defineProperty(Material.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
function MeshBasicMaterial(parameters) {
  Material.call(this);
  this.type = "MeshBasicMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.setValues(parameters);
}
MeshBasicMaterial.prototype = Object.create(Material.prototype);
MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
MeshBasicMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  return this;
};
var _vector$3 = new Vector3();
var _vector2$1 = new Vector2();
function BufferAttribute(array, itemSize, normalized) {
  if (Array.isArray(array)) {
    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
  }
  this.name = "";
  this.array = array;
  this.itemSize = itemSize;
  this.count = array !== void 0 ? array.length / itemSize : 0;
  this.normalized = normalized === true;
  this.usage = StaticDrawUsage;
  this.updateRange = { offset: 0, count: -1 };
  this.version = 0;
}
Object.defineProperty(BufferAttribute.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
Object.assign(BufferAttribute.prototype, {
  isBufferAttribute: true,
  onUploadCallback: function() {
  },
  setUsage: function(value) {
    this.usage = value;
    return this;
  },
  copy: function(source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.usage = source.usage;
    return this;
  },
  copyAt: function(index1, attribute, index2) {
    index1 *= this.itemSize;
    index2 *= attribute.itemSize;
    for (let i = 0, l = this.itemSize; i < l; i++) {
      this.array[index1 + i] = attribute.array[index2 + i];
    }
    return this;
  },
  copyArray: function(array) {
    this.array.set(array);
    return this;
  },
  copyColorsArray: function(colors) {
    const array = this.array;
    let offset = 0;
    for (let i = 0, l = colors.length; i < l; i++) {
      let color = colors[i];
      if (color === void 0) {
        console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i);
        color = new Color();
      }
      array[offset++] = color.r;
      array[offset++] = color.g;
      array[offset++] = color.b;
    }
    return this;
  },
  copyVector2sArray: function(vectors) {
    const array = this.array;
    let offset = 0;
    for (let i = 0, l = vectors.length; i < l; i++) {
      let vector = vectors[i];
      if (vector === void 0) {
        console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i);
        vector = new Vector2();
      }
      array[offset++] = vector.x;
      array[offset++] = vector.y;
    }
    return this;
  },
  copyVector3sArray: function(vectors) {
    const array = this.array;
    let offset = 0;
    for (let i = 0, l = vectors.length; i < l; i++) {
      let vector = vectors[i];
      if (vector === void 0) {
        console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i);
        vector = new Vector3();
      }
      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
    }
    return this;
  },
  copyVector4sArray: function(vectors) {
    const array = this.array;
    let offset = 0;
    for (let i = 0, l = vectors.length; i < l; i++) {
      let vector = vectors[i];
      if (vector === void 0) {
        console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i);
        vector = new Vector4();
      }
      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
      array[offset++] = vector.w;
    }
    return this;
  },
  applyMatrix3: function(m) {
    if (this.itemSize === 2) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector2$1.fromBufferAttribute(this, i);
        _vector2$1.applyMatrix3(m);
        this.setXY(i, _vector2$1.x, _vector2$1.y);
      }
    } else if (this.itemSize === 3) {
      for (let i = 0, l = this.count; i < l; i++) {
        _vector$3.fromBufferAttribute(this, i);
        _vector$3.applyMatrix3(m);
        this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
      }
    }
    return this;
  },
  applyMatrix4: function(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$3.x = this.getX(i);
      _vector$3.y = this.getY(i);
      _vector$3.z = this.getZ(i);
      _vector$3.applyMatrix4(m);
      this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
    }
    return this;
  },
  applyNormalMatrix: function(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$3.x = this.getX(i);
      _vector$3.y = this.getY(i);
      _vector$3.z = this.getZ(i);
      _vector$3.applyNormalMatrix(m);
      this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
    }
    return this;
  },
  transformDirection: function(m) {
    for (let i = 0, l = this.count; i < l; i++) {
      _vector$3.x = this.getX(i);
      _vector$3.y = this.getY(i);
      _vector$3.z = this.getZ(i);
      _vector$3.transformDirection(m);
      this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
    }
    return this;
  },
  set: function(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  },
  getX: function(index) {
    return this.array[index * this.itemSize];
  },
  setX: function(index, x) {
    this.array[index * this.itemSize] = x;
    return this;
  },
  getY: function(index) {
    return this.array[index * this.itemSize + 1];
  },
  setY: function(index, y) {
    this.array[index * this.itemSize + 1] = y;
    return this;
  },
  getZ: function(index) {
    return this.array[index * this.itemSize + 2];
  },
  setZ: function(index, z) {
    this.array[index * this.itemSize + 2] = z;
    return this;
  },
  getW: function(index) {
    return this.array[index * this.itemSize + 3];
  },
  setW: function(index, w) {
    this.array[index * this.itemSize + 3] = w;
    return this;
  },
  setXY: function(index, x, y) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    return this;
  },
  setXYZ: function(index, x, y, z) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    return this;
  },
  setXYZW: function(index, x, y, z, w) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    this.array[index + 3] = w;
    return this;
  },
  onUpload: function(callback) {
    this.onUploadCallback = callback;
    return this;
  },
  clone: function() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  },
  toJSON: function() {
    return {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.prototype.slice.call(this.array),
      normalized: this.normalized
    };
  }
});
function Int8BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);
}
Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
function Uint8BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);
}
Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);
}
Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
function Int16BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);
}
Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
function Uint16BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
}
Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
function Int32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);
}
Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
function Uint32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);
}
Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
function Float16BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
}
Float16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Float16BufferAttribute.prototype.constructor = Float16BufferAttribute;
Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;
function Float32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);
}
Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
function Float64BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);
}
Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
var DirectGeometry = class {
  constructor() {
    this.vertices = [];
    this.normals = [];
    this.colors = [];
    this.uvs = [];
    this.uvs2 = [];
    this.groups = [];
    this.morphTargets = {};
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.verticesNeedUpdate = false;
    this.normalsNeedUpdate = false;
    this.colorsNeedUpdate = false;
    this.uvsNeedUpdate = false;
    this.groupsNeedUpdate = false;
  }
  computeGroups(geometry) {
    const groups = [];
    let group, i;
    let materialIndex = void 0;
    const faces = geometry.faces;
    for (i = 0; i < faces.length; i++) {
      const face = faces[i];
      if (face.materialIndex !== materialIndex) {
        materialIndex = face.materialIndex;
        if (group !== void 0) {
          group.count = i * 3 - group.start;
          groups.push(group);
        }
        group = {
          start: i * 3,
          materialIndex
        };
      }
    }
    if (group !== void 0) {
      group.count = i * 3 - group.start;
      groups.push(group);
    }
    this.groups = groups;
  }
  fromGeometry(geometry) {
    const faces = geometry.faces;
    const vertices = geometry.vertices;
    const faceVertexUvs = geometry.faceVertexUvs;
    const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;
    const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;
    const morphTargets = geometry.morphTargets;
    const morphTargetsLength = morphTargets.length;
    let morphTargetsPosition;
    if (morphTargetsLength > 0) {
      morphTargetsPosition = [];
      for (let i = 0; i < morphTargetsLength; i++) {
        morphTargetsPosition[i] = {
          name: morphTargets[i].name,
          data: []
        };
      }
      this.morphTargets.position = morphTargetsPosition;
    }
    const morphNormals = geometry.morphNormals;
    const morphNormalsLength = morphNormals.length;
    let morphTargetsNormal;
    if (morphNormalsLength > 0) {
      morphTargetsNormal = [];
      for (let i = 0; i < morphNormalsLength; i++) {
        morphTargetsNormal[i] = {
          name: morphNormals[i].name,
          data: []
        };
      }
      this.morphTargets.normal = morphTargetsNormal;
    }
    const skinIndices = geometry.skinIndices;
    const skinWeights = geometry.skinWeights;
    const hasSkinIndices = skinIndices.length === vertices.length;
    const hasSkinWeights = skinWeights.length === vertices.length;
    if (vertices.length > 0 && faces.length === 0) {
      console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
    }
    for (let i = 0; i < faces.length; i++) {
      const face = faces[i];
      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);
      const vertexNormals = face.vertexNormals;
      if (vertexNormals.length === 3) {
        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);
      } else {
        const normal = face.normal;
        this.normals.push(normal, normal, normal);
      }
      const vertexColors = face.vertexColors;
      if (vertexColors.length === 3) {
        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);
      } else {
        const color = face.color;
        this.colors.push(color, color, color);
      }
      if (hasFaceVertexUv === true) {
        const vertexUvs = faceVertexUvs[0][i];
        if (vertexUvs !== void 0) {
          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
        } else {
          console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", i);
          this.uvs.push(new Vector2(), new Vector2(), new Vector2());
        }
      }
      if (hasFaceVertexUv2 === true) {
        const vertexUvs = faceVertexUvs[1][i];
        if (vertexUvs !== void 0) {
          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
        } else {
          console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", i);
          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());
        }
      }
      for (let j = 0; j < morphTargetsLength; j++) {
        const morphTarget = morphTargets[j].vertices;
        morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);
      }
      for (let j = 0; j < morphNormalsLength; j++) {
        const morphNormal = morphNormals[j].vertexNormals[i];
        morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);
      }
      if (hasSkinIndices) {
        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);
      }
      if (hasSkinWeights) {
        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);
      }
    }
    this.computeGroups(geometry);
    this.verticesNeedUpdate = geometry.verticesNeedUpdate;
    this.normalsNeedUpdate = geometry.normalsNeedUpdate;
    this.colorsNeedUpdate = geometry.colorsNeedUpdate;
    this.uvsNeedUpdate = geometry.uvsNeedUpdate;
    this.groupsNeedUpdate = geometry.groupsNeedUpdate;
    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }
    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }
    return this;
  }
};
function arrayMax(array) {
  if (array.length === 0)
    return -Infinity;
  let max = array[0];
  for (let i = 1, l = array.length; i < l; ++i) {
    if (array[i] > max)
      max = array[i];
  }
  return max;
}
var TYPED_ARRAYS = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray: typeof Uint8ClampedArray !== "undefined" ? Uint8ClampedArray : Uint8Array,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function getTypedArray(type, buffer) {
  return new TYPED_ARRAYS[type](buffer);
}
var _bufferGeometryId = 1;
var _m1$2 = new Matrix4();
var _obj = new Object3D();
var _offset = new Vector3();
var _box$2 = new Box3();
var _boxMorphTargets = new Box3();
var _vector$4 = new Vector3();
function BufferGeometry() {
  Object.defineProperty(this, "id", { value: _bufferGeometryId += 2 });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "BufferGeometry";
  this.index = null;
  this.attributes = {};
  this.morphAttributes = {};
  this.morphTargetsRelative = false;
  this.groups = [];
  this.boundingBox = null;
  this.boundingSphere = null;
  this.drawRange = { start: 0, count: Infinity };
  this.userData = {};
}
BufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: BufferGeometry,
  isBufferGeometry: true,
  getIndex: function() {
    return this.index;
  },
  setIndex: function(index) {
    if (Array.isArray(index)) {
      this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
    } else {
      this.index = index;
    }
    return this;
  },
  getAttribute: function(name) {
    return this.attributes[name];
  },
  setAttribute: function(name, attribute) {
    this.attributes[name] = attribute;
    return this;
  },
  deleteAttribute: function(name) {
    delete this.attributes[name];
    return this;
  },
  hasAttribute: function(name) {
    return this.attributes[name] !== void 0;
  },
  addGroup: function(start, count, materialIndex = 0) {
    this.groups.push({
      start,
      count,
      materialIndex
    });
  },
  clearGroups: function() {
    this.groups = [];
  },
  setDrawRange: function(start, count) {
    this.drawRange.start = start;
    this.drawRange.count = count;
  },
  applyMatrix4: function(matrix) {
    const position = this.attributes.position;
    if (position !== void 0) {
      position.applyMatrix4(matrix);
      position.needsUpdate = true;
    }
    const normal = this.attributes.normal;
    if (normal !== void 0) {
      const normalMatrix = new Matrix3().getNormalMatrix(matrix);
      normal.applyNormalMatrix(normalMatrix);
      normal.needsUpdate = true;
    }
    const tangent = this.attributes.tangent;
    if (tangent !== void 0) {
      tangent.transformDirection(matrix);
      tangent.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  },
  rotateX: function(angle) {
    _m1$2.makeRotationX(angle);
    this.applyMatrix4(_m1$2);
    return this;
  },
  rotateY: function(angle) {
    _m1$2.makeRotationY(angle);
    this.applyMatrix4(_m1$2);
    return this;
  },
  rotateZ: function(angle) {
    _m1$2.makeRotationZ(angle);
    this.applyMatrix4(_m1$2);
    return this;
  },
  translate: function(x, y, z) {
    _m1$2.makeTranslation(x, y, z);
    this.applyMatrix4(_m1$2);
    return this;
  },
  scale: function(x, y, z) {
    _m1$2.makeScale(x, y, z);
    this.applyMatrix4(_m1$2);
    return this;
  },
  lookAt: function(vector) {
    _obj.lookAt(vector);
    _obj.updateMatrix();
    this.applyMatrix4(_obj.matrix);
    return this;
  },
  center: function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset).negate();
    this.translate(_offset.x, _offset.y, _offset.z);
    return this;
  },
  setFromObject: function(object) {
    const geometry = object.geometry;
    if (object.isPoints || object.isLine) {
      const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);
      const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);
      this.setAttribute("position", positions.copyVector3sArray(geometry.vertices));
      this.setAttribute("color", colors.copyColorsArray(geometry.colors));
      if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {
        const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);
        this.setAttribute("lineDistance", lineDistances.copyArray(geometry.lineDistances));
      }
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
    } else if (object.isMesh) {
      if (geometry && geometry.isGeometry) {
        this.fromGeometry(geometry);
      }
    }
    return this;
  },
  setFromPoints: function(points) {
    const position = [];
    for (let i = 0, l = points.length; i < l; i++) {
      const point = points[i];
      position.push(point.x, point.y, point.z || 0);
    }
    this.setAttribute("position", new Float32BufferAttribute(position, 3));
    return this;
  },
  updateFromObject: function(object) {
    let geometry = object.geometry;
    if (object.isMesh) {
      let direct = geometry.__directGeometry;
      if (geometry.elementsNeedUpdate === true) {
        direct = void 0;
        geometry.elementsNeedUpdate = false;
      }
      if (direct === void 0) {
        return this.fromGeometry(geometry);
      }
      direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
      direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
      direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
      direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
      direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
      geometry.verticesNeedUpdate = false;
      geometry.normalsNeedUpdate = false;
      geometry.colorsNeedUpdate = false;
      geometry.uvsNeedUpdate = false;
      geometry.groupsNeedUpdate = false;
      geometry = direct;
    }
    if (geometry.verticesNeedUpdate === true) {
      const attribute = this.attributes.position;
      if (attribute !== void 0) {
        attribute.copyVector3sArray(geometry.vertices);
        attribute.needsUpdate = true;
      }
      geometry.verticesNeedUpdate = false;
    }
    if (geometry.normalsNeedUpdate === true) {
      const attribute = this.attributes.normal;
      if (attribute !== void 0) {
        attribute.copyVector3sArray(geometry.normals);
        attribute.needsUpdate = true;
      }
      geometry.normalsNeedUpdate = false;
    }
    if (geometry.colorsNeedUpdate === true) {
      const attribute = this.attributes.color;
      if (attribute !== void 0) {
        attribute.copyColorsArray(geometry.colors);
        attribute.needsUpdate = true;
      }
      geometry.colorsNeedUpdate = false;
    }
    if (geometry.uvsNeedUpdate) {
      const attribute = this.attributes.uv;
      if (attribute !== void 0) {
        attribute.copyVector2sArray(geometry.uvs);
        attribute.needsUpdate = true;
      }
      geometry.uvsNeedUpdate = false;
    }
    if (geometry.lineDistancesNeedUpdate) {
      const attribute = this.attributes.lineDistance;
      if (attribute !== void 0) {
        attribute.copyArray(geometry.lineDistances);
        attribute.needsUpdate = true;
      }
      geometry.lineDistancesNeedUpdate = false;
    }
    if (geometry.groupsNeedUpdate) {
      geometry.computeGroups(object.geometry);
      this.groups = geometry.groups;
      geometry.groupsNeedUpdate = false;
    }
    return this;
  },
  fromGeometry: function(geometry) {
    geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);
    return this.fromDirectGeometry(geometry.__directGeometry);
  },
  fromDirectGeometry: function(geometry) {
    const positions = new Float32Array(geometry.vertices.length * 3);
    this.setAttribute("position", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));
    if (geometry.normals.length > 0) {
      const normals = new Float32Array(geometry.normals.length * 3);
      this.setAttribute("normal", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));
    }
    if (geometry.colors.length > 0) {
      const colors = new Float32Array(geometry.colors.length * 3);
      this.setAttribute("color", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));
    }
    if (geometry.uvs.length > 0) {
      const uvs = new Float32Array(geometry.uvs.length * 2);
      this.setAttribute("uv", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));
    }
    if (geometry.uvs2.length > 0) {
      const uvs2 = new Float32Array(geometry.uvs2.length * 2);
      this.setAttribute("uv2", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));
    }
    this.groups = geometry.groups;
    for (const name in geometry.morphTargets) {
      const array = [];
      const morphTargets = geometry.morphTargets[name];
      for (let i = 0, l = morphTargets.length; i < l; i++) {
        const morphTarget = morphTargets[i];
        const attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);
        attribute.name = morphTarget.name;
        array.push(attribute.copyVector3sArray(morphTarget.data));
      }
      this.morphAttributes[name] = array;
    }
    if (geometry.skinIndices.length > 0) {
      const skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);
      this.setAttribute("skinIndex", skinIndices.copyVector4sArray(geometry.skinIndices));
    }
    if (geometry.skinWeights.length > 0) {
      const skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);
      this.setAttribute("skinWeight", skinWeights.copyVector4sArray(geometry.skinWeights));
    }
    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }
    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }
    return this;
  },
  computeBoundingBox: function() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
      this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
      return;
    }
    if (position !== void 0) {
      this.boundingBox.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
          const morphAttribute = morphAttributesPosition[i];
          _box$2.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$4.addVectors(this.boundingBox.min, _box$2.min);
            this.boundingBox.expandByPoint(_vector$4);
            _vector$4.addVectors(this.boundingBox.max, _box$2.max);
            this.boundingBox.expandByPoint(_vector$4);
          } else {
            this.boundingBox.expandByPoint(_box$2.min);
            this.boundingBox.expandByPoint(_box$2.max);
          }
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  },
  computeBoundingSphere: function() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
      this.boundingSphere.set(new Vector3(), Infinity);
      return;
    }
    if (position) {
      const center = this.boundingSphere.center;
      _box$2.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
          const morphAttribute = morphAttributesPosition[i];
          _boxMorphTargets.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$4.addVectors(_box$2.min, _boxMorphTargets.min);
            _box$2.expandByPoint(_vector$4);
            _vector$4.addVectors(_box$2.max, _boxMorphTargets.max);
            _box$2.expandByPoint(_vector$4);
          } else {
            _box$2.expandByPoint(_boxMorphTargets.min);
            _box$2.expandByPoint(_boxMorphTargets.max);
          }
        }
      }
      _box$2.getCenter(center);
      let maxRadiusSq = 0;
      for (let i = 0, il = position.count; i < il; i++) {
        _vector$4.fromBufferAttribute(position, i);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
      }
      if (morphAttributesPosition) {
        for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {
          const morphAttribute = morphAttributesPosition[i];
          const morphTargetsRelative = this.morphTargetsRelative;
          for (let j = 0, jl = morphAttribute.count; j < jl; j++) {
            _vector$4.fromBufferAttribute(morphAttribute, j);
            if (morphTargetsRelative) {
              _offset.fromBufferAttribute(position, j);
              _vector$4.add(_offset);
            }
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
  },
  computeFaceNormals: function() {
  },
  computeVertexNormals: function() {
    const index = this.index;
    const positionAttribute = this.getAttribute("position");
    if (positionAttribute !== void 0) {
      let normalAttribute = this.getAttribute("normal");
      if (normalAttribute === void 0) {
        normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
        this.setAttribute("normal", normalAttribute);
      } else {
        for (let i = 0, il = normalAttribute.count; i < il; i++) {
          normalAttribute.setXYZ(i, 0, 0, 0);
        }
      }
      const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
      const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
      const cb = new Vector3(), ab = new Vector3();
      if (index) {
        for (let i = 0, il = index.count; i < il; i += 3) {
          const vA = index.getX(i + 0);
          const vB = index.getX(i + 1);
          const vC = index.getX(i + 2);
          pA.fromBufferAttribute(positionAttribute, vA);
          pB.fromBufferAttribute(positionAttribute, vB);
          pC.fromBufferAttribute(positionAttribute, vC);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          nA.fromBufferAttribute(normalAttribute, vA);
          nB.fromBufferAttribute(normalAttribute, vB);
          nC.fromBufferAttribute(normalAttribute, vC);
          nA.add(cb);
          nB.add(cb);
          nC.add(cb);
          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
        }
      } else {
        for (let i = 0, il = positionAttribute.count; i < il; i += 3) {
          pA.fromBufferAttribute(positionAttribute, i + 0);
          pB.fromBufferAttribute(positionAttribute, i + 1);
          pC.fromBufferAttribute(positionAttribute, i + 2);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);
        }
      }
      this.normalizeNormals();
      normalAttribute.needsUpdate = true;
    }
  },
  merge: function(geometry, offset) {
    if (!(geometry && geometry.isBufferGeometry)) {
      console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry);
      return;
    }
    if (offset === void 0) {
      offset = 0;
      console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      if (geometry.attributes[key] === void 0)
        continue;
      const attribute1 = attributes[key];
      const attributeArray1 = attribute1.array;
      const attribute2 = geometry.attributes[key];
      const attributeArray2 = attribute2.array;
      const attributeOffset = attribute2.itemSize * offset;
      const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
      for (let i = 0, j = attributeOffset; i < length; i++, j++) {
        attributeArray1[j] = attributeArray2[i];
      }
    }
    return this;
  },
  normalizeNormals: function() {
    const normals = this.attributes.normal;
    for (let i = 0, il = normals.count; i < il; i++) {
      _vector$4.fromBufferAttribute(normals, i);
      _vector$4.normalize();
      normals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);
    }
  },
  toNonIndexed: function() {
    function convertBufferAttribute(attribute, indices2) {
      const array = attribute.array;
      const itemSize = attribute.itemSize;
      const normalized = attribute.normalized;
      const array2 = new array.constructor(indices2.length * itemSize);
      let index = 0, index2 = 0;
      for (let i = 0, l = indices2.length; i < l; i++) {
        index = indices2[i] * itemSize;
        for (let j = 0; j < itemSize; j++) {
          array2[index2++] = array[index++];
        }
      }
      return new BufferAttribute(array2, itemSize, normalized);
    }
    if (this.index === null) {
      console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.");
      return this;
    }
    const geometry2 = new BufferGeometry();
    const indices = this.index.array;
    const attributes = this.attributes;
    for (const name in attributes) {
      const attribute = attributes[name];
      const newAttribute = convertBufferAttribute(attribute, indices);
      geometry2.setAttribute(name, newAttribute);
    }
    const morphAttributes = this.morphAttributes;
    for (const name in morphAttributes) {
      const morphArray = [];
      const morphAttribute = morphAttributes[name];
      for (let i = 0, il = morphAttribute.length; i < il; i++) {
        const attribute = morphAttribute[i];
        const newAttribute = convertBufferAttribute(attribute, indices);
        morphArray.push(newAttribute);
      }
      geometry2.morphAttributes[name] = morphArray;
    }
    geometry2.morphTargetsRelative = this.morphTargetsRelative;
    const groups = this.groups;
    for (let i = 0, l = groups.length; i < l; i++) {
      const group = groups[i];
      geometry2.addGroup(group.start, group.count, group.materialIndex);
    }
    return geometry2;
  },
  toJSON: function() {
    const data = {
      metadata: {
        version: 4.5,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "")
      data.name = this.name;
    if (Object.keys(this.userData).length > 0)
      data.userData = this.userData;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0)
          data[key] = parameters[key];
      }
      return data;
    }
    data.data = { attributes: {} };
    const index = this.index;
    if (index !== null) {
      data.data.index = {
        type: index.array.constructor.name,
        array: Array.prototype.slice.call(index.array)
      };
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      const attribute = attributes[key];
      const attributeData = attribute.toJSON(data.data);
      if (attribute.name !== "")
        attributeData.name = attribute.name;
      data.data.attributes[key] = attributeData;
    }
    const morphAttributes = {};
    let hasMorphAttributes = false;
    for (const key in this.morphAttributes) {
      const attributeArray = this.morphAttributes[key];
      const array = [];
      for (let i = 0, il = attributeArray.length; i < il; i++) {
        const attribute = attributeArray[i];
        const attributeData = attribute.toJSON(data.data);
        if (attribute.name !== "")
          attributeData.name = attribute.name;
        array.push(attributeData);
      }
      if (array.length > 0) {
        morphAttributes[key] = array;
        hasMorphAttributes = true;
      }
    }
    if (hasMorphAttributes) {
      data.data.morphAttributes = morphAttributes;
      data.data.morphTargetsRelative = this.morphTargetsRelative;
    }
    const groups = this.groups;
    if (groups.length > 0) {
      data.data.groups = JSON.parse(JSON.stringify(groups));
    }
    const boundingSphere = this.boundingSphere;
    if (boundingSphere !== null) {
      data.data.boundingSphere = {
        center: boundingSphere.center.toArray(),
        radius: boundingSphere.radius
      };
    }
    return data;
  },
  clone: function() {
    return new BufferGeometry().copy(this);
  },
  copy: function(source) {
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    const data = {};
    this.name = source.name;
    const index = source.index;
    if (index !== null) {
      this.setIndex(index.clone(data));
    }
    const attributes = source.attributes;
    for (const name in attributes) {
      const attribute = attributes[name];
      this.setAttribute(name, attribute.clone(data));
    }
    const morphAttributes = source.morphAttributes;
    for (const name in morphAttributes) {
      const array = [];
      const morphAttribute = morphAttributes[name];
      for (let i = 0, l = morphAttribute.length; i < l; i++) {
        array.push(morphAttribute[i].clone(data));
      }
      this.morphAttributes[name] = array;
    }
    this.morphTargetsRelative = source.morphTargetsRelative;
    const groups = source.groups;
    for (let i = 0, l = groups.length; i < l; i++) {
      const group = groups[i];
      this.addGroup(group.start, group.count, group.materialIndex);
    }
    const boundingBox = source.boundingBox;
    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.drawRange.start = source.drawRange.start;
    this.drawRange.count = source.drawRange.count;
    this.userData = source.userData;
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
var _inverseMatrix = new Matrix4();
var _ray = new Ray();
var _sphere = new Sphere();
var _vA = new Vector3();
var _vB = new Vector3();
var _vC = new Vector3();
var _tempA = new Vector3();
var _tempB = new Vector3();
var _tempC = new Vector3();
var _morphA = new Vector3();
var _morphB = new Vector3();
var _morphC = new Vector3();
var _uvA = new Vector2();
var _uvB = new Vector2();
var _uvC = new Vector2();
var _intersectionPoint = new Vector3();
var _intersectionPointWorld = new Vector3();
function Mesh(geometry, material) {
  Object3D.call(this);
  this.type = "Mesh";
  this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
  this.material = material !== void 0 ? material : new MeshBasicMaterial();
  this.updateMorphTargets();
}
Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Mesh,
  isMesh: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    if (source.morphTargetInfluences !== void 0) {
      this.morphTargetInfluences = source.morphTargetInfluences.slice();
    }
    if (source.morphTargetDictionary !== void 0) {
      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
    }
    this.material = source.material;
    this.geometry = source.geometry;
    return this;
  },
  updateMorphTargets: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    } else {
      const morphTargets = geometry.morphTargets;
      if (morphTargets !== void 0 && morphTargets.length > 0) {
        console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
  },
  raycast: function(raycaster, intersects2) {
    const geometry = this.geometry;
    const material = this.material;
    const matrixWorld = this.matrixWorld;
    if (material === void 0)
      return;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere.copy(geometry.boundingSphere);
    _sphere.applyMatrix4(matrixWorld);
    if (raycaster.ray.intersectsSphere(_sphere) === false)
      return;
    _inverseMatrix.copy(matrixWorld).invert();
    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
    if (geometry.boundingBox !== null) {
      if (_ray.intersectsBox(geometry.boundingBox) === false)
        return;
    }
    let intersection;
    if (geometry.isBufferGeometry) {
      const index = geometry.index;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      const uv = geometry.attributes.uv;
      const uv2 = geometry.attributes.uv2;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = index.getX(j);
              const b = index.getX(j + 1);
              const c = index.getX(j + 2);
              intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects2.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = index.getX(i);
            const b = index.getX(i + 1);
            const c = index.getX(i + 2);
            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects2.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i = 0, il = groups.length; i < il; i++) {
            const group = groups[i];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
            for (let j = start, jl = end; j < jl; j += 3) {
              const a = j;
              const b = j + 1;
              const c = j + 2;
              intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
              if (intersection) {
                intersection.faceIndex = Math.floor(j / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects2.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i = start, il = end; i < il; i += 3) {
            const a = i;
            const b = i + 1;
            const c = i + 2;
            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
            if (intersection) {
              intersection.faceIndex = Math.floor(i / 3);
              intersects2.push(intersection);
            }
          }
        }
      }
    } else if (geometry.isGeometry) {
      const isMultiMaterial = Array.isArray(material);
      const vertices = geometry.vertices;
      const faces = geometry.faces;
      let uvs;
      const faceVertexUvs = geometry.faceVertexUvs[0];
      if (faceVertexUvs.length > 0)
        uvs = faceVertexUvs;
      for (let f = 0, fl = faces.length; f < fl; f++) {
        const face = faces[f];
        const faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;
        if (faceMaterial === void 0)
          continue;
        const fvA = vertices[face.a];
        const fvB = vertices[face.b];
        const fvC = vertices[face.c];
        intersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint);
        if (intersection) {
          if (uvs && uvs[f]) {
            const uvs_f = uvs[f];
            _uvA.copy(uvs_f[0]);
            _uvB.copy(uvs_f[1]);
            _uvC.copy(uvs_f[2]);
            intersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());
          }
          intersection.face = face;
          intersection.faceIndex = f;
          intersects2.push(intersection);
        }
      }
    }
  }
});
function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
  let intersect;
  if (material.side === BackSide) {
    intersect = ray.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
  }
  if (intersect === null)
    return null;
  _intersectionPointWorld.copy(point);
  _intersectionPointWorld.applyMatrix4(object.matrixWorld);
  const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
  if (distance < raycaster.near || distance > raycaster.far)
    return null;
  return {
    distance,
    point: _intersectionPointWorld.clone(),
    object
  };
}
function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
  _vA.fromBufferAttribute(position, a);
  _vB.fromBufferAttribute(position, b);
  _vC.fromBufferAttribute(position, c);
  const morphInfluences = object.morphTargetInfluences;
  if (material.morphTargets && morphPosition && morphInfluences) {
    _morphA.set(0, 0, 0);
    _morphB.set(0, 0, 0);
    _morphC.set(0, 0, 0);
    for (let i = 0, il = morphPosition.length; i < il; i++) {
      const influence = morphInfluences[i];
      const morphAttribute = morphPosition[i];
      if (influence === 0)
        continue;
      _tempA.fromBufferAttribute(morphAttribute, a);
      _tempB.fromBufferAttribute(morphAttribute, b);
      _tempC.fromBufferAttribute(morphAttribute, c);
      if (morphTargetsRelative) {
        _morphA.addScaledVector(_tempA, influence);
        _morphB.addScaledVector(_tempB, influence);
        _morphC.addScaledVector(_tempC, influence);
      } else {
        _morphA.addScaledVector(_tempA.sub(_vA), influence);
        _morphB.addScaledVector(_tempB.sub(_vB), influence);
        _morphC.addScaledVector(_tempC.sub(_vC), influence);
      }
    }
    _vA.add(_morphA);
    _vB.add(_morphB);
    _vC.add(_morphC);
  }
  if (object.isSkinnedMesh) {
    object.boneTransform(a, _vA);
    object.boneTransform(b, _vB);
    object.boneTransform(c, _vC);
  }
  const intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);
  if (intersection) {
    if (uv) {
      _uvA.fromBufferAttribute(uv, a);
      _uvB.fromBufferAttribute(uv, b);
      _uvC.fromBufferAttribute(uv, c);
      intersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
    }
    if (uv2) {
      _uvA.fromBufferAttribute(uv2, a);
      _uvB.fromBufferAttribute(uv2, b);
      _uvC.fromBufferAttribute(uv2, c);
      intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
    }
    const face = new Face3(a, b, c);
    Triangle.getNormal(_vA, _vB, _vC, face.normal);
    intersection.face = face;
  }
  return intersection;
}
var BoxBufferGeometry = class extends BufferGeometry {
  constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
    super();
    this.type = "BoxBufferGeometry";
    this.parameters = {
      width,
      height,
      depth,
      widthSegments,
      heightSegments,
      depthSegments
    };
    const scope = this;
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let numberOfVertices = 0;
    let groupStart = 0;
    buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
    buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
    buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
    buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
    buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
    buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function buildPlane(u, v, w, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
      const segmentWidth = width2 / gridX;
      const segmentHeight = height2 / gridY;
      const widthHalf = width2 / 2;
      const heightHalf = height2 / 2;
      const depthHalf = depth2 / 2;
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      let vertexCounter = 0;
      let groupCount = 0;
      const vector = new Vector3();
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segmentHeight - heightHalf;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segmentWidth - widthHalf;
          vector[u] = x * udir;
          vector[v] = y * vdir;
          vector[w] = depthHalf;
          vertices.push(vector.x, vector.y, vector.z);
          vector[u] = 0;
          vector[v] = 0;
          vector[w] = depth2 > 0 ? 1 : -1;
          normals.push(vector.x, vector.y, vector.z);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
          vertexCounter += 1;
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = numberOfVertices + ix + gridX1 * iy;
          const b = numberOfVertices + ix + gridX1 * (iy + 1);
          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
          const d = numberOfVertices + (ix + 1) + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, materialIndex);
      groupStart += groupCount;
      numberOfVertices += vertexCounter;
    }
  }
};
function cloneUniforms(src) {
  const dst = {};
  for (const u in src) {
    dst[u] = {};
    for (const p in src[u]) {
      const property = src[u][p];
      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {
        dst[u][p] = property.clone();
      } else if (Array.isArray(property)) {
        dst[u][p] = property.slice();
      } else {
        dst[u][p] = property;
      }
    }
  }
  return dst;
}
function mergeUniforms(uniforms) {
  const merged = {};
  for (let u = 0; u < uniforms.length; u++) {
    const tmp2 = cloneUniforms(uniforms[u]);
    for (const p in tmp2) {
      merged[p] = tmp2[p];
    }
  }
  return merged;
}
var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
function ShaderMaterial(parameters) {
  Material.call(this);
  this.type = "ShaderMaterial";
  this.defines = {};
  this.uniforms = {};
  this.vertexShader = default_vertex;
  this.fragmentShader = default_fragment;
  this.linewidth = 1;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.lights = false;
  this.clipping = false;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.extensions = {
    derivatives: false,
    fragDepth: false,
    drawBuffers: false,
    shaderTextureLOD: false
  };
  this.defaultAttributeValues = {
    "color": [1, 1, 1],
    "uv": [0, 0],
    "uv2": [0, 0]
  };
  this.index0AttributeName = void 0;
  this.uniformsNeedUpdate = false;
  this.glslVersion = null;
  if (parameters !== void 0) {
    if (parameters.attributes !== void 0) {
      console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.");
    }
    this.setValues(parameters);
  }
}
ShaderMaterial.prototype = Object.create(Material.prototype);
ShaderMaterial.prototype.constructor = ShaderMaterial;
ShaderMaterial.prototype.isShaderMaterial = true;
ShaderMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.fragmentShader = source.fragmentShader;
  this.vertexShader = source.vertexShader;
  this.uniforms = cloneUniforms(source.uniforms);
  this.defines = Object.assign({}, source.defines);
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.lights = source.lights;
  this.clipping = source.clipping;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  this.extensions = Object.assign({}, source.extensions);
  this.glslVersion = source.glslVersion;
  return this;
};
ShaderMaterial.prototype.toJSON = function(meta) {
  const data = Material.prototype.toJSON.call(this, meta);
  data.glslVersion = this.glslVersion;
  data.uniforms = {};
  for (const name in this.uniforms) {
    const uniform = this.uniforms[name];
    const value = uniform.value;
    if (value && value.isTexture) {
      data.uniforms[name] = {
        type: "t",
        value: value.toJSON(meta).uuid
      };
    } else if (value && value.isColor) {
      data.uniforms[name] = {
        type: "c",
        value: value.getHex()
      };
    } else if (value && value.isVector2) {
      data.uniforms[name] = {
        type: "v2",
        value: value.toArray()
      };
    } else if (value && value.isVector3) {
      data.uniforms[name] = {
        type: "v3",
        value: value.toArray()
      };
    } else if (value && value.isVector4) {
      data.uniforms[name] = {
        type: "v4",
        value: value.toArray()
      };
    } else if (value && value.isMatrix3) {
      data.uniforms[name] = {
        type: "m3",
        value: value.toArray()
      };
    } else if (value && value.isMatrix4) {
      data.uniforms[name] = {
        type: "m4",
        value: value.toArray()
      };
    } else {
      data.uniforms[name] = {
        value
      };
    }
  }
  if (Object.keys(this.defines).length > 0)
    data.defines = this.defines;
  data.vertexShader = this.vertexShader;
  data.fragmentShader = this.fragmentShader;
  const extensions = {};
  for (const key in this.extensions) {
    if (this.extensions[key] === true)
      extensions[key] = true;
  }
  if (Object.keys(extensions).length > 0)
    data.extensions = extensions;
  return data;
};
function Camera() {
  Object3D.call(this);
  this.type = "Camera";
  this.matrixWorldInverse = new Matrix4();
  this.projectionMatrix = new Matrix4();
  this.projectionMatrixInverse = new Matrix4();
}
Camera.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Camera,
  isCamera: true,
  copy: function(source, recursive) {
    Object3D.prototype.copy.call(this, source, recursive);
    this.matrixWorldInverse.copy(source.matrixWorldInverse);
    this.projectionMatrix.copy(source.projectionMatrix);
    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
    return this;
  },
  getWorldDirection: function(target) {
    if (target === void 0) {
      console.warn("THREE.Camera: .getWorldDirection() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    const e = this.matrixWorld.elements;
    return target.set(-e[8], -e[9], -e[10]).normalize();
  },
  updateMatrixWorld: function(force) {
    Object3D.prototype.updateMatrixWorld.call(this, force);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  },
  updateWorldMatrix: function(updateParents, updateChildren) {
    Object3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  },
  clone: function() {
    return new this.constructor().copy(this);
  }
});
function PerspectiveCamera(fov2 = 50, aspect2 = 1, near = 0.1, far = 2e3) {
  Camera.call(this);
  this.type = "PerspectiveCamera";
  this.fov = fov2;
  this.zoom = 1;
  this.near = near;
  this.far = far;
  this.focus = 10;
  this.aspect = aspect2;
  this.view = null;
  this.filmGauge = 35;
  this.filmOffset = 0;
  this.updateProjectionMatrix();
}
PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {
  constructor: PerspectiveCamera,
  isPerspectiveCamera: true,
  copy: function(source, recursive) {
    Camera.prototype.copy.call(this, source, recursive);
    this.fov = source.fov;
    this.zoom = source.zoom;
    this.near = source.near;
    this.far = source.far;
    this.focus = source.focus;
    this.aspect = source.aspect;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    this.filmGauge = source.filmGauge;
    this.filmOffset = source.filmOffset;
    return this;
  },
  setFocalLength: function(focalLength) {
    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    this.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);
    this.updateProjectionMatrix();
  },
  getFocalLength: function() {
    const vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / vExtentSlope;
  },
  getEffectiveFOV: function() {
    return MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);
  },
  getFilmWidth: function() {
    return this.filmGauge * Math.min(this.aspect, 1);
  },
  getFilmHeight: function() {
    return this.filmGauge / Math.max(this.aspect, 1);
  },
  setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
    this.aspect = fullWidth / fullHeight;
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  },
  clearViewOffset: function() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  },
  updateProjectionMatrix: function() {
    const near = this.near;
    let top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;
    let height = 2 * top;
    let width = this.aspect * height;
    let left = -0.5 * width;
    const view = this.view;
    if (this.view !== null && this.view.enabled) {
      const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
      left += view.offsetX * width / fullWidth;
      top -= view.offsetY * height / fullHeight;
      width *= view.width / fullWidth;
      height *= view.height / fullHeight;
    }
    const skew = this.filmOffset;
    if (skew !== 0)
      left += near * skew / this.getFilmWidth();
    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    data.object.fov = this.fov;
    data.object.zoom = this.zoom;
    data.object.near = this.near;
    data.object.far = this.far;
    data.object.focus = this.focus;
    data.object.aspect = this.aspect;
    if (this.view !== null)
      data.object.view = Object.assign({}, this.view);
    data.object.filmGauge = this.filmGauge;
    data.object.filmOffset = this.filmOffset;
    return data;
  }
});
var fov = 90;
var aspect = 1;
function CubeCamera(near, far, renderTarget) {
  Object3D.call(this);
  this.type = "CubeCamera";
  if (renderTarget.isWebGLCubeRenderTarget !== true) {
    console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
    return;
  }
  this.renderTarget = renderTarget;
  const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
  cameraPX.layers = this.layers;
  cameraPX.up.set(0, -1, 0);
  cameraPX.lookAt(new Vector3(1, 0, 0));
  this.add(cameraPX);
  const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
  cameraNX.layers = this.layers;
  cameraNX.up.set(0, -1, 0);
  cameraNX.lookAt(new Vector3(-1, 0, 0));
  this.add(cameraNX);
  const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
  cameraPY.layers = this.layers;
  cameraPY.up.set(0, 0, 1);
  cameraPY.lookAt(new Vector3(0, 1, 0));
  this.add(cameraPY);
  const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
  cameraNY.layers = this.layers;
  cameraNY.up.set(0, 0, -1);
  cameraNY.lookAt(new Vector3(0, -1, 0));
  this.add(cameraNY);
  const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
  cameraPZ.layers = this.layers;
  cameraPZ.up.set(0, -1, 0);
  cameraPZ.lookAt(new Vector3(0, 0, 1));
  this.add(cameraPZ);
  const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
  cameraNZ.layers = this.layers;
  cameraNZ.up.set(0, -1, 0);
  cameraNZ.lookAt(new Vector3(0, 0, -1));
  this.add(cameraNZ);
  this.update = function(renderer, scene) {
    if (this.parent === null)
      this.updateMatrixWorld();
    const currentXrEnabled = renderer.xr.enabled;
    const currentRenderTarget = renderer.getRenderTarget();
    renderer.xr.enabled = false;
    const generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer.setRenderTarget(renderTarget, 0);
    renderer.render(scene, cameraPX);
    renderer.setRenderTarget(renderTarget, 1);
    renderer.render(scene, cameraNX);
    renderer.setRenderTarget(renderTarget, 2);
    renderer.render(scene, cameraPY);
    renderer.setRenderTarget(renderTarget, 3);
    renderer.render(scene, cameraNY);
    renderer.setRenderTarget(renderTarget, 4);
    renderer.render(scene, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer.setRenderTarget(renderTarget, 5);
    renderer.render(scene, cameraNZ);
    renderer.setRenderTarget(currentRenderTarget);
    renderer.xr.enabled = currentXrEnabled;
  };
}
CubeCamera.prototype = Object.create(Object3D.prototype);
CubeCamera.prototype.constructor = CubeCamera;
function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
  images = images !== void 0 ? images : [];
  mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
  format = format !== void 0 ? format : RGBFormat;
  Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.flipY = false;
  this._needsFlipEnvMap = true;
}
CubeTexture.prototype = Object.create(Texture.prototype);
CubeTexture.prototype.constructor = CubeTexture;
CubeTexture.prototype.isCubeTexture = true;
Object.defineProperty(CubeTexture.prototype, "images", {
  get: function() {
    return this.image;
  },
  set: function(value) {
    this.image = value;
  }
});
function WebGLCubeRenderTarget(size, options, dummy) {
  if (Number.isInteger(options)) {
    console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");
    options = dummy;
  }
  WebGLRenderTarget.call(this, size, size, options);
  options = options || {};
  this.texture = new CubeTexture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
  this.texture._needsFlipEnvMap = false;
}
WebGLCubeRenderTarget.prototype = Object.create(WebGLRenderTarget.prototype);
WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;
WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function(renderer, texture) {
  this.texture.type = texture.type;
  this.texture.format = RGBAFormat;
  this.texture.encoding = texture.encoding;
  this.texture.generateMipmaps = texture.generateMipmaps;
  this.texture.minFilter = texture.minFilter;
  this.texture.magFilter = texture.magFilter;
  const shader = {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: `

			varying vec3 vWorldDirection;

			vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

				return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

			}

			void main() {

				vWorldDirection = transformDirection( position, modelMatrix );

				#include <begin_vertex>
				#include <project_vertex>

			}
		`,
    fragmentShader: `

			uniform sampler2D tEquirect;

			varying vec3 vWorldDirection;

			#include <common>

			void main() {

				vec3 direction = normalize( vWorldDirection );

				vec2 sampleUV = equirectUv( direction );

				gl_FragColor = texture2D( tEquirect, sampleUV );

			}
		`
  };
  const geometry = new BoxBufferGeometry(5, 5, 5);
  const material = new ShaderMaterial({
    name: "CubemapFromEquirect",
    uniforms: cloneUniforms(shader.uniforms),
    vertexShader: shader.vertexShader,
    fragmentShader: shader.fragmentShader,
    side: BackSide,
    blending: NoBlending
  });
  material.uniforms.tEquirect.value = texture;
  const mesh = new Mesh(geometry, material);
  const currentMinFilter = texture.minFilter;
  if (texture.minFilter === LinearMipmapLinearFilter)
    texture.minFilter = LinearFilter;
  const camera = new CubeCamera(1, 10, this);
  camera.update(renderer, mesh);
  texture.minFilter = currentMinFilter;
  mesh.geometry.dispose();
  mesh.material.dispose();
  return this;
};
WebGLCubeRenderTarget.prototype.clear = function(renderer, color, depth, stencil) {
  const currentRenderTarget = renderer.getRenderTarget();
  for (let i = 0; i < 6; i++) {
    renderer.setRenderTarget(this, i);
    renderer.clear(color, depth, stencil);
  }
  renderer.setRenderTarget(currentRenderTarget);
};
function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.image = { data: data || null, width: width || 1, height: height || 1 };
  this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
  this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
  this.generateMipmaps = false;
  this.flipY = false;
  this.unpackAlignment = 1;
  this.needsUpdate = true;
}
DataTexture.prototype = Object.create(Texture.prototype);
DataTexture.prototype.constructor = DataTexture;
DataTexture.prototype.isDataTexture = true;
var _sphere$1 = /* @__PURE__ */ new Sphere();
var _vector$5 = /* @__PURE__ */ new Vector3();
var Frustum = class {
  constructor(p0, p1, p2, p3, p4, p5) {
    this.planes = [
      p0 !== void 0 ? p0 : new Plane(),
      p1 !== void 0 ? p1 : new Plane(),
      p2 !== void 0 ? p2 : new Plane(),
      p3 !== void 0 ? p3 : new Plane(),
      p4 !== void 0 ? p4 : new Plane(),
      p5 !== void 0 ? p5 : new Plane()
    ];
  }
  set(p0, p1, p2, p3, p4, p5) {
    const planes = this.planes;
    planes[0].copy(p0);
    planes[1].copy(p1);
    planes[2].copy(p2);
    planes[3].copy(p3);
    planes[4].copy(p4);
    planes[5].copy(p5);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(frustum) {
    const planes = this.planes;
    for (let i = 0; i < 6; i++) {
      planes[i].copy(frustum.planes[i]);
    }
    return this;
  }
  setFromProjectionMatrix(m) {
    const planes = this.planes;
    const me = m.elements;
    const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
    const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
    const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
    const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
    planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
    return this;
  }
  intersectsObject(object) {
    const geometry = object.geometry;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
    return this.intersectsSphere(_sphere$1);
  }
  intersectsSprite(sprite) {
    _sphere$1.center.set(0, 0, 0);
    _sphere$1.radius = 0.7071067811865476;
    _sphere$1.applyMatrix4(sprite.matrixWorld);
    return this.intersectsSphere(_sphere$1);
  }
  intersectsSphere(sphere) {
    const planes = this.planes;
    const center = sphere.center;
    const negRadius = -sphere.radius;
    for (let i = 0; i < 6; i++) {
      const distance = planes[i].distanceToPoint(center);
      if (distance < negRadius) {
        return false;
      }
    }
    return true;
  }
  intersectsBox(box) {
    const planes = this.planes;
    for (let i = 0; i < 6; i++) {
      const plane = planes[i];
      _vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
      _vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
      _vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;
      if (plane.distanceToPoint(_vector$5) < 0) {
        return false;
      }
    }
    return true;
  }
  containsPoint(point) {
    const planes = this.planes;
    for (let i = 0; i < 6; i++) {
      if (planes[i].distanceToPoint(point) < 0) {
        return false;
      }
    }
    return true;
  }
};
function WebGLAnimation() {
  let context = null;
  let isAnimating = false;
  let animationLoop = null;
  let requestId = null;
  function onAnimationFrame(time, frame) {
    animationLoop(time, frame);
    requestId = context.requestAnimationFrame(onAnimationFrame);
  }
  return {
    start: function() {
      if (isAnimating === true)
        return;
      if (animationLoop === null)
        return;
      requestId = context.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function() {
      context.cancelAnimationFrame(requestId);
      isAnimating = false;
    },
    setAnimationLoop: function(callback) {
      animationLoop = callback;
    },
    setContext: function(value) {
      context = value;
    }
  };
}
function WebGLAttributes(gl, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  const buffers = new WeakMap();
  function createBuffer(attribute, bufferType) {
    const array = attribute.array;
    const usage = attribute.usage;
    const buffer = gl.createBuffer();
    gl.bindBuffer(bufferType, buffer);
    gl.bufferData(bufferType, array, usage);
    attribute.onUploadCallback();
    let type = 5126;
    if (array instanceof Float32Array) {
      type = 5126;
    } else if (array instanceof Float64Array) {
      console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.");
    } else if (array instanceof Uint16Array) {
      if (attribute.isFloat16BufferAttribute) {
        if (isWebGL2) {
          type = 5131;
        } else {
          console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
        }
      } else {
        type = 5123;
      }
    } else if (array instanceof Int16Array) {
      type = 5122;
    } else if (array instanceof Uint32Array) {
      type = 5125;
    } else if (array instanceof Int32Array) {
      type = 5124;
    } else if (array instanceof Int8Array) {
      type = 5120;
    } else if (array instanceof Uint8Array) {
      type = 5121;
    }
    return {
      buffer,
      type,
      bytesPerElement: array.BYTES_PER_ELEMENT,
      version: attribute.version
    };
  }
  function updateBuffer(buffer, attribute, bufferType) {
    const array = attribute.array;
    const updateRange = attribute.updateRange;
    gl.bindBuffer(bufferType, buffer);
    if (updateRange.count === -1) {
      gl.bufferSubData(bufferType, 0, array);
    } else {
      if (isWebGL2) {
        gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
      } else {
        gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
      }
      updateRange.count = -1;
    }
  }
  function get(attribute) {
    if (attribute.isInterleavedBufferAttribute)
      attribute = attribute.data;
    return buffers.get(attribute);
  }
  function remove(attribute) {
    if (attribute.isInterleavedBufferAttribute)
      attribute = attribute.data;
    const data = buffers.get(attribute);
    if (data) {
      gl.deleteBuffer(data.buffer);
      buffers.delete(attribute);
    }
  }
  function update(attribute, bufferType) {
    if (attribute.isGLBufferAttribute) {
      const cached = buffers.get(attribute);
      if (!cached || cached.version < attribute.version) {
        buffers.set(attribute, {
          buffer: attribute.buffer,
          type: attribute.type,
          bytesPerElement: attribute.elementSize,
          version: attribute.version
        });
      }
      return;
    }
    if (attribute.isInterleavedBufferAttribute)
      attribute = attribute.data;
    const data = buffers.get(attribute);
    if (data === void 0) {
      buffers.set(attribute, createBuffer(attribute, bufferType));
    } else if (data.version < attribute.version) {
      updateBuffer(data.buffer, attribute, bufferType);
      data.version = attribute.version;
    }
  }
  return {
    get,
    remove,
    update
  };
}
var PlaneBufferGeometry = class extends BufferGeometry {
  constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
    super();
    this.type = "PlaneBufferGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    const width_half = width / 2;
    const height_half = height / 2;
    const gridX = Math.floor(widthSegments);
    const gridY = Math.floor(heightSegments);
    const gridX1 = gridX + 1;
    const gridY1 = gridY + 1;
    const segment_width = width / gridX;
    const segment_height = height / gridY;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy < gridY1; iy++) {
      const y = iy * segment_height - height_half;
      for (let ix = 0; ix < gridX1; ix++) {
        const x = ix * segment_width - width_half;
        vertices.push(x, -y, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }
    for (let iy = 0; iy < gridY; iy++) {
      for (let ix = 0; ix < gridX; ix++) {
        const a = ix + gridX1 * iy;
        const b = ix + gridX1 * (iy + 1);
        const c = ix + 1 + gridX1 * (iy + 1);
        const d = ix + 1 + gridX1 * iy;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
};
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	return vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n#else\n	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n	}\n	return 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n	return Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + viewDir );\n	float dotNL = saturate( dot( normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	return specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	vec3 FssEss = F * brdf.x + brdf.y;\n	float Ess = brdf.x + brdf.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n	float invAlpha = 1.0 / roughness;\n	float cos2h = NoH * NoH;\n	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n	vec3 N = geometry.normal;\n	vec3 V = geometry.viewDir;\n	vec3 H = normalize( V + L );\n	float dotNH = saturate( dot( N, H ) );\n	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_maxMipLevel 8.0\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_maxTileSize 256.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n		vec2 f = fract( uv );\n		uv += 0.5 - f;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		if ( mipInt < cubeUV_maxMipLevel ) {\n			uv.y += 2.0 * cubeUV_maxTileSize;\n		}\n		uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n		uv *= texelSize;\n		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x += texelSize;\n		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.y += texelSize;\n		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x -= texelSize;\n		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		vec3 tm = mix( tl, tr, f.x );\n		vec3 bm = mix( bl, br, f.x );\n		return mix( tm, bm, f.y );\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float D = max( maxRange / maxRGB, 1.0 );\n	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract( Le );\n	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n	return vec4( max( vRGB, 0.0 ), 1.0 );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifndef ENVMAP_TYPE_CUBE_UV\n		envColor = envMapTexelToLinear( envColor );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n	fogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n	varying float fogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return texture2D( gradientMap, coord ).rgb;\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}";
var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif";
var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float sigma = PI * roughness * roughness / ( 1.0 + roughness );\n		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n		#else\n			vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheen;\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float specularRoughness;\n	vec3 specularColor;\n#ifdef CLEARCOAT\n	float clearcoat;\n	float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	vec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifdef CLEARCOAT\n		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = ccDotNL * directLight.color;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			ccIrradiance *= PI;\n		#endif\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	#ifdef USE_SHEEN\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n			material.specularRoughness,\n			directLight.direction,\n			geometry,\n			material.sheenColor\n		);\n	#else\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n	#endif\n	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef CLEARCOAT\n		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n		float ccDotNL = ccDotNV;\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	float clearcoatInv = 1.0 - clearcoatDHR;\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n	#ifdef CLEARCOAT\n		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n	#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
var map_fragment = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifndef USE_MORPHNORMALS\n		uniform float morphTargetInfluences[ 8 ];\n	#else\n		uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n	transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n	transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n	transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n		transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n		transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n		transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n		transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n	#endif\n#endif";
var normal_fragment_begin = "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;";
var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		float scale = sign( st1.t * st0.s - st0.t * st1.s );\n		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n		vec3 N = normalize( surf_norm );\n		mat3 tsn = mat3( S, T, N );\n		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		return normalize( tsn * mapN );\n	}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n	#endif\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmissionmap_fragment = "#ifdef USE_TRANSMISSIONMAP\n	totalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";
var transmissionmap_pars_fragment = "#ifdef USE_TRANSMISSIONMAP\n	uniform sampler2D transmissionMap;\n#endif";
var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif";
var uv_pars_vertex = "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif";
var uv_vertex = "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";
var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif";
var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
var depth_frag = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	vec4 texColor = texture2D( tEquirect, sampleUV );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n	\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n		matcapColor = matcapTexelToLinear( matcapColor );\n	#else\n		vec4 matcapColor = vec4( 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#ifndef FLAT_SHADED\n		vNormal = normalize( transformedNormal );\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n	#define REFLECTIVITY\n	#define CLEARCOAT\n	#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n	uniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n	uniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#ifdef TRANSMISSION\n		float totalTransmission = transmission;\n	#endif\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <transmissionmap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#ifdef TRANSMISSION\n		diffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n	#endif\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var shadow_vert = "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var ShaderChunk = {
  alphamap_fragment,
  alphamap_pars_fragment,
  alphatest_fragment,
  aomap_fragment,
  aomap_pars_fragment,
  begin_vertex,
  beginnormal_vertex,
  bsdfs,
  bumpmap_pars_fragment,
  clipping_planes_fragment,
  clipping_planes_pars_fragment,
  clipping_planes_pars_vertex,
  clipping_planes_vertex,
  color_fragment,
  color_pars_fragment,
  color_pars_vertex,
  color_vertex,
  common,
  cube_uv_reflection_fragment,
  defaultnormal_vertex,
  displacementmap_pars_vertex,
  displacementmap_vertex,
  emissivemap_fragment,
  emissivemap_pars_fragment,
  encodings_fragment,
  encodings_pars_fragment,
  envmap_fragment,
  envmap_common_pars_fragment,
  envmap_pars_fragment,
  envmap_pars_vertex,
  envmap_physical_pars_fragment,
  envmap_vertex,
  fog_vertex,
  fog_pars_vertex,
  fog_fragment,
  fog_pars_fragment,
  gradientmap_pars_fragment,
  lightmap_fragment,
  lightmap_pars_fragment,
  lights_lambert_vertex,
  lights_pars_begin,
  lights_toon_fragment,
  lights_toon_pars_fragment,
  lights_phong_fragment,
  lights_phong_pars_fragment,
  lights_physical_fragment,
  lights_physical_pars_fragment,
  lights_fragment_begin,
  lights_fragment_maps,
  lights_fragment_end,
  logdepthbuf_fragment,
  logdepthbuf_pars_fragment,
  logdepthbuf_pars_vertex,
  logdepthbuf_vertex,
  map_fragment,
  map_pars_fragment,
  map_particle_fragment,
  map_particle_pars_fragment,
  metalnessmap_fragment,
  metalnessmap_pars_fragment,
  morphnormal_vertex,
  morphtarget_pars_vertex,
  morphtarget_vertex,
  normal_fragment_begin,
  normal_fragment_maps,
  normalmap_pars_fragment,
  clearcoat_normal_fragment_begin,
  clearcoat_normal_fragment_maps,
  clearcoat_pars_fragment,
  packing,
  premultiplied_alpha_fragment,
  project_vertex,
  dithering_fragment,
  dithering_pars_fragment,
  roughnessmap_fragment,
  roughnessmap_pars_fragment,
  shadowmap_pars_fragment,
  shadowmap_pars_vertex,
  shadowmap_vertex,
  shadowmask_pars_fragment,
  skinbase_vertex,
  skinning_pars_vertex,
  skinning_vertex,
  skinnormal_vertex,
  specularmap_fragment,
  specularmap_pars_fragment,
  tonemapping_fragment,
  tonemapping_pars_fragment,
  transmissionmap_fragment,
  transmissionmap_pars_fragment,
  uv_pars_fragment,
  uv_pars_vertex,
  uv_vertex,
  uv2_pars_fragment,
  uv2_pars_vertex,
  uv2_vertex,
  worldpos_vertex,
  background_frag,
  background_vert,
  cube_frag,
  cube_vert,
  depth_frag,
  depth_vert,
  distanceRGBA_frag,
  distanceRGBA_vert,
  equirect_frag,
  equirect_vert,
  linedashed_frag,
  linedashed_vert,
  meshbasic_frag,
  meshbasic_vert,
  meshlambert_frag,
  meshlambert_vert,
  meshmatcap_frag,
  meshmatcap_vert,
  meshtoon_frag,
  meshtoon_vert,
  meshphong_frag,
  meshphong_vert,
  meshphysical_frag,
  meshphysical_vert,
  normal_frag,
  normal_vert,
  points_frag,
  points_vert,
  shadow_frag,
  shadow_vert,
  sprite_frag,
  sprite_vert
};
var UniformsLib = {
  common: {
    diffuse: { value: new Color(15658734) },
    opacity: { value: 1 },
    map: { value: null },
    uvTransform: { value: new Matrix3() },
    uv2Transform: { value: new Matrix3() },
    alphaMap: { value: null }
  },
  specularmap: {
    specularMap: { value: null }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    refractionRatio: { value: 0.98 },
    maxMipLevel: { value: 0 }
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 }
  },
  emissivemap: {
    emissiveMap: { value: null }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalScale: { value: new Vector2(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  roughnessmap: {
    roughnessMap: { value: null }
  },
  metalnessmap: {
    metalnessMap: { value: null }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: new Color(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotShadowMap: { value: [] },
    spotShadowMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: new Color(15658734) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    uvTransform: { value: new Matrix3() }
  },
  sprite: {
    diffuse: { value: new Color(15658734) },
    opacity: { value: 1 },
    center: { value: new Vector2(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    alphaMap: { value: null },
    uvTransform: { value: new Matrix3() }
  }
};
var ShaderLib = {
  basic: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.meshbasic_vert,
    fragmentShader: ShaderChunk.meshbasic_frag
  },
  lambert: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshlambert_vert,
    fragmentShader: ShaderChunk.meshlambert_frag
  },
  phong: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) },
        specular: { value: new Color(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ShaderChunk.meshphong_vert,
    fragmentShader: ShaderChunk.meshphong_frag
  },
  standard: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.roughnessmap,
      UniformsLib.metalnessmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  },
  toon: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.gradientmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshtoon_vert,
    fragmentShader: ShaderChunk.meshtoon_frag
  },
  matcap: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ShaderChunk.meshmatcap_vert,
    fragmentShader: ShaderChunk.meshmatcap_frag
  },
  points: {
    uniforms: mergeUniforms([
      UniformsLib.points,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.points_vert,
    fragmentShader: ShaderChunk.points_frag
  },
  dashed: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ShaderChunk.linedashed_vert,
    fragmentShader: ShaderChunk.linedashed_frag
  },
  depth: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap
    ]),
    vertexShader: ShaderChunk.depth_vert,
    fragmentShader: ShaderChunk.depth_frag
  },
  normal: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.normal_vert,
    fragmentShader: ShaderChunk.normal_frag
  },
  sprite: {
    uniforms: mergeUniforms([
      UniformsLib.sprite,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.sprite_vert,
    fragmentShader: ShaderChunk.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: new Matrix3() },
      t2D: { value: null }
    },
    vertexShader: ShaderChunk.background_vert,
    fragmentShader: ShaderChunk.background_frag
  },
  cube: {
    uniforms: mergeUniforms([
      UniformsLib.envmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.cube_vert,
    fragmentShader: ShaderChunk.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ShaderChunk.equirect_vert,
    fragmentShader: ShaderChunk.equirect_frag
  },
  distanceRGBA: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap,
      {
        referencePosition: { value: new Vector3() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ShaderChunk.distanceRGBA_vert,
    fragmentShader: ShaderChunk.distanceRGBA_frag
  },
  shadow: {
    uniforms: mergeUniforms([
      UniformsLib.lights,
      UniformsLib.fog,
      {
        color: { value: new Color(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.shadow_vert,
    fragmentShader: ShaderChunk.shadow_frag
  }
};
ShaderLib.physical = {
  uniforms: mergeUniforms([
    ShaderLib.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatNormalScale: { value: new Vector2(1, 1) },
      clearcoatNormalMap: { value: null },
      sheen: { value: new Color(0) },
      transmission: { value: 0 },
      transmissionMap: { value: null }
    }
  ]),
  vertexShader: ShaderChunk.meshphysical_vert,
  fragmentShader: ShaderChunk.meshphysical_frag
};
function WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {
  const clearColor = new Color(0);
  let clearAlpha = 0;
  let planeMesh;
  let boxMesh;
  let currentBackground = null;
  let currentBackgroundVersion = 0;
  let currentTonemapping = null;
  function render(renderList, scene, camera, forceClear) {
    let background = scene.isScene === true ? scene.background : null;
    if (background && background.isTexture) {
      background = cubemaps.get(background);
    }
    const xr = renderer.xr;
    const session = xr.getSession && xr.getSession();
    if (session && session.environmentBlendMode === "additive") {
      background = null;
    }
    if (background === null) {
      setClear(clearColor, clearAlpha);
    } else if (background && background.isColor) {
      setClear(background, 1);
      forceClear = true;
    }
    if (renderer.autoClear || forceClear) {
      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
    }
    if (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {
      if (boxMesh === void 0) {
        boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({
          name: "BackgroundCubeMaterial",
          uniforms: cloneUniforms(ShaderLib.cube.uniforms),
          vertexShader: ShaderLib.cube.vertexShader,
          fragmentShader: ShaderLib.cube.fragmentShader,
          side: BackSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        boxMesh.geometry.deleteAttribute("normal");
        boxMesh.geometry.deleteAttribute("uv");
        boxMesh.onBeforeRender = function(renderer2, scene2, camera2) {
          this.matrixWorld.copyPosition(camera2.matrixWorld);
        };
        Object.defineProperty(boxMesh.material, "envMap", {
          get: function() {
            return this.uniforms.envMap.value;
          }
        });
        objects.update(boxMesh);
      }
      if (background.isWebGLCubeRenderTarget) {
        background = background.texture;
      }
      boxMesh.material.uniforms.envMap.value = background;
      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
        boxMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer.toneMapping;
      }
      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
    } else if (background && background.isTexture) {
      if (planeMesh === void 0) {
        planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({
          name: "BackgroundMaterial",
          uniforms: cloneUniforms(ShaderLib.background.uniforms),
          vertexShader: ShaderLib.background.vertexShader,
          fragmentShader: ShaderLib.background.fragmentShader,
          side: FrontSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        planeMesh.geometry.deleteAttribute("normal");
        Object.defineProperty(planeMesh.material, "map", {
          get: function() {
            return this.uniforms.t2D.value;
          }
        });
        objects.update(planeMesh);
      }
      planeMesh.material.uniforms.t2D.value = background;
      if (background.matrixAutoUpdate === true) {
        background.updateMatrix();
      }
      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
        planeMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer.toneMapping;
      }
      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
    }
  }
  function setClear(color, alpha) {
    state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
  }
  return {
    getClearColor: function() {
      return clearColor;
    },
    setClearColor: function(color, alpha = 1) {
      clearColor.set(color);
      clearAlpha = alpha;
      setClear(clearColor, clearAlpha);
    },
    getClearAlpha: function() {
      return clearAlpha;
    },
    setClearAlpha: function(alpha) {
      clearAlpha = alpha;
      setClear(clearColor, clearAlpha);
    },
    render
  };
}
function WebGLBindingStates(gl, extensions, attributes, capabilities) {
  const maxVertexAttributes = gl.getParameter(34921);
  const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
  const vaoAvailable = capabilities.isWebGL2 || extension !== null;
  const bindingStates = {};
  const defaultState = createBindingState(null);
  let currentState = defaultState;
  function setup(object, material, program, geometry, index) {
    let updateBuffers = false;
    if (vaoAvailable) {
      const state = getBindingState(geometry, program, material);
      if (currentState !== state) {
        currentState = state;
        bindVertexArrayObject(currentState.object);
      }
      updateBuffers = needsUpdate(geometry, index);
      if (updateBuffers)
        saveCache(geometry, index);
    } else {
      const wireframe = material.wireframe === true;
      if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
        currentState.geometry = geometry.id;
        currentState.program = program.id;
        currentState.wireframe = wireframe;
        updateBuffers = true;
      }
    }
    if (object.isInstancedMesh === true) {
      updateBuffers = true;
    }
    if (index !== null) {
      attributes.update(index, 34963);
    }
    if (updateBuffers) {
      setupVertexAttributes(object, material, program, geometry);
      if (index !== null) {
        gl.bindBuffer(34963, attributes.get(index).buffer);
      }
    }
  }
  function createVertexArrayObject() {
    if (capabilities.isWebGL2)
      return gl.createVertexArray();
    return extension.createVertexArrayOES();
  }
  function bindVertexArrayObject(vao) {
    if (capabilities.isWebGL2)
      return gl.bindVertexArray(vao);
    return extension.bindVertexArrayOES(vao);
  }
  function deleteVertexArrayObject(vao) {
    if (capabilities.isWebGL2)
      return gl.deleteVertexArray(vao);
    return extension.deleteVertexArrayOES(vao);
  }
  function getBindingState(geometry, program, material) {
    const wireframe = material.wireframe === true;
    let programMap = bindingStates[geometry.id];
    if (programMap === void 0) {
      programMap = {};
      bindingStates[geometry.id] = programMap;
    }
    let stateMap = programMap[program.id];
    if (stateMap === void 0) {
      stateMap = {};
      programMap[program.id] = stateMap;
    }
    let state = stateMap[wireframe];
    if (state === void 0) {
      state = createBindingState(createVertexArrayObject());
      stateMap[wireframe] = state;
    }
    return state;
  }
  function createBindingState(vao) {
    const newAttributes = [];
    const enabledAttributes = [];
    const attributeDivisors = [];
    for (let i = 0; i < maxVertexAttributes; i++) {
      newAttributes[i] = 0;
      enabledAttributes[i] = 0;
      attributeDivisors[i] = 0;
    }
    return {
      geometry: null,
      program: null,
      wireframe: false,
      newAttributes,
      enabledAttributes,
      attributeDivisors,
      object: vao,
      attributes: {},
      index: null
    };
  }
  function needsUpdate(geometry, index) {
    const cachedAttributes = currentState.attributes;
    const geometryAttributes = geometry.attributes;
    let attributesNum = 0;
    for (const key in geometryAttributes) {
      const cachedAttribute = cachedAttributes[key];
      const geometryAttribute = geometryAttributes[key];
      if (cachedAttribute === void 0)
        return true;
      if (cachedAttribute.attribute !== geometryAttribute)
        return true;
      if (cachedAttribute.data !== geometryAttribute.data)
        return true;
      attributesNum++;
    }
    if (currentState.attributesNum !== attributesNum)
      return true;
    if (currentState.index !== index)
      return true;
    return false;
  }
  function saveCache(geometry, index) {
    const cache = {};
    const attributes2 = geometry.attributes;
    let attributesNum = 0;
    for (const key in attributes2) {
      const attribute = attributes2[key];
      const data = {};
      data.attribute = attribute;
      if (attribute.data) {
        data.data = attribute.data;
      }
      cache[key] = data;
      attributesNum++;
    }
    currentState.attributes = cache;
    currentState.attributesNum = attributesNum;
    currentState.index = index;
  }
  function initAttributes() {
    const newAttributes = currentState.newAttributes;
    for (let i = 0, il = newAttributes.length; i < il; i++) {
      newAttributes[i] = 0;
    }
  }
  function enableAttribute(attribute) {
    enableAttributeAndDivisor(attribute, 0);
  }
  function enableAttributeAndDivisor(attribute, meshPerAttribute) {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    const attributeDivisors = currentState.attributeDivisors;
    newAttributes[attribute] = 1;
    if (enabledAttributes[attribute] === 0) {
      gl.enableVertexAttribArray(attribute);
      enabledAttributes[attribute] = 1;
    }
    if (attributeDivisors[attribute] !== meshPerAttribute) {
      const extension2 = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
      extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
      attributeDivisors[attribute] = meshPerAttribute;
    }
  }
  function disableUnusedAttributes() {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    for (let i = 0, il = enabledAttributes.length; i < il; i++) {
      if (enabledAttributes[i] !== newAttributes[i]) {
        gl.disableVertexAttribArray(i);
        enabledAttributes[i] = 0;
      }
    }
  }
  function vertexAttribPointer(index, size, type, normalized, stride, offset) {
    if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {
      gl.vertexAttribIPointer(index, size, type, stride, offset);
    } else {
      gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
  }
  function setupVertexAttributes(object, material, program, geometry) {
    if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
      if (extensions.get("ANGLE_instanced_arrays") === null)
        return;
    }
    initAttributes();
    const geometryAttributes = geometry.attributes;
    const programAttributes = program.getAttributes();
    const materialDefaultAttributeValues = material.defaultAttributeValues;
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute >= 0) {
        const geometryAttribute = geometryAttributes[name];
        if (geometryAttribute !== void 0) {
          const normalized = geometryAttribute.normalized;
          const size = geometryAttribute.itemSize;
          const attribute = attributes.get(geometryAttribute);
          if (attribute === void 0)
            continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          const bytesPerElement = attribute.bytesPerElement;
          if (geometryAttribute.isInterleavedBufferAttribute) {
            const data = geometryAttribute.data;
            const stride = data.stride;
            const offset = geometryAttribute.offset;
            if (data && data.isInstancedInterleavedBuffer) {
              enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);
              if (geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = data.meshPerAttribute * data.count;
              }
            } else {
              enableAttribute(programAttribute);
            }
            gl.bindBuffer(34962, buffer);
            vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);
          } else {
            if (geometryAttribute.isInstancedBufferAttribute) {
              enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);
              if (geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
              }
            } else {
              enableAttribute(programAttribute);
            }
            gl.bindBuffer(34962, buffer);
            vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);
          }
        } else if (name === "instanceMatrix") {
          const attribute = attributes.get(object.instanceMatrix);
          if (attribute === void 0)
            continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          enableAttributeAndDivisor(programAttribute + 0, 1);
          enableAttributeAndDivisor(programAttribute + 1, 1);
          enableAttributeAndDivisor(programAttribute + 2, 1);
          enableAttributeAndDivisor(programAttribute + 3, 1);
          gl.bindBuffer(34962, buffer);
          gl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);
          gl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);
          gl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);
          gl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);
        } else if (name === "instanceColor") {
          const attribute = attributes.get(object.instanceColor);
          if (attribute === void 0)
            continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          enableAttributeAndDivisor(programAttribute, 1);
          gl.bindBuffer(34962, buffer);
          gl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);
        } else if (materialDefaultAttributeValues !== void 0) {
          const value = materialDefaultAttributeValues[name];
          if (value !== void 0) {
            switch (value.length) {
              case 2:
                gl.vertexAttrib2fv(programAttribute, value);
                break;
              case 3:
                gl.vertexAttrib3fv(programAttribute, value);
                break;
              case 4:
                gl.vertexAttrib4fv(programAttribute, value);
                break;
              default:
                gl.vertexAttrib1fv(programAttribute, value);
            }
          }
        }
      }
    }
    disableUnusedAttributes();
  }
  function dispose() {
    reset();
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometryId];
    }
  }
  function releaseStatesOfGeometry(geometry) {
    if (bindingStates[geometry.id] === void 0)
      return;
    const programMap = bindingStates[geometry.id];
    for (const programId in programMap) {
      const stateMap = programMap[programId];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[programId];
    }
    delete bindingStates[geometry.id];
  }
  function releaseStatesOfProgram(program) {
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      if (programMap[program.id] === void 0)
        continue;
      const stateMap = programMap[program.id];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[program.id];
    }
  }
  function reset() {
    resetDefaultState();
    if (currentState === defaultState)
      return;
    currentState = defaultState;
    bindVertexArrayObject(currentState.object);
  }
  function resetDefaultState() {
    defaultState.geometry = null;
    defaultState.program = null;
    defaultState.wireframe = false;
  }
  return {
    setup,
    reset,
    resetDefaultState,
    dispose,
    releaseStatesOfGeometry,
    releaseStatesOfProgram,
    initAttributes,
    enableAttribute,
    disableUnusedAttributes
  };
}
function WebGLBufferRenderer(gl, extensions, info, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  let mode;
  function setMode(value) {
    mode = value;
  }
  function render(start, count) {
    gl.drawArrays(mode, start, count);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0)
      return;
    let extension, methodName;
    if (isWebGL2) {
      extension = gl;
      methodName = "drawArraysInstanced";
    } else {
      extension = extensions.get("ANGLE_instanced_arrays");
      methodName = "drawArraysInstancedANGLE";
      if (extension === null) {
        console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
    }
    extension[methodName](mode, start, count, primcount);
    info.update(count, mode, primcount);
  }
  this.setMode = setMode;
  this.render = render;
  this.renderInstances = renderInstances;
}
function WebGLCapabilities(gl, extensions, parameters) {
  let maxAnisotropy;
  function getMaxAnisotropy() {
    if (maxAnisotropy !== void 0)
      return maxAnisotropy;
    const extension = extensions.get("EXT_texture_filter_anisotropic");
    if (extension !== null) {
      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      maxAnisotropy = 0;
    }
    return maxAnisotropy;
  }
  function getMaxPrecision(precision2) {
    if (precision2 === "highp") {
      if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {
        return "highp";
      }
      precision2 = "mediump";
    }
    if (precision2 === "mediump") {
      if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {
        return "mediump";
      }
    }
    return "lowp";
  }
  const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== "undefined" && gl instanceof WebGL2ComputeRenderingContext;
  let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
  const maxPrecision = getMaxPrecision(precision);
  if (maxPrecision !== precision) {
    console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
    precision = maxPrecision;
  }
  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  const maxTextures = gl.getParameter(34930);
  const maxVertexTextures = gl.getParameter(35660);
  const maxTextureSize = gl.getParameter(3379);
  const maxCubemapSize = gl.getParameter(34076);
  const maxAttributes = gl.getParameter(34921);
  const maxVertexUniforms = gl.getParameter(36347);
  const maxVaryings = gl.getParameter(36348);
  const maxFragmentUniforms = gl.getParameter(36349);
  const vertexTextures = maxVertexTextures > 0;
  const floatFragmentTextures = isWebGL2 || !!extensions.get("OES_texture_float");
  const floatVertexTextures = vertexTextures && floatFragmentTextures;
  const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
  return {
    isWebGL2,
    getMaxAnisotropy,
    getMaxPrecision,
    precision,
    logarithmicDepthBuffer,
    maxTextures,
    maxVertexTextures,
    maxTextureSize,
    maxCubemapSize,
    maxAttributes,
    maxVertexUniforms,
    maxVaryings,
    maxFragmentUniforms,
    vertexTextures,
    floatFragmentTextures,
    floatVertexTextures,
    maxSamples
  };
}
function WebGLClipping(properties) {
  const scope = this;
  let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
  const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
  this.uniform = uniform;
  this.numPlanes = 0;
  this.numIntersection = 0;
  this.init = function(planes, enableLocalClipping, camera) {
    const enabled = planes.length !== 0 || enableLocalClipping || numGlobalPlanes !== 0 || localClippingEnabled;
    localClippingEnabled = enableLocalClipping;
    globalState = projectPlanes(planes, camera, 0);
    numGlobalPlanes = planes.length;
    return enabled;
  };
  this.beginShadows = function() {
    renderingShadows = true;
    projectPlanes(null);
  };
  this.endShadows = function() {
    renderingShadows = false;
    resetGlobalState();
  };
  this.setState = function(material, camera, useCache) {
    const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
    const materialProperties = properties.get(material);
    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
      if (renderingShadows) {
        projectPlanes(null);
      } else {
        resetGlobalState();
      }
    } else {
      const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
      let dstArray = materialProperties.clippingState || null;
      uniform.value = dstArray;
      dstArray = projectPlanes(planes, camera, lGlobal, useCache);
      for (let i = 0; i !== lGlobal; ++i) {
        dstArray[i] = globalState[i];
      }
      materialProperties.clippingState = dstArray;
      this.numIntersection = clipIntersection ? this.numPlanes : 0;
      this.numPlanes += nGlobal;
    }
  };
  function resetGlobalState() {
    if (uniform.value !== globalState) {
      uniform.value = globalState;
      uniform.needsUpdate = numGlobalPlanes > 0;
    }
    scope.numPlanes = numGlobalPlanes;
    scope.numIntersection = 0;
  }
  function projectPlanes(planes, camera, dstOffset, skipTransform) {
    const nPlanes = planes !== null ? planes.length : 0;
    let dstArray = null;
    if (nPlanes !== 0) {
      dstArray = uniform.value;
      if (skipTransform !== true || dstArray === null) {
        const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
        viewNormalMatrix.getNormalMatrix(viewMatrix);
        if (dstArray === null || dstArray.length < flatSize) {
          dstArray = new Float32Array(flatSize);
        }
        for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
          plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
          plane.normal.toArray(dstArray, i4);
          dstArray[i4 + 3] = plane.constant;
        }
      }
      uniform.value = dstArray;
      uniform.needsUpdate = true;
    }
    scope.numPlanes = nPlanes;
    scope.numIntersection = 0;
    return dstArray;
  }
}
function WebGLCubeMaps(renderer) {
  let cubemaps = new WeakMap();
  function mapTextureMapping(texture, mapping) {
    if (mapping === EquirectangularReflectionMapping) {
      texture.mapping = CubeReflectionMapping;
    } else if (mapping === EquirectangularRefractionMapping) {
      texture.mapping = CubeRefractionMapping;
    }
    return texture;
  }
  function get(texture) {
    if (texture && texture.isTexture) {
      const mapping = texture.mapping;
      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
        if (cubemaps.has(texture)) {
          const cubemap = cubemaps.get(texture).texture;
          return mapTextureMapping(cubemap, texture.mapping);
        } else {
          const image = texture.image;
          if (image && image.height > 0) {
            const currentRenderList = renderer.getRenderList();
            const currentRenderTarget = renderer.getRenderTarget();
            const currentRenderState = renderer.getRenderState();
            const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
            renderTarget.fromEquirectangularTexture(renderer, texture);
            cubemaps.set(texture, renderTarget);
            renderer.setRenderTarget(currentRenderTarget);
            renderer.setRenderList(currentRenderList);
            renderer.setRenderState(currentRenderState);
            texture.addEventListener("dispose", onTextureDispose);
            return mapTextureMapping(renderTarget.texture, texture.mapping);
          } else {
            return null;
          }
        }
      }
    }
    return texture;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    const cubemap = cubemaps.get(texture);
    if (cubemap !== void 0) {
      cubemaps.delete(texture);
      cubemap.dispose();
    }
  }
  function dispose() {
    cubemaps = new WeakMap();
  }
  return {
    get,
    dispose
  };
}
function WebGLExtensions(gl) {
  const extensions = {};
  return {
    has: function(name) {
      if (extensions[name] !== void 0) {
        return extensions[name] !== null;
      }
      let extension;
      switch (name) {
        case "WEBGL_depth_texture":
          extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          extension = gl.getExtension(name);
      }
      extensions[name] = extension;
      return extension !== null;
    },
    get: function(name) {
      if (!this.has(name)) {
        console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
      }
      return extensions[name];
    }
  };
}
function WebGLGeometries(gl, attributes, info, bindingStates) {
  const geometries = new WeakMap();
  const wireframeAttributes = new WeakMap();
  function onGeometryDispose(event) {
    const geometry = event.target;
    const buffergeometry = geometries.get(geometry);
    if (buffergeometry.index !== null) {
      attributes.remove(buffergeometry.index);
    }
    for (const name in buffergeometry.attributes) {
      attributes.remove(buffergeometry.attributes[name]);
    }
    geometry.removeEventListener("dispose", onGeometryDispose);
    geometries.delete(geometry);
    const attribute = wireframeAttributes.get(buffergeometry);
    if (attribute) {
      attributes.remove(attribute);
      wireframeAttributes.delete(buffergeometry);
    }
    bindingStates.releaseStatesOfGeometry(buffergeometry);
    if (geometry.isInstancedBufferGeometry === true) {
      delete geometry._maxInstanceCount;
    }
    info.memory.geometries--;
  }
  function get(object, geometry) {
    let buffergeometry = geometries.get(geometry);
    if (buffergeometry)
      return buffergeometry;
    geometry.addEventListener("dispose", onGeometryDispose);
    if (geometry.isBufferGeometry) {
      buffergeometry = geometry;
    } else if (geometry.isGeometry) {
      if (geometry._bufferGeometry === void 0) {
        geometry._bufferGeometry = new BufferGeometry().setFromObject(object);
      }
      buffergeometry = geometry._bufferGeometry;
    }
    geometries.set(geometry, buffergeometry);
    info.memory.geometries++;
    return buffergeometry;
  }
  function update(geometry) {
    const geometryAttributes = geometry.attributes;
    for (const name in geometryAttributes) {
      attributes.update(geometryAttributes[name], 34962);
    }
    const morphAttributes = geometry.morphAttributes;
    for (const name in morphAttributes) {
      const array = morphAttributes[name];
      for (let i = 0, l = array.length; i < l; i++) {
        attributes.update(array[i], 34962);
      }
    }
  }
  function updateWireframeAttribute(geometry) {
    const indices = [];
    const geometryIndex = geometry.index;
    const geometryPosition = geometry.attributes.position;
    let version = 0;
    if (geometryIndex !== null) {
      const array = geometryIndex.array;
      version = geometryIndex.version;
      for (let i = 0, l = array.length; i < l; i += 3) {
        const a = array[i + 0];
        const b = array[i + 1];
        const c = array[i + 2];
        indices.push(a, b, b, c, c, a);
      }
    } else {
      const array = geometryPosition.array;
      version = geometryPosition.version;
      for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {
        const a = i + 0;
        const b = i + 1;
        const c = i + 2;
        indices.push(a, b, b, c, c, a);
      }
    }
    const attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attribute.version = version;
    const previousAttribute = wireframeAttributes.get(geometry);
    if (previousAttribute)
      attributes.remove(previousAttribute);
    wireframeAttributes.set(geometry, attribute);
  }
  function getWireframeAttribute(geometry) {
    const currentAttribute = wireframeAttributes.get(geometry);
    if (currentAttribute) {
      const geometryIndex = geometry.index;
      if (geometryIndex !== null) {
        if (currentAttribute.version < geometryIndex.version) {
          updateWireframeAttribute(geometry);
        }
      }
    } else {
      updateWireframeAttribute(geometry);
    }
    return wireframeAttributes.get(geometry);
  }
  return {
    get,
    update,
    getWireframeAttribute
  };
}
function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  let mode;
  function setMode(value) {
    mode = value;
  }
  let type, bytesPerElement;
  function setIndex(value) {
    type = value.type;
    bytesPerElement = value.bytesPerElement;
  }
  function render(start, count) {
    gl.drawElements(mode, count, type, start * bytesPerElement);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0)
      return;
    let extension, methodName;
    if (isWebGL2) {
      extension = gl;
      methodName = "drawElementsInstanced";
    } else {
      extension = extensions.get("ANGLE_instanced_arrays");
      methodName = "drawElementsInstancedANGLE";
      if (extension === null) {
        console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
    }
    extension[methodName](mode, count, type, start * bytesPerElement, primcount);
    info.update(count, mode, primcount);
  }
  this.setMode = setMode;
  this.setIndex = setIndex;
  this.render = render;
  this.renderInstances = renderInstances;
}
function WebGLInfo(gl) {
  const memory = {
    geometries: 0,
    textures: 0
  };
  const render = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function update(count, mode, instanceCount) {
    render.calls++;
    switch (mode) {
      case 4:
        render.triangles += instanceCount * (count / 3);
        break;
      case 1:
        render.lines += instanceCount * (count / 2);
        break;
      case 3:
        render.lines += instanceCount * (count - 1);
        break;
      case 2:
        render.lines += instanceCount * count;
        break;
      case 0:
        render.points += instanceCount * count;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
        break;
    }
  }
  function reset() {
    render.frame++;
    render.calls = 0;
    render.triangles = 0;
    render.points = 0;
    render.lines = 0;
  }
  return {
    memory,
    render,
    programs: null,
    autoReset: true,
    reset,
    update
  };
}
function numericalSort(a, b) {
  return a[0] - b[0];
}
function absNumericalSort(a, b) {
  return Math.abs(b[1]) - Math.abs(a[1]);
}
function WebGLMorphtargets(gl) {
  const influencesList = {};
  const morphInfluences = new Float32Array(8);
  const workInfluences = [];
  for (let i = 0; i < 8; i++) {
    workInfluences[i] = [i, 0];
  }
  function update(object, geometry, material, program) {
    const objectInfluences = object.morphTargetInfluences;
    const length = objectInfluences === void 0 ? 0 : objectInfluences.length;
    let influences = influencesList[geometry.id];
    if (influences === void 0) {
      influences = [];
      for (let i = 0; i < length; i++) {
        influences[i] = [i, 0];
      }
      influencesList[geometry.id] = influences;
    }
    for (let i = 0; i < length; i++) {
      const influence = influences[i];
      influence[0] = i;
      influence[1] = objectInfluences[i];
    }
    influences.sort(absNumericalSort);
    for (let i = 0; i < 8; i++) {
      if (i < length && influences[i][1]) {
        workInfluences[i][0] = influences[i][0];
        workInfluences[i][1] = influences[i][1];
      } else {
        workInfluences[i][0] = Number.MAX_SAFE_INTEGER;
        workInfluences[i][1] = 0;
      }
    }
    workInfluences.sort(numericalSort);
    const morphTargets = material.morphTargets && geometry.morphAttributes.position;
    const morphNormals = material.morphNormals && geometry.morphAttributes.normal;
    let morphInfluencesSum = 0;
    for (let i = 0; i < 8; i++) {
      const influence = workInfluences[i];
      const index = influence[0];
      const value = influence[1];
      if (index !== Number.MAX_SAFE_INTEGER && value) {
        if (morphTargets && geometry.getAttribute("morphTarget" + i) !== morphTargets[index]) {
          geometry.setAttribute("morphTarget" + i, morphTargets[index]);
        }
        if (morphNormals && geometry.getAttribute("morphNormal" + i) !== morphNormals[index]) {
          geometry.setAttribute("morphNormal" + i, morphNormals[index]);
        }
        morphInfluences[i] = value;
        morphInfluencesSum += value;
      } else {
        if (morphTargets && geometry.hasAttribute("morphTarget" + i) === true) {
          geometry.deleteAttribute("morphTarget" + i);
        }
        if (morphNormals && geometry.hasAttribute("morphNormal" + i) === true) {
          geometry.deleteAttribute("morphNormal" + i);
        }
        morphInfluences[i] = 0;
      }
    }
    const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
    program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
    program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
  }
  return {
    update
  };
}
function WebGLObjects(gl, geometries, attributes, info) {
  let updateMap = new WeakMap();
  function update(object) {
    const frame = info.render.frame;
    const geometry = object.geometry;
    const buffergeometry = geometries.get(object, geometry);
    if (updateMap.get(buffergeometry) !== frame) {
      if (geometry.isGeometry) {
        buffergeometry.updateFromObject(object);
      }
      geometries.update(buffergeometry);
      updateMap.set(buffergeometry, frame);
    }
    if (object.isInstancedMesh) {
      attributes.update(object.instanceMatrix, 34962);
      if (object.instanceColor !== null) {
        attributes.update(object.instanceColor, 34962);
      }
    }
    return buffergeometry;
  }
  function dispose() {
    updateMap = new WeakMap();
  }
  return {
    update,
    dispose
  };
}
function DataTexture2DArray(data = null, width = 1, height = 1, depth = 1) {
  Texture.call(this, null);
  this.image = { data, width, height, depth };
  this.magFilter = NearestFilter;
  this.minFilter = NearestFilter;
  this.wrapR = ClampToEdgeWrapping;
  this.generateMipmaps = false;
  this.flipY = false;
  this.needsUpdate = true;
}
DataTexture2DArray.prototype = Object.create(Texture.prototype);
DataTexture2DArray.prototype.constructor = DataTexture2DArray;
DataTexture2DArray.prototype.isDataTexture2DArray = true;
function DataTexture3D(data = null, width = 1, height = 1, depth = 1) {
  Texture.call(this, null);
  this.image = { data, width, height, depth };
  this.magFilter = NearestFilter;
  this.minFilter = NearestFilter;
  this.wrapR = ClampToEdgeWrapping;
  this.generateMipmaps = false;
  this.flipY = false;
  this.needsUpdate = true;
}
DataTexture3D.prototype = Object.create(Texture.prototype);
DataTexture3D.prototype.constructor = DataTexture3D;
DataTexture3D.prototype.isDataTexture3D = true;
var emptyTexture = new Texture();
var emptyTexture2dArray = new DataTexture2DArray();
var emptyTexture3d = new DataTexture3D();
var emptyCubeTexture = new CubeTexture();
var arrayCacheF32 = [];
var arrayCacheI32 = [];
var mat4array = new Float32Array(16);
var mat3array = new Float32Array(9);
var mat2array = new Float32Array(4);
function flatten(array, nBlocks, blockSize) {
  const firstElem = array[0];
  if (firstElem <= 0 || firstElem > 0)
    return array;
  const n = nBlocks * blockSize;
  let r = arrayCacheF32[n];
  if (r === void 0) {
    r = new Float32Array(n);
    arrayCacheF32[n] = r;
  }
  if (nBlocks !== 0) {
    firstElem.toArray(r, 0);
    for (let i = 1, offset = 0; i !== nBlocks; ++i) {
      offset += blockSize;
      array[i].toArray(r, offset);
    }
  }
  return r;
}
function arraysEqual(a, b) {
  if (a.length !== b.length)
    return false;
  for (let i = 0, l = a.length; i < l; i++) {
    if (a[i] !== b[i])
      return false;
  }
  return true;
}
function copyArray(a, b) {
  for (let i = 0, l = b.length; i < l; i++) {
    a[i] = b[i];
  }
}
function allocTexUnits(textures, n) {
  let r = arrayCacheI32[n];
  if (r === void 0) {
    r = new Int32Array(n);
    arrayCacheI32[n] = r;
  }
  for (let i = 0; i !== n; ++i) {
    r[i] = textures.allocateTextureUnit();
  }
  return r;
}
function setValueV1f(gl, v) {
  const cache = this.cache;
  if (cache[0] === v)
    return;
  gl.uniform1f(this.addr, v);
  cache[0] = v;
}
function setValueV2f(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl.uniform2f(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v))
      return;
    gl.uniform2fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV3f(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl.uniform3f(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else if (v.r !== void 0) {
    if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
      gl.uniform3f(this.addr, v.r, v.g, v.b);
      cache[0] = v.r;
      cache[1] = v.g;
      cache[2] = v.b;
    }
  } else {
    if (arraysEqual(cache, v))
      return;
    gl.uniform3fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueV4f(gl, v) {
  const cache = this.cache;
  if (v.x !== void 0) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v))
      return;
    gl.uniform4fv(this.addr, v);
    copyArray(cache, v);
  }
}
function setValueM2(gl, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v))
      return;
    gl.uniformMatrix2fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements))
      return;
    mat2array.set(elements);
    gl.uniformMatrix2fv(this.addr, false, mat2array);
    copyArray(cache, elements);
  }
}
function setValueM3(gl, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v))
      return;
    gl.uniformMatrix3fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements))
      return;
    mat3array.set(elements);
    gl.uniformMatrix3fv(this.addr, false, mat3array);
    copyArray(cache, elements);
  }
}
function setValueM4(gl, v) {
  const cache = this.cache;
  const elements = v.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v))
      return;
    gl.uniformMatrix4fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements))
      return;
    mat4array.set(elements);
    gl.uniformMatrix4fv(this.addr, false, mat4array);
    copyArray(cache, elements);
  }
}
function setValueT1(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.safeSetTexture2D(v || emptyTexture, unit);
}
function setValueT2DArray1(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture2DArray(v || emptyTexture2dArray, unit);
}
function setValueT3D1(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture3D(v || emptyTexture3d, unit);
}
function setValueT6(gl, v, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.safeSetTextureCube(v || emptyCubeTexture, unit);
}
function setValueV1i(gl, v) {
  const cache = this.cache;
  if (cache[0] === v)
    return;
  gl.uniform1i(this.addr, v);
  cache[0] = v;
}
function setValueV2i(gl, v) {
  const cache = this.cache;
  if (arraysEqual(cache, v))
    return;
  gl.uniform2iv(this.addr, v);
  copyArray(cache, v);
}
function setValueV3i(gl, v) {
  const cache = this.cache;
  if (arraysEqual(cache, v))
    return;
  gl.uniform3iv(this.addr, v);
  copyArray(cache, v);
}
function setValueV4i(gl, v) {
  const cache = this.cache;
  if (arraysEqual(cache, v))
    return;
  gl.uniform4iv(this.addr, v);
  copyArray(cache, v);
}
function setValueV1ui(gl, v) {
  const cache = this.cache;
  if (cache[0] === v)
    return;
  gl.uniform1ui(this.addr, v);
  cache[0] = v;
}
function getSingularSetter(type) {
  switch (type) {
    case 5126:
      return setValueV1f;
    case 35664:
      return setValueV2f;
    case 35665:
      return setValueV3f;
    case 35666:
      return setValueV4f;
    case 35674:
      return setValueM2;
    case 35675:
      return setValueM3;
    case 35676:
      return setValueM4;
    case 5124:
    case 35670:
      return setValueV1i;
    case 35667:
    case 35671:
      return setValueV2i;
    case 35668:
    case 35672:
      return setValueV3i;
    case 35669:
    case 35673:
      return setValueV4i;
    case 5125:
      return setValueV1ui;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return setValueT1;
    case 35679:
    case 36299:
    case 36307:
      return setValueT3D1;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return setValueT6;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return setValueT2DArray1;
  }
}
function setValueV1fArray(gl, v) {
  gl.uniform1fv(this.addr, v);
}
function setValueV1iArray(gl, v) {
  gl.uniform1iv(this.addr, v);
}
function setValueV2iArray(gl, v) {
  gl.uniform2iv(this.addr, v);
}
function setValueV3iArray(gl, v) {
  gl.uniform3iv(this.addr, v);
}
function setValueV4iArray(gl, v) {
  gl.uniform4iv(this.addr, v);
}
function setValueV2fArray(gl, v) {
  const data = flatten(v, this.size, 2);
  gl.uniform2fv(this.addr, data);
}
function setValueV3fArray(gl, v) {
  const data = flatten(v, this.size, 3);
  gl.uniform3fv(this.addr, data);
}
function setValueV4fArray(gl, v) {
  const data = flatten(v, this.size, 4);
  gl.uniform4fv(this.addr, data);
}
function setValueM2Array(gl, v) {
  const data = flatten(v, this.size, 4);
  gl.uniformMatrix2fv(this.addr, false, data);
}
function setValueM3Array(gl, v) {
  const data = flatten(v, this.size, 9);
  gl.uniformMatrix3fv(this.addr, false, data);
}
function setValueM4Array(gl, v) {
  const data = flatten(v, this.size, 16);
  gl.uniformMatrix4fv(this.addr, false, data);
}
function setValueT1Array(gl, v, textures) {
  const n = v.length;
  const units = allocTexUnits(textures, n);
  gl.uniform1iv(this.addr, units);
  for (let i = 0; i !== n; ++i) {
    textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);
  }
}
function setValueT6Array(gl, v, textures) {
  const n = v.length;
  const units = allocTexUnits(textures, n);
  gl.uniform1iv(this.addr, units);
  for (let i = 0; i !== n; ++i) {
    textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);
  }
}
function getPureArraySetter(type) {
  switch (type) {
    case 5126:
      return setValueV1fArray;
    case 35664:
      return setValueV2fArray;
    case 35665:
      return setValueV3fArray;
    case 35666:
      return setValueV4fArray;
    case 35674:
      return setValueM2Array;
    case 35675:
      return setValueM3Array;
    case 35676:
      return setValueM4Array;
    case 5124:
    case 35670:
      return setValueV1iArray;
    case 35667:
    case 35671:
      return setValueV2iArray;
    case 35668:
    case 35672:
      return setValueV3iArray;
    case 35669:
    case 35673:
      return setValueV4iArray;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return setValueT1Array;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return setValueT6Array;
  }
}
function SingleUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.setValue = getSingularSetter(activeInfo.type);
}
function PureArrayUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.size = activeInfo.size;
  this.setValue = getPureArraySetter(activeInfo.type);
}
PureArrayUniform.prototype.updateCache = function(data) {
  const cache = this.cache;
  if (data instanceof Float32Array && cache.length !== data.length) {
    this.cache = new Float32Array(data.length);
  }
  copyArray(cache, data);
};
function StructuredUniform(id) {
  this.id = id;
  this.seq = [];
  this.map = {};
}
StructuredUniform.prototype.setValue = function(gl, value, textures) {
  const seq = this.seq;
  for (let i = 0, n = seq.length; i !== n; ++i) {
    const u = seq[i];
    u.setValue(gl, value[u.id], textures);
  }
};
var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
function addUniform(container, uniformObject) {
  container.seq.push(uniformObject);
  container.map[uniformObject.id] = uniformObject;
}
function parseUniform(activeInfo, addr, container) {
  const path = activeInfo.name, pathLength = path.length;
  RePathPart.lastIndex = 0;
  while (true) {
    const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
    let id = match[1];
    const idIsIndex = match[2] === "]", subscript = match[3];
    if (idIsIndex)
      id = id | 0;
    if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
      addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
      break;
    } else {
      const map = container.map;
      let next = map[id];
      if (next === void 0) {
        next = new StructuredUniform(id);
        addUniform(container, next);
      }
      container = next;
    }
  }
}
function WebGLUniforms(gl, program) {
  this.seq = [];
  this.map = {};
  const n = gl.getProgramParameter(program, 35718);
  for (let i = 0; i < n; ++i) {
    const info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
    parseUniform(info, addr, this);
  }
}
WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
  const u = this.map[name];
  if (u !== void 0)
    u.setValue(gl, value, textures);
};
WebGLUniforms.prototype.setOptional = function(gl, object, name) {
  const v = object[name];
  if (v !== void 0)
    this.setValue(gl, name, v);
};
WebGLUniforms.upload = function(gl, seq, values, textures) {
  for (let i = 0, n = seq.length; i !== n; ++i) {
    const u = seq[i], v = values[u.id];
    if (v.needsUpdate !== false) {
      u.setValue(gl, v.value, textures);
    }
  }
};
WebGLUniforms.seqWithValue = function(seq, values) {
  const r = [];
  for (let i = 0, n = seq.length; i !== n; ++i) {
    const u = seq[i];
    if (u.id in values)
      r.push(u);
  }
  return r;
};
function WebGLShader(gl, type, string) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, string);
  gl.compileShader(shader);
  return shader;
}
var programIdCount = 0;
function addLineNumbers(string) {
  const lines = string.split("\n");
  for (let i = 0; i < lines.length; i++) {
    lines[i] = i + 1 + ": " + lines[i];
  }
  return lines.join("\n");
}
function getEncodingComponents(encoding) {
  switch (encoding) {
    case LinearEncoding:
      return ["Linear", "( value )"];
    case sRGBEncoding:
      return ["sRGB", "( value )"];
    case RGBEEncoding:
      return ["RGBE", "( value )"];
    case RGBM7Encoding:
      return ["RGBM", "( value, 7.0 )"];
    case RGBM16Encoding:
      return ["RGBM", "( value, 16.0 )"];
    case RGBDEncoding:
      return ["RGBD", "( value, 256.0 )"];
    case GammaEncoding:
      return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
    case LogLuvEncoding:
      return ["LogLuv", "( value )"];
    default:
      console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding);
      return ["Linear", "( value )"];
  }
}
function getShaderErrors(gl, shader, type) {
  const status = gl.getShaderParameter(shader, 35713);
  const log = gl.getShaderInfoLog(shader).trim();
  if (status && log === "")
    return "";
  const source = gl.getShaderSource(shader);
  return "THREE.WebGLShader: gl.getShaderInfoLog() " + type + "\n" + log + addLineNumbers(source);
}
function getTexelDecodingFunction(functionName, encoding) {
  const components = getEncodingComponents(encoding);
  return "vec4 " + functionName + "( vec4 value ) { return " + components[0] + "ToLinear" + components[1] + "; }";
}
function getTexelEncodingFunction(functionName, encoding) {
  const components = getEncodingComponents(encoding);
  return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
}
function getToneMappingFunction(functionName, toneMapping) {
  let toneMappingName;
  switch (toneMapping) {
    case LinearToneMapping:
      toneMappingName = "Linear";
      break;
    case ReinhardToneMapping:
      toneMappingName = "Reinhard";
      break;
    case CineonToneMapping:
      toneMappingName = "OptimizedCineon";
      break;
    case ACESFilmicToneMapping:
      toneMappingName = "ACESFilmic";
      break;
    case CustomToneMapping:
      toneMappingName = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
      toneMappingName = "Linear";
  }
  return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
function generateExtensions(parameters) {
  const chunks = [
    parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ];
  return chunks.filter(filterEmptyLine).join("\n");
}
function generateDefines(defines) {
  const chunks = [];
  for (const name in defines) {
    const value = defines[name];
    if (value === false)
      continue;
    chunks.push("#define " + name + " " + value);
  }
  return chunks.join("\n");
}
function fetchAttributeLocations(gl, program) {
  const attributes = {};
  const n = gl.getProgramParameter(program, 35721);
  for (let i = 0; i < n; i++) {
    const info = gl.getActiveAttrib(program, i);
    const name = info.name;
    attributes[name] = gl.getAttribLocation(program, name);
  }
  return attributes;
}
function filterEmptyLine(string) {
  return string !== "";
}
function replaceLightNums(string, parameters) {
  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function replaceClippingPlaneNums(string, parameters) {
  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function resolveIncludes(string) {
  return string.replace(includePattern, includeReplacer);
}
function includeReplacer(match, include) {
  const string = ShaderChunk[include];
  if (string === void 0) {
    throw new Error("Can not resolve #include <" + include + ">");
  }
  return resolveIncludes(string);
}
var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function unrollLoops(string) {
  return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
}
function deprecatedLoopReplacer(match, start, end, snippet) {
  console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
  return loopReplacer(match, start, end, snippet);
}
function loopReplacer(match, start, end, snippet) {
  let string = "";
  for (let i = parseInt(start); i < parseInt(end); i++) {
    string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
  }
  return string;
}
function generatePrecision(parameters) {
  let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
  if (parameters.precision === "highp") {
    precisionstring += "\n#define HIGH_PRECISION";
  } else if (parameters.precision === "mediump") {
    precisionstring += "\n#define MEDIUM_PRECISION";
  } else if (parameters.precision === "lowp") {
    precisionstring += "\n#define LOW_PRECISION";
  }
  return precisionstring;
}
function generateShadowMapTypeDefine(parameters) {
  let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
  if (parameters.shadowMapType === PCFShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
  } else if (parameters.shadowMapType === PCFSoftShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
  } else if (parameters.shadowMapType === VSMShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
  }
  return shadowMapTypeDefine;
}
function generateEnvMapTypeDefine(parameters) {
  let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeReflectionMapping:
      case CubeRefractionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE";
        break;
      case CubeUVReflectionMapping:
      case CubeUVRefractionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  }
  return envMapTypeDefine;
}
function generateEnvMapModeDefine(parameters) {
  let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeRefractionMapping:
      case CubeUVRefractionMapping:
        envMapModeDefine = "ENVMAP_MODE_REFRACTION";
        break;
    }
  }
  return envMapModeDefine;
}
function generateEnvMapBlendingDefine(parameters) {
  let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
  if (parameters.envMap) {
    switch (parameters.combine) {
      case MultiplyOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case MixOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
        break;
      case AddOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
        break;
    }
  }
  return envMapBlendingDefine;
}
function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
  const gl = renderer.getContext();
  const defines = parameters.defines;
  let vertexShader = parameters.vertexShader;
  let fragmentShader = parameters.fragmentShader;
  const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
  const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
  const envMapModeDefine = generateEnvMapModeDefine(parameters);
  const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
  const gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1;
  const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
  const customDefines = generateDefines(defines);
  const program = gl.createProgram();
  let prefixVertex, prefixFragment;
  let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
  if (parameters.isRawShaderMaterial) {
    prefixVertex = [
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixVertex.length > 0) {
      prefixVertex += "\n";
    }
    prefixFragment = [
      customExtensions,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixFragment.length > 0) {
      prefixFragment += "\n";
    }
  } else {
    prefixVertex = [
      generatePrecision(parameters),
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.instancing ? "#define USE_INSTANCING" : "",
      parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
      parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
      "#define GAMMA_FACTOR " + gammaFactorDefine,
      "#define MAX_BONES " + parameters.maxBones,
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
      parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.displacementMap && parameters.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.vertexTangents ? "#define USE_TANGENT" : "",
      parameters.vertexColors ? "#define USE_COLOR" : "",
      parameters.vertexUvs ? "#define USE_UV" : "",
      parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.skinning ? "#define USE_SKINNING" : "",
      parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
      parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
      parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
      "uniform mat4 modelMatrix;",
      "uniform mat4 modelViewMatrix;",
      "uniform mat4 projectionMatrix;",
      "uniform mat4 viewMatrix;",
      "uniform mat3 normalMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      "#ifdef USE_INSTANCING",
      "	attribute mat4 instanceMatrix;",
      "#endif",
      "#ifdef USE_INSTANCING_COLOR",
      "	attribute vec3 instanceColor;",
      "#endif",
      "attribute vec3 position;",
      "attribute vec3 normal;",
      "attribute vec2 uv;",
      "#ifdef USE_TANGENT",
      "	attribute vec4 tangent;",
      "#endif",
      "#ifdef USE_COLOR",
      "	attribute vec3 color;",
      "#endif",
      "#ifdef USE_MORPHTARGETS",
      "	attribute vec3 morphTarget0;",
      "	attribute vec3 morphTarget1;",
      "	attribute vec3 morphTarget2;",
      "	attribute vec3 morphTarget3;",
      "	#ifdef USE_MORPHNORMALS",
      "		attribute vec3 morphNormal0;",
      "		attribute vec3 morphNormal1;",
      "		attribute vec3 morphNormal2;",
      "		attribute vec3 morphNormal3;",
      "	#else",
      "		attribute vec3 morphTarget4;",
      "		attribute vec3 morphTarget5;",
      "		attribute vec3 morphTarget6;",
      "		attribute vec3 morphTarget7;",
      "	#endif",
      "#endif",
      "#ifdef USE_SKINNING",
      "	attribute vec4 skinIndex;",
      "	attribute vec4 skinWeight;",
      "#endif",
      "\n"
    ].filter(filterEmptyLine).join("\n");
    prefixFragment = [
      customExtensions,
      generatePrecision(parameters),
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest + (parameters.alphaTest % 1 ? "" : ".0") : "",
      "#define GAMMA_FACTOR " + gammaFactorDefine,
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.matcap ? "#define USE_MATCAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapTypeDefine : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.envMap ? "#define " + envMapBlendingDefine : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
      parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.sheen ? "#define USE_SHEEN" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.vertexTangents ? "#define USE_TANGENT" : "",
      parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
      parameters.vertexUvs ? "#define USE_UV" : "",
      parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
      parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
      parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
      (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
      "uniform mat4 viewMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
      parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
      parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
      parameters.dithering ? "#define DITHERING" : "",
      ShaderChunk["encodings_pars_fragment"],
      parameters.map ? getTexelDecodingFunction("mapTexelToLinear", parameters.mapEncoding) : "",
      parameters.matcap ? getTexelDecodingFunction("matcapTexelToLinear", parameters.matcapEncoding) : "",
      parameters.envMap ? getTexelDecodingFunction("envMapTexelToLinear", parameters.envMapEncoding) : "",
      parameters.emissiveMap ? getTexelDecodingFunction("emissiveMapTexelToLinear", parameters.emissiveMapEncoding) : "",
      parameters.lightMap ? getTexelDecodingFunction("lightMapTexelToLinear", parameters.lightMapEncoding) : "",
      getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding),
      parameters.depthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
      "\n"
    ].filter(filterEmptyLine).join("\n");
  }
  vertexShader = resolveIncludes(vertexShader);
  vertexShader = replaceLightNums(vertexShader, parameters);
  vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
  fragmentShader = resolveIncludes(fragmentShader);
  fragmentShader = replaceLightNums(fragmentShader, parameters);
  fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
  vertexShader = unrollLoops(vertexShader);
  fragmentShader = unrollLoops(fragmentShader);
  if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
    versionString = "#version 300 es\n";
    prefixVertex = [
      "#define attribute in",
      "#define varying out",
      "#define texture2D texture"
    ].join("\n") + "\n" + prefixVertex;
    prefixFragment = [
      "#define varying in",
      parameters.glslVersion === GLSL3 ? "" : "out highp vec4 pc_fragColor;",
      parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
      "#define gl_FragDepthEXT gl_FragDepth",
      "#define texture2D texture",
      "#define textureCube texture",
      "#define texture2DProj textureProj",
      "#define texture2DLodEXT textureLod",
      "#define texture2DProjLodEXT textureProjLod",
      "#define textureCubeLodEXT textureLod",
      "#define texture2DGradEXT textureGrad",
      "#define texture2DProjGradEXT textureProjGrad",
      "#define textureCubeGradEXT textureGrad"
    ].join("\n") + "\n" + prefixFragment;
  }
  const vertexGlsl = versionString + prefixVertex + vertexShader;
  const fragmentGlsl = versionString + prefixFragment + fragmentShader;
  const glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
  const glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
  gl.attachShader(program, glVertexShader);
  gl.attachShader(program, glFragmentShader);
  if (parameters.index0AttributeName !== void 0) {
    gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
  } else if (parameters.morphTargets === true) {
    gl.bindAttribLocation(program, 0, "position");
  }
  gl.linkProgram(program);
  if (renderer.debug.checkShaderErrors) {
    const programLog = gl.getProgramInfoLog(program).trim();
    const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
    const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
    let runnable = true;
    let haveDiagnostics = true;
    if (gl.getProgramParameter(program, 35714) === false) {
      runnable = false;
      const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
      const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
      console.error("THREE.WebGLProgram: shader error: ", gl.getError(), "35715", gl.getProgramParameter(program, 35715), "gl.getProgramInfoLog", programLog, vertexErrors, fragmentErrors);
    } else if (programLog !== "") {
      console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", programLog);
    } else if (vertexLog === "" || fragmentLog === "") {
      haveDiagnostics = false;
    }
    if (haveDiagnostics) {
      this.diagnostics = {
        runnable,
        programLog,
        vertexShader: {
          log: vertexLog,
          prefix: prefixVertex
        },
        fragmentShader: {
          log: fragmentLog,
          prefix: prefixFragment
        }
      };
    }
  }
  gl.deleteShader(glVertexShader);
  gl.deleteShader(glFragmentShader);
  let cachedUniforms;
  this.getUniforms = function() {
    if (cachedUniforms === void 0) {
      cachedUniforms = new WebGLUniforms(gl, program);
    }
    return cachedUniforms;
  };
  let cachedAttributes;
  this.getAttributes = function() {
    if (cachedAttributes === void 0) {
      cachedAttributes = fetchAttributeLocations(gl, program);
    }
    return cachedAttributes;
  };
  this.destroy = function() {
    bindingStates.releaseStatesOfProgram(this);
    gl.deleteProgram(program);
    this.program = void 0;
  };
  this.name = parameters.shaderName;
  this.id = programIdCount++;
  this.cacheKey = cacheKey;
  this.usedTimes = 1;
  this.program = program;
  this.vertexShader = glVertexShader;
  this.fragmentShader = glFragmentShader;
  return this;
}
function WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {
  const programs = [];
  const isWebGL2 = capabilities.isWebGL2;
  const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  const floatVertexTextures = capabilities.floatVertexTextures;
  const maxVertexUniforms = capabilities.maxVertexUniforms;
  const vertexTextures = capabilities.vertexTextures;
  let precision = capabilities.precision;
  const shaderIDs = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  const parameterNames = [
    "precision",
    "isWebGL2",
    "supportsVertexTextures",
    "outputEncoding",
    "instancing",
    "instancingColor",
    "map",
    "mapEncoding",
    "matcap",
    "matcapEncoding",
    "envMap",
    "envMapMode",
    "envMapEncoding",
    "envMapCubeUV",
    "lightMap",
    "lightMapEncoding",
    "aoMap",
    "emissiveMap",
    "emissiveMapEncoding",
    "bumpMap",
    "normalMap",
    "objectSpaceNormalMap",
    "tangentSpaceNormalMap",
    "clearcoatMap",
    "clearcoatRoughnessMap",
    "clearcoatNormalMap",
    "displacementMap",
    "specularMap",
    "roughnessMap",
    "metalnessMap",
    "gradientMap",
    "alphaMap",
    "combine",
    "vertexColors",
    "vertexTangents",
    "vertexUvs",
    "uvsVertexOnly",
    "fog",
    "useFog",
    "fogExp2",
    "flatShading",
    "sizeAttenuation",
    "logarithmicDepthBuffer",
    "skinning",
    "maxBones",
    "useVertexTexture",
    "morphTargets",
    "morphNormals",
    "maxMorphTargets",
    "maxMorphNormals",
    "premultipliedAlpha",
    "numDirLights",
    "numPointLights",
    "numSpotLights",
    "numHemiLights",
    "numRectAreaLights",
    "numDirLightShadows",
    "numPointLightShadows",
    "numSpotLightShadows",
    "shadowMapEnabled",
    "shadowMapType",
    "toneMapping",
    "physicallyCorrectLights",
    "alphaTest",
    "doubleSided",
    "flipSided",
    "numClippingPlanes",
    "numClipIntersection",
    "depthPacking",
    "dithering",
    "sheen",
    "transmissionMap"
  ];
  function getMaxBones(object) {
    const skeleton = object.skeleton;
    const bones = skeleton.bones;
    if (floatVertexTextures) {
      return 1024;
    } else {
      const nVertexUniforms = maxVertexUniforms;
      const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
      const maxBones = Math.min(nVertexMatrices, bones.length);
      if (maxBones < bones.length) {
        console.warn("THREE.WebGLRenderer: Skeleton has " + bones.length + " bones. This GPU supports " + maxBones + ".");
        return 0;
      }
      return maxBones;
    }
  }
  function getTextureEncodingFromMap(map) {
    let encoding;
    if (!map) {
      encoding = LinearEncoding;
    } else if (map.isTexture) {
      encoding = map.encoding;
    } else if (map.isWebGLRenderTarget) {
      console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
      encoding = map.texture.encoding;
    }
    return encoding;
  }
  function getParameters(material, lights, shadows, scene, object) {
    const fog = scene.fog;
    const environment = material.isMeshStandardMaterial ? scene.environment : null;
    const envMap = cubemaps.get(material.envMap || environment);
    const shaderID = shaderIDs[material.type];
    const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
    if (material.precision !== null) {
      precision = capabilities.getMaxPrecision(material.precision);
      if (precision !== material.precision) {
        console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
      }
    }
    let vertexShader, fragmentShader;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      vertexShader = shader.vertexShader;
      fragmentShader = shader.fragmentShader;
    } else {
      vertexShader = material.vertexShader;
      fragmentShader = material.fragmentShader;
    }
    const currentRenderTarget = renderer.getRenderTarget();
    const parameters = {
      isWebGL2,
      shaderID,
      shaderName: material.type,
      vertexShader,
      fragmentShader,
      defines: material.defines,
      isRawShaderMaterial: material.isRawShaderMaterial === true,
      glslVersion: material.glslVersion,
      precision,
      instancing: object.isInstancedMesh === true,
      instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
      supportsVertexTextures: vertexTextures,
      outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,
      map: !!material.map,
      mapEncoding: getTextureEncodingFromMap(material.map),
      matcap: !!material.matcap,
      matcapEncoding: getTextureEncodingFromMap(material.matcap),
      envMap: !!envMap,
      envMapMode: envMap && envMap.mapping,
      envMapEncoding: getTextureEncodingFromMap(envMap),
      envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),
      lightMap: !!material.lightMap,
      lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
      aoMap: !!material.aoMap,
      emissiveMap: !!material.emissiveMap,
      emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
      bumpMap: !!material.bumpMap,
      normalMap: !!material.normalMap,
      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
      tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
      clearcoatMap: !!material.clearcoatMap,
      clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,
      clearcoatNormalMap: !!material.clearcoatNormalMap,
      displacementMap: !!material.displacementMap,
      roughnessMap: !!material.roughnessMap,
      metalnessMap: !!material.metalnessMap,
      specularMap: !!material.specularMap,
      alphaMap: !!material.alphaMap,
      gradientMap: !!material.gradientMap,
      sheen: !!material.sheen,
      transmissionMap: !!material.transmissionMap,
      combine: material.combine,
      vertexTangents: material.normalMap && material.vertexTangents,
      vertexColors: material.vertexColors,
      vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,
      uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,
      fog: !!fog,
      useFog: material.fog,
      fogExp2: fog && fog.isFogExp2,
      flatShading: material.flatShading,
      sizeAttenuation: material.sizeAttenuation,
      logarithmicDepthBuffer,
      skinning: material.skinning && maxBones > 0,
      maxBones,
      useVertexTexture: floatVertexTextures,
      morphTargets: material.morphTargets,
      morphNormals: material.morphNormals,
      maxMorphTargets: renderer.maxMorphTargets,
      maxMorphNormals: renderer.maxMorphNormals,
      numDirLights: lights.directional.length,
      numPointLights: lights.point.length,
      numSpotLights: lights.spot.length,
      numRectAreaLights: lights.rectArea.length,
      numHemiLights: lights.hemi.length,
      numDirLightShadows: lights.directionalShadowMap.length,
      numPointLightShadows: lights.pointShadowMap.length,
      numSpotLightShadows: lights.spotShadowMap.length,
      numClippingPlanes: clipping.numPlanes,
      numClipIntersection: clipping.numIntersection,
      dithering: material.dithering,
      shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
      shadowMapType: renderer.shadowMap.type,
      toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
      physicallyCorrectLights: renderer.physicallyCorrectLights,
      premultipliedAlpha: material.premultipliedAlpha,
      alphaTest: material.alphaTest,
      doubleSided: material.side === DoubleSide,
      flipSided: material.side === BackSide,
      depthPacking: material.depthPacking !== void 0 ? material.depthPacking : false,
      index0AttributeName: material.index0AttributeName,
      extensionDerivatives: material.extensions && material.extensions.derivatives,
      extensionFragDepth: material.extensions && material.extensions.fragDepth,
      extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
      extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
      rendererExtensionFragDepth: isWebGL2 || extensions.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: isWebGL2 || extensions.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: isWebGL2 || extensions.has("EXT_shader_texture_lod"),
      customProgramCacheKey: material.customProgramCacheKey()
    };
    return parameters;
  }
  function getProgramCacheKey(parameters) {
    const array = [];
    if (parameters.shaderID) {
      array.push(parameters.shaderID);
    } else {
      array.push(parameters.fragmentShader);
      array.push(parameters.vertexShader);
    }
    if (parameters.defines !== void 0) {
      for (const name in parameters.defines) {
        array.push(name);
        array.push(parameters.defines[name]);
      }
    }
    if (parameters.isRawShaderMaterial === false) {
      for (let i = 0; i < parameterNames.length; i++) {
        array.push(parameters[parameterNames[i]]);
      }
      array.push(renderer.outputEncoding);
      array.push(renderer.gammaFactor);
    }
    array.push(parameters.customProgramCacheKey);
    return array.join();
  }
  function getUniforms(material) {
    const shaderID = shaderIDs[material.type];
    let uniforms;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      uniforms = UniformsUtils.clone(shader.uniforms);
    } else {
      uniforms = material.uniforms;
    }
    return uniforms;
  }
  function acquireProgram(parameters, cacheKey) {
    let program;
    for (let p = 0, pl = programs.length; p < pl; p++) {
      const preexistingProgram = programs[p];
      if (preexistingProgram.cacheKey === cacheKey) {
        program = preexistingProgram;
        ++program.usedTimes;
        break;
      }
    }
    if (program === void 0) {
      program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);
      programs.push(program);
    }
    return program;
  }
  function releaseProgram(program) {
    if (--program.usedTimes === 0) {
      const i = programs.indexOf(program);
      programs[i] = programs[programs.length - 1];
      programs.pop();
      program.destroy();
    }
  }
  return {
    getParameters,
    getProgramCacheKey,
    getUniforms,
    acquireProgram,
    releaseProgram,
    programs
  };
}
function WebGLProperties() {
  let properties = new WeakMap();
  function get(object) {
    let map = properties.get(object);
    if (map === void 0) {
      map = {};
      properties.set(object, map);
    }
    return map;
  }
  function remove(object) {
    properties.delete(object);
  }
  function update(object, key, value) {
    properties.get(object)[key] = value;
  }
  function dispose() {
    properties = new WeakMap();
  }
  return {
    get,
    remove,
    update,
    dispose
  };
}
function painterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.program !== b.program) {
    return a.program.id - b.program.id;
  } else if (a.material.id !== b.material.id) {
    return a.material.id - b.material.id;
  } else if (a.z !== b.z) {
    return a.z - b.z;
  } else {
    return a.id - b.id;
  }
}
function reversePainterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.z !== b.z) {
    return b.z - a.z;
  } else {
    return a.id - b.id;
  }
}
function WebGLRenderList(properties) {
  const renderItems = [];
  let renderItemsIndex = 0;
  const opaque = [];
  const transparent = [];
  const defaultProgram = { id: -1 };
  function init() {
    renderItemsIndex = 0;
    opaque.length = 0;
    transparent.length = 0;
  }
  function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
    let renderItem = renderItems[renderItemsIndex];
    const materialProperties = properties.get(material);
    if (renderItem === void 0) {
      renderItem = {
        id: object.id,
        object,
        geometry,
        material,
        program: materialProperties.program || defaultProgram,
        groupOrder,
        renderOrder: object.renderOrder,
        z,
        group
      };
      renderItems[renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object.id;
      renderItem.object = object;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.program = materialProperties.program || defaultProgram;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object.renderOrder;
      renderItem.z = z;
      renderItem.group = group;
    }
    renderItemsIndex++;
    return renderItem;
  }
  function push(object, geometry, material, groupOrder, z, group) {
    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
    (material.transparent === true ? transparent : opaque).push(renderItem);
  }
  function unshift(object, geometry, material, groupOrder, z, group) {
    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
    (material.transparent === true ? transparent : opaque).unshift(renderItem);
  }
  function sort(customOpaqueSort, customTransparentSort) {
    if (opaque.length > 1)
      opaque.sort(customOpaqueSort || painterSortStable);
    if (transparent.length > 1)
      transparent.sort(customTransparentSort || reversePainterSortStable);
  }
  function finish() {
    for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {
      const renderItem = renderItems[i];
      if (renderItem.id === null)
        break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.program = null;
      renderItem.group = null;
    }
  }
  return {
    opaque,
    transparent,
    init,
    push,
    unshift,
    finish,
    sort
  };
}
function WebGLRenderLists(properties) {
  let lists = new WeakMap();
  function get(scene, camera) {
    const cameras = lists.get(scene);
    let list;
    if (cameras === void 0) {
      list = new WebGLRenderList(properties);
      lists.set(scene, new WeakMap());
      lists.get(scene).set(camera, list);
    } else {
      list = cameras.get(camera);
      if (list === void 0) {
        list = new WebGLRenderList(properties);
        cameras.set(camera, list);
      }
    }
    return list;
  }
  function dispose() {
    lists = new WeakMap();
  }
  return {
    get,
    dispose
  };
}
function UniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            direction: new Vector3(),
            color: new Color()
          };
          break;
        case "SpotLight":
          uniforms = {
            position: new Vector3(),
            direction: new Vector3(),
            color: new Color(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          uniforms = {
            position: new Vector3(),
            color: new Color(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          uniforms = {
            direction: new Vector3(),
            skyColor: new Color(),
            groundColor: new Color()
          };
          break;
        case "RectAreaLight":
          uniforms = {
            color: new Color(),
            position: new Vector3(),
            halfWidth: new Vector3(),
            halfHeight: new Vector3()
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
function ShadowUniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "SpotLight":
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "PointLight":
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
var nextVersion = 0;
function shadowCastingLightsFirst(lightA, lightB) {
  return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
}
function WebGLLights(extensions, capabilities) {
  const cache = new UniformsCache();
  const shadowCache = ShadowUniformsCache();
  const state = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotShadow: [],
    spotShadowMap: [],
    spotShadowMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: []
  };
  for (let i = 0; i < 9; i++)
    state.probe.push(new Vector3());
  const vector3 = new Vector3();
  const matrix4 = new Matrix4();
  const matrix42 = new Matrix4();
  function setup(lights, shadows, camera) {
    let r = 0, g = 0, b = 0;
    for (let i = 0; i < 9; i++)
      state.probe[i].set(0, 0, 0);
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    let numDirectionalShadows = 0;
    let numPointShadows = 0;
    let numSpotShadows = 0;
    const viewMatrix = camera.matrixWorldInverse;
    lights.sort(shadowCastingLightsFirst);
    for (let i = 0, l = lights.length; i < l; i++) {
      const light = lights[i];
      const color = light.color;
      const intensity = light.intensity;
      const distance = light.distance;
      const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
      if (light.isAmbientLight) {
        r += color.r * intensity;
        g += color.g * intensity;
        b += color.b * intensity;
      } else if (light.isLightProbe) {
        for (let j = 0; j < 9; j++) {
          state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
        }
      } else if (light.isDirectionalLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.directionalShadow[directionalLength] = shadowUniforms;
          state.directionalShadowMap[directionalLength] = shadowMap;
          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
          numDirectionalShadows++;
        }
        state.directional[directionalLength] = uniforms;
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.distance = distance;
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        uniforms.coneCos = Math.cos(light.angle);
        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
        uniforms.decay = light.decay;
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.spotShadow[spotLength] = shadowUniforms;
          state.spotShadowMap[spotLength] = shadowMap;
          state.spotShadowMatrix[spotLength] = light.shadow.matrix;
          numSpotShadows++;
        }
        state.spot[spotLength] = uniforms;
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        matrix42.identity();
        matrix4.copy(light.matrixWorld);
        matrix4.premultiply(viewMatrix);
        matrix42.extractRotation(matrix4);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        uniforms.halfWidth.applyMatrix4(matrix42);
        uniforms.halfHeight.applyMatrix4(matrix42);
        state.rectArea[rectAreaLength] = uniforms;
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.distance = light.distance;
        uniforms.decay = light.decay;
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          shadowUniforms.shadowCameraNear = shadow.camera.near;
          shadowUniforms.shadowCameraFar = shadow.camera.far;
          state.pointShadow[pointLength] = shadowUniforms;
          state.pointShadowMap[pointLength] = shadowMap;
          state.pointShadowMatrix[pointLength] = light.shadow.matrix;
          numPointShadows++;
        }
        state.point[pointLength] = uniforms;
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = cache.get(light);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        uniforms.direction.transformDirection(viewMatrix);
        uniforms.direction.normalize();
        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
        state.hemi[hemiLength] = uniforms;
        hemiLength++;
      }
    }
    if (rectAreaLength > 0) {
      if (capabilities.isWebGL2) {
        state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
        state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
      } else {
        if (extensions.has("OES_texture_float_linear") === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else if (extensions.has("OES_texture_half_float_linear") === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
          state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
        } else {
          console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
        }
      }
    }
    state.ambient[0] = r;
    state.ambient[1] = g;
    state.ambient[2] = b;
    const hash = state.hash;
    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
      state.directional.length = directionalLength;
      state.spot.length = spotLength;
      state.rectArea.length = rectAreaLength;
      state.point.length = pointLength;
      state.hemi.length = hemiLength;
      state.directionalShadow.length = numDirectionalShadows;
      state.directionalShadowMap.length = numDirectionalShadows;
      state.pointShadow.length = numPointShadows;
      state.pointShadowMap.length = numPointShadows;
      state.spotShadow.length = numSpotShadows;
      state.spotShadowMap.length = numSpotShadows;
      state.directionalShadowMatrix.length = numDirectionalShadows;
      state.pointShadowMatrix.length = numPointShadows;
      state.spotShadowMatrix.length = numSpotShadows;
      hash.directionalLength = directionalLength;
      hash.pointLength = pointLength;
      hash.spotLength = spotLength;
      hash.rectAreaLength = rectAreaLength;
      hash.hemiLength = hemiLength;
      hash.numDirectionalShadows = numDirectionalShadows;
      hash.numPointShadows = numPointShadows;
      hash.numSpotShadows = numSpotShadows;
      state.version = nextVersion++;
    }
  }
  return {
    setup,
    state
  };
}
function WebGLRenderState(extensions, capabilities) {
  const lights = new WebGLLights(extensions, capabilities);
  const lightsArray = [];
  const shadowsArray = [];
  function init() {
    lightsArray.length = 0;
    shadowsArray.length = 0;
  }
  function pushLight(light) {
    lightsArray.push(light);
  }
  function pushShadow(shadowLight) {
    shadowsArray.push(shadowLight);
  }
  function setupLights(camera) {
    lights.setup(lightsArray, shadowsArray, camera);
  }
  const state = {
    lightsArray,
    shadowsArray,
    lights
  };
  return {
    init,
    state,
    setupLights,
    pushLight,
    pushShadow
  };
}
function WebGLRenderStates(extensions, capabilities) {
  let renderStates = new WeakMap();
  function get(scene, camera) {
    let renderState;
    if (renderStates.has(scene) === false) {
      renderState = new WebGLRenderState(extensions, capabilities);
      renderStates.set(scene, new WeakMap());
      renderStates.get(scene).set(camera, renderState);
    } else {
      if (renderStates.get(scene).has(camera) === false) {
        renderState = new WebGLRenderState(extensions, capabilities);
        renderStates.get(scene).set(camera, renderState);
      } else {
        renderState = renderStates.get(scene).get(camera);
      }
    }
    return renderState;
  }
  function dispose() {
    renderStates = new WeakMap();
  }
  return {
    get,
    dispose
  };
}
function MeshDepthMaterial(parameters) {
  Material.call(this);
  this.type = "MeshDepthMaterial";
  this.depthPacking = BasicDepthPacking;
  this.skinning = false;
  this.morphTargets = false;
  this.map = null;
  this.alphaMap = null;
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.setValues(parameters);
}
MeshDepthMaterial.prototype = Object.create(Material.prototype);
MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
MeshDepthMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.depthPacking = source.depthPacking;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  return this;
};
function MeshDistanceMaterial(parameters) {
  Material.call(this);
  this.type = "MeshDistanceMaterial";
  this.referencePosition = new Vector3();
  this.nearDistance = 1;
  this.farDistance = 1e3;
  this.skinning = false;
  this.morphTargets = false;
  this.map = null;
  this.alphaMap = null;
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.fog = false;
  this.setValues(parameters);
}
MeshDistanceMaterial.prototype = Object.create(Material.prototype);
MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
MeshDistanceMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.referencePosition.copy(source.referencePosition);
  this.nearDistance = source.nearDistance;
  this.farDistance = source.farDistance;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  return this;
};
var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n	for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n		#ifdef HORIZONAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean * HALF_SAMPLE_RATE;\n	squared_mean = squared_mean * HALF_SAMPLE_RATE;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
var vsm_vert = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
function WebGLShadowMap(_renderer, _objects, maxTextureSize) {
  let _frustum = new Frustum();
  const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterials = [], _distanceMaterials = [], _materialCache = {};
  const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
  const shadowMaterialVertical = new ShaderMaterial({
    defines: {
      SAMPLE_RATE: 2 / 8,
      HALF_SAMPLE_RATE: 1 / 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new Vector2() },
      radius: { value: 4 }
    },
    vertexShader: vsm_vert,
    fragmentShader: vsm_frag
  });
  const shadowMaterialHorizonal = shadowMaterialVertical.clone();
  shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;
  const fullScreenTri = new BufferGeometry();
  fullScreenTri.setAttribute("position", new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
  const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
  const scope = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = PCFShadowMap;
  this.render = function(lights, scene, camera) {
    if (scope.enabled === false)
      return;
    if (scope.autoUpdate === false && scope.needsUpdate === false)
      return;
    if (lights.length === 0)
      return;
    const currentRenderTarget = _renderer.getRenderTarget();
    const activeCubeFace = _renderer.getActiveCubeFace();
    const activeMipmapLevel = _renderer.getActiveMipmapLevel();
    const _state = _renderer.state;
    _state.setBlending(NoBlending);
    _state.buffers.color.setClear(1, 1, 1, 1);
    _state.buffers.depth.setTest(true);
    _state.setScissorTest(false);
    for (let i = 0, il = lights.length; i < il; i++) {
      const light = lights[i];
      const shadow = light.shadow;
      if (shadow === void 0) {
        console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
        continue;
      }
      if (shadow.autoUpdate === false && shadow.needsUpdate === false)
        continue;
      _shadowMapSize.copy(shadow.mapSize);
      const shadowFrameExtents = shadow.getFrameExtents();
      _shadowMapSize.multiply(shadowFrameExtents);
      _viewportSize.copy(shadow.mapSize);
      if (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {
        if (_shadowMapSize.x > maxTextureSize) {
          _viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);
          _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
          shadow.mapSize.x = _viewportSize.x;
        }
        if (_shadowMapSize.y > maxTextureSize) {
          _viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);
          _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
          shadow.mapSize.y = _viewportSize.y;
        }
      }
      if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
        const pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.camera.updateProjectionMatrix();
      }
      if (shadow.map === null) {
        const pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadow.camera.updateProjectionMatrix();
      }
      _renderer.setRenderTarget(shadow.map);
      _renderer.clear();
      const viewportCount = shadow.getViewportCount();
      for (let vp = 0; vp < viewportCount; vp++) {
        const viewport = shadow.getViewport(vp);
        _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
        _state.viewport(_viewport);
        shadow.updateMatrices(light, vp);
        _frustum = shadow.getFrustum();
        renderObject(scene, camera, shadow.camera, light, this.type);
      }
      if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
        VSMPass(shadow, camera);
      }
      shadow.needsUpdate = false;
    }
    scope.needsUpdate = false;
    _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
  };
  function VSMPass(shadow, camera) {
    const geometry = _objects.update(fullScreenMesh);
    shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    _renderer.setRenderTarget(shadow.mapPass);
    _renderer.clear();
    _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
    shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
    _renderer.setRenderTarget(shadow.map);
    _renderer.clear();
    _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null);
  }
  function getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {
    const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
    let material = _depthMaterials[index];
    if (material === void 0) {
      material = new MeshDepthMaterial({
        depthPacking: RGBADepthPacking,
        morphTargets: useMorphing,
        skinning: useSkinning
      });
      _depthMaterials[index] = material;
    }
    return material;
  }
  function getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {
    const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
    let material = _distanceMaterials[index];
    if (material === void 0) {
      material = new MeshDistanceMaterial({
        morphTargets: useMorphing,
        skinning: useSkinning
      });
      _distanceMaterials[index] = material;
    }
    return material;
  }
  function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
    let result = null;
    let getMaterialVariant = getDepthMaterialVariant;
    let customMaterial = object.customDepthMaterial;
    if (light.isPointLight === true) {
      getMaterialVariant = getDistanceMaterialVariant;
      customMaterial = object.customDistanceMaterial;
    }
    if (customMaterial === void 0) {
      let useMorphing = false;
      if (material.morphTargets === true) {
        useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
      }
      let useSkinning = false;
      if (object.isSkinnedMesh === true) {
        if (material.skinning === true) {
          useSkinning = true;
        } else {
          console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", object);
        }
      }
      const useInstancing = object.isInstancedMesh === true;
      result = getMaterialVariant(useMorphing, useSkinning, useInstancing);
    } else {
      result = customMaterial;
    }
    if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {
      const keyA = result.uuid, keyB = material.uuid;
      let materialsForVariant = _materialCache[keyA];
      if (materialsForVariant === void 0) {
        materialsForVariant = {};
        _materialCache[keyA] = materialsForVariant;
      }
      let cachedMaterial = materialsForVariant[keyB];
      if (cachedMaterial === void 0) {
        cachedMaterial = result.clone();
        materialsForVariant[keyB] = cachedMaterial;
      }
      result = cachedMaterial;
    }
    result.visible = material.visible;
    result.wireframe = material.wireframe;
    if (type === VSMShadowMap) {
      result.side = material.shadowSide !== null ? material.shadowSide : material.side;
    } else {
      result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
    }
    result.clipShadows = material.clipShadows;
    result.clippingPlanes = material.clippingPlanes;
    result.clipIntersection = material.clipIntersection;
    result.wireframeLinewidth = material.wireframeLinewidth;
    result.linewidth = material.linewidth;
    if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
      result.referencePosition.setFromMatrixPosition(light.matrixWorld);
      result.nearDistance = shadowCameraNear;
      result.farDistance = shadowCameraFar;
    }
    return result;
  }
  function renderObject(object, camera, shadowCamera, light, type) {
    if (object.visible === false)
      return;
    const visible = object.layers.test(camera.layers);
    if (visible && (object.isMesh || object.isLine || object.isPoints)) {
      if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
        const geometry = _objects.update(object);
        const material = object.material;
        if (Array.isArray(material)) {
          const groups = geometry.groups;
          for (let k = 0, kl = groups.length; k < kl; k++) {
            const group = groups[k];
            const groupMaterial = material[group.materialIndex];
            if (groupMaterial && groupMaterial.visible) {
              const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
              _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
            }
          }
        } else if (material.visible) {
          const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
          _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
        }
      }
    }
    const children = object.children;
    for (let i = 0, l = children.length; i < l; i++) {
      renderObject(children[i], camera, shadowCamera, light, type);
    }
  }
}
function WebGLState(gl, extensions, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  function ColorBuffer() {
    let locked = false;
    const color = new Vector4();
    let currentColorMask = null;
    const currentColorClear = new Vector4(0, 0, 0, 0);
    return {
      setMask: function(colorMask) {
        if (currentColorMask !== colorMask && !locked) {
          gl.colorMask(colorMask, colorMask, colorMask, colorMask);
          currentColorMask = colorMask;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(r, g, b, a, premultipliedAlpha) {
        if (premultipliedAlpha === true) {
          r *= a;
          g *= a;
          b *= a;
        }
        color.set(r, g, b, a);
        if (currentColorClear.equals(color) === false) {
          gl.clearColor(r, g, b, a);
          currentColorClear.copy(color);
        }
      },
      reset: function() {
        locked = false;
        currentColorMask = null;
        currentColorClear.set(-1, 0, 0, 0);
      }
    };
  }
  function DepthBuffer() {
    let locked = false;
    let currentDepthMask = null;
    let currentDepthFunc = null;
    let currentDepthClear = null;
    return {
      setTest: function(depthTest) {
        if (depthTest) {
          enable(2929);
        } else {
          disable(2929);
        }
      },
      setMask: function(depthMask) {
        if (currentDepthMask !== depthMask && !locked) {
          gl.depthMask(depthMask);
          currentDepthMask = depthMask;
        }
      },
      setFunc: function(depthFunc) {
        if (currentDepthFunc !== depthFunc) {
          if (depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(512);
                break;
              case AlwaysDepth:
                gl.depthFunc(519);
                break;
              case LessDepth:
                gl.depthFunc(513);
                break;
              case LessEqualDepth:
                gl.depthFunc(515);
                break;
              case EqualDepth:
                gl.depthFunc(514);
                break;
              case GreaterEqualDepth:
                gl.depthFunc(518);
                break;
              case GreaterDepth:
                gl.depthFunc(516);
                break;
              case NotEqualDepth:
                gl.depthFunc(517);
                break;
              default:
                gl.depthFunc(515);
            }
          } else {
            gl.depthFunc(515);
          }
          currentDepthFunc = depthFunc;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(depth) {
        if (currentDepthClear !== depth) {
          gl.clearDepth(depth);
          currentDepthClear = depth;
        }
      },
      reset: function() {
        locked = false;
        currentDepthMask = null;
        currentDepthFunc = null;
        currentDepthClear = null;
      }
    };
  }
  function StencilBuffer() {
    let locked = false;
    let currentStencilMask = null;
    let currentStencilFunc = null;
    let currentStencilRef = null;
    let currentStencilFuncMask = null;
    let currentStencilFail = null;
    let currentStencilZFail = null;
    let currentStencilZPass = null;
    let currentStencilClear = null;
    return {
      setTest: function(stencilTest) {
        if (!locked) {
          if (stencilTest) {
            enable(2960);
          } else {
            disable(2960);
          }
        }
      },
      setMask: function(stencilMask) {
        if (currentStencilMask !== stencilMask && !locked) {
          gl.stencilMask(stencilMask);
          currentStencilMask = stencilMask;
        }
      },
      setFunc: function(stencilFunc, stencilRef, stencilMask) {
        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
          currentStencilFunc = stencilFunc;
          currentStencilRef = stencilRef;
          currentStencilFuncMask = stencilMask;
        }
      },
      setOp: function(stencilFail, stencilZFail, stencilZPass) {
        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
          currentStencilFail = stencilFail;
          currentStencilZFail = stencilZFail;
          currentStencilZPass = stencilZPass;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(stencil) {
        if (currentStencilClear !== stencil) {
          gl.clearStencil(stencil);
          currentStencilClear = stencil;
        }
      },
      reset: function() {
        locked = false;
        currentStencilMask = null;
        currentStencilFunc = null;
        currentStencilRef = null;
        currentStencilFuncMask = null;
        currentStencilFail = null;
        currentStencilZFail = null;
        currentStencilZPass = null;
        currentStencilClear = null;
      }
    };
  }
  const colorBuffer = new ColorBuffer();
  const depthBuffer = new DepthBuffer();
  const stencilBuffer = new StencilBuffer();
  let enabledCapabilities = {};
  let currentProgram = null;
  let currentBlendingEnabled = null;
  let currentBlending = null;
  let currentBlendEquation = null;
  let currentBlendSrc = null;
  let currentBlendDst = null;
  let currentBlendEquationAlpha = null;
  let currentBlendSrcAlpha = null;
  let currentBlendDstAlpha = null;
  let currentPremultipledAlpha = false;
  let currentFlipSided = null;
  let currentCullFace = null;
  let currentLineWidth = null;
  let currentPolygonOffsetFactor = null;
  let currentPolygonOffsetUnits = null;
  const maxTextures = gl.getParameter(35661);
  let lineWidthAvailable = false;
  let version = 0;
  const glVersion = gl.getParameter(7938);
  if (glVersion.indexOf("WebGL") !== -1) {
    version = parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 1;
  } else if (glVersion.indexOf("OpenGL ES") !== -1) {
    version = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 2;
  }
  let currentTextureSlot = null;
  let currentBoundTextures = {};
  const currentScissor = new Vector4();
  const currentViewport = new Vector4();
  function createTexture(type, target, count) {
    const data = new Uint8Array(4);
    const texture = gl.createTexture();
    gl.bindTexture(type, texture);
    gl.texParameteri(type, 10241, 9728);
    gl.texParameteri(type, 10240, 9728);
    for (let i = 0; i < count; i++) {
      gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
    }
    return texture;
  }
  const emptyTextures = {};
  emptyTextures[3553] = createTexture(3553, 3553, 1);
  emptyTextures[34067] = createTexture(34067, 34069, 6);
  colorBuffer.setClear(0, 0, 0, 1);
  depthBuffer.setClear(1);
  stencilBuffer.setClear(0);
  enable(2929);
  depthBuffer.setFunc(LessEqualDepth);
  setFlipSided(false);
  setCullFace(CullFaceBack);
  enable(2884);
  setBlending(NoBlending);
  function enable(id) {
    if (enabledCapabilities[id] !== true) {
      gl.enable(id);
      enabledCapabilities[id] = true;
    }
  }
  function disable(id) {
    if (enabledCapabilities[id] !== false) {
      gl.disable(id);
      enabledCapabilities[id] = false;
    }
  }
  function useProgram(program) {
    if (currentProgram !== program) {
      gl.useProgram(program);
      currentProgram = program;
      return true;
    }
    return false;
  }
  const equationToGL = {
    [AddEquation]: 32774,
    [SubtractEquation]: 32778,
    [ReverseSubtractEquation]: 32779
  };
  if (isWebGL2) {
    equationToGL[MinEquation] = 32775;
    equationToGL[MaxEquation] = 32776;
  } else {
    const extension = extensions.get("EXT_blend_minmax");
    if (extension !== null) {
      equationToGL[MinEquation] = extension.MIN_EXT;
      equationToGL[MaxEquation] = extension.MAX_EXT;
    }
  }
  const factorToGL = {
    [ZeroFactor]: 0,
    [OneFactor]: 1,
    [SrcColorFactor]: 768,
    [SrcAlphaFactor]: 770,
    [SrcAlphaSaturateFactor]: 776,
    [DstColorFactor]: 774,
    [DstAlphaFactor]: 772,
    [OneMinusSrcColorFactor]: 769,
    [OneMinusSrcAlphaFactor]: 771,
    [OneMinusDstColorFactor]: 775,
    [OneMinusDstAlphaFactor]: 773
  };
  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
    if (blending === NoBlending) {
      if (currentBlendingEnabled) {
        disable(3042);
        currentBlendingEnabled = false;
      }
      return;
    }
    if (!currentBlendingEnabled) {
      enable(3042);
      currentBlendingEnabled = true;
    }
    if (blending !== CustomBlending) {
      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
          gl.blendEquation(32774);
          currentBlendEquation = AddEquation;
          currentBlendEquationAlpha = AddEquation;
        }
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(1, 771, 1, 771);
              break;
            case AdditiveBlending:
              gl.blendFunc(1, 1);
              break;
            case SubtractiveBlending:
              gl.blendFuncSeparate(0, 0, 769, 771);
              break;
            case MultiplyBlending:
              gl.blendFuncSeparate(0, 768, 0, 770);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(770, 771, 1, 771);
              break;
            case AdditiveBlending:
              gl.blendFunc(770, 1);
              break;
            case SubtractiveBlending:
              gl.blendFunc(0, 769);
              break;
            case MultiplyBlending:
              gl.blendFunc(0, 768);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        }
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentBlending = blending;
        currentPremultipledAlpha = premultipliedAlpha;
      }
      return;
    }
    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;
    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
      currentBlendEquation = blendEquation;
      currentBlendEquationAlpha = blendEquationAlpha;
    }
    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
      currentBlendSrc = blendSrc;
      currentBlendDst = blendDst;
      currentBlendSrcAlpha = blendSrcAlpha;
      currentBlendDstAlpha = blendDstAlpha;
    }
    currentBlending = blending;
    currentPremultipledAlpha = null;
  }
  function setMaterial(material, frontFaceCW) {
    material.side === DoubleSide ? disable(2884) : enable(2884);
    let flipSided = material.side === BackSide;
    if (frontFaceCW)
      flipSided = !flipSided;
    setFlipSided(flipSided);
    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
    depthBuffer.setFunc(material.depthFunc);
    depthBuffer.setTest(material.depthTest);
    depthBuffer.setMask(material.depthWrite);
    colorBuffer.setMask(material.colorWrite);
    const stencilWrite = material.stencilWrite;
    stencilBuffer.setTest(stencilWrite);
    if (stencilWrite) {
      stencilBuffer.setMask(material.stencilWriteMask);
      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
    }
    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
  }
  function setFlipSided(flipSided) {
    if (currentFlipSided !== flipSided) {
      if (flipSided) {
        gl.frontFace(2304);
      } else {
        gl.frontFace(2305);
      }
      currentFlipSided = flipSided;
    }
  }
  function setCullFace(cullFace) {
    if (cullFace !== CullFaceNone) {
      enable(2884);
      if (cullFace !== currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl.cullFace(1029);
        } else if (cullFace === CullFaceFront) {
          gl.cullFace(1028);
        } else {
          gl.cullFace(1032);
        }
      }
    } else {
      disable(2884);
    }
    currentCullFace = cullFace;
  }
  function setLineWidth(width) {
    if (width !== currentLineWidth) {
      if (lineWidthAvailable)
        gl.lineWidth(width);
      currentLineWidth = width;
    }
  }
  function setPolygonOffset(polygonOffset, factor, units) {
    if (polygonOffset) {
      enable(32823);
      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        currentPolygonOffsetFactor = factor;
        currentPolygonOffsetUnits = units;
      }
    } else {
      disable(32823);
    }
  }
  function setScissorTest(scissorTest) {
    if (scissorTest) {
      enable(3089);
    } else {
      disable(3089);
    }
  }
  function activeTexture(webglSlot) {
    if (webglSlot === void 0)
      webglSlot = 33984 + maxTextures - 1;
    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      currentTextureSlot = webglSlot;
    }
  }
  function bindTexture(webglType, webglTexture) {
    if (currentTextureSlot === null) {
      activeTexture();
    }
    let boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture === void 0) {
      boundTexture = { type: void 0, texture: void 0 };
      currentBoundTextures[currentTextureSlot] = boundTexture;
    }
    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }
  function unbindTexture() {
    const boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture !== void 0 && boundTexture.type !== void 0) {
      gl.bindTexture(boundTexture.type, null);
      boundTexture.type = void 0;
      boundTexture.texture = void 0;
    }
  }
  function compressedTexImage2D() {
    try {
      gl.compressedTexImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage2D() {
    try {
      gl.texImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage3D() {
    try {
      gl.texImage3D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function scissor(scissor2) {
    if (currentScissor.equals(scissor2) === false) {
      gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
      currentScissor.copy(scissor2);
    }
  }
  function viewport(viewport2) {
    if (currentViewport.equals(viewport2) === false) {
      gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
      currentViewport.copy(viewport2);
    }
  }
  function reset() {
    enabledCapabilities = {};
    currentTextureSlot = null;
    currentBoundTextures = {};
    currentProgram = null;
    currentBlendingEnabled = null;
    currentBlending = null;
    currentBlendEquation = null;
    currentBlendSrc = null;
    currentBlendDst = null;
    currentBlendEquationAlpha = null;
    currentBlendSrcAlpha = null;
    currentBlendDstAlpha = null;
    currentPremultipledAlpha = false;
    currentFlipSided = null;
    currentCullFace = null;
    currentLineWidth = null;
    currentPolygonOffsetFactor = null;
    currentPolygonOffsetUnits = null;
    colorBuffer.reset();
    depthBuffer.reset();
    stencilBuffer.reset();
  }
  return {
    buffers: {
      color: colorBuffer,
      depth: depthBuffer,
      stencil: stencilBuffer
    },
    enable,
    disable,
    useProgram,
    setBlending,
    setMaterial,
    setFlipSided,
    setCullFace,
    setLineWidth,
    setPolygonOffset,
    setScissorTest,
    activeTexture,
    bindTexture,
    unbindTexture,
    compressedTexImage2D,
    texImage2D,
    texImage3D,
    scissor,
    viewport,
    reset
  };
}
function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
  const isWebGL2 = capabilities.isWebGL2;
  const maxTextures = capabilities.maxTextures;
  const maxCubemapSize = capabilities.maxCubemapSize;
  const maxTextureSize = capabilities.maxTextureSize;
  const maxSamples = capabilities.maxSamples;
  const _videoTextures = new WeakMap();
  let _canvas2;
  let useOffscreenCanvas = false;
  try {
    useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch (err) {
  }
  function createCanvas(width, height) {
    return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
  }
  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
    let scale = 1;
    if (image.width > maxSize || image.height > maxSize) {
      scale = maxSize / Math.max(image.width, image.height);
    }
    if (scale < 1 || needsPowerOfTwo === true) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;
        const width = floor(scale * image.width);
        const height = floor(scale * image.height);
        if (_canvas2 === void 0)
          _canvas2 = createCanvas(width, height);
        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
        canvas.width = width;
        canvas.height = height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, width, height);
        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
        return canvas;
      } else {
        if ("data" in image) {
          console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
        }
        return image;
      }
    }
    return image;
  }
  function isPowerOfTwo(image) {
    return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);
  }
  function textureNeedsPowerOfTwo(texture) {
    if (isWebGL2)
      return false;
    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }
  function textureNeedsGenerateMipmaps(texture, supportsMips) {
    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }
  function generateMipmap(target, texture, width, height) {
    _gl.generateMipmap(target);
    const textureProperties = properties.get(texture);
    textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;
  }
  function getInternalFormat(internalFormatName, glFormat, glType) {
    if (isWebGL2 === false)
      return glFormat;
    if (internalFormatName !== null) {
      if (_gl[internalFormatName] !== void 0)
        return _gl[internalFormatName];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
    }
    let internalFormat = glFormat;
    if (glFormat === 6403) {
      if (glType === 5126)
        internalFormat = 33326;
      if (glType === 5131)
        internalFormat = 33325;
      if (glType === 5121)
        internalFormat = 33321;
    }
    if (glFormat === 6407) {
      if (glType === 5126)
        internalFormat = 34837;
      if (glType === 5131)
        internalFormat = 34843;
      if (glType === 5121)
        internalFormat = 32849;
    }
    if (glFormat === 6408) {
      if (glType === 5126)
        internalFormat = 34836;
      if (glType === 5131)
        internalFormat = 34842;
      if (glType === 5121)
        internalFormat = 32856;
    }
    if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {
      extensions.get("EXT_color_buffer_float");
    }
    return internalFormat;
  }
  function filterFallback(f) {
    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {
      return 9728;
    }
    return 9729;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    deallocateTexture(texture);
    if (texture.isVideoTexture) {
      _videoTextures.delete(texture);
    }
    info.memory.textures--;
  }
  function onRenderTargetDispose(event) {
    const renderTarget = event.target;
    renderTarget.removeEventListener("dispose", onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
    info.memory.textures--;
  }
  function deallocateTexture(texture) {
    const textureProperties = properties.get(texture);
    if (textureProperties.__webglInit === void 0)
      return;
    _gl.deleteTexture(textureProperties.__webglTexture);
    properties.remove(texture);
  }
  function deallocateRenderTarget(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(renderTarget.texture);
    if (!renderTarget)
      return;
    if (textureProperties.__webglTexture !== void 0) {
      _gl.deleteTexture(textureProperties.__webglTexture);
    }
    if (renderTarget.depthTexture) {
      renderTarget.depthTexture.dispose();
    }
    if (renderTarget.isWebGLCubeRenderTarget) {
      for (let i = 0; i < 6; i++) {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
      }
    } else {
      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
      if (renderTargetProperties.__webglDepthbuffer)
        _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
      if (renderTargetProperties.__webglMultisampledFramebuffer)
        _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
      if (renderTargetProperties.__webglColorRenderbuffer)
        _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
      if (renderTargetProperties.__webglDepthRenderbuffer)
        _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
    }
    properties.remove(renderTarget.texture);
    properties.remove(renderTarget);
  }
  let textureUnits = 0;
  function resetTextureUnits() {
    textureUnits = 0;
  }
  function allocateTextureUnit() {
    const textureUnit = textureUnits;
    if (textureUnit >= maxTextures) {
      console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
    }
    textureUnits += 1;
    return textureUnit;
  }
  function setTexture2D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.isVideoTexture)
      updateVideoTexture(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      const image = texture.image;
      if (image === void 0) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
      } else if (image.complete === false) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      } else {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(3553, textureProperties.__webglTexture);
  }
  function setTexture2DArray(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(35866, textureProperties.__webglTexture);
  }
  function setTexture3D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(32879, textureProperties.__webglTexture);
  }
  function setTextureCube(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadCubeTexture(textureProperties, texture, slot);
      return;
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(34067, textureProperties.__webglTexture);
  }
  const wrappingToGL = {
    [RepeatWrapping]: 10497,
    [ClampToEdgeWrapping]: 33071,
    [MirroredRepeatWrapping]: 33648
  };
  const filterToGL = {
    [NearestFilter]: 9728,
    [NearestMipmapNearestFilter]: 9984,
    [NearestMipmapLinearFilter]: 9986,
    [LinearFilter]: 9729,
    [LinearMipmapNearestFilter]: 9985,
    [LinearMipmapLinearFilter]: 9987
  };
  function setTextureParameters(textureType, texture, supportsMips) {
    if (supportsMips) {
      _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
      _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
      if (textureType === 32879 || textureType === 35866) {
        _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
      }
      _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
      _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
    } else {
      _gl.texParameteri(textureType, 10242, 33071);
      _gl.texParameteri(textureType, 10243, 33071);
      if (textureType === 32879 || textureType === 35866) {
        _gl.texParameteri(textureType, 32882, 33071);
      }
      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
      }
      _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
      _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
      }
    }
    const extension = extensions.get("EXT_texture_filter_anisotropic");
    if (extension) {
      if (texture.type === FloatType && extensions.get("OES_texture_float_linear") === null)
        return;
      if (texture.type === HalfFloatType && (isWebGL2 || extensions.get("OES_texture_half_float_linear")) === null)
        return;
      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
        properties.get(texture).__currentAnisotropy = texture.anisotropy;
      }
    }
  }
  function initTexture(textureProperties, texture) {
    if (textureProperties.__webglInit === void 0) {
      textureProperties.__webglInit = true;
      texture.addEventListener("dispose", onTextureDispose);
      textureProperties.__webglTexture = _gl.createTexture();
      info.memory.textures++;
    }
  }
  function uploadTexture(textureProperties, texture, slot) {
    let textureType = 3553;
    if (texture.isDataTexture2DArray)
      textureType = 35866;
    if (texture.isDataTexture3D)
      textureType = 32879;
    initTexture(textureProperties, texture);
    state.activeTexture(33984 + slot);
    state.bindTexture(textureType, textureProperties.__webglTexture);
    _gl.pixelStorei(37440, texture.flipY);
    _gl.pixelStorei(37441, texture.premultiplyAlpha);
    _gl.pixelStorei(3317, texture.unpackAlignment);
    const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;
    const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
    const supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format);
    let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
    setTextureParameters(textureType, texture, supportsMips);
    let mipmap;
    const mipmaps = texture.mipmaps;
    if (texture.isDepthTexture) {
      glInternalFormat = 6402;
      if (isWebGL2) {
        if (texture.type === FloatType) {
          glInternalFormat = 36012;
        } else if (texture.type === UnsignedIntType) {
          glInternalFormat = 33190;
        } else if (texture.type === UnsignedInt248Type) {
          glInternalFormat = 35056;
        } else {
          glInternalFormat = 33189;
        }
      } else {
        if (texture.type === FloatType) {
          console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
        }
      }
      if (texture.format === DepthFormat && glInternalFormat === 6402) {
        if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
          console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
          texture.type = UnsignedShortType;
          glType = utils.convert(texture.type);
        }
      }
      if (texture.format === DepthStencilFormat && glInternalFormat === 6402) {
        glInternalFormat = 34041;
        if (texture.type !== UnsignedInt248Type) {
          console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
          texture.type = UnsignedInt248Type;
          glType = utils.convert(texture.type);
        }
      }
      state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
    } else if (texture.isDataTexture) {
      if (mipmaps.length > 0 && supportsMips) {
        for (let i = 0, il = mipmaps.length; i < il; i++) {
          mipmap = mipmaps[i];
          state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
        }
        texture.generateMipmaps = false;
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
        textureProperties.__maxMipLevel = 0;
      }
    } else if (texture.isCompressedTexture) {
      for (let i = 0, il = mipmaps.length; i < il; i++) {
        mipmap = mipmaps[i];
        if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
          if (glFormat !== null) {
            state.compressedTexImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
          } else {
            console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
          }
        } else {
          state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
        }
      }
      textureProperties.__maxMipLevel = mipmaps.length - 1;
    } else if (texture.isDataTexture2DArray) {
      state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
      textureProperties.__maxMipLevel = 0;
    } else if (texture.isDataTexture3D) {
      state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
      textureProperties.__maxMipLevel = 0;
    } else {
      if (mipmaps.length > 0 && supportsMips) {
        for (let i = 0, il = mipmaps.length; i < il; i++) {
          mipmap = mipmaps[i];
          state.texImage2D(3553, i, glInternalFormat, glFormat, glType, mipmap);
        }
        texture.generateMipmaps = false;
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
        textureProperties.__maxMipLevel = 0;
      }
    }
    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      generateMipmap(textureType, texture, image.width, image.height);
    }
    textureProperties.__version = texture.version;
    if (texture.onUpdate)
      texture.onUpdate(texture);
  }
  function uploadCubeTexture(textureProperties, texture, slot) {
    if (texture.image.length !== 6)
      return;
    initTexture(textureProperties, texture);
    state.activeTexture(33984 + slot);
    state.bindTexture(34067, textureProperties.__webglTexture);
    _gl.pixelStorei(37440, texture.flipY);
    const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
    const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
    const cubeImage = [];
    for (let i = 0; i < 6; i++) {
      if (!isCompressed && !isDataTexture) {
        cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
      } else {
        cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
      }
    }
    const image = cubeImage[0], supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
    setTextureParameters(34067, texture, supportsMips);
    let mipmaps;
    if (isCompressed) {
      for (let i = 0; i < 6; i++) {
        mipmaps = cubeImage[i].mipmaps;
        for (let j = 0; j < mipmaps.length; j++) {
          const mipmap = mipmaps[j];
          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
            if (glFormat !== null) {
              state.compressedTexImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
            } else {
              console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
            }
          } else {
            state.texImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
          }
        }
      }
      textureProperties.__maxMipLevel = mipmaps.length - 1;
    } else {
      mipmaps = texture.mipmaps;
      for (let i = 0; i < 6; i++) {
        if (isDataTexture) {
          state.texImage2D(34069 + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
          for (let j = 0; j < mipmaps.length; j++) {
            const mipmap = mipmaps[j];
            const mipmapImage = mipmap.image[i].image;
            state.texImage2D(34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
          }
        } else {
          state.texImage2D(34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
          for (let j = 0; j < mipmaps.length; j++) {
            const mipmap = mipmaps[j];
            state.texImage2D(34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i]);
          }
        }
      }
      textureProperties.__maxMipLevel = mipmaps.length;
    }
    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      generateMipmap(34067, texture, image.width, image.height);
    }
    textureProperties.__version = texture.version;
    if (texture.onUpdate)
      texture.onUpdate(texture);
  }
  function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
    const glFormat = utils.convert(renderTarget.texture.format);
    const glType = utils.convert(renderTarget.texture.type);
    const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
    state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
    _gl.bindFramebuffer(36160, framebuffer);
    _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);
    _gl.bindFramebuffer(36160, null);
  }
  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
    _gl.bindRenderbuffer(36161, renderbuffer);
    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
      let glInternalFormat = 33189;
      if (isMultisample) {
        const depthTexture = renderTarget.depthTexture;
        if (depthTexture && depthTexture.isDepthTexture) {
          if (depthTexture.type === FloatType) {
            glInternalFormat = 36012;
          } else if (depthTexture.type === UnsignedIntType) {
            glInternalFormat = 33190;
          }
        }
        const samples = getRenderTargetSamples(renderTarget);
        _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
      }
      _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
      if (isMultisample) {
        const samples = getRenderTargetSamples(renderTarget);
        _gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
      }
      _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
    } else {
      const glFormat = utils.convert(renderTarget.texture.format);
      const glType = utils.convert(renderTarget.texture.type);
      const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
      if (isMultisample) {
        const samples = getRenderTargetSamples(renderTarget);
        _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
      }
    }
    _gl.bindRenderbuffer(36161, null);
  }
  function setupDepthTexture(framebuffer, renderTarget) {
    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
    if (isCube)
      throw new Error("Depth Texture with cube render targets is not supported");
    _gl.bindFramebuffer(36160, framebuffer);
    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    }
    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
      renderTarget.depthTexture.image.width = renderTarget.width;
      renderTarget.depthTexture.image.height = renderTarget.height;
      renderTarget.depthTexture.needsUpdate = true;
    }
    setTexture2D(renderTarget.depthTexture, 0);
    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
    if (renderTarget.depthTexture.format === DepthFormat) {
      _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
      _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
    } else {
      throw new Error("Unknown depthTexture format");
    }
  }
  function setupDepthRenderbuffer(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    if (renderTarget.depthTexture) {
      if (isCube)
        throw new Error("target.depthTexture not supported in Cube render targets");
      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
    } else {
      if (isCube) {
        renderTargetProperties.__webglDepthbuffer = [];
        for (let i = 0; i < 6; i++) {
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);
          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
        }
      } else {
        _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
      }
    }
    _gl.bindFramebuffer(36160, null);
  }
  function setupRenderTarget(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(renderTarget.texture);
    renderTarget.addEventListener("dispose", onRenderTargetDispose);
    textureProperties.__webglTexture = _gl.createTexture();
    info.memory.textures++;
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    const isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;
    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
    if (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {
      renderTarget.texture.format = RGBAFormat;
      console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.");
    }
    if (isCube) {
      renderTargetProperties.__webglFramebuffer = [];
      for (let i = 0; i < 6; i++) {
        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
      }
    } else {
      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
      if (isMultisample) {
        if (isWebGL2) {
          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
          renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
          _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
          const glFormat = utils.convert(renderTarget.texture.format);
          const glType = utils.convert(renderTarget.texture.type);
          const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
          _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
          _gl.bindRenderbuffer(36161, null);
          if (renderTarget.depthBuffer) {
            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
          }
          _gl.bindFramebuffer(36160, null);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    }
    if (isCube) {
      state.bindTexture(34067, textureProperties.__webglTexture);
      setTextureParameters(34067, renderTarget.texture, supportsMips);
      for (let i = 0; i < 6; i++) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, 36064, 34069 + i);
      }
      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
        generateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);
      }
      state.bindTexture(34067, null);
    } else {
      state.bindTexture(3553, textureProperties.__webglTexture);
      setTextureParameters(3553, renderTarget.texture, supportsMips);
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);
      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
        generateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);
      }
      state.bindTexture(3553, null);
    }
    if (renderTarget.depthBuffer) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function updateRenderTargetMipmap(renderTarget) {
    const texture = renderTarget.texture;
    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
      const webglTexture = properties.get(texture).__webglTexture;
      state.bindTexture(target, webglTexture);
      generateMipmap(target, texture, renderTarget.width, renderTarget.height);
      state.bindTexture(target, null);
    }
  }
  function updateMultisampleRenderTarget(renderTarget) {
    if (renderTarget.isWebGLMultisampleRenderTarget) {
      if (isWebGL2) {
        const renderTargetProperties = properties.get(renderTarget);
        _gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
        _gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
        const width = renderTarget.width;
        const height = renderTarget.height;
        let mask = 16384;
        if (renderTarget.depthBuffer)
          mask |= 256;
        if (renderTarget.stencilBuffer)
          mask |= 1024;
        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
        _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
      } else {
        console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
      }
    }
  }
  function getRenderTargetSamples(renderTarget) {
    return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;
  }
  function updateVideoTexture(texture) {
    const frame = info.render.frame;
    if (_videoTextures.get(texture) !== frame) {
      _videoTextures.set(texture, frame);
      texture.update();
    }
  }
  let warnedTexture2D = false;
  let warnedTextureCube = false;
  function safeSetTexture2D(texture, slot) {
    if (texture && texture.isWebGLRenderTarget) {
      if (warnedTexture2D === false) {
        console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");
        warnedTexture2D = true;
      }
      texture = texture.texture;
    }
    setTexture2D(texture, slot);
  }
  function safeSetTextureCube(texture, slot) {
    if (texture && texture.isWebGLCubeRenderTarget) {
      if (warnedTextureCube === false) {
        console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
        warnedTextureCube = true;
      }
      texture = texture.texture;
    }
    setTextureCube(texture, slot);
  }
  this.allocateTextureUnit = allocateTextureUnit;
  this.resetTextureUnits = resetTextureUnits;
  this.setTexture2D = setTexture2D;
  this.setTexture2DArray = setTexture2DArray;
  this.setTexture3D = setTexture3D;
  this.setTextureCube = setTextureCube;
  this.setupRenderTarget = setupRenderTarget;
  this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
  this.safeSetTexture2D = safeSetTexture2D;
  this.safeSetTextureCube = safeSetTextureCube;
}
function WebGLUtils(gl, extensions, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  function convert(p) {
    let extension;
    if (p === UnsignedByteType)
      return 5121;
    if (p === UnsignedShort4444Type)
      return 32819;
    if (p === UnsignedShort5551Type)
      return 32820;
    if (p === UnsignedShort565Type)
      return 33635;
    if (p === ByteType)
      return 5120;
    if (p === ShortType)
      return 5122;
    if (p === UnsignedShortType)
      return 5123;
    if (p === IntType)
      return 5124;
    if (p === UnsignedIntType)
      return 5125;
    if (p === FloatType)
      return 5126;
    if (p === HalfFloatType) {
      if (isWebGL2)
        return 5131;
      extension = extensions.get("OES_texture_half_float");
      if (extension !== null) {
        return extension.HALF_FLOAT_OES;
      } else {
        return null;
      }
    }
    if (p === AlphaFormat)
      return 6406;
    if (p === RGBFormat)
      return 6407;
    if (p === RGBAFormat)
      return 6408;
    if (p === LuminanceFormat)
      return 6409;
    if (p === LuminanceAlphaFormat)
      return 6410;
    if (p === DepthFormat)
      return 6402;
    if (p === DepthStencilFormat)
      return 34041;
    if (p === RedFormat)
      return 6403;
    if (p === RedIntegerFormat)
      return 36244;
    if (p === RGFormat)
      return 33319;
    if (p === RGIntegerFormat)
      return 33320;
    if (p === RGBIntegerFormat)
      return 36248;
    if (p === RGBAIntegerFormat)
      return 36249;
    if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
      extension = extensions.get("WEBGL_compressed_texture_s3tc");
      if (extension !== null) {
        if (p === RGB_S3TC_DXT1_Format)
          return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (p === RGBA_S3TC_DXT1_Format)
          return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (p === RGBA_S3TC_DXT3_Format)
          return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (p === RGBA_S3TC_DXT5_Format)
          return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else {
        return null;
      }
    }
    if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_pvrtc");
      if (extension !== null) {
        if (p === RGB_PVRTC_4BPPV1_Format)
          return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p === RGB_PVRTC_2BPPV1_Format)
          return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p === RGBA_PVRTC_4BPPV1_Format)
          return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p === RGBA_PVRTC_2BPPV1_Format)
          return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (p === RGB_ETC1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc1");
      if (extension !== null) {
        return extension.COMPRESSED_RGB_ETC1_WEBGL;
      } else {
        return null;
      }
    }
    if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc");
      if (extension !== null) {
        if (p === RGB_ETC2_Format)
          return extension.COMPRESSED_RGB8_ETC2;
        if (p === RGBA_ETC2_EAC_Format)
          return extension.COMPRESSED_RGBA8_ETC2_EAC;
      }
    }
    if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {
      extension = extensions.get("WEBGL_compressed_texture_astc");
      if (extension !== null) {
        return p;
      } else {
        return null;
      }
    }
    if (p === RGBA_BPTC_Format) {
      extension = extensions.get("EXT_texture_compression_bptc");
      if (extension !== null) {
        return p;
      } else {
        return null;
      }
    }
    if (p === UnsignedInt248Type) {
      if (isWebGL2)
        return 34042;
      extension = extensions.get("WEBGL_depth_texture");
      if (extension !== null) {
        return extension.UNSIGNED_INT_24_8_WEBGL;
      } else {
        return null;
      }
    }
  }
  return { convert };
}
function ArrayCamera(array = []) {
  PerspectiveCamera.call(this);
  this.cameras = array;
}
ArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {
  constructor: ArrayCamera,
  isArrayCamera: true
});
function Group() {
  Object3D.call(this);
  this.type = "Group";
}
Group.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Group,
  isGroup: true
});
function WebXRController() {
  this._targetRay = null;
  this._grip = null;
  this._hand = null;
}
Object.assign(WebXRController.prototype, {
  constructor: WebXRController,
  getHandSpace: function() {
    if (this._hand === null) {
      this._hand = new Group();
      this._hand.matrixAutoUpdate = false;
      this._hand.visible = false;
      this._hand.joints = [];
      this._hand.inputState = { pinching: false };
      if (window.XRHand) {
        for (let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {
          const joint = new Group();
          joint.matrixAutoUpdate = false;
          joint.visible = false;
          this._hand.joints.push(joint);
          this._hand.add(joint);
        }
      }
    }
    return this._hand;
  },
  getTargetRaySpace: function() {
    if (this._targetRay === null) {
      this._targetRay = new Group();
      this._targetRay.matrixAutoUpdate = false;
      this._targetRay.visible = false;
    }
    return this._targetRay;
  },
  getGripSpace: function() {
    if (this._grip === null) {
      this._grip = new Group();
      this._grip.matrixAutoUpdate = false;
      this._grip.visible = false;
    }
    return this._grip;
  },
  dispatchEvent: function(event) {
    if (this._targetRay !== null) {
      this._targetRay.dispatchEvent(event);
    }
    if (this._grip !== null) {
      this._grip.dispatchEvent(event);
    }
    if (this._hand !== null) {
      this._hand.dispatchEvent(event);
    }
    return this;
  },
  disconnect: function(inputSource) {
    this.dispatchEvent({ type: "disconnected", data: inputSource });
    if (this._targetRay !== null) {
      this._targetRay.visible = false;
    }
    if (this._grip !== null) {
      this._grip.visible = false;
    }
    if (this._hand !== null) {
      this._hand.visible = false;
    }
    return this;
  },
  update: function(inputSource, frame, referenceSpace) {
    let inputPose = null;
    let gripPose = null;
    let handPose = null;
    const targetRay = this._targetRay;
    const grip = this._grip;
    const hand = this._hand;
    if (inputSource && frame.session.visibilityState !== "visible-blurred") {
      if (hand && inputSource.hand) {
        handPose = true;
        for (let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {
          if (inputSource.hand[i]) {
            const jointPose = frame.getJointPose(inputSource.hand[i], referenceSpace);
            const joint = hand.joints[i];
            if (jointPose !== null) {
              joint.matrix.fromArray(jointPose.transform.matrix);
              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
              joint.jointRadius = jointPose.radius;
            }
            joint.visible = jointPose !== null;
            const indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP];
            const thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP];
            const distance = indexTip.position.distanceTo(thumbTip.position);
            const distanceToPinch = 0.02;
            const threshold = 5e-3;
            if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
              hand.inputState.pinching = false;
              this.dispatchEvent({
                type: "pinchend",
                handedness: inputSource.handedness,
                target: this
              });
            } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
              hand.inputState.pinching = true;
              this.dispatchEvent({
                type: "pinchstart",
                handedness: inputSource.handedness,
                target: this
              });
            }
          }
        }
      } else {
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
          }
        }
        if (grip !== null && inputSource.gripSpace) {
          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
          if (gripPose !== null) {
            grip.matrix.fromArray(gripPose.transform.matrix);
            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
          }
        }
      }
    }
    if (targetRay !== null) {
      targetRay.visible = inputPose !== null;
    }
    if (grip !== null) {
      grip.visible = gripPose !== null;
    }
    if (hand !== null) {
      hand.visible = handPose !== null;
    }
    return this;
  }
});
function WebXRManager(renderer, gl) {
  const scope = this;
  let session = null;
  let framebufferScaleFactor = 1;
  let referenceSpace = null;
  let referenceSpaceType = "local-floor";
  let pose = null;
  const controllers = [];
  const inputSourcesMap = new Map();
  const cameraL = new PerspectiveCamera();
  cameraL.layers.enable(1);
  cameraL.viewport = new Vector4();
  const cameraR = new PerspectiveCamera();
  cameraR.layers.enable(2);
  cameraR.viewport = new Vector4();
  const cameras = [cameraL, cameraR];
  const cameraVR = new ArrayCamera();
  cameraVR.layers.enable(1);
  cameraVR.layers.enable(2);
  let _currentDepthNear = null;
  let _currentDepthFar = null;
  this.enabled = false;
  this.isPresenting = false;
  this.getController = function(index) {
    let controller = controllers[index];
    if (controller === void 0) {
      controller = new WebXRController();
      controllers[index] = controller;
    }
    return controller.getTargetRaySpace();
  };
  this.getControllerGrip = function(index) {
    let controller = controllers[index];
    if (controller === void 0) {
      controller = new WebXRController();
      controllers[index] = controller;
    }
    return controller.getGripSpace();
  };
  this.getHand = function(index) {
    let controller = controllers[index];
    if (controller === void 0) {
      controller = new WebXRController();
      controllers[index] = controller;
    }
    return controller.getHandSpace();
  };
  function onSessionEvent(event) {
    const controller = inputSourcesMap.get(event.inputSource);
    if (controller) {
      controller.dispatchEvent({ type: event.type, data: event.inputSource });
    }
  }
  function onSessionEnd() {
    inputSourcesMap.forEach(function(controller, inputSource) {
      controller.disconnect(inputSource);
    });
    inputSourcesMap.clear();
    renderer.setFramebuffer(null);
    renderer.setRenderTarget(renderer.getRenderTarget());
    animation.stop();
    scope.isPresenting = false;
    scope.dispatchEvent({ type: "sessionend" });
  }
  function onRequestReferenceSpace(value) {
    referenceSpace = value;
    animation.setContext(session);
    animation.start();
    scope.isPresenting = true;
    scope.dispatchEvent({ type: "sessionstart" });
  }
  this.setFramebufferScaleFactor = function(value) {
    framebufferScaleFactor = value;
    if (scope.isPresenting === true) {
      console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }
  };
  this.setReferenceSpaceType = function(value) {
    referenceSpaceType = value;
    if (scope.isPresenting === true) {
      console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }
  };
  this.getReferenceSpace = function() {
    return referenceSpace;
  };
  this.getSession = function() {
    return session;
  };
  this.setSession = function(value) {
    session = value;
    if (session !== null) {
      session.addEventListener("select", onSessionEvent);
      session.addEventListener("selectstart", onSessionEvent);
      session.addEventListener("selectend", onSessionEvent);
      session.addEventListener("squeeze", onSessionEvent);
      session.addEventListener("squeezestart", onSessionEvent);
      session.addEventListener("squeezeend", onSessionEvent);
      session.addEventListener("end", onSessionEnd);
      const attributes = gl.getContextAttributes();
      if (attributes.xrCompatible !== true) {
        gl.makeXRCompatible();
      }
      const layerInit = {
        antialias: attributes.antialias,
        alpha: attributes.alpha,
        depth: attributes.depth,
        stencil: attributes.stencil,
        framebufferScaleFactor
      };
      const baseLayer = new XRWebGLLayer(session, gl, layerInit);
      session.updateRenderState({ baseLayer });
      session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace);
      session.addEventListener("inputsourceschange", updateInputSources);
    }
  };
  function updateInputSources(event) {
    const inputSources = session.inputSources;
    for (let i = 0; i < controllers.length; i++) {
      inputSourcesMap.set(inputSources[i], controllers[i]);
    }
    for (let i = 0; i < event.removed.length; i++) {
      const inputSource = event.removed[i];
      const controller = inputSourcesMap.get(inputSource);
      if (controller) {
        controller.dispatchEvent({ type: "disconnected", data: inputSource });
        inputSourcesMap.delete(inputSource);
      }
    }
    for (let i = 0; i < event.added.length; i++) {
      const inputSource = event.added[i];
      const controller = inputSourcesMap.get(inputSource);
      if (controller) {
        controller.dispatchEvent({ type: "connected", data: inputSource });
      }
    }
  }
  const cameraLPos = new Vector3();
  const cameraRPos = new Vector3();
  function setProjectionFromUnion(camera, cameraL2, cameraR2) {
    cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
    cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
    const ipd = cameraLPos.distanceTo(cameraRPos);
    const projL = cameraL2.projectionMatrix.elements;
    const projR = cameraR2.projectionMatrix.elements;
    const near = projL[14] / (projL[10] - 1);
    const far = projL[14] / (projL[10] + 1);
    const topFov = (projL[9] + 1) / projL[5];
    const bottomFov = (projL[9] - 1) / projL[5];
    const leftFov = (projL[8] - 1) / projL[0];
    const rightFov = (projR[8] + 1) / projR[0];
    const left = near * leftFov;
    const right = near * rightFov;
    const zOffset = ipd / (-leftFov + rightFov);
    const xOffset = zOffset * -leftFov;
    cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
    camera.translateX(xOffset);
    camera.translateZ(zOffset);
    camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
    camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
    const near2 = near + zOffset;
    const far2 = far + zOffset;
    const left2 = left - xOffset;
    const right2 = right + (ipd - xOffset);
    const top2 = topFov * far / far2 * near2;
    const bottom2 = bottomFov * far / far2 * near2;
    camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
  }
  function updateCamera(camera, parent) {
    if (parent === null) {
      camera.matrixWorld.copy(camera.matrix);
    } else {
      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
    }
    camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
  }
  this.getCamera = function(camera) {
    cameraVR.near = cameraR.near = cameraL.near = camera.near;
    cameraVR.far = cameraR.far = cameraL.far = camera.far;
    if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
      session.updateRenderState({
        depthNear: cameraVR.near,
        depthFar: cameraVR.far
      });
      _currentDepthNear = cameraVR.near;
      _currentDepthFar = cameraVR.far;
    }
    const parent = camera.parent;
    const cameras2 = cameraVR.cameras;
    updateCamera(cameraVR, parent);
    for (let i = 0; i < cameras2.length; i++) {
      updateCamera(cameras2[i], parent);
    }
    camera.matrixWorld.copy(cameraVR.matrixWorld);
    const children = camera.children;
    for (let i = 0, l = children.length; i < l; i++) {
      children[i].updateMatrixWorld(true);
    }
    if (cameras2.length === 2) {
      setProjectionFromUnion(cameraVR, cameraL, cameraR);
    } else {
      cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
    }
    return cameraVR;
  };
  let onAnimationFrameCallback = null;
  function onAnimationFrame(time, frame) {
    pose = frame.getViewerPose(referenceSpace);
    if (pose !== null) {
      const views = pose.views;
      const baseLayer = session.renderState.baseLayer;
      renderer.setFramebuffer(baseLayer.framebuffer);
      let cameraVRNeedsUpdate = false;
      if (views.length !== cameraVR.cameras.length) {
        cameraVR.cameras.length = 0;
        cameraVRNeedsUpdate = true;
      }
      for (let i = 0; i < views.length; i++) {
        const view = views[i];
        const viewport = baseLayer.getViewport(view);
        const camera = cameras[i];
        camera.matrix.fromArray(view.transform.matrix);
        camera.projectionMatrix.fromArray(view.projectionMatrix);
        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
        if (i === 0) {
          cameraVR.matrix.copy(camera.matrix);
        }
        if (cameraVRNeedsUpdate === true) {
          cameraVR.cameras.push(camera);
        }
      }
    }
    const inputSources = session.inputSources;
    for (let i = 0; i < controllers.length; i++) {
      const controller = controllers[i];
      const inputSource = inputSources[i];
      controller.update(inputSource, frame, referenceSpace);
    }
    if (onAnimationFrameCallback)
      onAnimationFrameCallback(time, frame);
  }
  const animation = new WebGLAnimation();
  animation.setAnimationLoop(onAnimationFrame);
  this.setAnimationLoop = function(callback) {
    onAnimationFrameCallback = callback;
  };
  this.dispose = function() {
  };
}
Object.assign(WebXRManager.prototype, EventDispatcher.prototype);
function WebGLMaterials(properties) {
  function refreshFogUniforms(uniforms, fog) {
    uniforms.fogColor.value.copy(fog.color);
    if (fog.isFog) {
      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far;
    } else if (fog.isFogExp2) {
      uniforms.fogDensity.value = fog.density;
    }
  }
  function refreshMaterialUniforms(uniforms, material, pixelRatio, height) {
    if (material.isMeshBasicMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshLambertMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsLambert(uniforms, material);
    } else if (material.isMeshToonMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsToon(uniforms, material);
    } else if (material.isMeshPhongMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsPhong(uniforms, material);
    } else if (material.isMeshStandardMaterial) {
      refreshUniformsCommon(uniforms, material);
      if (material.isMeshPhysicalMaterial) {
        refreshUniformsPhysical(uniforms, material);
      } else {
        refreshUniformsStandard(uniforms, material);
      }
    } else if (material.isMeshMatcapMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsMatcap(uniforms, material);
    } else if (material.isMeshDepthMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsDepth(uniforms, material);
    } else if (material.isMeshDistanceMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsDistance(uniforms, material);
    } else if (material.isMeshNormalMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsNormal(uniforms, material);
    } else if (material.isLineBasicMaterial) {
      refreshUniformsLine(uniforms, material);
      if (material.isLineDashedMaterial) {
        refreshUniformsDash(uniforms, material);
      }
    } else if (material.isPointsMaterial) {
      refreshUniformsPoints(uniforms, material, pixelRatio, height);
    } else if (material.isSpriteMaterial) {
      refreshUniformsSprites(uniforms, material);
    } else if (material.isShadowMaterial) {
      uniforms.color.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    } else if (material.isShaderMaterial) {
      material.uniformsNeedUpdate = false;
    }
  }
  function refreshUniformsCommon(uniforms, material) {
    uniforms.opacity.value = material.opacity;
    if (material.color) {
      uniforms.diffuse.value.copy(material.color);
    }
    if (material.emissive) {
      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
    }
    if (material.map) {
      uniforms.map.value = material.map;
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }
    if (material.specularMap) {
      uniforms.specularMap.value = material.specularMap;
    }
    const envMap = properties.get(material).envMap;
    if (envMap) {
      uniforms.envMap.value = envMap;
      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.refractionRatio.value = material.refractionRatio;
      const maxMipLevel = properties.get(envMap).__maxMipLevel;
      if (maxMipLevel !== void 0) {
        uniforms.maxMipLevel.value = maxMipLevel;
      }
    }
    if (material.lightMap) {
      uniforms.lightMap.value = material.lightMap;
      uniforms.lightMapIntensity.value = material.lightMapIntensity;
    }
    if (material.aoMap) {
      uniforms.aoMap.value = material.aoMap;
      uniforms.aoMapIntensity.value = material.aoMapIntensity;
    }
    let uvScaleMap;
    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.specularMap) {
      uvScaleMap = material.specularMap;
    } else if (material.displacementMap) {
      uvScaleMap = material.displacementMap;
    } else if (material.normalMap) {
      uvScaleMap = material.normalMap;
    } else if (material.bumpMap) {
      uvScaleMap = material.bumpMap;
    } else if (material.roughnessMap) {
      uvScaleMap = material.roughnessMap;
    } else if (material.metalnessMap) {
      uvScaleMap = material.metalnessMap;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    } else if (material.emissiveMap) {
      uvScaleMap = material.emissiveMap;
    } else if (material.clearcoatMap) {
      uvScaleMap = material.clearcoatMap;
    } else if (material.clearcoatNormalMap) {
      uvScaleMap = material.clearcoatNormalMap;
    } else if (material.clearcoatRoughnessMap) {
      uvScaleMap = material.clearcoatRoughnessMap;
    }
    if (uvScaleMap !== void 0) {
      if (uvScaleMap.isWebGLRenderTarget) {
        uvScaleMap = uvScaleMap.texture;
      }
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }
      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
    let uv2ScaleMap;
    if (material.aoMap) {
      uv2ScaleMap = material.aoMap;
    } else if (material.lightMap) {
      uv2ScaleMap = material.lightMap;
    }
    if (uv2ScaleMap !== void 0) {
      if (uv2ScaleMap.isWebGLRenderTarget) {
        uv2ScaleMap = uv2ScaleMap.texture;
      }
      if (uv2ScaleMap.matrixAutoUpdate === true) {
        uv2ScaleMap.updateMatrix();
      }
      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
    }
  }
  function refreshUniformsLine(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
  }
  function refreshUniformsDash(uniforms, material) {
    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale;
  }
  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size * pixelRatio;
    uniforms.scale.value = height * 0.5;
    if (material.map) {
      uniforms.map.value = material.map;
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }
    let uvScaleMap;
    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    }
    if (uvScaleMap !== void 0) {
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }
      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
  }
  function refreshUniformsSprites(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.rotation.value = material.rotation;
    if (material.map) {
      uniforms.map.value = material.map;
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }
    let uvScaleMap;
    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    }
    if (uvScaleMap !== void 0) {
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }
      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
  }
  function refreshUniformsLambert(uniforms, material) {
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
  }
  function refreshUniformsPhong(uniforms, material) {
    uniforms.specular.value.copy(material.specular);
    uniforms.shininess.value = Math.max(material.shininess, 1e-4);
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsToon(uniforms, material) {
    if (material.gradientMap) {
      uniforms.gradientMap.value = material.gradientMap;
    }
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsStandard(uniforms, material) {
    uniforms.roughness.value = material.roughness;
    uniforms.metalness.value = material.metalness;
    if (material.roughnessMap) {
      uniforms.roughnessMap.value = material.roughnessMap;
    }
    if (material.metalnessMap) {
      uniforms.metalnessMap.value = material.metalnessMap;
    }
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
    const envMap = properties.get(material).envMap;
    if (envMap) {
      uniforms.envMapIntensity.value = material.envMapIntensity;
    }
  }
  function refreshUniformsPhysical(uniforms, material) {
    refreshUniformsStandard(uniforms, material);
    uniforms.reflectivity.value = material.reflectivity;
    uniforms.clearcoat.value = material.clearcoat;
    uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
    if (material.sheen)
      uniforms.sheen.value.copy(material.sheen);
    if (material.clearcoatMap) {
      uniforms.clearcoatMap.value = material.clearcoatMap;
    }
    if (material.clearcoatRoughnessMap) {
      uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
    }
    if (material.clearcoatNormalMap) {
      uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
      uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
      if (material.side === BackSide) {
        uniforms.clearcoatNormalScale.value.negate();
      }
    }
    uniforms.transmission.value = material.transmission;
    if (material.transmissionMap) {
      uniforms.transmissionMap.value = material.transmissionMap;
    }
  }
  function refreshUniformsMatcap(uniforms, material) {
    if (material.matcap) {
      uniforms.matcap.value = material.matcap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsDepth(uniforms, material) {
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsDistance(uniforms, material) {
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
    uniforms.referencePosition.value.copy(material.referencePosition);
    uniforms.nearDistance.value = material.nearDistance;
    uniforms.farDistance.value = material.farDistance;
  }
  function refreshUniformsNormal(uniforms, material) {
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  return {
    refreshFogUniforms,
    refreshMaterialUniforms
  };
}
function createCanvasElement() {
  const canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
  canvas.style.display = "block";
  return canvas;
}
function WebGLRenderer(parameters) {
  parameters = parameters || {};
  const _canvas2 = parameters.canvas !== void 0 ? parameters.canvas : createCanvasElement(), _context2 = parameters.context !== void 0 ? parameters.context : null, _alpha = parameters.alpha !== void 0 ? parameters.alpha : false, _depth = parameters.depth !== void 0 ? parameters.depth : true, _stencil = parameters.stencil !== void 0 ? parameters.stencil : true, _antialias = parameters.antialias !== void 0 ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== void 0 ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== void 0 ? parameters.preserveDrawingBuffer : false, _powerPreference = parameters.powerPreference !== void 0 ? parameters.powerPreference : "default", _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== void 0 ? parameters.failIfMajorPerformanceCaveat : false;
  let currentRenderList = null;
  let currentRenderState = null;
  this.domElement = _canvas2;
  this.debug = {
    checkShaderErrors: true
  };
  this.autoClear = true;
  this.autoClearColor = true;
  this.autoClearDepth = true;
  this.autoClearStencil = true;
  this.sortObjects = true;
  this.clippingPlanes = [];
  this.localClippingEnabled = false;
  this.gammaFactor = 2;
  this.outputEncoding = LinearEncoding;
  this.physicallyCorrectLights = false;
  this.toneMapping = NoToneMapping;
  this.toneMappingExposure = 1;
  this.maxMorphTargets = 8;
  this.maxMorphNormals = 4;
  const _this = this;
  let _isContextLost = false;
  let _framebuffer = null;
  let _currentActiveCubeFace = 0;
  let _currentActiveMipmapLevel = 0;
  let _currentRenderTarget = null;
  let _currentFramebuffer = null;
  let _currentMaterialId = -1;
  let _currentCamera = null;
  let _currentArrayCamera = null;
  const _currentViewport = new Vector4();
  const _currentScissor = new Vector4();
  let _currentScissorTest = null;
  let _width = _canvas2.width;
  let _height = _canvas2.height;
  let _pixelRatio = 1;
  let _opaqueSort = null;
  let _transparentSort = null;
  const _viewport = new Vector4(0, 0, _width, _height);
  const _scissor = new Vector4(0, 0, _width, _height);
  let _scissorTest = false;
  const _frustum = new Frustum();
  let _clippingEnabled = false;
  let _localClippingEnabled = false;
  const _projScreenMatrix = new Matrix4();
  const _vector3 = new Vector3();
  const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
  function getTargetPixelRatio() {
    return _currentRenderTarget === null ? _pixelRatio : 1;
  }
  let _gl = _context2;
  function getContext(contextNames, contextAttributes) {
    for (let i = 0; i < contextNames.length; i++) {
      const contextName = contextNames[i];
      const context = _canvas2.getContext(contextName, contextAttributes);
      if (context !== null)
        return context;
    }
    return null;
  }
  try {
    const contextAttributes = {
      alpha: _alpha,
      depth: _depth,
      stencil: _stencil,
      antialias: _antialias,
      premultipliedAlpha: _premultipliedAlpha,
      preserveDrawingBuffer: _preserveDrawingBuffer,
      powerPreference: _powerPreference,
      failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
    };
    _canvas2.addEventListener("webglcontextlost", onContextLost, false);
    _canvas2.addEventListener("webglcontextrestored", onContextRestore, false);
    if (_gl === null) {
      const contextNames = ["webgl2", "webgl", "experimental-webgl"];
      if (_this.isWebGL1Renderer === true) {
        contextNames.shift();
      }
      _gl = getContext(contextNames, contextAttributes);
      if (_gl === null) {
        if (getContext(contextNames)) {
          throw new Error("Error creating WebGL context with your selected attributes.");
        } else {
          throw new Error("Error creating WebGL context.");
        }
      }
    }
    if (_gl.getShaderPrecisionFormat === void 0) {
      _gl.getShaderPrecisionFormat = function() {
        return { "rangeMin": 1, "rangeMax": 1, "precision": 1 };
      };
    }
  } catch (error) {
    console.error("THREE.WebGLRenderer: " + error.message);
    throw error;
  }
  let extensions, capabilities, state, info;
  let properties, textures, cubemaps, attributes, geometries, objects;
  let programCache, materials, renderLists, renderStates, clipping;
  let background, morphtargets, bufferRenderer, indexedBufferRenderer;
  let utils, bindingStates;
  function initGLContext() {
    extensions = new WebGLExtensions(_gl);
    capabilities = new WebGLCapabilities(_gl, extensions, parameters);
    if (capabilities.isWebGL2 === false) {
      extensions.get("WEBGL_depth_texture");
      extensions.get("OES_texture_float");
      extensions.get("OES_texture_half_float");
      extensions.get("OES_texture_half_float_linear");
      extensions.get("OES_standard_derivatives");
      extensions.get("OES_element_index_uint");
      extensions.get("OES_vertex_array_object");
      extensions.get("ANGLE_instanced_arrays");
    }
    extensions.get("OES_texture_float_linear");
    utils = new WebGLUtils(_gl, extensions, capabilities);
    state = new WebGLState(_gl, extensions, capabilities);
    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    info = new WebGLInfo(_gl);
    properties = new WebGLProperties();
    textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
    cubemaps = new WebGLCubeMaps(_this);
    attributes = new WebGLAttributes(_gl, capabilities);
    bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
    geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
    objects = new WebGLObjects(_gl, geometries, attributes, info);
    morphtargets = new WebGLMorphtargets(_gl);
    clipping = new WebGLClipping(properties);
    programCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);
    materials = new WebGLMaterials(properties);
    renderLists = new WebGLRenderLists(properties);
    renderStates = new WebGLRenderStates(extensions, capabilities);
    background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
    bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
    indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
    info.programs = programCache.programs;
    _this.capabilities = capabilities;
    _this.extensions = extensions;
    _this.properties = properties;
    _this.renderLists = renderLists;
    _this.state = state;
    _this.info = info;
  }
  initGLContext();
  const xr = new WebXRManager(_this, _gl);
  this.xr = xr;
  const shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);
  this.shadowMap = shadowMap;
  this.getContext = function() {
    return _gl;
  };
  this.getContextAttributes = function() {
    return _gl.getContextAttributes();
  };
  this.forceContextLoss = function() {
    const extension = extensions.get("WEBGL_lose_context");
    if (extension)
      extension.loseContext();
  };
  this.forceContextRestore = function() {
    const extension = extensions.get("WEBGL_lose_context");
    if (extension)
      extension.restoreContext();
  };
  this.getPixelRatio = function() {
    return _pixelRatio;
  };
  this.setPixelRatio = function(value) {
    if (value === void 0)
      return;
    _pixelRatio = value;
    this.setSize(_width, _height, false);
  };
  this.getSize = function(target) {
    if (target === void 0) {
      console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument");
      target = new Vector2();
    }
    return target.set(_width, _height);
  };
  this.setSize = function(width, height, updateStyle) {
    if (xr.isPresenting) {
      console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
      return;
    }
    _width = width;
    _height = height;
    _canvas2.width = Math.floor(width * _pixelRatio);
    _canvas2.height = Math.floor(height * _pixelRatio);
    if (updateStyle !== false) {
      _canvas2.style.width = width + "px";
      _canvas2.style.height = height + "px";
    }
    this.setViewport(0, 0, width, height);
  };
  this.getDrawingBufferSize = function(target) {
    if (target === void 0) {
      console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument");
      target = new Vector2();
    }
    return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
  };
  this.setDrawingBufferSize = function(width, height, pixelRatio) {
    _width = width;
    _height = height;
    _pixelRatio = pixelRatio;
    _canvas2.width = Math.floor(width * pixelRatio);
    _canvas2.height = Math.floor(height * pixelRatio);
    this.setViewport(0, 0, width, height);
  };
  this.getCurrentViewport = function(target) {
    if (target === void 0) {
      console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument");
      target = new Vector4();
    }
    return target.copy(_currentViewport);
  };
  this.getViewport = function(target) {
    return target.copy(_viewport);
  };
  this.setViewport = function(x, y, width, height) {
    if (x.isVector4) {
      _viewport.set(x.x, x.y, x.z, x.w);
    } else {
      _viewport.set(x, y, width, height);
    }
    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
  };
  this.getScissor = function(target) {
    return target.copy(_scissor);
  };
  this.setScissor = function(x, y, width, height) {
    if (x.isVector4) {
      _scissor.set(x.x, x.y, x.z, x.w);
    } else {
      _scissor.set(x, y, width, height);
    }
    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
  };
  this.getScissorTest = function() {
    return _scissorTest;
  };
  this.setScissorTest = function(boolean) {
    state.setScissorTest(_scissorTest = boolean);
  };
  this.setOpaqueSort = function(method) {
    _opaqueSort = method;
  };
  this.setTransparentSort = function(method) {
    _transparentSort = method;
  };
  this.getClearColor = function() {
    return background.getClearColor();
  };
  this.setClearColor = function() {
    background.setClearColor.apply(background, arguments);
  };
  this.getClearAlpha = function() {
    return background.getClearAlpha();
  };
  this.setClearAlpha = function() {
    background.setClearAlpha.apply(background, arguments);
  };
  this.clear = function(color, depth, stencil) {
    let bits = 0;
    if (color === void 0 || color)
      bits |= 16384;
    if (depth === void 0 || depth)
      bits |= 256;
    if (stencil === void 0 || stencil)
      bits |= 1024;
    _gl.clear(bits);
  };
  this.clearColor = function() {
    this.clear(true, false, false);
  };
  this.clearDepth = function() {
    this.clear(false, true, false);
  };
  this.clearStencil = function() {
    this.clear(false, false, true);
  };
  this.dispose = function() {
    _canvas2.removeEventListener("webglcontextlost", onContextLost, false);
    _canvas2.removeEventListener("webglcontextrestored", onContextRestore, false);
    renderLists.dispose();
    renderStates.dispose();
    properties.dispose();
    cubemaps.dispose();
    objects.dispose();
    bindingStates.dispose();
    xr.dispose();
    animation.stop();
  };
  function onContextLost(event) {
    event.preventDefault();
    console.log("THREE.WebGLRenderer: Context Lost.");
    _isContextLost = true;
  }
  function onContextRestore() {
    console.log("THREE.WebGLRenderer: Context Restored.");
    _isContextLost = false;
    initGLContext();
  }
  function onMaterialDispose(event) {
    const material = event.target;
    material.removeEventListener("dispose", onMaterialDispose);
    deallocateMaterial(material);
  }
  function deallocateMaterial(material) {
    releaseMaterialProgramReference(material);
    properties.remove(material);
  }
  function releaseMaterialProgramReference(material) {
    const programInfo = properties.get(material).program;
    if (programInfo !== void 0) {
      programCache.releaseProgram(programInfo);
    }
  }
  function renderObjectImmediate(object, program) {
    object.render(function(object2) {
      _this.renderBufferImmediate(object2, program);
    });
  }
  this.renderBufferImmediate = function(object, program) {
    bindingStates.initAttributes();
    const buffers = properties.get(object);
    if (object.hasPositions && !buffers.position)
      buffers.position = _gl.createBuffer();
    if (object.hasNormals && !buffers.normal)
      buffers.normal = _gl.createBuffer();
    if (object.hasUvs && !buffers.uv)
      buffers.uv = _gl.createBuffer();
    if (object.hasColors && !buffers.color)
      buffers.color = _gl.createBuffer();
    const programAttributes = program.getAttributes();
    if (object.hasPositions) {
      _gl.bindBuffer(34962, buffers.position);
      _gl.bufferData(34962, object.positionArray, 35048);
      bindingStates.enableAttribute(programAttributes.position);
      _gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);
    }
    if (object.hasNormals) {
      _gl.bindBuffer(34962, buffers.normal);
      _gl.bufferData(34962, object.normalArray, 35048);
      bindingStates.enableAttribute(programAttributes.normal);
      _gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);
    }
    if (object.hasUvs) {
      _gl.bindBuffer(34962, buffers.uv);
      _gl.bufferData(34962, object.uvArray, 35048);
      bindingStates.enableAttribute(programAttributes.uv);
      _gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);
    }
    if (object.hasColors) {
      _gl.bindBuffer(34962, buffers.color);
      _gl.bufferData(34962, object.colorArray, 35048);
      bindingStates.enableAttribute(programAttributes.color);
      _gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);
    }
    bindingStates.disableUnusedAttributes();
    _gl.drawArrays(4, 0, object.count);
    object.count = 0;
  };
  this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
    if (scene === null)
      scene = _emptyScene;
    const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
    const program = setProgram(camera, scene, material, object);
    state.setMaterial(material, frontFaceCW);
    let index = geometry.index;
    const position = geometry.attributes.position;
    if (index === null) {
      if (position === void 0 || position.count === 0)
        return;
    } else if (index.count === 0) {
      return;
    }
    let rangeFactor = 1;
    if (material.wireframe === true) {
      index = geometries.getWireframeAttribute(geometry);
      rangeFactor = 2;
    }
    if (material.morphTargets || material.morphNormals) {
      morphtargets.update(object, geometry, material, program);
    }
    bindingStates.setup(object, material, program, geometry, index);
    let attribute;
    let renderer = bufferRenderer;
    if (index !== null) {
      attribute = attributes.get(index);
      renderer = indexedBufferRenderer;
      renderer.setIndex(attribute);
    }
    const dataCount = index !== null ? index.count : position.count;
    const rangeStart = geometry.drawRange.start * rangeFactor;
    const rangeCount = geometry.drawRange.count * rangeFactor;
    const groupStart = group !== null ? group.start * rangeFactor : 0;
    const groupCount = group !== null ? group.count * rangeFactor : Infinity;
    const drawStart = Math.max(rangeStart, groupStart);
    const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
    const drawCount = Math.max(0, drawEnd - drawStart + 1);
    if (drawCount === 0)
      return;
    if (object.isMesh) {
      if (material.wireframe === true) {
        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
        renderer.setMode(1);
      } else {
        renderer.setMode(4);
      }
    } else if (object.isLine) {
      let lineWidth = material.linewidth;
      if (lineWidth === void 0)
        lineWidth = 1;
      state.setLineWidth(lineWidth * getTargetPixelRatio());
      if (object.isLineSegments) {
        renderer.setMode(1);
      } else if (object.isLineLoop) {
        renderer.setMode(2);
      } else {
        renderer.setMode(3);
      }
    } else if (object.isPoints) {
      renderer.setMode(0);
    } else if (object.isSprite) {
      renderer.setMode(4);
    }
    if (object.isInstancedMesh) {
      renderer.renderInstances(drawStart, drawCount, object.count);
    } else if (geometry.isInstancedBufferGeometry) {
      const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
      renderer.renderInstances(drawStart, drawCount, instanceCount);
    } else {
      renderer.render(drawStart, drawCount);
    }
  };
  this.compile = function(scene, camera) {
    currentRenderState = renderStates.get(scene, camera);
    currentRenderState.init();
    scene.traverseVisible(function(object) {
      if (object.isLight && object.layers.test(camera.layers)) {
        currentRenderState.pushLight(object);
        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      }
    });
    currentRenderState.setupLights(camera);
    const compiled = new WeakMap();
    scene.traverse(function(object) {
      const material = object.material;
      if (material) {
        if (Array.isArray(material)) {
          for (let i = 0; i < material.length; i++) {
            const material2 = material[i];
            if (compiled.has(material2) === false) {
              initMaterial(material2, scene, object);
              compiled.set(material2);
            }
          }
        } else if (compiled.has(material) === false) {
          initMaterial(material, scene, object);
          compiled.set(material);
        }
      }
    });
  };
  let onAnimationFrameCallback = null;
  function onAnimationFrame(time) {
    if (xr.isPresenting)
      return;
    if (onAnimationFrameCallback)
      onAnimationFrameCallback(time);
  }
  const animation = new WebGLAnimation();
  animation.setAnimationLoop(onAnimationFrame);
  if (typeof window !== "undefined")
    animation.setContext(window);
  this.setAnimationLoop = function(callback) {
    onAnimationFrameCallback = callback;
    xr.setAnimationLoop(callback);
    callback === null ? animation.stop() : animation.start();
  };
  this.render = function(scene, camera) {
    let renderTarget, forceClear;
    if (arguments[2] !== void 0) {
      console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
      renderTarget = arguments[2];
    }
    if (arguments[3] !== void 0) {
      console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
      forceClear = arguments[3];
    }
    if (camera !== void 0 && camera.isCamera !== true) {
      console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
      return;
    }
    if (_isContextLost === true)
      return;
    bindingStates.resetDefaultState();
    _currentMaterialId = -1;
    _currentCamera = null;
    if (scene.autoUpdate === true)
      scene.updateMatrixWorld();
    if (camera.parent === null)
      camera.updateMatrixWorld();
    if (xr.enabled === true && xr.isPresenting === true) {
      camera = xr.getCamera(camera);
    }
    if (scene.isScene === true)
      scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);
    currentRenderState = renderStates.get(scene, camera);
    currentRenderState.init();
    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
    _frustum.setFromProjectionMatrix(_projScreenMatrix);
    _localClippingEnabled = this.localClippingEnabled;
    _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
    currentRenderList = renderLists.get(scene, camera);
    currentRenderList.init();
    projectObject(scene, camera, 0, _this.sortObjects);
    currentRenderList.finish();
    if (_this.sortObjects === true) {
      currentRenderList.sort(_opaqueSort, _transparentSort);
    }
    if (_clippingEnabled === true)
      clipping.beginShadows();
    const shadowsArray = currentRenderState.state.shadowsArray;
    shadowMap.render(shadowsArray, scene, camera);
    currentRenderState.setupLights(camera);
    if (_clippingEnabled === true)
      clipping.endShadows();
    if (this.info.autoReset === true)
      this.info.reset();
    if (renderTarget !== void 0) {
      this.setRenderTarget(renderTarget);
    }
    background.render(currentRenderList, scene, camera, forceClear);
    const opaqueObjects = currentRenderList.opaque;
    const transparentObjects = currentRenderList.transparent;
    if (opaqueObjects.length > 0)
      renderObjects(opaqueObjects, scene, camera);
    if (transparentObjects.length > 0)
      renderObjects(transparentObjects, scene, camera);
    if (scene.isScene === true)
      scene.onAfterRender(_this, scene, camera);
    if (_currentRenderTarget !== null) {
      textures.updateRenderTargetMipmap(_currentRenderTarget);
      textures.updateMultisampleRenderTarget(_currentRenderTarget);
    }
    state.buffers.depth.setTest(true);
    state.buffers.depth.setMask(true);
    state.buffers.color.setMask(true);
    state.setPolygonOffset(false);
    currentRenderList = null;
    currentRenderState = null;
  };
  function projectObject(object, camera, groupOrder, sortObjects) {
    if (object.visible === false)
      return;
    const visible = object.layers.test(camera.layers);
    if (visible) {
      if (object.isGroup) {
        groupOrder = object.renderOrder;
      } else if (object.isLOD) {
        if (object.autoUpdate === true)
          object.update(camera);
      } else if (object.isLight) {
        currentRenderState.pushLight(object);
        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      } else if (object.isSprite) {
        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          const geometry = objects.update(object);
          const material = object.material;
          if (material.visible) {
            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
          }
        }
      } else if (object.isImmediateRenderObject) {
        if (sortObjects) {
          _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
        }
        currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);
      } else if (object.isMesh || object.isLine || object.isPoints) {
        if (object.isSkinnedMesh) {
          if (object.skeleton.frame !== info.render.frame) {
            object.skeleton.update();
            object.skeleton.frame = info.render.frame;
          }
        }
        if (!object.frustumCulled || _frustum.intersectsObject(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          const geometry = objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let i = 0, l = groups.length; i < l; i++) {
              const group = groups[i];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
              }
            }
          } else if (material.visible) {
            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
          }
        }
      }
    }
    const children = object.children;
    for (let i = 0, l = children.length; i < l; i++) {
      projectObject(children[i], camera, groupOrder, sortObjects);
    }
  }
  function renderObjects(renderList, scene, camera) {
    const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
    for (let i = 0, l = renderList.length; i < l; i++) {
      const renderItem = renderList[i];
      const object = renderItem.object;
      const geometry = renderItem.geometry;
      const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
      const group = renderItem.group;
      if (camera.isArrayCamera) {
        _currentArrayCamera = camera;
        const cameras = camera.cameras;
        for (let j = 0, jl = cameras.length; j < jl; j++) {
          const camera2 = cameras[j];
          if (object.layers.test(camera2.layers)) {
            state.viewport(_currentViewport.copy(camera2.viewport));
            currentRenderState.setupLights(camera2);
            renderObject(object, scene, camera2, geometry, material, group);
          }
        }
      } else {
        _currentArrayCamera = null;
        renderObject(object, scene, camera, geometry, material, group);
      }
    }
  }
  function renderObject(object, scene, camera, geometry, material, group) {
    object.onBeforeRender(_this, scene, camera, geometry, material, group);
    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);
    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
    if (object.isImmediateRenderObject) {
      const program = setProgram(camera, scene, material, object);
      state.setMaterial(material);
      bindingStates.reset();
      renderObjectImmediate(object, program);
    } else {
      _this.renderBufferDirect(camera, scene, geometry, material, object, group);
    }
    object.onAfterRender(_this, scene, camera, geometry, material, group);
    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);
  }
  function initMaterial(material, scene, object) {
    if (scene.isScene !== true)
      scene = _emptyScene;
    const materialProperties = properties.get(material);
    const lights = currentRenderState.state.lights;
    const shadowsArray = currentRenderState.state.shadowsArray;
    const lightsStateVersion = lights.state.version;
    const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
    const programCacheKey = programCache.getProgramCacheKey(parameters2);
    let program = materialProperties.program;
    let programChange = true;
    if (program === void 0) {
      material.addEventListener("dispose", onMaterialDispose);
    } else if (program.cacheKey !== programCacheKey) {
      releaseMaterialProgramReference(material);
    } else if (materialProperties.lightsStateVersion !== lightsStateVersion) {
      programChange = false;
    } else if (parameters2.shaderID !== void 0) {
      const environment = material.isMeshStandardMaterial ? scene.environment : null;
      materialProperties.envMap = cubemaps.get(material.envMap || environment);
      return;
    } else {
      programChange = false;
    }
    if (programChange) {
      parameters2.uniforms = programCache.getUniforms(material);
      material.onBeforeCompile(parameters2, _this);
      program = programCache.acquireProgram(parameters2, programCacheKey);
      materialProperties.program = program;
      materialProperties.uniforms = parameters2.uniforms;
      materialProperties.outputEncoding = parameters2.outputEncoding;
    }
    const uniforms = materialProperties.uniforms;
    if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
      materialProperties.numClippingPlanes = clipping.numPlanes;
      materialProperties.numIntersection = clipping.numIntersection;
      uniforms.clippingPlanes = clipping.uniform;
    }
    materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
    materialProperties.fog = scene.fog;
    materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);
    materialProperties.needsLights = materialNeedsLights(material);
    materialProperties.lightsStateVersion = lightsStateVersion;
    if (materialProperties.needsLights) {
      uniforms.ambientLightColor.value = lights.state.ambient;
      uniforms.lightProbe.value = lights.state.probe;
      uniforms.directionalLights.value = lights.state.directional;
      uniforms.directionalLightShadows.value = lights.state.directionalShadow;
      uniforms.spotLights.value = lights.state.spot;
      uniforms.spotLightShadows.value = lights.state.spotShadow;
      uniforms.rectAreaLights.value = lights.state.rectArea;
      uniforms.ltc_1.value = lights.state.rectAreaLTC1;
      uniforms.ltc_2.value = lights.state.rectAreaLTC2;
      uniforms.pointLights.value = lights.state.point;
      uniforms.pointLightShadows.value = lights.state.pointShadow;
      uniforms.hemisphereLights.value = lights.state.hemi;
      uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
      uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
      uniforms.spotShadowMap.value = lights.state.spotShadowMap;
      uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
      uniforms.pointShadowMap.value = lights.state.pointShadowMap;
      uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
    }
    const progUniforms = materialProperties.program.getUniforms();
    const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
    materialProperties.uniformsList = uniformsList;
  }
  function setProgram(camera, scene, material, object) {
    if (scene.isScene !== true)
      scene = _emptyScene;
    textures.resetTextureUnits();
    const fog = scene.fog;
    const environment = material.isMeshStandardMaterial ? scene.environment : null;
    const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
    const envMap = cubemaps.get(material.envMap || environment);
    const materialProperties = properties.get(material);
    const lights = currentRenderState.state.lights;
    if (_clippingEnabled === true) {
      if (_localClippingEnabled === true || camera !== _currentCamera) {
        const useCache = camera === _currentCamera && material.id === _currentMaterialId;
        clipping.setState(material, camera, useCache);
      }
    }
    if (material.version === materialProperties.__version) {
      if (material.fog && materialProperties.fog !== fog) {
        initMaterial(material, scene, object);
      } else if (materialProperties.environment !== environment) {
        initMaterial(material, scene, object);
      } else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
        initMaterial(material, scene, object);
      } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
        initMaterial(material, scene, object);
      } else if (materialProperties.outputEncoding !== encoding) {
        initMaterial(material, scene, object);
      } else if (materialProperties.envMap !== envMap) {
        initMaterial(material, scene, object);
      }
    } else {
      initMaterial(material, scene, object);
      materialProperties.__version = material.version;
    }
    let refreshProgram = false;
    let refreshMaterial = false;
    let refreshLights = false;
    const program = materialProperties.program, p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
    if (state.useProgram(program.program)) {
      refreshProgram = true;
      refreshMaterial = true;
      refreshLights = true;
    }
    if (material.id !== _currentMaterialId) {
      _currentMaterialId = material.id;
      refreshMaterial = true;
    }
    if (refreshProgram || _currentCamera !== camera) {
      p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
      if (capabilities.logarithmicDepthBuffer) {
        p_uniforms.setValue(_gl, "logDepthBufFC", 2 / (Math.log(camera.far + 1) / Math.LN2));
      }
      if (_currentCamera !== camera) {
        _currentCamera = camera;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
        const uCamPos = p_uniforms.map.cameraPosition;
        if (uCamPos !== void 0) {
          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
        }
      }
      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
        p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
      }
      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {
        p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
      }
    }
    if (material.skinning) {
      p_uniforms.setOptional(_gl, object, "bindMatrix");
      p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
      const skeleton = object.skeleton;
      if (skeleton) {
        const bones = skeleton.bones;
        if (capabilities.floatVertexTextures) {
          if (skeleton.boneTexture === null) {
            let size = Math.sqrt(bones.length * 4);
            size = MathUtils.ceilPowerOfTwo(size);
            size = Math.max(size, 4);
            const boneMatrices = new Float32Array(size * size * 4);
            boneMatrices.set(skeleton.boneMatrices);
            const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
            skeleton.boneMatrices = boneMatrices;
            skeleton.boneTexture = boneTexture;
            skeleton.boneTextureSize = size;
          }
          p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
          p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
        } else {
          p_uniforms.setOptional(_gl, skeleton, "boneMatrices");
        }
      }
    }
    if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
      materialProperties.receiveShadow = object.receiveShadow;
      p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
    }
    if (refreshMaterial) {
      p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
      if (materialProperties.needsLights) {
        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
      }
      if (fog && material.fog) {
        materials.refreshFogUniforms(m_uniforms, fog);
      }
      materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
    }
    if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
      material.uniformsNeedUpdate = false;
    }
    if (material.isSpriteMaterial) {
      p_uniforms.setValue(_gl, "center", object.center);
    }
    p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
    p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
    p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
    return program;
  }
  function markUniformsLightsNeedsUpdate(uniforms, value) {
    uniforms.ambientLightColor.needsUpdate = value;
    uniforms.lightProbe.needsUpdate = value;
    uniforms.directionalLights.needsUpdate = value;
    uniforms.directionalLightShadows.needsUpdate = value;
    uniforms.pointLights.needsUpdate = value;
    uniforms.pointLightShadows.needsUpdate = value;
    uniforms.spotLights.needsUpdate = value;
    uniforms.spotLightShadows.needsUpdate = value;
    uniforms.rectAreaLights.needsUpdate = value;
    uniforms.hemisphereLights.needsUpdate = value;
  }
  function materialNeedsLights(material) {
    return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
  }
  this.setFramebuffer = function(value) {
    if (_framebuffer !== value && _currentRenderTarget === null)
      _gl.bindFramebuffer(36160, value);
    _framebuffer = value;
  };
  this.getActiveCubeFace = function() {
    return _currentActiveCubeFace;
  };
  this.getActiveMipmapLevel = function() {
    return _currentActiveMipmapLevel;
  };
  this.getRenderList = function() {
    return currentRenderList;
  };
  this.setRenderList = function(renderList) {
    currentRenderList = renderList;
  };
  this.getRenderState = function() {
    return currentRenderState;
  };
  this.setRenderState = function(renderState) {
    currentRenderState = renderState;
  };
  this.getRenderTarget = function() {
    return _currentRenderTarget;
  };
  this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
    _currentRenderTarget = renderTarget;
    _currentActiveCubeFace = activeCubeFace;
    _currentActiveMipmapLevel = activeMipmapLevel;
    if (renderTarget && properties.get(renderTarget).__webglFramebuffer === void 0) {
      textures.setupRenderTarget(renderTarget);
    }
    let framebuffer = _framebuffer;
    let isCube = false;
    if (renderTarget) {
      const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget) {
        framebuffer = __webglFramebuffer[activeCubeFace];
        isCube = true;
      } else if (renderTarget.isWebGLMultisampleRenderTarget) {
        framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
      } else {
        framebuffer = __webglFramebuffer;
      }
      _currentViewport.copy(renderTarget.viewport);
      _currentScissor.copy(renderTarget.scissor);
      _currentScissorTest = renderTarget.scissorTest;
    } else {
      _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
      _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
      _currentScissorTest = _scissorTest;
    }
    if (_currentFramebuffer !== framebuffer) {
      _gl.bindFramebuffer(36160, framebuffer);
      _currentFramebuffer = framebuffer;
    }
    state.viewport(_currentViewport);
    state.scissor(_currentScissor);
    state.setScissorTest(_currentScissorTest);
    if (isCube) {
      const textureProperties = properties.get(renderTarget.texture);
      _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
    }
  };
  this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
    if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
      console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      return;
    }
    let framebuffer = properties.get(renderTarget).__webglFramebuffer;
    if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
      framebuffer = framebuffer[activeCubeFaceIndex];
    }
    if (framebuffer) {
      let restore = false;
      if (framebuffer !== _currentFramebuffer) {
        _gl.bindFramebuffer(36160, framebuffer);
        restore = true;
      }
      try {
        const texture = renderTarget.texture;
        const textureFormat = texture.format;
        const textureType = texture.type;
        if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
          return;
        }
        if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get("OES_texture_float") || extensions.get("WEBGL_color_buffer_float"))) && !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get("EXT_color_buffer_float") : extensions.get("EXT_color_buffer_half_float")))) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          return;
        }
        if (_gl.checkFramebufferStatus(36160) === 36053) {
          if (x >= 0 && x <= renderTarget.width - width && (y >= 0 && y <= renderTarget.height - height)) {
            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
          }
        } else {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
        }
      } finally {
        if (restore) {
          _gl.bindFramebuffer(36160, _currentFramebuffer);
        }
      }
    }
  };
  this.copyFramebufferToTexture = function(position, texture, level = 0) {
    const levelScale = Math.pow(2, -level);
    const width = Math.floor(texture.image.width * levelScale);
    const height = Math.floor(texture.image.height * levelScale);
    const glFormat = utils.convert(texture.format);
    textures.setTexture2D(texture, 0);
    _gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);
    state.unbindTexture();
  };
  this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
    const width = srcTexture.image.width;
    const height = srcTexture.image.height;
    const glFormat = utils.convert(dstTexture.format);
    const glType = utils.convert(dstTexture.type);
    textures.setTexture2D(dstTexture, 0);
    _gl.pixelStorei(37440, dstTexture.flipY);
    _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
    _gl.pixelStorei(3317, dstTexture.unpackAlignment);
    if (srcTexture.isDataTexture) {
      _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
    } else {
      if (srcTexture.isCompressedTexture) {
        _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
      } else {
        _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
      }
    }
    if (level === 0 && dstTexture.generateMipmaps)
      _gl.generateMipmap(3553);
    state.unbindTexture();
  };
  this.initTexture = function(texture) {
    textures.setTexture2D(texture, 0);
    state.unbindTexture();
  };
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
}
function WebGL1Renderer(parameters) {
  WebGLRenderer.call(this, parameters);
}
WebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {
  constructor: WebGL1Renderer,
  isWebGL1Renderer: true
});
var FogExp2 = class {
  constructor(color, density) {
    Object.defineProperty(this, "isFogExp2", { value: true });
    this.name = "";
    this.color = new Color(color);
    this.density = density !== void 0 ? density : 25e-5;
  }
  clone() {
    return new FogExp2(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      color: this.color.getHex(),
      density: this.density
    };
  }
};
var Fog = class {
  constructor(color, near, far) {
    Object.defineProperty(this, "isFog", { value: true });
    this.name = "";
    this.color = new Color(color);
    this.near = near !== void 0 ? near : 1;
    this.far = far !== void 0 ? far : 1e3;
  }
  clone() {
    return new Fog(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
};
var Scene = class extends Object3D {
  constructor() {
    super();
    Object.defineProperty(this, "isScene", { value: true });
    this.type = "Scene";
    this.background = null;
    this.environment = null;
    this.fog = null;
    this.overrideMaterial = null;
    this.autoUpdate = true;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.background !== null)
      this.background = source.background.clone();
    if (source.environment !== null)
      this.environment = source.environment.clone();
    if (source.fog !== null)
      this.fog = source.fog.clone();
    if (source.overrideMaterial !== null)
      this.overrideMaterial = source.overrideMaterial.clone();
    this.autoUpdate = source.autoUpdate;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.background !== null)
      data.object.background = this.background.toJSON(meta);
    if (this.environment !== null)
      data.object.environment = this.environment.toJSON(meta);
    if (this.fog !== null)
      data.object.fog = this.fog.toJSON();
    return data;
  }
};
function InterleavedBuffer(array, stride) {
  this.array = array;
  this.stride = stride;
  this.count = array !== void 0 ? array.length / stride : 0;
  this.usage = StaticDrawUsage;
  this.updateRange = { offset: 0, count: -1 };
  this.version = 0;
  this.uuid = MathUtils.generateUUID();
}
Object.defineProperty(InterleavedBuffer.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
Object.assign(InterleavedBuffer.prototype, {
  isInterleavedBuffer: true,
  onUploadCallback: function() {
  },
  setUsage: function(value) {
    this.usage = value;
    return this;
  },
  copy: function(source) {
    this.array = new source.array.constructor(source.array);
    this.count = source.count;
    this.stride = source.stride;
    this.usage = source.usage;
    return this;
  },
  copyAt: function(index1, attribute, index2) {
    index1 *= this.stride;
    index2 *= attribute.stride;
    for (let i = 0, l = this.stride; i < l; i++) {
      this.array[index1 + i] = attribute.array[index2 + i];
    }
    return this;
  },
  set: function(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  },
  clone: function(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = MathUtils.generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
    }
    const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
    const ib = new InterleavedBuffer(array, this.stride);
    ib.setUsage(this.usage);
    return ib;
  },
  onUpload: function(callback) {
    this.onUploadCallback = callback;
    return this;
  },
  toJSON: function(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = MathUtils.generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
    }
    return {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
});
var _vector$6 = new Vector3();
function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {
  this.name = "";
  this.data = interleavedBuffer;
  this.itemSize = itemSize;
  this.offset = offset;
  this.normalized = normalized === true;
}
Object.defineProperties(InterleavedBufferAttribute.prototype, {
  count: {
    get: function() {
      return this.data.count;
    }
  },
  array: {
    get: function() {
      return this.data.array;
    }
  },
  needsUpdate: {
    set: function(value) {
      this.data.needsUpdate = value;
    }
  }
});
Object.assign(InterleavedBufferAttribute.prototype, {
  isInterleavedBufferAttribute: true,
  applyMatrix4: function(m) {
    for (let i = 0, l = this.data.count; i < l; i++) {
      _vector$6.x = this.getX(i);
      _vector$6.y = this.getY(i);
      _vector$6.z = this.getZ(i);
      _vector$6.applyMatrix4(m);
      this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  },
  setX: function(index, x) {
    this.data.array[index * this.data.stride + this.offset] = x;
    return this;
  },
  setY: function(index, y) {
    this.data.array[index * this.data.stride + this.offset + 1] = y;
    return this;
  },
  setZ: function(index, z) {
    this.data.array[index * this.data.stride + this.offset + 2] = z;
    return this;
  },
  setW: function(index, w) {
    this.data.array[index * this.data.stride + this.offset + 3] = w;
    return this;
  },
  getX: function(index) {
    return this.data.array[index * this.data.stride + this.offset];
  },
  getY: function(index) {
    return this.data.array[index * this.data.stride + this.offset + 1];
  },
  getZ: function(index) {
    return this.data.array[index * this.data.stride + this.offset + 2];
  },
  getW: function(index) {
    return this.data.array[index * this.data.stride + this.offset + 3];
  },
  setXY: function(index, x, y) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    return this;
  },
  setXYZ: function(index, x, y, z) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z;
    return this;
  },
  setXYZW: function(index, x, y, z, w) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z;
    this.data.array[index + 3] = w;
    return this;
  },
  clone: function(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
      const array = [];
      for (let i = 0; i < this.count; i++) {
        const index = i * this.data.stride + this.offset;
        for (let j = 0; j < this.itemSize; j++) {
          array.push(this.data.array[index + j]);
        }
      }
      return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
      }
      return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
  },
  toJSON: function(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
      const array = [];
      for (let i = 0; i < this.count; i++) {
        const index = i * this.data.stride + this.offset;
        for (let j = 0; j < this.itemSize; j++) {
          array.push(this.data.array[index + j]);
        }
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array,
        normalized: this.normalized
      };
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
      }
      return {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
});
function SpriteMaterial(parameters) {
  Material.call(this);
  this.type = "SpriteMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.alphaMap = null;
  this.rotation = 0;
  this.sizeAttenuation = true;
  this.transparent = true;
  this.setValues(parameters);
}
SpriteMaterial.prototype = Object.create(Material.prototype);
SpriteMaterial.prototype.constructor = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;
SpriteMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.rotation = source.rotation;
  this.sizeAttenuation = source.sizeAttenuation;
  return this;
};
var _geometry;
var _intersectPoint = new Vector3();
var _worldScale = new Vector3();
var _mvPosition = new Vector3();
var _alignedPosition = new Vector2();
var _rotatedPosition = new Vector2();
var _viewWorldMatrix = new Matrix4();
var _vA$1 = new Vector3();
var _vB$1 = new Vector3();
var _vC$1 = new Vector3();
var _uvA$1 = new Vector2();
var _uvB$1 = new Vector2();
var _uvC$1 = new Vector2();
function Sprite(material) {
  Object3D.call(this);
  this.type = "Sprite";
  if (_geometry === void 0) {
    _geometry = new BufferGeometry();
    const float32Array = new Float32Array([
      -0.5,
      -0.5,
      0,
      0,
      0,
      0.5,
      -0.5,
      0,
      1,
      0,
      0.5,
      0.5,
      0,
      1,
      1,
      -0.5,
      0.5,
      0,
      0,
      1
    ]);
    const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
    _geometry.setIndex([0, 1, 2, 0, 2, 3]);
    _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
    _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
  }
  this.geometry = _geometry;
  this.material = material !== void 0 ? material : new SpriteMaterial();
  this.center = new Vector2(0.5, 0.5);
}
Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Sprite,
  isSprite: true,
  raycast: function(raycaster, intersects2) {
    if (raycaster.camera === null) {
      console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
    }
    _worldScale.setFromMatrixScale(this.matrixWorld);
    _viewWorldMatrix.copy(raycaster.camera.matrixWorld);
    this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
    _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
    if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
      _worldScale.multiplyScalar(-_mvPosition.z);
    }
    const rotation = this.material.rotation;
    let sin, cos;
    if (rotation !== 0) {
      cos = Math.cos(rotation);
      sin = Math.sin(rotation);
    }
    const center = this.center;
    transformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
    transformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
    transformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
    _uvA$1.set(0, 0);
    _uvB$1.set(1, 0);
    _uvC$1.set(1, 1);
    let intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);
    if (intersect === null) {
      transformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      _uvB$1.set(0, 1);
      intersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);
      if (intersect === null) {
        return;
      }
    }
    const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
    if (distance < raycaster.near || distance > raycaster.far)
      return;
    intersects2.push({
      distance,
      point: _intersectPoint.clone(),
      uv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),
      face: null,
      object: this
    });
  },
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    if (source.center !== void 0)
      this.center.copy(source.center);
    this.material = source.material;
    return this;
  }
});
function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
  if (sin !== void 0) {
    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
  } else {
    _rotatedPosition.copy(_alignedPosition);
  }
  vertexPosition.copy(mvPosition);
  vertexPosition.x += _rotatedPosition.x;
  vertexPosition.y += _rotatedPosition.y;
  vertexPosition.applyMatrix4(_viewWorldMatrix);
}
var _v1$4 = new Vector3();
var _v2$2 = new Vector3();
function LOD() {
  Object3D.call(this);
  this._currentLevel = 0;
  this.type = "LOD";
  Object.defineProperties(this, {
    levels: {
      enumerable: true,
      value: []
    }
  });
  this.autoUpdate = true;
}
LOD.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: LOD,
  isLOD: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source, false);
    const levels = source.levels;
    for (let i = 0, l = levels.length; i < l; i++) {
      const level = levels[i];
      this.addLevel(level.object.clone(), level.distance);
    }
    this.autoUpdate = source.autoUpdate;
    return this;
  },
  addLevel: function(object, distance = 0) {
    distance = Math.abs(distance);
    const levels = this.levels;
    let l;
    for (l = 0; l < levels.length; l++) {
      if (distance < levels[l].distance) {
        break;
      }
    }
    levels.splice(l, 0, { distance, object });
    this.add(object);
    return this;
  },
  getCurrentLevel: function() {
    return this._currentLevel;
  },
  getObjectForDistance: function(distance) {
    const levels = this.levels;
    if (levels.length > 0) {
      let i, l;
      for (i = 1, l = levels.length; i < l; i++) {
        if (distance < levels[i].distance) {
          break;
        }
      }
      return levels[i - 1].object;
    }
    return null;
  },
  raycast: function(raycaster, intersects2) {
    const levels = this.levels;
    if (levels.length > 0) {
      _v1$4.setFromMatrixPosition(this.matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(_v1$4);
      this.getObjectForDistance(distance).raycast(raycaster, intersects2);
    }
  },
  update: function(camera) {
    const levels = this.levels;
    if (levels.length > 1) {
      _v1$4.setFromMatrixPosition(camera.matrixWorld);
      _v2$2.setFromMatrixPosition(this.matrixWorld);
      const distance = _v1$4.distanceTo(_v2$2) / camera.zoom;
      levels[0].object.visible = true;
      let i, l;
      for (i = 1, l = levels.length; i < l; i++) {
        if (distance >= levels[i].distance) {
          levels[i - 1].object.visible = false;
          levels[i].object.visible = true;
        } else {
          break;
        }
      }
      this._currentLevel = i - 1;
      for (; i < l; i++) {
        levels[i].object.visible = false;
      }
    }
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    if (this.autoUpdate === false)
      data.object.autoUpdate = false;
    data.object.levels = [];
    const levels = this.levels;
    for (let i = 0, l = levels.length; i < l; i++) {
      const level = levels[i];
      data.object.levels.push({
        object: level.object.uuid,
        distance: level.distance
      });
    }
    return data;
  }
});
function SkinnedMesh(geometry, material) {
  if (geometry && geometry.isGeometry) {
    console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
  }
  Mesh.call(this, geometry, material);
  this.type = "SkinnedMesh";
  this.bindMode = "attached";
  this.bindMatrix = new Matrix4();
  this.bindMatrixInverse = new Matrix4();
}
SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
  constructor: SkinnedMesh,
  isSkinnedMesh: true,
  copy: function(source) {
    Mesh.prototype.copy.call(this, source);
    this.bindMode = source.bindMode;
    this.bindMatrix.copy(source.bindMatrix);
    this.bindMatrixInverse.copy(source.bindMatrixInverse);
    this.skeleton = source.skeleton;
    return this;
  },
  bind: function(skeleton, bindMatrix) {
    this.skeleton = skeleton;
    if (bindMatrix === void 0) {
      this.updateMatrixWorld(true);
      this.skeleton.calculateInverses();
      bindMatrix = this.matrixWorld;
    }
    this.bindMatrix.copy(bindMatrix);
    this.bindMatrixInverse.copy(bindMatrix).invert();
  },
  pose: function() {
    this.skeleton.pose();
  },
  normalizeSkinWeights: function() {
    const vector = new Vector4();
    const skinWeight = this.geometry.attributes.skinWeight;
    for (let i = 0, l = skinWeight.count; i < l; i++) {
      vector.x = skinWeight.getX(i);
      vector.y = skinWeight.getY(i);
      vector.z = skinWeight.getZ(i);
      vector.w = skinWeight.getW(i);
      const scale = 1 / vector.manhattanLength();
      if (scale !== Infinity) {
        vector.multiplyScalar(scale);
      } else {
        vector.set(1, 0, 0, 0);
      }
      skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
    }
  },
  updateMatrixWorld: function(force) {
    Mesh.prototype.updateMatrixWorld.call(this, force);
    if (this.bindMode === "attached") {
      this.bindMatrixInverse.copy(this.matrixWorld).invert();
    } else if (this.bindMode === "detached") {
      this.bindMatrixInverse.copy(this.bindMatrix).invert();
    } else {
      console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
  },
  boneTransform: function() {
    const basePosition = new Vector3();
    const skinIndex = new Vector4();
    const skinWeight = new Vector4();
    const vector = new Vector3();
    const matrix = new Matrix4();
    return function(index, target) {
      const skeleton = this.skeleton;
      const geometry = this.geometry;
      skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
      skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
      basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);
      target.set(0, 0, 0);
      for (let i = 0; i < 4; i++) {
        const weight = skinWeight.getComponent(i);
        if (weight !== 0) {
          const boneIndex = skinIndex.getComponent(i);
          matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
          target.addScaledVector(vector.copy(basePosition).applyMatrix4(matrix), weight);
        }
      }
      return target.applyMatrix4(this.bindMatrixInverse);
    };
  }()
});
function Bone() {
  Object3D.call(this);
  this.type = "Bone";
}
Bone.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Bone,
  isBone: true
});
var _offsetMatrix = new Matrix4();
var _identityMatrix = new Matrix4();
function Skeleton(bones = [], boneInverses = []) {
  this.uuid = MathUtils.generateUUID();
  this.bones = bones.slice(0);
  this.boneInverses = boneInverses;
  this.boneMatrices = null;
  this.boneTexture = null;
  this.boneTextureSize = 0;
  this.frame = -1;
  this.init();
}
Object.assign(Skeleton.prototype, {
  init: function() {
    const bones = this.bones;
    const boneInverses = this.boneInverses;
    this.boneMatrices = new Float32Array(bones.length * 16);
    if (boneInverses.length === 0) {
      this.calculateInverses();
    } else {
      if (bones.length !== boneInverses.length) {
        console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
        this.boneInverses = [];
        for (let i = 0, il = this.bones.length; i < il; i++) {
          this.boneInverses.push(new Matrix4());
        }
      }
    }
  },
  calculateInverses: function() {
    this.boneInverses.length = 0;
    for (let i = 0, il = this.bones.length; i < il; i++) {
      const inverse = new Matrix4();
      if (this.bones[i]) {
        inverse.copy(this.bones[i].matrixWorld).invert();
      }
      this.boneInverses.push(inverse);
    }
  },
  pose: function() {
    for (let i = 0, il = this.bones.length; i < il; i++) {
      const bone = this.bones[i];
      if (bone) {
        bone.matrixWorld.copy(this.boneInverses[i]).invert();
      }
    }
    for (let i = 0, il = this.bones.length; i < il; i++) {
      const bone = this.bones[i];
      if (bone) {
        if (bone.parent && bone.parent.isBone) {
          bone.matrix.copy(bone.parent.matrixWorld).invert();
          bone.matrix.multiply(bone.matrixWorld);
        } else {
          bone.matrix.copy(bone.matrixWorld);
        }
        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
      }
    }
  },
  update: function() {
    const bones = this.bones;
    const boneInverses = this.boneInverses;
    const boneMatrices = this.boneMatrices;
    const boneTexture = this.boneTexture;
    for (let i = 0, il = bones.length; i < il; i++) {
      const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
      _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
      _offsetMatrix.toArray(boneMatrices, i * 16);
    }
    if (boneTexture !== null) {
      boneTexture.needsUpdate = true;
    }
  },
  clone: function() {
    return new Skeleton(this.bones, this.boneInverses);
  },
  getBoneByName: function(name) {
    for (let i = 0, il = this.bones.length; i < il; i++) {
      const bone = this.bones[i];
      if (bone.name === name) {
        return bone;
      }
    }
    return void 0;
  },
  dispose: function() {
    if (this.boneTexture !== null) {
      this.boneTexture.dispose();
      this.boneTexture = null;
    }
  },
  fromJSON: function(json, bones) {
    this.uuid = json.uuid;
    for (let i = 0, l = json.bones.length; i < l; i++) {
      const uuid = json.bones[i];
      let bone = bones[uuid];
      if (bone === void 0) {
        console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
        bone = new Bone();
      }
      this.bones.push(bone);
      this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
    }
    this.init();
    return this;
  },
  toJSON: function() {
    const data = {
      metadata: {
        version: 4.5,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    data.uuid = this.uuid;
    const bones = this.bones;
    const boneInverses = this.boneInverses;
    for (let i = 0, l = bones.length; i < l; i++) {
      const bone = bones[i];
      data.bones.push(bone.uuid);
      const boneInverse = boneInverses[i];
      data.boneInverses.push(boneInverse.toArray());
    }
    return data;
  }
});
var _instanceLocalMatrix = new Matrix4();
var _instanceWorldMatrix = new Matrix4();
var _instanceIntersects = [];
var _mesh = new Mesh();
function InstancedMesh(geometry, material, count) {
  Mesh.call(this, geometry, material);
  this.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);
  this.instanceColor = null;
  this.count = count;
  this.frustumCulled = false;
}
InstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
  constructor: InstancedMesh,
  isInstancedMesh: true,
  copy: function(source) {
    Mesh.prototype.copy.call(this, source);
    this.instanceMatrix.copy(source.instanceMatrix);
    this.count = source.count;
    return this;
  },
  getColorAt: function(index, color) {
    color.fromArray(this.instanceColor.array, index * 3);
  },
  getMatrixAt: function(index, matrix) {
    matrix.fromArray(this.instanceMatrix.array, index * 16);
  },
  raycast: function(raycaster, intersects2) {
    const matrixWorld = this.matrixWorld;
    const raycastTimes = this.count;
    _mesh.geometry = this.geometry;
    _mesh.material = this.material;
    if (_mesh.material === void 0)
      return;
    for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
      this.getMatrixAt(instanceId, _instanceLocalMatrix);
      _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
      _mesh.matrixWorld = _instanceWorldMatrix;
      _mesh.raycast(raycaster, _instanceIntersects);
      for (let i = 0, l = _instanceIntersects.length; i < l; i++) {
        const intersect = _instanceIntersects[i];
        intersect.instanceId = instanceId;
        intersect.object = this;
        intersects2.push(intersect);
      }
      _instanceIntersects.length = 0;
    }
  },
  setColorAt: function(index, color) {
    if (this.instanceColor === null) {
      this.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);
    }
    color.toArray(this.instanceColor.array, index * 3);
  },
  setMatrixAt: function(index, matrix) {
    matrix.toArray(this.instanceMatrix.array, index * 16);
  },
  updateMorphTargets: function() {
  }
});
function LineBasicMaterial(parameters) {
  Material.call(this);
  this.type = "LineBasicMaterial";
  this.color = new Color(16777215);
  this.linewidth = 1;
  this.linecap = "round";
  this.linejoin = "round";
  this.morphTargets = false;
  this.setValues(parameters);
}
LineBasicMaterial.prototype = Object.create(Material.prototype);
LineBasicMaterial.prototype.constructor = LineBasicMaterial;
LineBasicMaterial.prototype.isLineBasicMaterial = true;
LineBasicMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.linewidth = source.linewidth;
  this.linecap = source.linecap;
  this.linejoin = source.linejoin;
  this.morphTargets = source.morphTargets;
  return this;
};
var _start = new Vector3();
var _end = new Vector3();
var _inverseMatrix$1 = new Matrix4();
var _ray$1 = new Ray();
var _sphere$2 = new Sphere();
function Line(geometry, material, mode) {
  if (mode === 1) {
    console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
  }
  Object3D.call(this);
  this.type = "Line";
  this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
  this.material = material !== void 0 ? material : new LineBasicMaterial();
  this.updateMorphTargets();
}
Line.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Line,
  isLine: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    this.material = source.material;
    this.geometry = source.geometry;
    return this;
  },
  computeLineDistances: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      if (geometry.index === null) {
        const positionAttribute = geometry.attributes.position;
        const lineDistances = [0];
        for (let i = 1, l = positionAttribute.count; i < l; i++) {
          _start.fromBufferAttribute(positionAttribute, i - 1);
          _end.fromBufferAttribute(positionAttribute, i);
          lineDistances[i] = lineDistances[i - 1];
          lineDistances[i] += _start.distanceTo(_end);
        }
        geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
      } else {
        console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else if (geometry.isGeometry) {
      const vertices = geometry.vertices;
      const lineDistances = geometry.lineDistances;
      lineDistances[0] = 0;
      for (let i = 1, l = vertices.length; i < l; i++) {
        lineDistances[i] = lineDistances[i - 1];
        lineDistances[i] += vertices[i - 1].distanceTo(vertices[i]);
      }
    }
    return this;
  },
  raycast: function(raycaster, intersects2) {
    const geometry = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold = raycaster.params.Line.threshold;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere$2.copy(geometry.boundingSphere);
    _sphere$2.applyMatrix4(matrixWorld);
    _sphere$2.radius += threshold;
    if (raycaster.ray.intersectsSphere(_sphere$2) === false)
      return;
    _inverseMatrix$1.copy(matrixWorld).invert();
    _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const vStart = new Vector3();
    const vEnd = new Vector3();
    const interSegment = new Vector3();
    const interRay = new Vector3();
    const step = this.isLineSegments ? 2 : 1;
    if (geometry.isBufferGeometry) {
      const index = geometry.index;
      const attributes = geometry.attributes;
      const positionAttribute = attributes.position;
      if (index !== null) {
        const indices = index.array;
        for (let i = 0, l = indices.length - 1; i < l; i += step) {
          const a = indices[i];
          const b = indices[i + 1];
          vStart.fromBufferAttribute(positionAttribute, a);
          vEnd.fromBufferAttribute(positionAttribute, b);
          const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
          if (distSq > localThresholdSq)
            continue;
          interRay.applyMatrix4(this.matrixWorld);
          const distance = raycaster.ray.origin.distanceTo(interRay);
          if (distance < raycaster.near || distance > raycaster.far)
            continue;
          intersects2.push({
            distance,
            point: interSegment.clone().applyMatrix4(this.matrixWorld),
            index: i,
            face: null,
            faceIndex: null,
            object: this
          });
        }
      } else {
        for (let i = 0, l = positionAttribute.count - 1; i < l; i += step) {
          vStart.fromBufferAttribute(positionAttribute, i);
          vEnd.fromBufferAttribute(positionAttribute, i + 1);
          const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
          if (distSq > localThresholdSq)
            continue;
          interRay.applyMatrix4(this.matrixWorld);
          const distance = raycaster.ray.origin.distanceTo(interRay);
          if (distance < raycaster.near || distance > raycaster.far)
            continue;
          intersects2.push({
            distance,
            point: interSegment.clone().applyMatrix4(this.matrixWorld),
            index: i,
            face: null,
            faceIndex: null,
            object: this
          });
        }
      }
    } else if (geometry.isGeometry) {
      const vertices = geometry.vertices;
      const nbVertices = vertices.length;
      for (let i = 0; i < nbVertices - 1; i += step) {
        const distSq = _ray$1.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);
        if (distSq > localThresholdSq)
          continue;
        interRay.applyMatrix4(this.matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(interRay);
        if (distance < raycaster.near || distance > raycaster.far)
          continue;
        intersects2.push({
          distance,
          point: interSegment.clone().applyMatrix4(this.matrixWorld),
          index: i,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  },
  updateMorphTargets: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    } else {
      const morphTargets = geometry.morphTargets;
      if (morphTargets !== void 0 && morphTargets.length > 0) {
        console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
  }
});
var _start$1 = new Vector3();
var _end$1 = new Vector3();
function LineSegments(geometry, material) {
  Line.call(this, geometry, material);
  this.type = "LineSegments";
}
LineSegments.prototype = Object.assign(Object.create(Line.prototype), {
  constructor: LineSegments,
  isLineSegments: true,
  computeLineDistances: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      if (geometry.index === null) {
        const positionAttribute = geometry.attributes.position;
        const lineDistances = [];
        for (let i = 0, l = positionAttribute.count; i < l; i += 2) {
          _start$1.fromBufferAttribute(positionAttribute, i);
          _end$1.fromBufferAttribute(positionAttribute, i + 1);
          lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
          lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
        }
        geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
      } else {
        console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else if (geometry.isGeometry) {
      const vertices = geometry.vertices;
      const lineDistances = geometry.lineDistances;
      for (let i = 0, l = vertices.length; i < l; i += 2) {
        _start$1.copy(vertices[i]);
        _end$1.copy(vertices[i + 1]);
        lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
        lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
      }
    }
    return this;
  }
});
function LineLoop(geometry, material) {
  Line.call(this, geometry, material);
  this.type = "LineLoop";
}
LineLoop.prototype = Object.assign(Object.create(Line.prototype), {
  constructor: LineLoop,
  isLineLoop: true
});
function PointsMaterial(parameters) {
  Material.call(this);
  this.type = "PointsMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.alphaMap = null;
  this.size = 1;
  this.sizeAttenuation = true;
  this.morphTargets = false;
  this.setValues(parameters);
}
PointsMaterial.prototype = Object.create(Material.prototype);
PointsMaterial.prototype.constructor = PointsMaterial;
PointsMaterial.prototype.isPointsMaterial = true;
PointsMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.size = source.size;
  this.sizeAttenuation = source.sizeAttenuation;
  this.morphTargets = source.morphTargets;
  return this;
};
var _inverseMatrix$2 = new Matrix4();
var _ray$2 = new Ray();
var _sphere$3 = new Sphere();
var _position$1 = new Vector3();
function Points(geometry, material) {
  Object3D.call(this);
  this.type = "Points";
  this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
  this.material = material !== void 0 ? material : new PointsMaterial();
  this.updateMorphTargets();
}
Points.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Points,
  isPoints: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    this.material = source.material;
    this.geometry = source.geometry;
    return this;
  },
  raycast: function(raycaster, intersects2) {
    const geometry = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold = raycaster.params.Points.threshold;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere$3.copy(geometry.boundingSphere);
    _sphere$3.applyMatrix4(matrixWorld);
    _sphere$3.radius += threshold;
    if (raycaster.ray.intersectsSphere(_sphere$3) === false)
      return;
    _inverseMatrix$2.copy(matrixWorld).invert();
    _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    if (geometry.isBufferGeometry) {
      const index = geometry.index;
      const attributes = geometry.attributes;
      const positionAttribute = attributes.position;
      if (index !== null) {
        const indices = index.array;
        for (let i = 0, il = indices.length; i < il; i++) {
          const a = indices[i];
          _position$1.fromBufferAttribute(positionAttribute, a);
          testPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects2, this);
        }
      } else {
        for (let i = 0, l = positionAttribute.count; i < l; i++) {
          _position$1.fromBufferAttribute(positionAttribute, i);
          testPoint(_position$1, i, localThresholdSq, matrixWorld, raycaster, intersects2, this);
        }
      }
    } else {
      const vertices = geometry.vertices;
      for (let i = 0, l = vertices.length; i < l; i++) {
        testPoint(vertices[i], i, localThresholdSq, matrixWorld, raycaster, intersects2, this);
      }
    }
  },
  updateMorphTargets: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {
            const name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    } else {
      const morphTargets = geometry.morphTargets;
      if (morphTargets !== void 0 && morphTargets.length > 0) {
        console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
  }
});
function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects2, object) {
  const rayPointDistanceSq = _ray$2.distanceSqToPoint(point);
  if (rayPointDistanceSq < localThresholdSq) {
    const intersectPoint = new Vector3();
    _ray$2.closestPointToPoint(point, intersectPoint);
    intersectPoint.applyMatrix4(matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(intersectPoint);
    if (distance < raycaster.near || distance > raycaster.far)
      return;
    intersects2.push({
      distance,
      distanceToRay: Math.sqrt(rayPointDistanceSq),
      point: intersectPoint,
      index,
      face: null,
      object
    });
  }
}
function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.format = format !== void 0 ? format : RGBFormat;
  this.minFilter = minFilter !== void 0 ? minFilter : LinearFilter;
  this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
  this.generateMipmaps = false;
  const scope = this;
  function updateVideo() {
    scope.needsUpdate = true;
    video.requestVideoFrameCallback(updateVideo);
  }
  if ("requestVideoFrameCallback" in video) {
    video.requestVideoFrameCallback(updateVideo);
  }
}
VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {
  constructor: VideoTexture,
  clone: function() {
    return new this.constructor(this.image).copy(this);
  },
  isVideoTexture: true,
  update: function() {
    const video = this.image;
    const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
    if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
      this.needsUpdate = true;
    }
  }
});
function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.image = { width, height };
  this.mipmaps = mipmaps;
  this.flipY = false;
  this.generateMipmaps = false;
}
CompressedTexture.prototype = Object.create(Texture.prototype);
CompressedTexture.prototype.constructor = CompressedTexture;
CompressedTexture.prototype.isCompressedTexture = true;
function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.needsUpdate = true;
}
CanvasTexture.prototype = Object.create(Texture.prototype);
CanvasTexture.prototype.constructor = CanvasTexture;
CanvasTexture.prototype.isCanvasTexture = true;
function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
  format = format !== void 0 ? format : DepthFormat;
  if (format !== DepthFormat && format !== DepthStencilFormat) {
    throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
  }
  if (type === void 0 && format === DepthFormat)
    type = UnsignedShortType;
  if (type === void 0 && format === DepthStencilFormat)
    type = UnsignedInt248Type;
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.image = { width, height };
  this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
  this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
  this.flipY = false;
  this.generateMipmaps = false;
}
DepthTexture.prototype = Object.create(Texture.prototype);
DepthTexture.prototype.constructor = DepthTexture;
DepthTexture.prototype.isDepthTexture = true;
var _geometryId = 0;
var _m1$3 = new Matrix4();
var _obj$1 = new Object3D();
var _offset$1 = new Vector3();
function Geometry() {
  Object.defineProperty(this, "id", { value: _geometryId += 2 });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "Geometry";
  this.vertices = [];
  this.colors = [];
  this.faces = [];
  this.faceVertexUvs = [[]];
  this.morphTargets = [];
  this.morphNormals = [];
  this.skinWeights = [];
  this.skinIndices = [];
  this.lineDistances = [];
  this.boundingBox = null;
  this.boundingSphere = null;
  this.elementsNeedUpdate = false;
  this.verticesNeedUpdate = false;
  this.uvsNeedUpdate = false;
  this.normalsNeedUpdate = false;
  this.colorsNeedUpdate = false;
  this.lineDistancesNeedUpdate = false;
  this.groupsNeedUpdate = false;
}
Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Geometry,
  isGeometry: true,
  applyMatrix4: function(matrix) {
    const normalMatrix = new Matrix3().getNormalMatrix(matrix);
    for (let i = 0, il = this.vertices.length; i < il; i++) {
      const vertex = this.vertices[i];
      vertex.applyMatrix4(matrix);
    }
    for (let i = 0, il = this.faces.length; i < il; i++) {
      const face = this.faces[i];
      face.normal.applyMatrix3(normalMatrix).normalize();
      for (let j = 0, jl = face.vertexNormals.length; j < jl; j++) {
        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();
      }
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    return this;
  },
  rotateX: function(angle) {
    _m1$3.makeRotationX(angle);
    this.applyMatrix4(_m1$3);
    return this;
  },
  rotateY: function(angle) {
    _m1$3.makeRotationY(angle);
    this.applyMatrix4(_m1$3);
    return this;
  },
  rotateZ: function(angle) {
    _m1$3.makeRotationZ(angle);
    this.applyMatrix4(_m1$3);
    return this;
  },
  translate: function(x, y, z) {
    _m1$3.makeTranslation(x, y, z);
    this.applyMatrix4(_m1$3);
    return this;
  },
  scale: function(x, y, z) {
    _m1$3.makeScale(x, y, z);
    this.applyMatrix4(_m1$3);
    return this;
  },
  lookAt: function(vector) {
    _obj$1.lookAt(vector);
    _obj$1.updateMatrix();
    this.applyMatrix4(_obj$1.matrix);
    return this;
  },
  fromBufferGeometry: function(geometry) {
    const scope = this;
    const index = geometry.index !== null ? geometry.index : void 0;
    const attributes = geometry.attributes;
    if (attributes.position === void 0) {
      console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.");
      return this;
    }
    const position = attributes.position;
    const normal = attributes.normal;
    const color = attributes.color;
    const uv = attributes.uv;
    const uv2 = attributes.uv2;
    if (uv2 !== void 0)
      this.faceVertexUvs[1] = [];
    for (let i = 0; i < position.count; i++) {
      scope.vertices.push(new Vector3().fromBufferAttribute(position, i));
      if (color !== void 0) {
        scope.colors.push(new Color().fromBufferAttribute(color, i));
      }
    }
    function addFace(a, b, c, materialIndex) {
      const vertexColors = color === void 0 ? [] : [
        scope.colors[a].clone(),
        scope.colors[b].clone(),
        scope.colors[c].clone()
      ];
      const vertexNormals = normal === void 0 ? [] : [
        new Vector3().fromBufferAttribute(normal, a),
        new Vector3().fromBufferAttribute(normal, b),
        new Vector3().fromBufferAttribute(normal, c)
      ];
      const face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);
      scope.faces.push(face);
      if (uv !== void 0) {
        scope.faceVertexUvs[0].push([
          new Vector2().fromBufferAttribute(uv, a),
          new Vector2().fromBufferAttribute(uv, b),
          new Vector2().fromBufferAttribute(uv, c)
        ]);
      }
      if (uv2 !== void 0) {
        scope.faceVertexUvs[1].push([
          new Vector2().fromBufferAttribute(uv2, a),
          new Vector2().fromBufferAttribute(uv2, b),
          new Vector2().fromBufferAttribute(uv2, c)
        ]);
      }
    }
    const groups = geometry.groups;
    if (groups.length > 0) {
      for (let i = 0; i < groups.length; i++) {
        const group = groups[i];
        const start = group.start;
        const count = group.count;
        for (let j = start, jl = start + count; j < jl; j += 3) {
          if (index !== void 0) {
            addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex);
          } else {
            addFace(j, j + 1, j + 2, group.materialIndex);
          }
        }
      }
    } else {
      if (index !== void 0) {
        for (let i = 0; i < index.count; i += 3) {
          addFace(index.getX(i), index.getX(i + 1), index.getX(i + 2));
        }
      } else {
        for (let i = 0; i < position.count; i += 3) {
          addFace(i, i + 1, i + 2);
        }
      }
    }
    this.computeFaceNormals();
    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }
    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }
    return this;
  },
  center: function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset$1).negate();
    this.translate(_offset$1.x, _offset$1.y, _offset$1.z);
    return this;
  },
  normalize: function() {
    this.computeBoundingSphere();
    const center = this.boundingSphere.center;
    const radius = this.boundingSphere.radius;
    const s = radius === 0 ? 1 : 1 / radius;
    const matrix = new Matrix4();
    matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);
    this.applyMatrix4(matrix);
    return this;
  },
  computeFaceNormals: function() {
    const cb = new Vector3(), ab = new Vector3();
    for (let f = 0, fl = this.faces.length; f < fl; f++) {
      const face = this.faces[f];
      const vA = this.vertices[face.a];
      const vB = this.vertices[face.b];
      const vC = this.vertices[face.c];
      cb.subVectors(vC, vB);
      ab.subVectors(vA, vB);
      cb.cross(ab);
      cb.normalize();
      face.normal.copy(cb);
    }
  },
  computeVertexNormals: function(areaWeighted = true) {
    const vertices = new Array(this.vertices.length);
    for (let v = 0, vl = this.vertices.length; v < vl; v++) {
      vertices[v] = new Vector3();
    }
    if (areaWeighted) {
      const cb = new Vector3(), ab = new Vector3();
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const vA = this.vertices[face.a];
        const vB = this.vertices[face.b];
        const vC = this.vertices[face.c];
        cb.subVectors(vC, vB);
        ab.subVectors(vA, vB);
        cb.cross(ab);
        vertices[face.a].add(cb);
        vertices[face.b].add(cb);
        vertices[face.c].add(cb);
      }
    } else {
      this.computeFaceNormals();
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        vertices[face.a].add(face.normal);
        vertices[face.b].add(face.normal);
        vertices[face.c].add(face.normal);
      }
    }
    for (let v = 0, vl = this.vertices.length; v < vl; v++) {
      vertices[v].normalize();
    }
    for (let f = 0, fl = this.faces.length; f < fl; f++) {
      const face = this.faces[f];
      const vertexNormals = face.vertexNormals;
      if (vertexNormals.length === 3) {
        vertexNormals[0].copy(vertices[face.a]);
        vertexNormals[1].copy(vertices[face.b]);
        vertexNormals[2].copy(vertices[face.c]);
      } else {
        vertexNormals[0] = vertices[face.a].clone();
        vertexNormals[1] = vertices[face.b].clone();
        vertexNormals[2] = vertices[face.c].clone();
      }
    }
    if (this.faces.length > 0) {
      this.normalsNeedUpdate = true;
    }
  },
  computeFlatVertexNormals: function() {
    this.computeFaceNormals();
    for (let f = 0, fl = this.faces.length; f < fl; f++) {
      const face = this.faces[f];
      const vertexNormals = face.vertexNormals;
      if (vertexNormals.length === 3) {
        vertexNormals[0].copy(face.normal);
        vertexNormals[1].copy(face.normal);
        vertexNormals[2].copy(face.normal);
      } else {
        vertexNormals[0] = face.normal.clone();
        vertexNormals[1] = face.normal.clone();
        vertexNormals[2] = face.normal.clone();
      }
    }
    if (this.faces.length > 0) {
      this.normalsNeedUpdate = true;
    }
  },
  computeMorphNormals: function() {
    for (let f = 0, fl = this.faces.length; f < fl; f++) {
      const face = this.faces[f];
      if (!face.__originalFaceNormal) {
        face.__originalFaceNormal = face.normal.clone();
      } else {
        face.__originalFaceNormal.copy(face.normal);
      }
      if (!face.__originalVertexNormals)
        face.__originalVertexNormals = [];
      for (let i = 0, il = face.vertexNormals.length; i < il; i++) {
        if (!face.__originalVertexNormals[i]) {
          face.__originalVertexNormals[i] = face.vertexNormals[i].clone();
        } else {
          face.__originalVertexNormals[i].copy(face.vertexNormals[i]);
        }
      }
    }
    const tmpGeo = new Geometry();
    tmpGeo.faces = this.faces;
    for (let i = 0, il = this.morphTargets.length; i < il; i++) {
      if (!this.morphNormals[i]) {
        this.morphNormals[i] = {};
        this.morphNormals[i].faceNormals = [];
        this.morphNormals[i].vertexNormals = [];
        const dstNormalsFace = this.morphNormals[i].faceNormals;
        const dstNormalsVertex = this.morphNormals[i].vertexNormals;
        for (let f = 0, fl = this.faces.length; f < fl; f++) {
          const faceNormal = new Vector3();
          const vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
          dstNormalsFace.push(faceNormal);
          dstNormalsVertex.push(vertexNormals);
        }
      }
      const morphNormals = this.morphNormals[i];
      tmpGeo.vertices = this.morphTargets[i].vertices;
      tmpGeo.computeFaceNormals();
      tmpGeo.computeVertexNormals();
      for (let f = 0, fl = this.faces.length; f < fl; f++) {
        const face = this.faces[f];
        const faceNormal = morphNormals.faceNormals[f];
        const vertexNormals = morphNormals.vertexNormals[f];
        faceNormal.copy(face.normal);
        vertexNormals.a.copy(face.vertexNormals[0]);
        vertexNormals.b.copy(face.vertexNormals[1]);
        vertexNormals.c.copy(face.vertexNormals[2]);
      }
    }
    for (let f = 0, fl = this.faces.length; f < fl; f++) {
      const face = this.faces[f];
      face.normal = face.__originalFaceNormal;
      face.vertexNormals = face.__originalVertexNormals;
    }
  },
  computeBoundingBox: function() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    this.boundingBox.setFromPoints(this.vertices);
  },
  computeBoundingSphere: function() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    this.boundingSphere.setFromPoints(this.vertices);
  },
  merge: function(geometry, matrix, materialIndexOffset = 0) {
    if (!(geometry && geometry.isGeometry)) {
      console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", geometry);
      return;
    }
    let normalMatrix;
    const vertexOffset = this.vertices.length, vertices1 = this.vertices, vertices2 = geometry.vertices, faces1 = this.faces, faces2 = geometry.faces, colors1 = this.colors, colors2 = geometry.colors;
    if (matrix !== void 0) {
      normalMatrix = new Matrix3().getNormalMatrix(matrix);
    }
    for (let i = 0, il = vertices2.length; i < il; i++) {
      const vertex = vertices2[i];
      const vertexCopy = vertex.clone();
      if (matrix !== void 0)
        vertexCopy.applyMatrix4(matrix);
      vertices1.push(vertexCopy);
    }
    for (let i = 0, il = colors2.length; i < il; i++) {
      colors1.push(colors2[i].clone());
    }
    for (let i = 0, il = faces2.length; i < il; i++) {
      const face = faces2[i];
      let normal, color;
      const faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;
      const faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
      faceCopy.normal.copy(face.normal);
      if (normalMatrix !== void 0) {
        faceCopy.normal.applyMatrix3(normalMatrix).normalize();
      }
      for (let j = 0, jl = faceVertexNormals.length; j < jl; j++) {
        normal = faceVertexNormals[j].clone();
        if (normalMatrix !== void 0) {
          normal.applyMatrix3(normalMatrix).normalize();
        }
        faceCopy.vertexNormals.push(normal);
      }
      faceCopy.color.copy(face.color);
      for (let j = 0, jl = faceVertexColors.length; j < jl; j++) {
        color = faceVertexColors[j];
        faceCopy.vertexColors.push(color.clone());
      }
      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
      faces1.push(faceCopy);
    }
    for (let i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {
      const faceVertexUvs2 = geometry.faceVertexUvs[i];
      if (this.faceVertexUvs[i] === void 0)
        this.faceVertexUvs[i] = [];
      for (let j = 0, jl = faceVertexUvs2.length; j < jl; j++) {
        const uvs2 = faceVertexUvs2[j], uvsCopy = [];
        for (let k = 0, kl = uvs2.length; k < kl; k++) {
          uvsCopy.push(uvs2[k].clone());
        }
        this.faceVertexUvs[i].push(uvsCopy);
      }
    }
  },
  mergeMesh: function(mesh) {
    if (!(mesh && mesh.isMesh)) {
      console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", mesh);
      return;
    }
    if (mesh.matrixAutoUpdate)
      mesh.updateMatrix();
    this.merge(mesh.geometry, mesh.matrix);
  },
  mergeVertices: function(precisionPoints = 4) {
    const verticesMap = {};
    const unique = [], changes = [];
    const precision = Math.pow(10, precisionPoints);
    for (let i = 0, il = this.vertices.length; i < il; i++) {
      const v = this.vertices[i];
      const key = Math.round(v.x * precision) + "_" + Math.round(v.y * precision) + "_" + Math.round(v.z * precision);
      if (verticesMap[key] === void 0) {
        verticesMap[key] = i;
        unique.push(this.vertices[i]);
        changes[i] = unique.length - 1;
      } else {
        changes[i] = changes[verticesMap[key]];
      }
    }
    const faceIndicesToRemove = [];
    for (let i = 0, il = this.faces.length; i < il; i++) {
      const face = this.faces[i];
      face.a = changes[face.a];
      face.b = changes[face.b];
      face.c = changes[face.c];
      const indices = [face.a, face.b, face.c];
      for (let n = 0; n < 3; n++) {
        if (indices[n] === indices[(n + 1) % 3]) {
          faceIndicesToRemove.push(i);
          break;
        }
      }
    }
    for (let i = faceIndicesToRemove.length - 1; i >= 0; i--) {
      const idx = faceIndicesToRemove[i];
      this.faces.splice(idx, 1);
      for (let j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {
        this.faceVertexUvs[j].splice(idx, 1);
      }
    }
    const diff = this.vertices.length - unique.length;
    this.vertices = unique;
    return diff;
  },
  setFromPoints: function(points) {
    this.vertices = [];
    for (let i = 0, l = points.length; i < l; i++) {
      const point = points[i];
      this.vertices.push(new Vector3(point.x, point.y, point.z || 0));
    }
    return this;
  },
  sortFacesByMaterialIndex: function() {
    const faces = this.faces;
    const length = faces.length;
    for (let i = 0; i < length; i++) {
      faces[i]._id = i;
    }
    function materialIndexSort(a, b) {
      return a.materialIndex - b.materialIndex;
    }
    faces.sort(materialIndexSort);
    const uvs1 = this.faceVertexUvs[0];
    const uvs2 = this.faceVertexUvs[1];
    let newUvs1, newUvs2;
    if (uvs1 && uvs1.length === length)
      newUvs1 = [];
    if (uvs2 && uvs2.length === length)
      newUvs2 = [];
    for (let i = 0; i < length; i++) {
      const id = faces[i]._id;
      if (newUvs1)
        newUvs1.push(uvs1[id]);
      if (newUvs2)
        newUvs2.push(uvs2[id]);
    }
    if (newUvs1)
      this.faceVertexUvs[0] = newUvs1;
    if (newUvs2)
      this.faceVertexUvs[1] = newUvs2;
  },
  toJSON: function() {
    const data = {
      metadata: {
        version: 4.5,
        type: "Geometry",
        generator: "Geometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "")
      data.name = this.name;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0)
          data[key] = parameters[key];
      }
      return data;
    }
    const vertices = [];
    for (let i = 0; i < this.vertices.length; i++) {
      const vertex = this.vertices[i];
      vertices.push(vertex.x, vertex.y, vertex.z);
    }
    const faces = [];
    const normals = [];
    const normalsHash = {};
    const colors = [];
    const colorsHash = {};
    const uvs = [];
    const uvsHash = {};
    for (let i = 0; i < this.faces.length; i++) {
      const face = this.faces[i];
      const hasMaterial = true;
      const hasFaceUv = false;
      const hasFaceVertexUv = this.faceVertexUvs[0][i] !== void 0;
      const hasFaceNormal = face.normal.length() > 0;
      const hasFaceVertexNormal = face.vertexNormals.length > 0;
      const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
      const hasFaceVertexColor = face.vertexColors.length > 0;
      let faceType = 0;
      faceType = setBit(faceType, 0, 0);
      faceType = setBit(faceType, 1, hasMaterial);
      faceType = setBit(faceType, 2, hasFaceUv);
      faceType = setBit(faceType, 3, hasFaceVertexUv);
      faceType = setBit(faceType, 4, hasFaceNormal);
      faceType = setBit(faceType, 5, hasFaceVertexNormal);
      faceType = setBit(faceType, 6, hasFaceColor);
      faceType = setBit(faceType, 7, hasFaceVertexColor);
      faces.push(faceType);
      faces.push(face.a, face.b, face.c);
      faces.push(face.materialIndex);
      if (hasFaceVertexUv) {
        const faceVertexUvs = this.faceVertexUvs[0][i];
        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));
      }
      if (hasFaceNormal) {
        faces.push(getNormalIndex(face.normal));
      }
      if (hasFaceVertexNormal) {
        const vertexNormals = face.vertexNormals;
        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));
      }
      if (hasFaceColor) {
        faces.push(getColorIndex(face.color));
      }
      if (hasFaceVertexColor) {
        const vertexColors = face.vertexColors;
        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));
      }
    }
    function setBit(value, position, enabled) {
      return enabled ? value | 1 << position : value & ~(1 << position);
    }
    function getNormalIndex(normal) {
      const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
      if (normalsHash[hash] !== void 0) {
        return normalsHash[hash];
      }
      normalsHash[hash] = normals.length / 3;
      normals.push(normal.x, normal.y, normal.z);
      return normalsHash[hash];
    }
    function getColorIndex(color) {
      const hash = color.r.toString() + color.g.toString() + color.b.toString();
      if (colorsHash[hash] !== void 0) {
        return colorsHash[hash];
      }
      colorsHash[hash] = colors.length;
      colors.push(color.getHex());
      return colorsHash[hash];
    }
    function getUvIndex(uv) {
      const hash = uv.x.toString() + uv.y.toString();
      if (uvsHash[hash] !== void 0) {
        return uvsHash[hash];
      }
      uvsHash[hash] = uvs.length / 2;
      uvs.push(uv.x, uv.y);
      return uvsHash[hash];
    }
    data.data = {};
    data.data.vertices = vertices;
    data.data.normals = normals;
    if (colors.length > 0)
      data.data.colors = colors;
    if (uvs.length > 0)
      data.data.uvs = [uvs];
    data.data.faces = faces;
    return data;
  },
  clone: function() {
    return new Geometry().copy(this);
  },
  copy: function(source) {
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.name = source.name;
    const vertices = source.vertices;
    for (let i = 0, il = vertices.length; i < il; i++) {
      this.vertices.push(vertices[i].clone());
    }
    const colors = source.colors;
    for (let i = 0, il = colors.length; i < il; i++) {
      this.colors.push(colors[i].clone());
    }
    const faces = source.faces;
    for (let i = 0, il = faces.length; i < il; i++) {
      this.faces.push(faces[i].clone());
    }
    for (let i = 0, il = source.faceVertexUvs.length; i < il; i++) {
      const faceVertexUvs = source.faceVertexUvs[i];
      if (this.faceVertexUvs[i] === void 0) {
        this.faceVertexUvs[i] = [];
      }
      for (let j = 0, jl = faceVertexUvs.length; j < jl; j++) {
        const uvs = faceVertexUvs[j], uvsCopy = [];
        for (let k = 0, kl = uvs.length; k < kl; k++) {
          const uv = uvs[k];
          uvsCopy.push(uv.clone());
        }
        this.faceVertexUvs[i].push(uvsCopy);
      }
    }
    const morphTargets = source.morphTargets;
    for (let i = 0, il = morphTargets.length; i < il; i++) {
      const morphTarget = {};
      morphTarget.name = morphTargets[i].name;
      if (morphTargets[i].vertices !== void 0) {
        morphTarget.vertices = [];
        for (let j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {
          morphTarget.vertices.push(morphTargets[i].vertices[j].clone());
        }
      }
      if (morphTargets[i].normals !== void 0) {
        morphTarget.normals = [];
        for (let j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {
          morphTarget.normals.push(morphTargets[i].normals[j].clone());
        }
      }
      this.morphTargets.push(morphTarget);
    }
    const morphNormals = source.morphNormals;
    for (let i = 0, il = morphNormals.length; i < il; i++) {
      const morphNormal = {};
      if (morphNormals[i].vertexNormals !== void 0) {
        morphNormal.vertexNormals = [];
        for (let j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {
          const srcVertexNormal = morphNormals[i].vertexNormals[j];
          const destVertexNormal = {};
          destVertexNormal.a = srcVertexNormal.a.clone();
          destVertexNormal.b = srcVertexNormal.b.clone();
          destVertexNormal.c = srcVertexNormal.c.clone();
          morphNormal.vertexNormals.push(destVertexNormal);
        }
      }
      if (morphNormals[i].faceNormals !== void 0) {
        morphNormal.faceNormals = [];
        for (let j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {
          morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());
        }
      }
      this.morphNormals.push(morphNormal);
    }
    const skinWeights = source.skinWeights;
    for (let i = 0, il = skinWeights.length; i < il; i++) {
      this.skinWeights.push(skinWeights[i].clone());
    }
    const skinIndices = source.skinIndices;
    for (let i = 0, il = skinIndices.length; i < il; i++) {
      this.skinIndices.push(skinIndices[i].clone());
    }
    const lineDistances = source.lineDistances;
    for (let i = 0, il = lineDistances.length; i < il; i++) {
      this.lineDistances.push(lineDistances[i]);
    }
    const boundingBox = source.boundingBox;
    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.elementsNeedUpdate = source.elementsNeedUpdate;
    this.verticesNeedUpdate = source.verticesNeedUpdate;
    this.uvsNeedUpdate = source.uvsNeedUpdate;
    this.normalsNeedUpdate = source.normalsNeedUpdate;
    this.colorsNeedUpdate = source.colorsNeedUpdate;
    this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
    this.groupsNeedUpdate = source.groupsNeedUpdate;
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
var BoxGeometry = class extends Geometry {
  constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {
    super();
    this.type = "BoxGeometry";
    this.parameters = {
      width,
      height,
      depth,
      widthSegments,
      heightSegments,
      depthSegments
    };
    this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));
    this.mergeVertices();
  }
};
var CircleBufferGeometry = class extends BufferGeometry {
  constructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CircleBufferGeometry";
    this.parameters = {
      radius,
      segments,
      thetaStart,
      thetaLength
    };
    segments = Math.max(3, segments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex = new Vector3();
    const uv = new Vector2();
    vertices.push(0, 0, 0);
    normals.push(0, 0, 1);
    uvs.push(0.5, 0.5);
    for (let s = 0, i = 3; s <= segments; s++, i += 3) {
      const segment = thetaStart + s / segments * thetaLength;
      vertex.x = radius * Math.cos(segment);
      vertex.y = radius * Math.sin(segment);
      vertices.push(vertex.x, vertex.y, vertex.z);
      normals.push(0, 0, 1);
      uv.x = (vertices[i] / radius + 1) / 2;
      uv.y = (vertices[i + 1] / radius + 1) / 2;
      uvs.push(uv.x, uv.y);
    }
    for (let i = 1; i <= segments; i++) {
      indices.push(i, i + 1, 0);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
};
var CircleGeometry = class extends Geometry {
  constructor(radius, segments, thetaStart, thetaLength) {
    super();
    this.type = "CircleGeometry";
    this.parameters = {
      radius,
      segments,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));
    this.mergeVertices();
  }
};
var CylinderBufferGeometry = class extends BufferGeometry {
  constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CylinderBufferGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    const scope = this;
    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let index = 0;
    const indexArray = [];
    const halfHeight = height / 2;
    let groupStart = 0;
    generateTorso();
    if (openEnded === false) {
      if (radiusTop > 0)
        generateCap(true);
      if (radiusBottom > 0)
        generateCap(false);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateTorso() {
      const normal = new Vector3();
      const vertex = new Vector3();
      let groupCount = 0;
      const slope = (radiusBottom - radiusTop) / height;
      for (let y = 0; y <= heightSegments; y++) {
        const indexRow = [];
        const v = y / heightSegments;
        const radius = v * (radiusBottom - radiusTop) + radiusTop;
        for (let x = 0; x <= radialSegments; x++) {
          const u = x / radialSegments;
          const theta = u * thetaLength + thetaStart;
          const sinTheta = Math.sin(theta);
          const cosTheta = Math.cos(theta);
          vertex.x = radius * sinTheta;
          vertex.y = -v * height + halfHeight;
          vertex.z = radius * cosTheta;
          vertices.push(vertex.x, vertex.y, vertex.z);
          normal.set(sinTheta, slope, cosTheta).normalize();
          normals.push(normal.x, normal.y, normal.z);
          uvs.push(u, 1 - v);
          indexRow.push(index++);
        }
        indexArray.push(indexRow);
      }
      for (let x = 0; x < radialSegments; x++) {
        for (let y = 0; y < heightSegments; y++) {
          const a = indexArray[y][x];
          const b = indexArray[y + 1][x];
          const c = indexArray[y + 1][x + 1];
          const d = indexArray[y][x + 1];
          indices.push(a, b, d);
          indices.push(b, c, d);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, 0);
      groupStart += groupCount;
    }
    function generateCap(top) {
      const centerIndexStart = index;
      const uv = new Vector2();
      const vertex = new Vector3();
      let groupCount = 0;
      const radius = top === true ? radiusTop : radiusBottom;
      const sign2 = top === true ? 1 : -1;
      for (let x = 1; x <= radialSegments; x++) {
        vertices.push(0, halfHeight * sign2, 0);
        normals.push(0, sign2, 0);
        uvs.push(0.5, 0.5);
        index++;
      }
      const centerIndexEnd = index;
      for (let x = 0; x <= radialSegments; x++) {
        const u = x / radialSegments;
        const theta = u * thetaLength + thetaStart;
        const cosTheta = Math.cos(theta);
        const sinTheta = Math.sin(theta);
        vertex.x = radius * sinTheta;
        vertex.y = halfHeight * sign2;
        vertex.z = radius * cosTheta;
        vertices.push(vertex.x, vertex.y, vertex.z);
        normals.push(0, sign2, 0);
        uv.x = cosTheta * 0.5 + 0.5;
        uv.y = sinTheta * 0.5 * sign2 + 0.5;
        uvs.push(uv.x, uv.y);
        index++;
      }
      for (let x = 0; x < radialSegments; x++) {
        const c = centerIndexStart + x;
        const i = centerIndexEnd + x;
        if (top === true) {
          indices.push(i, i + 1, c);
        } else {
          indices.push(i + 1, i, c);
        }
        groupCount += 3;
      }
      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
      groupStart += groupCount;
    }
  }
};
var CylinderGeometry = class extends Geometry {
  constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
    super();
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));
    this.mergeVertices();
  }
};
var ConeGeometry = class extends CylinderGeometry {
  constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    this.type = "ConeGeometry";
    this.parameters = {
      radius,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
  }
};
var ConeBufferGeometry = class extends CylinderBufferGeometry {
  constructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    this.type = "ConeBufferGeometry";
    this.parameters = {
      radius,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
  }
};
var PolyhedronBufferGeometry = class extends BufferGeometry {
  constructor(vertices, indices, radius = 1, detail = 0) {
    super();
    this.type = "PolyhedronBufferGeometry";
    this.parameters = {
      vertices,
      indices,
      radius,
      detail
    };
    const vertexBuffer = [];
    const uvBuffer = [];
    subdivide(detail);
    applyRadius(radius);
    generateUVs();
    this.setAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
    this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
    if (detail === 0) {
      this.computeVertexNormals();
    } else {
      this.normalizeNormals();
    }
    function subdivide(detail2) {
      const a = new Vector3();
      const b = new Vector3();
      const c = new Vector3();
      for (let i = 0; i < indices.length; i += 3) {
        getVertexByIndex(indices[i + 0], a);
        getVertexByIndex(indices[i + 1], b);
        getVertexByIndex(indices[i + 2], c);
        subdivideFace(a, b, c, detail2);
      }
    }
    function subdivideFace(a, b, c, detail2) {
      const cols = detail2 + 1;
      const v = [];
      for (let i = 0; i <= cols; i++) {
        v[i] = [];
        const aj = a.clone().lerp(c, i / cols);
        const bj = b.clone().lerp(c, i / cols);
        const rows = cols - i;
        for (let j = 0; j <= rows; j++) {
          if (j === 0 && i === cols) {
            v[i][j] = aj;
          } else {
            v[i][j] = aj.clone().lerp(bj, j / rows);
          }
        }
      }
      for (let i = 0; i < cols; i++) {
        for (let j = 0; j < 2 * (cols - i) - 1; j++) {
          const k = Math.floor(j / 2);
          if (j % 2 === 0) {
            pushVertex(v[i][k + 1]);
            pushVertex(v[i + 1][k]);
            pushVertex(v[i][k]);
          } else {
            pushVertex(v[i][k + 1]);
            pushVertex(v[i + 1][k + 1]);
            pushVertex(v[i + 1][k]);
          }
        }
      }
    }
    function applyRadius(radius2) {
      const vertex = new Vector3();
      for (let i = 0; i < vertexBuffer.length; i += 3) {
        vertex.x = vertexBuffer[i + 0];
        vertex.y = vertexBuffer[i + 1];
        vertex.z = vertexBuffer[i + 2];
        vertex.normalize().multiplyScalar(radius2);
        vertexBuffer[i + 0] = vertex.x;
        vertexBuffer[i + 1] = vertex.y;
        vertexBuffer[i + 2] = vertex.z;
      }
    }
    function generateUVs() {
      const vertex = new Vector3();
      for (let i = 0; i < vertexBuffer.length; i += 3) {
        vertex.x = vertexBuffer[i + 0];
        vertex.y = vertexBuffer[i + 1];
        vertex.z = vertexBuffer[i + 2];
        const u = azimuth(vertex) / 2 / Math.PI + 0.5;
        const v = inclination(vertex) / Math.PI + 0.5;
        uvBuffer.push(u, 1 - v);
      }
      correctUVs();
      correctSeam();
    }
    function correctSeam() {
      for (let i = 0; i < uvBuffer.length; i += 6) {
        const x0 = uvBuffer[i + 0];
        const x1 = uvBuffer[i + 2];
        const x2 = uvBuffer[i + 4];
        const max = Math.max(x0, x1, x2);
        const min = Math.min(x0, x1, x2);
        if (max > 0.9 && min < 0.1) {
          if (x0 < 0.2)
            uvBuffer[i + 0] += 1;
          if (x1 < 0.2)
            uvBuffer[i + 2] += 1;
          if (x2 < 0.2)
            uvBuffer[i + 4] += 1;
        }
      }
    }
    function pushVertex(vertex) {
      vertexBuffer.push(vertex.x, vertex.y, vertex.z);
    }
    function getVertexByIndex(index, vertex) {
      const stride = index * 3;
      vertex.x = vertices[stride + 0];
      vertex.y = vertices[stride + 1];
      vertex.z = vertices[stride + 2];
    }
    function correctUVs() {
      const a = new Vector3();
      const b = new Vector3();
      const c = new Vector3();
      const centroid = new Vector3();
      const uvA = new Vector2();
      const uvB = new Vector2();
      const uvC = new Vector2();
      for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
        a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
        b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
        c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
        uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
        uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
        uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
        centroid.copy(a).add(b).add(c).divideScalar(3);
        const azi = azimuth(centroid);
        correctUV(uvA, j + 0, a, azi);
        correctUV(uvB, j + 2, b, azi);
        correctUV(uvC, j + 4, c, azi);
      }
    }
    function correctUV(uv, stride, vector, azimuth2) {
      if (azimuth2 < 0 && uv.x === 1) {
        uvBuffer[stride] = uv.x - 1;
      }
      if (vector.x === 0 && vector.z === 0) {
        uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
      }
    }
    function azimuth(vector) {
      return Math.atan2(vector.z, -vector.x);
    }
    function inclination(vector) {
      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
    }
  }
};
var DodecahedronBufferGeometry = class extends PolyhedronBufferGeometry {
  constructor(radius = 1, detail = 0) {
    const t = (1 + Math.sqrt(5)) / 2;
    const r = 1 / t;
    const vertices = [
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      0,
      -r,
      -t,
      0,
      -r,
      t,
      0,
      r,
      -t,
      0,
      r,
      t,
      -r,
      -t,
      0,
      -r,
      t,
      0,
      r,
      -t,
      0,
      r,
      t,
      0,
      -t,
      0,
      -r,
      t,
      0,
      -r,
      -t,
      0,
      r,
      t,
      0,
      r
    ];
    const indices = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(vertices, indices, radius, detail);
    this.type = "DodecahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
};
var DodecahedronGeometry = class extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "DodecahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
};
var _v0$2 = new Vector3();
var _v1$5 = new Vector3();
var _normal$1 = new Vector3();
var _triangle = new Triangle();
var EdgesGeometry = class extends BufferGeometry {
  constructor(geometry, thresholdAngle) {
    super();
    this.type = "EdgesGeometry";
    this.parameters = {
      thresholdAngle
    };
    thresholdAngle = thresholdAngle !== void 0 ? thresholdAngle : 1;
    if (geometry.isGeometry) {
      geometry = new BufferGeometry().fromGeometry(geometry);
    }
    const precisionPoints = 4;
    const precision = Math.pow(10, precisionPoints);
    const thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);
    const indexAttr = geometry.getIndex();
    const positionAttr = geometry.getAttribute("position");
    const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
    const indexArr = [0, 0, 0];
    const vertKeys = ["a", "b", "c"];
    const hashes = new Array(3);
    const edgeData = {};
    const vertices = [];
    for (let i = 0; i < indexCount; i += 3) {
      if (indexAttr) {
        indexArr[0] = indexAttr.getX(i);
        indexArr[1] = indexAttr.getX(i + 1);
        indexArr[2] = indexAttr.getX(i + 2);
      } else {
        indexArr[0] = i;
        indexArr[1] = i + 1;
        indexArr[2] = i + 2;
      }
      const { a, b, c } = _triangle;
      a.fromBufferAttribute(positionAttr, indexArr[0]);
      b.fromBufferAttribute(positionAttr, indexArr[1]);
      c.fromBufferAttribute(positionAttr, indexArr[2]);
      _triangle.getNormal(_normal$1);
      hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
      hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
      hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
      if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
        continue;
      }
      for (let j = 0; j < 3; j++) {
        const jNext = (j + 1) % 3;
        const vecHash0 = hashes[j];
        const vecHash1 = hashes[jNext];
        const v0 = _triangle[vertKeys[j]];
        const v1 = _triangle[vertKeys[jNext]];
        const hash = `${vecHash0}_${vecHash1}`;
        const reverseHash = `${vecHash1}_${vecHash0}`;
        if (reverseHash in edgeData && edgeData[reverseHash]) {
          if (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {
            vertices.push(v0.x, v0.y, v0.z);
            vertices.push(v1.x, v1.y, v1.z);
          }
          edgeData[reverseHash] = null;
        } else if (!(hash in edgeData)) {
          edgeData[hash] = {
            index0: indexArr[j],
            index1: indexArr[jNext],
            normal: _normal$1.clone()
          };
        }
      }
    }
    for (const key in edgeData) {
      if (edgeData[key]) {
        const { index0, index1 } = edgeData[key];
        _v0$2.fromBufferAttribute(positionAttr, index0);
        _v1$5.fromBufferAttribute(positionAttr, index1);
        vertices.push(_v0$2.x, _v0$2.y, _v0$2.z);
        vertices.push(_v1$5.x, _v1$5.y, _v1$5.z);
      }
    }
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
  }
};
var Earcut = {
  triangulate: function(data, holeIndices, dim) {
    dim = dim || 2;
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    let outerNode = linkedList(data, 0, outerLen, dim, true);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev)
      return triangles;
    let minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles)
      outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];
      for (let i = dim; i < outerLen; i += dim) {
        x = data[i];
        y = data[i + 1];
        if (x < minX)
          minX = x;
        if (y < minY)
          minY = y;
        if (x > maxX)
          maxX = x;
        if (y > maxY)
          maxY = y;
      }
      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 1 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
    return triangles;
  }
};
function linkedList(data, start, end, dim, clockwise) {
  let i, last;
  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (i = start; i < end; i += dim)
      last = insertNode(i, data[i], data[i + 1], last);
  } else {
    for (i = end - dim; i >= start; i -= dim)
      last = insertNode(i, data[i], data[i + 1], last);
  }
  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }
  return last;
}
function filterPoints(start, end) {
  if (!start)
    return start;
  if (!end)
    end = start;
  let p = start, again;
  do {
    again = false;
    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
      removeNode(p);
      p = end = p.prev;
      if (p === p.next)
        break;
      again = true;
    } else {
      p = p.next;
    }
  } while (again || p !== end);
  return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear)
    return;
  if (!pass && invSize)
    indexCurve(ear, minX, minY, invSize);
  let stop = ear, prev, next;
  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;
    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      triangles.push(prev.i / dim);
      triangles.push(ear.i / dim);
      triangles.push(next.i / dim);
      removeNode(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar(ear) {
  const a = ear.prev, b = ear, c = ear.next;
  if (area(a, b, c) >= 0)
    return false;
  let p = ear.next.next;
  while (p !== ear.prev) {
    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
      return false;
    p = p.next;
  }
  return true;
}
function isEarHashed(ear, minX, minY, invSize) {
  const a = ear.prev, b = ear, c = ear.next;
  if (area(a, b, c) >= 0)
    return false;
  const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
  const minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
  let p = ear.prevZ, n = ear.nextZ;
  while (p && p.z >= minZ && n && n.z <= maxZ) {
    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
      return false;
    p = p.prevZ;
    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
      return false;
    n = n.nextZ;
  }
  while (p && p.z >= minZ) {
    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)
      return false;
    p = p.prevZ;
  }
  while (n && n.z <= maxZ) {
    if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)
      return false;
    n = n.nextZ;
  }
  return true;
}
function cureLocalIntersections(start, triangles, dim) {
  let p = start;
  do {
    const a = p.prev, b = p.next.next;
    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
      triangles.push(a.i / dim);
      triangles.push(p.i / dim);
      triangles.push(b.i / dim);
      removeNode(p);
      removeNode(p.next);
      p = start = b;
    }
    p = p.next;
  } while (p !== start);
  return filterPoints(p);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  let a = start;
  do {
    let b = a.next.next;
    while (b !== a.prev) {
      if (a.i !== b.i && isValidDiagonal(a, b)) {
        let c = splitPolygon(a, b);
        a = filterPoints(a, a.next);
        c = filterPoints(c, c.next);
        earcutLinked(a, triangles, dim, minX, minY, invSize);
        earcutLinked(c, triangles, dim, minX, minY, invSize);
        return;
      }
      b = b.next;
    }
    a = a.next;
  } while (a !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
  const queue = [];
  let i, len, start, end, list;
  for (i = 0, len = holeIndices.length; i < len; i++) {
    start = holeIndices[i] * dim;
    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
    list = linkedList(data, start, end, dim, false);
    if (list === list.next)
      list.steiner = true;
    queue.push(getLeftmost(list));
  }
  queue.sort(compareX);
  for (i = 0; i < queue.length; i++) {
    eliminateHole(queue[i], outerNode);
    outerNode = filterPoints(outerNode, outerNode.next);
  }
  return outerNode;
}
function compareX(a, b) {
  return a.x - b.x;
}
function eliminateHole(hole, outerNode) {
  outerNode = findHoleBridge(hole, outerNode);
  if (outerNode) {
    const b = splitPolygon(outerNode, hole);
    filterPoints(outerNode, outerNode.next);
    filterPoints(b, b.next);
  }
}
function findHoleBridge(hole, outerNode) {
  let p = outerNode;
  const hx = hole.x;
  const hy = hole.y;
  let qx = -Infinity, m;
  do {
    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
      if (x <= hx && x > qx) {
        qx = x;
        if (x === hx) {
          if (hy === p.y)
            return p;
          if (hy === p.next.y)
            return p.next;
        }
        m = p.x < p.next.x ? p : p.next;
      }
    }
    p = p.next;
  } while (p !== outerNode);
  if (!m)
    return null;
  if (hx === qx)
    return m;
  const stop = m, mx = m.x, my = m.y;
  let tanMin = Infinity, tan;
  p = m;
  do {
    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
      tan = Math.abs(hy - p.y) / (hx - p.x);
      if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
        m = p;
        tanMin = tan;
      }
    }
    p = p.next;
  } while (p !== stop);
  return m;
}
function sectorContainsSector(m, p) {
  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
  let p = start;
  do {
    if (p.z === null)
      p.z = zOrder(p.x, p.y, minX, minY, invSize);
    p.prevZ = p.prev;
    p.nextZ = p.next;
    p = p.next;
  } while (p !== start);
  p.prevZ.nextZ = null;
  p.prevZ = null;
  sortLinked(p);
}
function sortLinked(list) {
  let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
  do {
    p = list;
    list = null;
    tail = null;
    numMerges = 0;
    while (p) {
      numMerges++;
      q = p;
      pSize = 0;
      for (i = 0; i < inSize; i++) {
        pSize++;
        q = q.nextZ;
        if (!q)
          break;
      }
      qSize = inSize;
      while (pSize > 0 || qSize > 0 && q) {
        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
          e = p;
          p = p.nextZ;
          pSize--;
        } else {
          e = q;
          q = q.nextZ;
          qSize--;
        }
        if (tail)
          tail.nextZ = e;
        else
          list = e;
        e.prevZ = tail;
        tail = e;
      }
      p = q;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder(x, y, minX, minY, invSize) {
  x = 32767 * (x - minX) * invSize;
  y = 32767 * (y - minY) * invSize;
  x = (x | x << 8) & 16711935;
  x = (x | x << 4) & 252645135;
  x = (x | x << 2) & 858993459;
  x = (x | x << 1) & 1431655765;
  y = (y | y << 8) & 16711935;
  y = (y | y << 4) & 252645135;
  y = (y | y << 2) & 858993459;
  y = (y | y << 1) & 1431655765;
  return x | y << 1;
}
function getLeftmost(start) {
  let p = start, leftmost = start;
  do {
    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
      leftmost = p;
    p = p.next;
  } while (p !== start);
  return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
  return (cx - px2) * (ay - py2) - (ax - px2) * (cy - py2) >= 0 && (ax - px2) * (by - py2) - (bx - px2) * (ay - py2) >= 0 && (bx - px2) * (cy - py2) - (cx - px2) * (by - py2) >= 0;
}
function isValidDiagonal(a, b) {
  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p, q, r) {
  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
  const o1 = sign(area(p1, q1, p2));
  const o2 = sign(area(p1, q1, q2));
  const o3 = sign(area(p2, q2, p1));
  const o4 = sign(area(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4)
    return true;
  if (o1 === 0 && onSegment(p1, p2, q1))
    return true;
  if (o2 === 0 && onSegment(p1, q2, q1))
    return true;
  if (o3 === 0 && onSegment(p2, p1, q2))
    return true;
  if (o4 === 0 && onSegment(p2, q1, q2))
    return true;
  return false;
}
function onSegment(p, q, r) {
  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a, b) {
  let p = a;
  do {
    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
      return true;
    p = p.next;
  } while (p !== a);
  return false;
}
function locallyInside(a, b) {
  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
function middleInside(a, b) {
  let p = a, inside = false;
  const px2 = (a.x + b.x) / 2, py2 = (a.y + b.y) / 2;
  do {
    if (p.y > py2 !== p.next.y > py2 && p.next.y !== p.y && px2 < (p.next.x - p.x) * (py2 - p.y) / (p.next.y - p.y) + p.x)
      inside = !inside;
    p = p.next;
  } while (p !== a);
  return inside;
}
function splitPolygon(a, b) {
  const a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
  a.next = b;
  b.prev = a;
  a2.next = an;
  an.prev = a2;
  b2.next = a2;
  a2.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
}
function insertNode(i, x, y, last) {
  const p = new Node(i, x, y);
  if (!last) {
    p.prev = p;
    p.next = p;
  } else {
    p.next = last.next;
    p.prev = last;
    last.next.prev = p;
    last.next = p;
  }
  return p;
}
function removeNode(p) {
  p.next.prev = p.prev;
  p.prev.next = p.next;
  if (p.prevZ)
    p.prevZ.nextZ = p.nextZ;
  if (p.nextZ)
    p.nextZ.prevZ = p.prevZ;
}
function Node(i, x, y) {
  this.i = i;
  this.x = x;
  this.y = y;
  this.prev = null;
  this.next = null;
  this.z = null;
  this.prevZ = null;
  this.nextZ = null;
  this.steiner = false;
}
function signedArea(data, start, end, dim) {
  let sum = 0;
  for (let i = start, j = end - dim; i < end; i += dim) {
    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
    j = i;
  }
  return sum;
}
var ShapeUtils = {
  area: function(contour) {
    const n = contour.length;
    let a = 0;
    for (let p = n - 1, q = 0; q < n; p = q++) {
      a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
    }
    return a * 0.5;
  },
  isClockWise: function(pts) {
    return ShapeUtils.area(pts) < 0;
  },
  triangulateShape: function(contour, holes) {
    const vertices = [];
    const holeIndices = [];
    const faces = [];
    removeDupEndPts(contour);
    addContour(vertices, contour);
    let holeIndex = contour.length;
    holes.forEach(removeDupEndPts);
    for (let i = 0; i < holes.length; i++) {
      holeIndices.push(holeIndex);
      holeIndex += holes[i].length;
      addContour(vertices, holes[i]);
    }
    const triangles = Earcut.triangulate(vertices, holeIndices);
    for (let i = 0; i < triangles.length; i += 3) {
      faces.push(triangles.slice(i, i + 3));
    }
    return faces;
  }
};
function removeDupEndPts(points) {
  const l = points.length;
  if (l > 2 && points[l - 1].equals(points[0])) {
    points.pop();
  }
}
function addContour(vertices, contour) {
  for (let i = 0; i < contour.length; i++) {
    vertices.push(contour[i].x);
    vertices.push(contour[i].y);
  }
}
var ExtrudeBufferGeometry = class extends BufferGeometry {
  constructor(shapes, options) {
    super();
    this.type = "ExtrudeBufferGeometry";
    this.parameters = {
      shapes,
      options
    };
    shapes = Array.isArray(shapes) ? shapes : [shapes];
    const scope = this;
    const verticesArray = [];
    const uvArray = [];
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      addShape(shape);
    }
    this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
    this.computeVertexNormals();
    function addShape(shape) {
      const placeholder = [];
      const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
      const steps = options.steps !== void 0 ? options.steps : 1;
      let depth = options.depth !== void 0 ? options.depth : 100;
      let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
      let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 6;
      let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 2;
      let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
      let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
      const extrudePath = options.extrudePath;
      const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
      if (options.amount !== void 0) {
        console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
        depth = options.amount;
      }
      let extrudePts, extrudeByPath = false;
      let splineTube, binormal, normal, position2;
      if (extrudePath) {
        extrudePts = extrudePath.getSpacedPoints(steps);
        extrudeByPath = true;
        bevelEnabled = false;
        splineTube = extrudePath.computeFrenetFrames(steps, false);
        binormal = new Vector3();
        normal = new Vector3();
        position2 = new Vector3();
      }
      if (!bevelEnabled) {
        bevelSegments = 0;
        bevelThickness = 0;
        bevelSize = 0;
        bevelOffset = 0;
      }
      const shapePoints = shape.extractPoints(curveSegments);
      let vertices = shapePoints.shape;
      const holes = shapePoints.holes;
      const reverse = !ShapeUtils.isClockWise(vertices);
      if (reverse) {
        vertices = vertices.reverse();
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          if (ShapeUtils.isClockWise(ahole)) {
            holes[h] = ahole.reverse();
          }
        }
      }
      const faces = ShapeUtils.triangulateShape(vertices, holes);
      const contour = vertices;
      for (let h = 0, hl = holes.length; h < hl; h++) {
        const ahole = holes[h];
        vertices = vertices.concat(ahole);
      }
      function scalePt2(pt, vec, size) {
        if (!vec)
          console.error("THREE.ExtrudeGeometry: vec does not exist");
        return vec.clone().multiplyScalar(size).add(pt);
      }
      const vlen = vertices.length, flen = faces.length;
      function getBevelVec(inPt, inPrev, inNext) {
        let v_trans_x, v_trans_y, shrink_by;
        const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
        const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
        const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
        const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
        if (Math.abs(collinear0) > Number.EPSILON) {
          const v_prev_len = Math.sqrt(v_prev_lensq);
          const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
          const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
          const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
          const ptNextShift_x = inNext.x - v_next_y / v_next_len;
          const ptNextShift_y = inNext.y + v_next_x / v_next_len;
          const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
          const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
          if (v_trans_lensq <= 2) {
            return new Vector2(v_trans_x, v_trans_y);
          } else {
            shrink_by = Math.sqrt(v_trans_lensq / 2);
          }
        } else {
          let direction_eq = false;
          if (v_prev_x > Number.EPSILON) {
            if (v_next_x > Number.EPSILON) {
              direction_eq = true;
            }
          } else {
            if (v_prev_x < -Number.EPSILON) {
              if (v_next_x < -Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                direction_eq = true;
              }
            }
          }
          if (direction_eq) {
            v_trans_x = -v_prev_y;
            v_trans_y = v_prev_x;
            shrink_by = Math.sqrt(v_prev_lensq);
          } else {
            v_trans_x = v_prev_x;
            v_trans_y = v_prev_y;
            shrink_by = Math.sqrt(v_prev_lensq / 2);
          }
        }
        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
      }
      const contourMovements = [];
      for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
        if (j === il)
          j = 0;
        if (k === il)
          k = 0;
        contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
      }
      const holesMovements = [];
      let oneHoleMovements, verticesMovements = contourMovements.concat();
      for (let h = 0, hl = holes.length; h < hl; h++) {
        const ahole = holes[h];
        oneHoleMovements = [];
        for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
          if (j === il)
            j = 0;
          if (k === il)
            k = 0;
          oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
        }
        holesMovements.push(oneHoleMovements);
        verticesMovements = verticesMovements.concat(oneHoleMovements);
      }
      for (let b = 0; b < bevelSegments; b++) {
        const t = b / bevelSegments;
        const z = bevelThickness * Math.cos(t * Math.PI / 2);
        const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
        for (let i = 0, il = contour.length; i < il; i++) {
          const vert = scalePt2(contour[i], contourMovements[i], bs2);
          v(vert.x, vert.y, -z);
        }
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          oneHoleMovements = holesMovements[h];
          for (let i = 0, il = ahole.length; i < il; i++) {
            const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
            v(vert.x, vert.y, -z);
          }
        }
      }
      const bs = bevelSize + bevelOffset;
      for (let i = 0; i < vlen; i++) {
        const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
        if (!extrudeByPath) {
          v(vert.x, vert.y, 0);
        } else {
          normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
          position2.copy(extrudePts[0]).add(normal).add(binormal);
          v(position2.x, position2.y, position2.z);
        }
      }
      for (let s = 1; s <= steps; s++) {
        for (let i = 0; i < vlen; i++) {
          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];
          if (!extrudeByPath) {
            v(vert.x, vert.y, depth / steps * s);
          } else {
            normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
            position2.copy(extrudePts[s]).add(normal).add(binormal);
            v(position2.x, position2.y, position2.z);
          }
        }
      }
      for (let b = bevelSegments - 1; b >= 0; b--) {
        const t = b / bevelSegments;
        const z = bevelThickness * Math.cos(t * Math.PI / 2);
        const bs2 = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
        for (let i = 0, il = contour.length; i < il; i++) {
          const vert = scalePt2(contour[i], contourMovements[i], bs2);
          v(vert.x, vert.y, depth + z);
        }
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          oneHoleMovements = holesMovements[h];
          for (let i = 0, il = ahole.length; i < il; i++) {
            const vert = scalePt2(ahole[i], oneHoleMovements[i], bs2);
            if (!extrudeByPath) {
              v(vert.x, vert.y, depth + z);
            } else {
              v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
            }
          }
        }
      }
      buildLidFaces();
      buildSideFaces();
      function buildLidFaces() {
        const start = verticesArray.length / 3;
        if (bevelEnabled) {
          let layer = 0;
          let offset = vlen * layer;
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[2] + offset, face[1] + offset, face[0] + offset);
          }
          layer = steps + bevelSegments * 2;
          offset = vlen * layer;
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[0] + offset, face[1] + offset, face[2] + offset);
          }
        } else {
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[2], face[1], face[0]);
          }
          for (let i = 0; i < flen; i++) {
            const face = faces[i];
            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
          }
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 0);
      }
      function buildSideFaces() {
        const start = verticesArray.length / 3;
        let layeroffset = 0;
        sidewalls(contour, layeroffset);
        layeroffset += contour.length;
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          sidewalls(ahole, layeroffset);
          layeroffset += ahole.length;
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 1);
      }
      function sidewalls(contour2, layeroffset) {
        let i = contour2.length;
        while (--i >= 0) {
          const j = i;
          let k = i - 1;
          if (k < 0)
            k = contour2.length - 1;
          for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {
            const slen1 = vlen * s;
            const slen2 = vlen * (s + 1);
            const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
            f4(a, b, c, d);
          }
        }
      }
      function v(x, y, z) {
        placeholder.push(x);
        placeholder.push(y);
        placeholder.push(z);
      }
      function f3(a, b, c) {
        addVertex(a);
        addVertex(b);
        addVertex(c);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[2]);
      }
      function f4(a, b, c, d) {
        addVertex(a);
        addVertex(b);
        addVertex(d);
        addVertex(b);
        addVertex(c);
        addVertex(d);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[3]);
        addUV(uvs[1]);
        addUV(uvs[2]);
        addUV(uvs[3]);
      }
      function addVertex(index) {
        verticesArray.push(placeholder[index * 3 + 0]);
        verticesArray.push(placeholder[index * 3 + 1]);
        verticesArray.push(placeholder[index * 3 + 2]);
      }
      function addUV(vector2) {
        uvArray.push(vector2.x);
        uvArray.push(vector2.y);
      }
    }
  }
  toJSON() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    const shapes = this.parameters.shapes;
    const options = this.parameters.options;
    return toJSON(shapes, options, data);
  }
};
var WorldUVGenerator = {
  generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    return [
      new Vector2(a_x, a_y),
      new Vector2(b_x, b_y),
      new Vector2(c_x, c_y)
    ];
  },
  generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const a_z = vertices[indexA * 3 + 2];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const b_z = vertices[indexB * 3 + 2];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    const c_z = vertices[indexC * 3 + 2];
    const d_x = vertices[indexD * 3];
    const d_y = vertices[indexD * 3 + 1];
    const d_z = vertices[indexD * 3 + 2];
    if (Math.abs(a_y - b_y) < 0.01) {
      return [
        new Vector2(a_x, 1 - a_z),
        new Vector2(b_x, 1 - b_z),
        new Vector2(c_x, 1 - c_z),
        new Vector2(d_x, 1 - d_z)
      ];
    } else {
      return [
        new Vector2(a_y, 1 - a_z),
        new Vector2(b_y, 1 - b_z),
        new Vector2(c_y, 1 - c_z),
        new Vector2(d_y, 1 - d_z)
      ];
    }
  }
};
function toJSON(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  if (options.extrudePath !== void 0)
    data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
var ExtrudeGeometry = class extends Geometry {
  constructor(shapes, options) {
    super();
    this.type = "ExtrudeGeometry";
    this.parameters = {
      shapes,
      options
    };
    this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));
    this.mergeVertices();
  }
  toJSON() {
    const data = super.toJSON();
    const shapes = this.parameters.shapes;
    const options = this.parameters.options;
    return toJSON$1(shapes, options, data);
  }
};
function toJSON$1(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  if (options.extrudePath !== void 0)
    data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
var IcosahedronBufferGeometry = class extends PolyhedronBufferGeometry {
  constructor(radius = 1, detail = 0) {
    const t = (1 + Math.sqrt(5)) / 2;
    const vertices = [
      -1,
      t,
      0,
      1,
      t,
      0,
      -1,
      -t,
      0,
      1,
      -t,
      0,
      0,
      -1,
      t,
      0,
      1,
      t,
      0,
      -1,
      -t,
      0,
      1,
      -t,
      t,
      0,
      -1,
      t,
      0,
      1,
      -t,
      0,
      -1,
      -t,
      0,
      1
    ];
    const indices = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "IcosahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
};
var IcosahedronGeometry = class extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "IcosahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
};
var LatheBufferGeometry = class extends BufferGeometry {
  constructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
    super();
    this.type = "LatheBufferGeometry";
    this.parameters = {
      points,
      segments,
      phiStart,
      phiLength
    };
    segments = Math.floor(segments);
    phiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2);
    const indices = [];
    const vertices = [];
    const uvs = [];
    const inverseSegments = 1 / segments;
    const vertex = new Vector3();
    const uv = new Vector2();
    for (let i = 0; i <= segments; i++) {
      const phi = phiStart + i * inverseSegments * phiLength;
      const sin = Math.sin(phi);
      const cos = Math.cos(phi);
      for (let j = 0; j <= points.length - 1; j++) {
        vertex.x = points[j].x * sin;
        vertex.y = points[j].y;
        vertex.z = points[j].x * cos;
        vertices.push(vertex.x, vertex.y, vertex.z);
        uv.x = i / segments;
        uv.y = j / (points.length - 1);
        uvs.push(uv.x, uv.y);
      }
    }
    for (let i = 0; i < segments; i++) {
      for (let j = 0; j < points.length - 1; j++) {
        const base = j + i * points.length;
        const a = base;
        const b = base + points.length;
        const c = base + points.length + 1;
        const d = base + 1;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    this.computeVertexNormals();
    if (phiLength === Math.PI * 2) {
      const normals = this.attributes.normal.array;
      const n1 = new Vector3();
      const n2 = new Vector3();
      const n = new Vector3();
      const base = segments * points.length * 3;
      for (let i = 0, j = 0; i < points.length; i++, j += 3) {
        n1.x = normals[j + 0];
        n1.y = normals[j + 1];
        n1.z = normals[j + 2];
        n2.x = normals[base + j + 0];
        n2.y = normals[base + j + 1];
        n2.z = normals[base + j + 2];
        n.addVectors(n1, n2).normalize();
        normals[j + 0] = normals[base + j + 0] = n.x;
        normals[j + 1] = normals[base + j + 1] = n.y;
        normals[j + 2] = normals[base + j + 2] = n.z;
      }
    }
  }
};
var LatheGeometry = class extends Geometry {
  constructor(points, segments, phiStart, phiLength) {
    super();
    this.type = "LatheGeometry";
    this.parameters = {
      points,
      segments,
      phiStart,
      phiLength
    };
    this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));
    this.mergeVertices();
  }
};
var OctahedronBufferGeometry = class extends PolyhedronBufferGeometry {
  constructor(radius = 1, detail = 0) {
    const vertices = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ];
    const indices = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(vertices, indices, radius, detail);
    this.type = "OctahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
};
var OctahedronGeometry = class extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "OctahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
};
function ParametricBufferGeometry(func, slices, stacks) {
  BufferGeometry.call(this);
  this.type = "ParametricBufferGeometry";
  this.parameters = {
    func,
    slices,
    stacks
  };
  const indices = [];
  const vertices = [];
  const normals = [];
  const uvs = [];
  const EPS = 1e-5;
  const normal = new Vector3();
  const p0 = new Vector3(), p1 = new Vector3();
  const pu = new Vector3(), pv = new Vector3();
  if (func.length < 3) {
    console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
  }
  const sliceCount = slices + 1;
  for (let i = 0; i <= stacks; i++) {
    const v = i / stacks;
    for (let j = 0; j <= slices; j++) {
      const u = j / slices;
      func(u, v, p0);
      vertices.push(p0.x, p0.y, p0.z);
      if (u - EPS >= 0) {
        func(u - EPS, v, p1);
        pu.subVectors(p0, p1);
      } else {
        func(u + EPS, v, p1);
        pu.subVectors(p1, p0);
      }
      if (v - EPS >= 0) {
        func(u, v - EPS, p1);
        pv.subVectors(p0, p1);
      } else {
        func(u, v + EPS, p1);
        pv.subVectors(p1, p0);
      }
      normal.crossVectors(pu, pv).normalize();
      normals.push(normal.x, normal.y, normal.z);
      uvs.push(u, v);
    }
  }
  for (let i = 0; i < stacks; i++) {
    for (let j = 0; j < slices; j++) {
      const a = i * sliceCount + j;
      const b = i * sliceCount + j + 1;
      const c = (i + 1) * sliceCount + j + 1;
      const d = (i + 1) * sliceCount + j;
      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  }
  this.setIndex(indices);
  this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
  this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
  this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
}
ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
function ParametricGeometry(func, slices, stacks) {
  Geometry.call(this);
  this.type = "ParametricGeometry";
  this.parameters = {
    func,
    slices,
    stacks
  };
  this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));
  this.mergeVertices();
}
ParametricGeometry.prototype = Object.create(Geometry.prototype);
ParametricGeometry.prototype.constructor = ParametricGeometry;
var PlaneGeometry = class extends Geometry {
  constructor(width, height, widthSegments, heightSegments) {
    super();
    this.type = "PlaneGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));
    this.mergeVertices();
  }
};
var PolyhedronGeometry = class extends Geometry {
  constructor(vertices, indices, radius, detail) {
    super();
    this.type = "PolyhedronGeometry";
    this.parameters = {
      vertices,
      indices,
      radius,
      detail
    };
    this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));
    this.mergeVertices();
  }
};
var RingBufferGeometry = class extends BufferGeometry {
  constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "RingBufferGeometry";
    this.parameters = {
      innerRadius,
      outerRadius,
      thetaSegments,
      phiSegments,
      thetaStart,
      thetaLength
    };
    thetaSegments = Math.max(3, thetaSegments);
    phiSegments = Math.max(1, phiSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let radius = innerRadius;
    const radiusStep = (outerRadius - innerRadius) / phiSegments;
    const vertex = new Vector3();
    const uv = new Vector2();
    for (let j = 0; j <= phiSegments; j++) {
      for (let i = 0; i <= thetaSegments; i++) {
        const segment = thetaStart + i / thetaSegments * thetaLength;
        vertex.x = radius * Math.cos(segment);
        vertex.y = radius * Math.sin(segment);
        vertices.push(vertex.x, vertex.y, vertex.z);
        normals.push(0, 0, 1);
        uv.x = (vertex.x / outerRadius + 1) / 2;
        uv.y = (vertex.y / outerRadius + 1) / 2;
        uvs.push(uv.x, uv.y);
      }
      radius += radiusStep;
    }
    for (let j = 0; j < phiSegments; j++) {
      const thetaSegmentLevel = j * (thetaSegments + 1);
      for (let i = 0; i < thetaSegments; i++) {
        const segment = i + thetaSegmentLevel;
        const a = segment;
        const b = segment + thetaSegments + 1;
        const c = segment + thetaSegments + 2;
        const d = segment + 1;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
};
var RingGeometry = class extends Geometry {
  constructor(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
    super();
    this.type = "RingGeometry";
    this.parameters = {
      innerRadius,
      outerRadius,
      thetaSegments,
      phiSegments,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));
    this.mergeVertices();
  }
};
var ShapeBufferGeometry = class extends BufferGeometry {
  constructor(shapes, curveSegments = 12) {
    super();
    this.type = "ShapeBufferGeometry";
    this.parameters = {
      shapes,
      curveSegments
    };
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let groupStart = 0;
    let groupCount = 0;
    if (Array.isArray(shapes) === false) {
      addShape(shapes);
    } else {
      for (let i = 0; i < shapes.length; i++) {
        addShape(shapes[i]);
        this.addGroup(groupStart, groupCount, i);
        groupStart += groupCount;
        groupCount = 0;
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function addShape(shape) {
      const indexOffset = vertices.length / 3;
      const points = shape.extractPoints(curveSegments);
      let shapeVertices = points.shape;
      const shapeHoles = points.holes;
      if (ShapeUtils.isClockWise(shapeVertices) === false) {
        shapeVertices = shapeVertices.reverse();
      }
      for (let i = 0, l = shapeHoles.length; i < l; i++) {
        const shapeHole = shapeHoles[i];
        if (ShapeUtils.isClockWise(shapeHole) === true) {
          shapeHoles[i] = shapeHole.reverse();
        }
      }
      const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
      for (let i = 0, l = shapeHoles.length; i < l; i++) {
        const shapeHole = shapeHoles[i];
        shapeVertices = shapeVertices.concat(shapeHole);
      }
      for (let i = 0, l = shapeVertices.length; i < l; i++) {
        const vertex = shapeVertices[i];
        vertices.push(vertex.x, vertex.y, 0);
        normals.push(0, 0, 1);
        uvs.push(vertex.x, vertex.y);
      }
      for (let i = 0, l = faces.length; i < l; i++) {
        const face = faces[i];
        const a = face[0] + indexOffset;
        const b = face[1] + indexOffset;
        const c = face[2] + indexOffset;
        indices.push(a, b, c);
        groupCount += 3;
      }
    }
  }
  toJSON() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    const shapes = this.parameters.shapes;
    return toJSON$2(shapes, data);
  }
};
function toJSON$2(shapes, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  return data;
}
var ShapeGeometry = class extends Geometry {
  constructor(shapes, curveSegments) {
    super();
    this.type = "ShapeGeometry";
    if (typeof curveSegments === "object") {
      console.warn("THREE.ShapeGeometry: Options parameter has been removed.");
      curveSegments = curveSegments.curveSegments;
    }
    this.parameters = {
      shapes,
      curveSegments
    };
    this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));
    this.mergeVertices();
  }
  toJSON() {
    const data = Geometry.prototype.toJSON.call(this);
    const shapes = this.parameters.shapes;
    return toJSON$3(shapes, data);
  }
};
function toJSON$3(shapes, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i = 0, l = shapes.length; i < l; i++) {
      const shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  return data;
}
var SphereBufferGeometry = class extends BufferGeometry {
  constructor(radius = 1, widthSegments = 8, heightSegments = 6, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
    super();
    this.type = "SphereBufferGeometry";
    this.parameters = {
      radius,
      widthSegments,
      heightSegments,
      phiStart,
      phiLength,
      thetaStart,
      thetaLength
    };
    widthSegments = Math.max(3, Math.floor(widthSegments));
    heightSegments = Math.max(2, Math.floor(heightSegments));
    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
    let index = 0;
    const grid = [];
    const vertex = new Vector3();
    const normal = new Vector3();
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy <= heightSegments; iy++) {
      const verticesRow = [];
      const v = iy / heightSegments;
      let uOffset = 0;
      if (iy == 0 && thetaStart == 0) {
        uOffset = 0.5 / widthSegments;
      } else if (iy == heightSegments && thetaEnd == Math.PI) {
        uOffset = -0.5 / widthSegments;
      }
      for (let ix = 0; ix <= widthSegments; ix++) {
        const u = ix / widthSegments;
        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertices.push(vertex.x, vertex.y, vertex.z);
        normal.copy(vertex).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(u + uOffset, 1 - v);
        verticesRow.push(index++);
      }
      grid.push(verticesRow);
    }
    for (let iy = 0; iy < heightSegments; iy++) {
      for (let ix = 0; ix < widthSegments; ix++) {
        const a = grid[iy][ix + 1];
        const b = grid[iy][ix];
        const c = grid[iy + 1][ix];
        const d = grid[iy + 1][ix + 1];
        if (iy !== 0 || thetaStart > 0)
          indices.push(a, b, d);
        if (iy !== heightSegments - 1 || thetaEnd < Math.PI)
          indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
};
var SphereGeometry = class extends Geometry {
  constructor(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
    super();
    this.type = "SphereGeometry";
    this.parameters = {
      radius,
      widthSegments,
      heightSegments,
      phiStart,
      phiLength,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));
    this.mergeVertices();
  }
};
var TetrahedronBufferGeometry = class extends PolyhedronBufferGeometry {
  constructor(radius = 1, detail = 0) {
    const vertices = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ];
    const indices = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "TetrahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
};
var TetrahedronGeometry = class extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "TetrahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
};
var TextBufferGeometry = class extends ExtrudeBufferGeometry {
  constructor(text, parameters = {}) {
    const font = parameters.font;
    if (!(font && font.isFont)) {
      console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font.");
      return new BufferGeometry();
    }
    const shapes = font.generateShapes(text, parameters.size);
    parameters.depth = parameters.height !== void 0 ? parameters.height : 50;
    if (parameters.bevelThickness === void 0)
      parameters.bevelThickness = 10;
    if (parameters.bevelSize === void 0)
      parameters.bevelSize = 8;
    if (parameters.bevelEnabled === void 0)
      parameters.bevelEnabled = false;
    super(shapes, parameters);
    this.type = "TextBufferGeometry";
  }
};
var TextGeometry = class extends Geometry {
  constructor(text, parameters) {
    super();
    this.type = "TextGeometry";
    this.parameters = {
      text,
      parameters
    };
    this.fromBufferGeometry(new TextBufferGeometry(text, parameters));
    this.mergeVertices();
  }
};
var TorusBufferGeometry = class extends BufferGeometry {
  constructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) {
    super();
    this.type = "TorusBufferGeometry";
    this.parameters = {
      radius,
      tube,
      radialSegments,
      tubularSegments,
      arc
    };
    radialSegments = Math.floor(radialSegments);
    tubularSegments = Math.floor(tubularSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const center = new Vector3();
    const vertex = new Vector3();
    const normal = new Vector3();
    for (let j = 0; j <= radialSegments; j++) {
      for (let i = 0; i <= tubularSegments; i++) {
        const u = i / tubularSegments * arc;
        const v = j / radialSegments * Math.PI * 2;
        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
        vertex.z = tube * Math.sin(v);
        vertices.push(vertex.x, vertex.y, vertex.z);
        center.x = radius * Math.cos(u);
        center.y = radius * Math.sin(u);
        normal.subVectors(vertex, center).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(i / tubularSegments);
        uvs.push(j / radialSegments);
      }
    }
    for (let j = 1; j <= radialSegments; j++) {
      for (let i = 1; i <= tubularSegments; i++) {
        const a = (tubularSegments + 1) * j + i - 1;
        const b = (tubularSegments + 1) * (j - 1) + i - 1;
        const c = (tubularSegments + 1) * (j - 1) + i;
        const d = (tubularSegments + 1) * j + i;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
};
var TorusGeometry = class extends Geometry {
  constructor(radius, tube, radialSegments, tubularSegments, arc) {
    super();
    this.type = "TorusGeometry";
    this.parameters = {
      radius,
      tube,
      radialSegments,
      tubularSegments,
      arc
    };
    this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));
    this.mergeVertices();
  }
};
var TorusKnotBufferGeometry = class extends BufferGeometry {
  constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {
    super();
    this.type = "TorusKnotBufferGeometry";
    this.parameters = {
      radius,
      tube,
      tubularSegments,
      radialSegments,
      p,
      q
    };
    tubularSegments = Math.floor(tubularSegments);
    radialSegments = Math.floor(radialSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex = new Vector3();
    const normal = new Vector3();
    const P1 = new Vector3();
    const P2 = new Vector3();
    const B = new Vector3();
    const T = new Vector3();
    const N = new Vector3();
    for (let i = 0; i <= tubularSegments; ++i) {
      const u = i / tubularSegments * p * Math.PI * 2;
      calculatePositionOnCurve(u, p, q, radius, P1);
      calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
      T.subVectors(P2, P1);
      N.addVectors(P2, P1);
      B.crossVectors(T, N);
      N.crossVectors(B, T);
      B.normalize();
      N.normalize();
      for (let j = 0; j <= radialSegments; ++j) {
        const v = j / radialSegments * Math.PI * 2;
        const cx = -tube * Math.cos(v);
        const cy = tube * Math.sin(v);
        vertex.x = P1.x + (cx * N.x + cy * B.x);
        vertex.y = P1.y + (cx * N.y + cy * B.y);
        vertex.z = P1.z + (cx * N.z + cy * B.z);
        vertices.push(vertex.x, vertex.y, vertex.z);
        normal.subVectors(vertex, P1).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(i / tubularSegments);
        uvs.push(j / radialSegments);
      }
    }
    for (let j = 1; j <= tubularSegments; j++) {
      for (let i = 1; i <= radialSegments; i++) {
        const a = (radialSegments + 1) * (j - 1) + (i - 1);
        const b = (radialSegments + 1) * j + (i - 1);
        const c = (radialSegments + 1) * j + i;
        const d = (radialSegments + 1) * (j - 1) + i;
        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function calculatePositionOnCurve(u, p2, q2, radius2, position) {
      const cu = Math.cos(u);
      const su = Math.sin(u);
      const quOverP = q2 / p2 * u;
      const cs = Math.cos(quOverP);
      position.x = radius2 * (2 + cs) * 0.5 * cu;
      position.y = radius2 * (2 + cs) * su * 0.5;
      position.z = radius2 * Math.sin(quOverP) * 0.5;
    }
  }
};
var TorusKnotGeometry = class extends Geometry {
  constructor(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {
    super();
    this.type = "TorusKnotGeometry";
    this.parameters = {
      radius,
      tube,
      tubularSegments,
      radialSegments,
      p,
      q
    };
    if (heightScale !== void 0)
      console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));
    this.mergeVertices();
  }
};
var TubeBufferGeometry = class extends BufferGeometry {
  constructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
    super();
    this.type = "TubeBufferGeometry";
    this.parameters = {
      path,
      tubularSegments,
      radius,
      radialSegments,
      closed
    };
    const frames = path.computeFrenetFrames(tubularSegments, closed);
    this.tangents = frames.tangents;
    this.normals = frames.normals;
    this.binormals = frames.binormals;
    const vertex = new Vector3();
    const normal = new Vector3();
    const uv = new Vector2();
    let P = new Vector3();
    const vertices = [];
    const normals = [];
    const uvs = [];
    const indices = [];
    generateBufferData();
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateBufferData() {
      for (let i = 0; i < tubularSegments; i++) {
        generateSegment(i);
      }
      generateSegment(closed === false ? tubularSegments : 0);
      generateUVs();
      generateIndices();
    }
    function generateSegment(i) {
      P = path.getPointAt(i / tubularSegments, P);
      const N = frames.normals[i];
      const B = frames.binormals[i];
      for (let j = 0; j <= radialSegments; j++) {
        const v = j / radialSegments * Math.PI * 2;
        const sin = Math.sin(v);
        const cos = -Math.cos(v);
        normal.x = cos * N.x + sin * B.x;
        normal.y = cos * N.y + sin * B.y;
        normal.z = cos * N.z + sin * B.z;
        normal.normalize();
        normals.push(normal.x, normal.y, normal.z);
        vertex.x = P.x + radius * normal.x;
        vertex.y = P.y + radius * normal.y;
        vertex.z = P.z + radius * normal.z;
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
    }
    function generateIndices() {
      for (let j = 1; j <= tubularSegments; j++) {
        for (let i = 1; i <= radialSegments; i++) {
          const a = (radialSegments + 1) * (j - 1) + (i - 1);
          const b = (radialSegments + 1) * j + (i - 1);
          const c = (radialSegments + 1) * j + i;
          const d = (radialSegments + 1) * (j - 1) + i;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }
    }
    function generateUVs() {
      for (let i = 0; i <= tubularSegments; i++) {
        for (let j = 0; j <= radialSegments; j++) {
          uv.x = i / tubularSegments;
          uv.y = j / radialSegments;
          uvs.push(uv.x, uv.y);
        }
      }
    }
  }
  toJSON() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    data.path = this.parameters.path.toJSON();
    return data;
  }
};
var TubeGeometry = class extends Geometry {
  constructor(path, tubularSegments, radius, radialSegments, closed, taper) {
    super();
    this.type = "TubeGeometry";
    this.parameters = {
      path,
      tubularSegments,
      radius,
      radialSegments,
      closed
    };
    if (taper !== void 0)
      console.warn("THREE.TubeGeometry: taper has been removed.");
    const bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed);
    this.tangents = bufferGeometry.tangents;
    this.normals = bufferGeometry.normals;
    this.binormals = bufferGeometry.binormals;
    this.fromBufferGeometry(bufferGeometry);
    this.mergeVertices();
  }
};
var WireframeGeometry = class extends BufferGeometry {
  constructor(geometry) {
    super();
    this.type = "WireframeGeometry";
    const vertices = [];
    const edge = [0, 0], edges = {};
    const keys = ["a", "b", "c"];
    if (geometry && geometry.isGeometry) {
      const faces = geometry.faces;
      for (let i = 0, l = faces.length; i < l; i++) {
        const face = faces[i];
        for (let j = 0; j < 3; j++) {
          const edge1 = face[keys[j]];
          const edge2 = face[keys[(j + 1) % 3]];
          edge[0] = Math.min(edge1, edge2);
          edge[1] = Math.max(edge1, edge2);
          const key = edge[0] + "," + edge[1];
          if (edges[key] === void 0) {
            edges[key] = { index1: edge[0], index2: edge[1] };
          }
        }
      }
      for (const key in edges) {
        const e = edges[key];
        let vertex = geometry.vertices[e.index1];
        vertices.push(vertex.x, vertex.y, vertex.z);
        vertex = geometry.vertices[e.index2];
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
    } else if (geometry && geometry.isBufferGeometry) {
      const vertex = new Vector3();
      if (geometry.index !== null) {
        const position = geometry.attributes.position;
        const indices = geometry.index;
        let groups = geometry.groups;
        if (groups.length === 0) {
          groups = [{ start: 0, count: indices.count, materialIndex: 0 }];
        }
        for (let o = 0, ol = groups.length; o < ol; ++o) {
          const group = groups[o];
          const start = group.start;
          const count = group.count;
          for (let i = start, l = start + count; i < l; i += 3) {
            for (let j = 0; j < 3; j++) {
              const edge1 = indices.getX(i + j);
              const edge2 = indices.getX(i + (j + 1) % 3);
              edge[0] = Math.min(edge1, edge2);
              edge[1] = Math.max(edge1, edge2);
              const key = edge[0] + "," + edge[1];
              if (edges[key] === void 0) {
                edges[key] = { index1: edge[0], index2: edge[1] };
              }
            }
          }
        }
        for (const key in edges) {
          const e = edges[key];
          vertex.fromBufferAttribute(position, e.index1);
          vertices.push(vertex.x, vertex.y, vertex.z);
          vertex.fromBufferAttribute(position, e.index2);
          vertices.push(vertex.x, vertex.y, vertex.z);
        }
      } else {
        const position = geometry.attributes.position;
        for (let i = 0, l = position.count / 3; i < l; i++) {
          for (let j = 0; j < 3; j++) {
            const index1 = 3 * i + j;
            vertex.fromBufferAttribute(position, index1);
            vertices.push(vertex.x, vertex.y, vertex.z);
            const index2 = 3 * i + (j + 1) % 3;
            vertex.fromBufferAttribute(position, index2);
            vertices.push(vertex.x, vertex.y, vertex.z);
          }
        }
      }
    }
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
  }
};
var Geometries = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry,
  BoxBufferGeometry,
  CircleGeometry,
  CircleBufferGeometry,
  ConeGeometry,
  ConeBufferGeometry,
  CylinderGeometry,
  CylinderBufferGeometry,
  DodecahedronGeometry,
  DodecahedronBufferGeometry,
  EdgesGeometry,
  ExtrudeGeometry,
  ExtrudeBufferGeometry,
  IcosahedronGeometry,
  IcosahedronBufferGeometry,
  LatheGeometry,
  LatheBufferGeometry,
  OctahedronGeometry,
  OctahedronBufferGeometry,
  ParametricGeometry,
  ParametricBufferGeometry,
  PlaneGeometry,
  PlaneBufferGeometry,
  PolyhedronGeometry,
  PolyhedronBufferGeometry,
  RingGeometry,
  RingBufferGeometry,
  ShapeGeometry,
  ShapeBufferGeometry,
  SphereGeometry,
  SphereBufferGeometry,
  TetrahedronGeometry,
  TetrahedronBufferGeometry,
  TextGeometry,
  TextBufferGeometry,
  TorusGeometry,
  TorusBufferGeometry,
  TorusKnotGeometry,
  TorusKnotBufferGeometry,
  TubeGeometry,
  TubeBufferGeometry,
  WireframeGeometry
});
function ShadowMaterial(parameters) {
  Material.call(this);
  this.type = "ShadowMaterial";
  this.color = new Color(0);
  this.transparent = true;
  this.setValues(parameters);
}
ShadowMaterial.prototype = Object.create(Material.prototype);
ShadowMaterial.prototype.constructor = ShadowMaterial;
ShadowMaterial.prototype.isShadowMaterial = true;
ShadowMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  return this;
};
function RawShaderMaterial(parameters) {
  ShaderMaterial.call(this, parameters);
  this.type = "RawShaderMaterial";
}
RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);
RawShaderMaterial.prototype.constructor = RawShaderMaterial;
RawShaderMaterial.prototype.isRawShaderMaterial = true;
function MeshStandardMaterial(parameters) {
  Material.call(this);
  this.defines = { "STANDARD": "" };
  this.type = "MeshStandardMaterial";
  this.color = new Color(16777215);
  this.roughness = 1;
  this.metalness = 0;
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.roughnessMap = null;
  this.metalnessMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.envMapIntensity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.vertexTangents = false;
  this.setValues(parameters);
}
MeshStandardMaterial.prototype = Object.create(Material.prototype);
MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
MeshStandardMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.defines = { "STANDARD": "" };
  this.color.copy(source.color);
  this.roughness = source.roughness;
  this.metalness = source.metalness;
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.roughnessMap = source.roughnessMap;
  this.metalnessMap = source.metalnessMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.envMapIntensity = source.envMapIntensity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  this.vertexTangents = source.vertexTangents;
  return this;
};
function MeshPhysicalMaterial(parameters) {
  MeshStandardMaterial.call(this);
  this.defines = {
    "STANDARD": "",
    "PHYSICAL": ""
  };
  this.type = "MeshPhysicalMaterial";
  this.clearcoat = 0;
  this.clearcoatMap = null;
  this.clearcoatRoughness = 0;
  this.clearcoatRoughnessMap = null;
  this.clearcoatNormalScale = new Vector2(1, 1);
  this.clearcoatNormalMap = null;
  this.reflectivity = 0.5;
  Object.defineProperty(this, "ior", {
    get: function() {
      return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);
    },
    set: function(ior) {
      this.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);
    }
  });
  this.sheen = null;
  this.transmission = 0;
  this.transmissionMap = null;
  this.setValues(parameters);
}
MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);
MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
MeshPhysicalMaterial.prototype.copy = function(source) {
  MeshStandardMaterial.prototype.copy.call(this, source);
  this.defines = {
    "STANDARD": "",
    "PHYSICAL": ""
  };
  this.clearcoat = source.clearcoat;
  this.clearcoatMap = source.clearcoatMap;
  this.clearcoatRoughness = source.clearcoatRoughness;
  this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
  this.clearcoatNormalMap = source.clearcoatNormalMap;
  this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
  this.reflectivity = source.reflectivity;
  if (source.sheen) {
    this.sheen = (this.sheen || new Color()).copy(source.sheen);
  } else {
    this.sheen = null;
  }
  this.transmission = source.transmission;
  this.transmissionMap = source.transmissionMap;
  return this;
};
function MeshPhongMaterial(parameters) {
  Material.call(this);
  this.type = "MeshPhongMaterial";
  this.color = new Color(16777215);
  this.specular = new Color(1118481);
  this.shininess = 30;
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshPhongMaterial.prototype = Object.create(Material.prototype);
MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
MeshPhongMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.specular.copy(source.specular);
  this.shininess = source.shininess;
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshToonMaterial(parameters) {
  Material.call(this);
  this.defines = { "TOON": "" };
  this.type = "MeshToonMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.gradientMap = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.alphaMap = null;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshToonMaterial.prototype = Object.create(Material.prototype);
MeshToonMaterial.prototype.constructor = MeshToonMaterial;
MeshToonMaterial.prototype.isMeshToonMaterial = true;
MeshToonMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.gradientMap = source.gradientMap;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.alphaMap = source.alphaMap;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshNormalMaterial(parameters) {
  Material.call(this);
  this.type = "MeshNormalMaterial";
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshNormalMaterial.prototype = Object.create(Material.prototype);
MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
MeshNormalMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshLambertMaterial(parameters) {
  Material.call(this);
  this.type = "MeshLambertMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshLambertMaterial.prototype = Object.create(Material.prototype);
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
MeshLambertMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshMatcapMaterial(parameters) {
  Material.call(this);
  this.defines = { "MATCAP": "" };
  this.type = "MeshMatcapMaterial";
  this.color = new Color(16777215);
  this.matcap = null;
  this.map = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.alphaMap = null;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshMatcapMaterial.prototype = Object.create(Material.prototype);
MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
MeshMatcapMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.defines = { "MATCAP": "" };
  this.color.copy(source.color);
  this.matcap = source.matcap;
  this.map = source.map;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.alphaMap = source.alphaMap;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function LineDashedMaterial(parameters) {
  LineBasicMaterial.call(this);
  this.type = "LineDashedMaterial";
  this.scale = 1;
  this.dashSize = 3;
  this.gapSize = 1;
  this.setValues(parameters);
}
LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);
LineDashedMaterial.prototype.constructor = LineDashedMaterial;
LineDashedMaterial.prototype.isLineDashedMaterial = true;
LineDashedMaterial.prototype.copy = function(source) {
  LineBasicMaterial.prototype.copy.call(this, source);
  this.scale = source.scale;
  this.dashSize = source.dashSize;
  this.gapSize = source.gapSize;
  return this;
};
var Materials = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ShadowMaterial,
  SpriteMaterial,
  RawShaderMaterial,
  ShaderMaterial,
  PointsMaterial,
  MeshPhysicalMaterial,
  MeshStandardMaterial,
  MeshPhongMaterial,
  MeshToonMaterial,
  MeshNormalMaterial,
  MeshLambertMaterial,
  MeshDepthMaterial,
  MeshDistanceMaterial,
  MeshBasicMaterial,
  MeshMatcapMaterial,
  LineDashedMaterial,
  LineBasicMaterial,
  Material
});
var AnimationUtils = {
  arraySlice: function(array, from, to) {
    if (AnimationUtils.isTypedArray(array)) {
      return new array.constructor(array.subarray(from, to !== void 0 ? to : array.length));
    }
    return array.slice(from, to);
  },
  convertArray: function(array, type, forceClone) {
    if (!array || !forceClone && array.constructor === type)
      return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") {
      return new type(array);
    }
    return Array.prototype.slice.call(array);
  },
  isTypedArray: function(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  },
  getKeyframeOrder: function(times) {
    function compareTime(i, j) {
      return times[i] - times[j];
    }
    const n = times.length;
    const result = new Array(n);
    for (let i = 0; i !== n; ++i)
      result[i] = i;
    result.sort(compareTime);
    return result;
  },
  sortedArray: function(values, stride, order) {
    const nValues = values.length;
    const result = new values.constructor(nValues);
    for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
      const srcOffset = order[i] * stride;
      for (let j = 0; j !== stride; ++j) {
        result[dstOffset++] = values[srcOffset + j];
      }
    }
    return result;
  },
  flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
    let i = 1, key = jsonKeys[0];
    while (key !== void 0 && key[valuePropertyName] === void 0) {
      key = jsonKeys[i++];
    }
    if (key === void 0)
      return;
    let value = key[valuePropertyName];
    if (value === void 0)
      return;
    if (Array.isArray(value)) {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          values.push.apply(values, value);
        }
        key = jsonKeys[i++];
      } while (key !== void 0);
    } else if (value.toArray !== void 0) {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          value.toArray(values, values.length);
        }
        key = jsonKeys[i++];
      } while (key !== void 0);
    } else {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          values.push(value);
        }
        key = jsonKeys[i++];
      } while (key !== void 0);
    }
  },
  subclip: function(sourceClip, name, startFrame, endFrame, fps = 30) {
    const clip = sourceClip.clone();
    clip.name = name;
    const tracks = [];
    for (let i = 0; i < clip.tracks.length; ++i) {
      const track = clip.tracks[i];
      const valueSize = track.getValueSize();
      const times = [];
      const values = [];
      for (let j = 0; j < track.times.length; ++j) {
        const frame = track.times[j] * fps;
        if (frame < startFrame || frame >= endFrame)
          continue;
        times.push(track.times[j]);
        for (let k = 0; k < valueSize; ++k) {
          values.push(track.values[j * valueSize + k]);
        }
      }
      if (times.length === 0)
        continue;
      track.times = AnimationUtils.convertArray(times, track.times.constructor);
      track.values = AnimationUtils.convertArray(values, track.values.constructor);
      tracks.push(track);
    }
    clip.tracks = tracks;
    let minStartTime = Infinity;
    for (let i = 0; i < clip.tracks.length; ++i) {
      if (minStartTime > clip.tracks[i].times[0]) {
        minStartTime = clip.tracks[i].times[0];
      }
    }
    for (let i = 0; i < clip.tracks.length; ++i) {
      clip.tracks[i].shift(-1 * minStartTime);
    }
    clip.resetDuration();
    return clip;
  },
  makeClipAdditive: function(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
    if (fps <= 0)
      fps = 30;
    const numTracks = referenceClip.tracks.length;
    const referenceTime = referenceFrame / fps;
    for (let i = 0; i < numTracks; ++i) {
      const referenceTrack = referenceClip.tracks[i];
      const referenceTrackType = referenceTrack.ValueTypeName;
      if (referenceTrackType === "bool" || referenceTrackType === "string")
        continue;
      const targetTrack = targetClip.tracks.find(function(track) {
        return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
      });
      if (targetTrack === void 0)
        continue;
      let referenceOffset = 0;
      const referenceValueSize = referenceTrack.getValueSize();
      if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        referenceOffset = referenceValueSize / 3;
      }
      let targetOffset = 0;
      const targetValueSize = targetTrack.getValueSize();
      if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        targetOffset = targetValueSize / 3;
      }
      const lastIndex = referenceTrack.times.length - 1;
      let referenceValue;
      if (referenceTime <= referenceTrack.times[0]) {
        const startIndex = referenceOffset;
        const endIndex = referenceValueSize - referenceOffset;
        referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
      } else if (referenceTime >= referenceTrack.times[lastIndex]) {
        const startIndex = lastIndex * referenceValueSize + referenceOffset;
        const endIndex = startIndex + referenceValueSize - referenceOffset;
        referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
      } else {
        const interpolant = referenceTrack.createInterpolant();
        const startIndex = referenceOffset;
        const endIndex = referenceValueSize - referenceOffset;
        interpolant.evaluate(referenceTime);
        referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
      }
      if (referenceTrackType === "quaternion") {
        const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
        referenceQuat.toArray(referenceValue);
      }
      const numTimes = targetTrack.times.length;
      for (let j = 0; j < numTimes; ++j) {
        const valueStart = j * targetValueSize + targetOffset;
        if (referenceTrackType === "quaternion") {
          Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
        } else {
          const valueEnd = targetValueSize - targetOffset * 2;
          for (let k = 0; k < valueEnd; ++k) {
            targetTrack.values[valueStart + k] -= referenceValue[k];
          }
        }
      }
    }
    targetClip.blendMode = AdditiveAnimationBlendMode;
    return targetClip;
  }
};
function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  this.parameterPositions = parameterPositions;
  this._cachedIndex = 0;
  this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
  this.sampleValues = sampleValues;
  this.valueSize = sampleSize;
}
Object.assign(Interpolant.prototype, {
  evaluate: function(t) {
    const pp = this.parameterPositions;
    let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
    validate_interval: {
      seek: {
        let right;
        linear_scan: {
          forward_scan:
            if (!(t < t1)) {
              for (let giveUpAt = i1 + 2; ; ) {
                if (t1 === void 0) {
                  if (t < t0)
                    break forward_scan;
                  i1 = pp.length;
                  this._cachedIndex = i1;
                  return this.afterEnd_(i1 - 1, t, t0);
                }
                if (i1 === giveUpAt)
                  break;
                t0 = t1;
                t1 = pp[++i1];
                if (t < t1) {
                  break seek;
                }
              }
              right = pp.length;
              break linear_scan;
            }
          if (!(t >= t0)) {
            const t1global = pp[1];
            if (t < t1global) {
              i1 = 2;
              t0 = t1global;
            }
            for (let giveUpAt = i1 - 2; ; ) {
              if (t0 === void 0) {
                this._cachedIndex = 0;
                return this.beforeStart_(0, t, t1);
              }
              if (i1 === giveUpAt)
                break;
              t1 = t0;
              t0 = pp[--i1 - 1];
              if (t >= t0) {
                break seek;
              }
            }
            right = i1;
            i1 = 0;
            break linear_scan;
          }
          break validate_interval;
        }
        while (i1 < right) {
          const mid = i1 + right >>> 1;
          if (t < pp[mid]) {
            right = mid;
          } else {
            i1 = mid + 1;
          }
        }
        t1 = pp[i1];
        t0 = pp[i1 - 1];
        if (t0 === void 0) {
          this._cachedIndex = 0;
          return this.beforeStart_(0, t, t1);
        }
        if (t1 === void 0) {
          i1 = pp.length;
          this._cachedIndex = i1;
          return this.afterEnd_(i1 - 1, t0, t);
        }
      }
      this._cachedIndex = i1;
      this.intervalChanged_(i1, t0, t1);
    }
    return this.interpolate_(i1, t0, t, t1);
  },
  settings: null,
  DefaultSettings_: {},
  getSettings_: function() {
    return this.settings || this.DefaultSettings_;
  },
  copySampleValue_: function(index) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
    for (let i = 0; i !== stride; ++i) {
      result[i] = values[offset + i];
    }
    return result;
  },
  interpolate_: function() {
    throw new Error("call to abstract method");
  },
  intervalChanged_: function() {
  }
});
Object.assign(Interpolant.prototype, {
  beforeStart_: Interpolant.prototype.copySampleValue_,
  afterEnd_: Interpolant.prototype.copySampleValue_
});
function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  this._weightPrev = -0;
  this._offsetPrev = -0;
  this._weightNext = -0;
  this._offsetNext = -0;
}
CubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: CubicInterpolant,
  DefaultSettings_: {
    endingStart: ZeroCurvatureEnding,
    endingEnd: ZeroCurvatureEnding
  },
  intervalChanged_: function(i1, t0, t1) {
    const pp = this.parameterPositions;
    let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
    if (tPrev === void 0) {
      switch (this.getSettings_().endingStart) {
        case ZeroSlopeEnding:
          iPrev = i1;
          tPrev = 2 * t0 - t1;
          break;
        case WrapAroundEnding:
          iPrev = pp.length - 2;
          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
          break;
        default:
          iPrev = i1;
          tPrev = t1;
      }
    }
    if (tNext === void 0) {
      switch (this.getSettings_().endingEnd) {
        case ZeroSlopeEnding:
          iNext = i1;
          tNext = 2 * t1 - t0;
          break;
        case WrapAroundEnding:
          iNext = 1;
          tNext = t1 + pp[1] - pp[0];
          break;
        default:
          iNext = i1 - 1;
          tNext = t0;
      }
    }
    const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
    this._weightPrev = halfDt / (t0 - tPrev);
    this._weightNext = halfDt / (tNext - t1);
    this._offsetPrev = iPrev * stride;
    this._offsetNext = iNext * stride;
  },
  interpolate_: function(i1, t0, t, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
    const sP = -wP * ppp + 2 * wP * pp - wP * p;
    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
    const sN = wN * ppp - wN * pp;
    for (let i = 0; i !== stride; ++i) {
      result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
    }
    return result;
  }
});
function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}
LinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: LinearInterpolant,
  interpolate_: function(i1, t0, t, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
    for (let i = 0; i !== stride; ++i) {
      result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
    }
    return result;
  }
});
function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}
DiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: DiscreteInterpolant,
  interpolate_: function(i1) {
    return this.copySampleValue_(i1 - 1);
  }
});
function KeyframeTrack(name, times, values, interpolation) {
  if (name === void 0)
    throw new Error("THREE.KeyframeTrack: track name is undefined");
  if (times === void 0 || times.length === 0)
    throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
  this.name = name;
  this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
  this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
  this.setInterpolation(interpolation || this.DefaultInterpolation);
}
Object.assign(KeyframeTrack, {
  toJSON: function(track) {
    const trackType = track.constructor;
    let json;
    if (trackType.toJSON !== void 0) {
      json = trackType.toJSON(track);
    } else {
      json = {
        "name": track.name,
        "times": AnimationUtils.convertArray(track.times, Array),
        "values": AnimationUtils.convertArray(track.values, Array)
      };
      const interpolation = track.getInterpolation();
      if (interpolation !== track.DefaultInterpolation) {
        json.interpolation = interpolation;
      }
    }
    json.type = track.ValueTypeName;
    return json;
  }
});
Object.assign(KeyframeTrack.prototype, {
  constructor: KeyframeTrack,
  TimeBufferType: Float32Array,
  ValueBufferType: Float32Array,
  DefaultInterpolation: InterpolateLinear,
  InterpolantFactoryMethodDiscrete: function(result) {
    return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodLinear: function(result) {
    return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodSmooth: function(result) {
    return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  setInterpolation: function(interpolation) {
    let factoryMethod;
    switch (interpolation) {
      case InterpolateDiscrete:
        factoryMethod = this.InterpolantFactoryMethodDiscrete;
        break;
      case InterpolateLinear:
        factoryMethod = this.InterpolantFactoryMethodLinear;
        break;
      case InterpolateSmooth:
        factoryMethod = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (factoryMethod === void 0) {
      const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0) {
        if (interpolation !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw new Error(message);
        }
      }
      console.warn("THREE.KeyframeTrack:", message);
      return this;
    }
    this.createInterpolant = factoryMethod;
    return this;
  },
  getInterpolation: function() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return InterpolateDiscrete;
      case this.InterpolantFactoryMethodLinear:
        return InterpolateLinear;
      case this.InterpolantFactoryMethodSmooth:
        return InterpolateSmooth;
    }
  },
  getValueSize: function() {
    return this.values.length / this.times.length;
  },
  shift: function(timeOffset) {
    if (timeOffset !== 0) {
      const times = this.times;
      for (let i = 0, n = times.length; i !== n; ++i) {
        times[i] += timeOffset;
      }
    }
    return this;
  },
  scale: function(timeScale) {
    if (timeScale !== 1) {
      const times = this.times;
      for (let i = 0, n = times.length; i !== n; ++i) {
        times[i] *= timeScale;
      }
    }
    return this;
  },
  trim: function(startTime, endTime) {
    const times = this.times, nKeys = times.length;
    let from = 0, to = nKeys - 1;
    while (from !== nKeys && times[from] < startTime) {
      ++from;
    }
    while (to !== -1 && times[to] > endTime) {
      --to;
    }
    ++to;
    if (from !== 0 || to !== nKeys) {
      if (from >= to) {
        to = Math.max(to, 1);
        from = to - 1;
      }
      const stride = this.getValueSize();
      this.times = AnimationUtils.arraySlice(times, from, to);
      this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
    }
    return this;
  },
  validate: function() {
    let valid = true;
    const valueSize = this.getValueSize();
    if (valueSize - Math.floor(valueSize) !== 0) {
      console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
      valid = false;
    }
    const times = this.times, values = this.values, nKeys = times.length;
    if (nKeys === 0) {
      console.error("THREE.KeyframeTrack: Track is empty.", this);
      valid = false;
    }
    let prevTime = null;
    for (let i = 0; i !== nKeys; i++) {
      const currTime = times[i];
      if (typeof currTime === "number" && isNaN(currTime)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
        valid = false;
        break;
      }
      if (prevTime !== null && prevTime > currTime) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
        valid = false;
        break;
      }
      prevTime = currTime;
    }
    if (values !== void 0) {
      if (AnimationUtils.isTypedArray(values)) {
        for (let i = 0, n = values.length; i !== n; ++i) {
          const value = values[i];
          if (isNaN(value)) {
            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, value);
            valid = false;
            break;
          }
        }
      }
    }
    return valid;
  },
  optimize: function() {
    const times = AnimationUtils.arraySlice(this.times), values = AnimationUtils.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
    let writeIndex = 1;
    for (let i = 1; i < lastIndex; ++i) {
      let keep = false;
      const time = times[i];
      const timeNext = times[i + 1];
      if (time !== timeNext && (i !== 1 || time !== time[0])) {
        if (!smoothInterpolation) {
          const offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
          for (let j = 0; j !== stride; ++j) {
            const value = values[offset + j];
            if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
              keep = true;
              break;
            }
          }
        } else {
          keep = true;
        }
      }
      if (keep) {
        if (i !== writeIndex) {
          times[writeIndex] = times[i];
          const readOffset = i * stride, writeOffset = writeIndex * stride;
          for (let j = 0; j !== stride; ++j) {
            values[writeOffset + j] = values[readOffset + j];
          }
        }
        ++writeIndex;
      }
    }
    if (lastIndex > 0) {
      times[writeIndex] = times[lastIndex];
      for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
        values[writeOffset + j] = values[readOffset + j];
      }
      ++writeIndex;
    }
    if (writeIndex !== times.length) {
      this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
      this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
    } else {
      this.times = times;
      this.values = values;
    }
    return this;
  },
  clone: function() {
    const times = AnimationUtils.arraySlice(this.times, 0);
    const values = AnimationUtils.arraySlice(this.values, 0);
    const TypedKeyframeTrack = this.constructor;
    const track = new TypedKeyframeTrack(this.name, times, values);
    track.createInterpolant = this.createInterpolant;
    return track;
  }
});
function BooleanKeyframeTrack(name, times, values) {
  KeyframeTrack.call(this, name, times, values);
}
BooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: BooleanKeyframeTrack,
  ValueTypeName: "bool",
  ValueBufferType: Array,
  DefaultInterpolation: InterpolateDiscrete,
  InterpolantFactoryMethodLinear: void 0,
  InterpolantFactoryMethodSmooth: void 0
});
function ColorKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
ColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: ColorKeyframeTrack,
  ValueTypeName: "color"
});
function NumberKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
NumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: NumberKeyframeTrack,
  ValueTypeName: "number"
});
function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}
QuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: QuaternionLinearInterpolant,
  interpolate_: function(i1, t0, t, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
    let offset = i1 * stride;
    for (let end = offset + stride; offset !== end; offset += 4) {
      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
    }
    return result;
  }
});
function QuaternionKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
QuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: QuaternionKeyframeTrack,
  ValueTypeName: "quaternion",
  DefaultInterpolation: InterpolateLinear,
  InterpolantFactoryMethodLinear: function(result) {
    return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodSmooth: void 0
});
function StringKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
StringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: StringKeyframeTrack,
  ValueTypeName: "string",
  ValueBufferType: Array,
  DefaultInterpolation: InterpolateDiscrete,
  InterpolantFactoryMethodLinear: void 0,
  InterpolantFactoryMethodSmooth: void 0
});
function VectorKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
VectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: VectorKeyframeTrack,
  ValueTypeName: "vector"
});
function AnimationClip(name, duration, tracks, blendMode) {
  this.name = name;
  this.tracks = tracks;
  this.duration = duration !== void 0 ? duration : -1;
  this.blendMode = blendMode !== void 0 ? blendMode : NormalAnimationBlendMode;
  this.uuid = MathUtils.generateUUID();
  if (this.duration < 0) {
    this.resetDuration();
  }
}
function getTrackTypeForValueTypeName(typeName) {
  switch (typeName.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return NumberKeyframeTrack;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return VectorKeyframeTrack;
    case "color":
      return ColorKeyframeTrack;
    case "quaternion":
      return QuaternionKeyframeTrack;
    case "bool":
    case "boolean":
      return BooleanKeyframeTrack;
    case "string":
      return StringKeyframeTrack;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
}
function parseKeyframeTrack(json) {
  if (json.type === void 0) {
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  }
  const trackType = getTrackTypeForValueTypeName(json.type);
  if (json.times === void 0) {
    const times = [], values = [];
    AnimationUtils.flattenJSON(json.keys, times, values, "value");
    json.times = times;
    json.values = values;
  }
  if (trackType.parse !== void 0) {
    return trackType.parse(json);
  } else {
    return new trackType(json.name, json.times, json.values, json.interpolation);
  }
}
Object.assign(AnimationClip, {
  parse: function(json) {
    const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
    for (let i = 0, n = jsonTracks.length; i !== n; ++i) {
      tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
    }
    const clip = new AnimationClip(json.name, json.duration, tracks, json.blendMode);
    clip.uuid = json.uuid;
    return clip;
  },
  toJSON: function(clip) {
    const tracks = [], clipTracks = clip.tracks;
    const json = {
      "name": clip.name,
      "duration": clip.duration,
      "tracks": tracks,
      "uuid": clip.uuid,
      "blendMode": clip.blendMode
    };
    for (let i = 0, n = clipTracks.length; i !== n; ++i) {
      tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
    }
    return json;
  },
  CreateFromMorphTargetSequence: function(name, morphTargetSequence, fps, noLoop) {
    const numMorphTargets = morphTargetSequence.length;
    const tracks = [];
    for (let i = 0; i < numMorphTargets; i++) {
      let times = [];
      let values = [];
      times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
      values.push(0, 1, 0);
      const order = AnimationUtils.getKeyframeOrder(times);
      times = AnimationUtils.sortedArray(times, 1, order);
      values = AnimationUtils.sortedArray(values, 1, order);
      if (!noLoop && times[0] === 0) {
        times.push(numMorphTargets);
        values.push(values[0]);
      }
      tracks.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence[i].name + "]", times, values).scale(1 / fps));
    }
    return new AnimationClip(name, -1, tracks);
  },
  findByName: function(objectOrClipArray, name) {
    let clipArray = objectOrClipArray;
    if (!Array.isArray(objectOrClipArray)) {
      const o = objectOrClipArray;
      clipArray = o.geometry && o.geometry.animations || o.animations;
    }
    for (let i = 0; i < clipArray.length; i++) {
      if (clipArray[i].name === name) {
        return clipArray[i];
      }
    }
    return null;
  },
  CreateClipsFromMorphTargetSequences: function(morphTargets, fps, noLoop) {
    const animationToMorphTargets = {};
    const pattern = /^([\w-]*?)([\d]+)$/;
    for (let i = 0, il = morphTargets.length; i < il; i++) {
      const morphTarget = morphTargets[i];
      const parts = morphTarget.name.match(pattern);
      if (parts && parts.length > 1) {
        const name = parts[1];
        let animationMorphTargets = animationToMorphTargets[name];
        if (!animationMorphTargets) {
          animationToMorphTargets[name] = animationMorphTargets = [];
        }
        animationMorphTargets.push(morphTarget);
      }
    }
    const clips = [];
    for (const name in animationToMorphTargets) {
      clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
    }
    return clips;
  },
  parseAnimation: function(animation, bones) {
    if (!animation) {
      console.error("THREE.AnimationClip: No animation in JSONLoader data.");
      return null;
    }
    const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
      if (animationKeys.length !== 0) {
        const times = [];
        const values = [];
        AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);
        if (times.length !== 0) {
          destTracks.push(new trackType(trackName, times, values));
        }
      }
    };
    const tracks = [];
    const clipName = animation.name || "default";
    const fps = animation.fps || 30;
    const blendMode = animation.blendMode;
    let duration = animation.length || -1;
    const hierarchyTracks = animation.hierarchy || [];
    for (let h = 0; h < hierarchyTracks.length; h++) {
      const animationKeys = hierarchyTracks[h].keys;
      if (!animationKeys || animationKeys.length === 0)
        continue;
      if (animationKeys[0].morphTargets) {
        const morphTargetNames = {};
        let k;
        for (k = 0; k < animationKeys.length; k++) {
          if (animationKeys[k].morphTargets) {
            for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {
              morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
            }
          }
        }
        for (const morphTargetName in morphTargetNames) {
          const times = [];
          const values = [];
          for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
            const animationKey = animationKeys[k];
            times.push(animationKey.time);
            values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
          }
          tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
        }
        duration = morphTargetNames.length * (fps || 1);
      } else {
        const boneName = ".bones[" + bones[h].name + "]";
        addNonemptyTrack(VectorKeyframeTrack, boneName + ".position", animationKeys, "pos", tracks);
        addNonemptyTrack(QuaternionKeyframeTrack, boneName + ".quaternion", animationKeys, "rot", tracks);
        addNonemptyTrack(VectorKeyframeTrack, boneName + ".scale", animationKeys, "scl", tracks);
      }
    }
    if (tracks.length === 0) {
      return null;
    }
    const clip = new AnimationClip(clipName, duration, tracks, blendMode);
    return clip;
  }
});
Object.assign(AnimationClip.prototype, {
  resetDuration: function() {
    const tracks = this.tracks;
    let duration = 0;
    for (let i = 0, n = tracks.length; i !== n; ++i) {
      const track = this.tracks[i];
      duration = Math.max(duration, track.times[track.times.length - 1]);
    }
    this.duration = duration;
    return this;
  },
  trim: function() {
    for (let i = 0; i < this.tracks.length; i++) {
      this.tracks[i].trim(0, this.duration);
    }
    return this;
  },
  validate: function() {
    let valid = true;
    for (let i = 0; i < this.tracks.length; i++) {
      valid = valid && this.tracks[i].validate();
    }
    return valid;
  },
  optimize: function() {
    for (let i = 0; i < this.tracks.length; i++) {
      this.tracks[i].optimize();
    }
    return this;
  },
  clone: function() {
    const tracks = [];
    for (let i = 0; i < this.tracks.length; i++) {
      tracks.push(this.tracks[i].clone());
    }
    return new AnimationClip(this.name, this.duration, tracks, this.blendMode);
  },
  toJSON: function() {
    return AnimationClip.toJSON(this);
  }
});
var Cache = {
  enabled: false,
  files: {},
  add: function(key, file) {
    if (this.enabled === false)
      return;
    this.files[key] = file;
  },
  get: function(key) {
    if (this.enabled === false)
      return;
    return this.files[key];
  },
  remove: function(key) {
    delete this.files[key];
  },
  clear: function() {
    this.files = {};
  }
};
function LoadingManager(onLoad, onProgress, onError) {
  const scope = this;
  let isLoading = false;
  let itemsLoaded = 0;
  let itemsTotal = 0;
  let urlModifier = void 0;
  const handlers = [];
  this.onStart = void 0;
  this.onLoad = onLoad;
  this.onProgress = onProgress;
  this.onError = onError;
  this.itemStart = function(url) {
    itemsTotal++;
    if (isLoading === false) {
      if (scope.onStart !== void 0) {
        scope.onStart(url, itemsLoaded, itemsTotal);
      }
    }
    isLoading = true;
  };
  this.itemEnd = function(url) {
    itemsLoaded++;
    if (scope.onProgress !== void 0) {
      scope.onProgress(url, itemsLoaded, itemsTotal);
    }
    if (itemsLoaded === itemsTotal) {
      isLoading = false;
      if (scope.onLoad !== void 0) {
        scope.onLoad();
      }
    }
  };
  this.itemError = function(url) {
    if (scope.onError !== void 0) {
      scope.onError(url);
    }
  };
  this.resolveURL = function(url) {
    if (urlModifier) {
      return urlModifier(url);
    }
    return url;
  };
  this.setURLModifier = function(transform) {
    urlModifier = transform;
    return this;
  };
  this.addHandler = function(regex, loader) {
    handlers.push(regex, loader);
    return this;
  };
  this.removeHandler = function(regex) {
    const index = handlers.indexOf(regex);
    if (index !== -1) {
      handlers.splice(index, 2);
    }
    return this;
  };
  this.getHandler = function(file) {
    for (let i = 0, l = handlers.length; i < l; i += 2) {
      const regex = handlers[i];
      const loader = handlers[i + 1];
      if (regex.global)
        regex.lastIndex = 0;
      if (regex.test(file)) {
        return loader;
      }
    }
    return null;
  };
}
var DefaultLoadingManager = new LoadingManager();
function Loader(manager) {
  this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
  this.crossOrigin = "anonymous";
  this.withCredentials = false;
  this.path = "";
  this.resourcePath = "";
  this.requestHeader = {};
}
Object.assign(Loader.prototype, {
  load: function() {
  },
  loadAsync: function(url, onProgress) {
    const scope = this;
    return new Promise(function(resolve, reject) {
      scope.load(url, resolve, onProgress, reject);
    });
  },
  parse: function() {
  },
  setCrossOrigin: function(crossOrigin) {
    this.crossOrigin = crossOrigin;
    return this;
  },
  setWithCredentials: function(value) {
    this.withCredentials = value;
    return this;
  },
  setPath: function(path) {
    this.path = path;
    return this;
  },
  setResourcePath: function(resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  },
  setRequestHeader: function(requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }
});
var loading = {};
function FileLoader(manager) {
  Loader.call(this, manager);
}
FileLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: FileLoader,
  load: function(url, onLoad, onProgress, onError) {
    if (url === void 0)
      url = "";
    if (this.path !== void 0)
      url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad)
          onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    if (loading[url] !== void 0) {
      loading[url].push({
        onLoad,
        onProgress,
        onError
      });
      return;
    }
    const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
    const dataUriRegexResult = url.match(dataUriRegex);
    let request;
    if (dataUriRegexResult) {
      const mimeType = dataUriRegexResult[1];
      const isBase64 = !!dataUriRegexResult[2];
      let data = dataUriRegexResult[3];
      data = decodeURIComponent(data);
      if (isBase64)
        data = atob(data);
      try {
        let response;
        const responseType = (this.responseType || "").toLowerCase();
        switch (responseType) {
          case "arraybuffer":
          case "blob":
            const view = new Uint8Array(data.length);
            for (let i = 0; i < data.length; i++) {
              view[i] = data.charCodeAt(i);
            }
            if (responseType === "blob") {
              response = new Blob([view.buffer], { type: mimeType });
            } else {
              response = view.buffer;
            }
            break;
          case "document":
            const parser = new DOMParser();
            response = parser.parseFromString(data, mimeType);
            break;
          case "json":
            response = JSON.parse(data);
            break;
          default:
            response = data;
            break;
        }
        setTimeout(function() {
          if (onLoad)
            onLoad(response);
          scope.manager.itemEnd(url);
        }, 0);
      } catch (error) {
        setTimeout(function() {
          if (onError)
            onError(error);
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }, 0);
      }
    } else {
      loading[url] = [];
      loading[url].push({
        onLoad,
        onProgress,
        onError
      });
      request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.addEventListener("load", function(event) {
        const response = this.response;
        const callbacks = loading[url];
        delete loading[url];
        if (this.status === 200 || this.status === 0) {
          if (this.status === 0)
            console.warn("THREE.FileLoader: HTTP Status 0 received.");
          Cache.add(url, response);
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onLoad)
              callback.onLoad(response);
          }
          scope.manager.itemEnd(url);
        } else {
          for (let i = 0, il = callbacks.length; i < il; i++) {
            const callback = callbacks[i];
            if (callback.onError)
              callback.onError(event);
          }
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }
      }, false);
      request.addEventListener("progress", function(event) {
        const callbacks = loading[url];
        for (let i = 0, il = callbacks.length; i < il; i++) {
          const callback = callbacks[i];
          if (callback.onProgress)
            callback.onProgress(event);
        }
      }, false);
      request.addEventListener("error", function(event) {
        const callbacks = loading[url];
        delete loading[url];
        for (let i = 0, il = callbacks.length; i < il; i++) {
          const callback = callbacks[i];
          if (callback.onError)
            callback.onError(event);
        }
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }, false);
      request.addEventListener("abort", function(event) {
        const callbacks = loading[url];
        delete loading[url];
        for (let i = 0, il = callbacks.length; i < il; i++) {
          const callback = callbacks[i];
          if (callback.onError)
            callback.onError(event);
        }
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }, false);
      if (this.responseType !== void 0)
        request.responseType = this.responseType;
      if (this.withCredentials !== void 0)
        request.withCredentials = this.withCredentials;
      if (request.overrideMimeType)
        request.overrideMimeType(this.mimeType !== void 0 ? this.mimeType : "text/plain");
      for (const header in this.requestHeader) {
        request.setRequestHeader(header, this.requestHeader[header]);
      }
      request.send(null);
    }
    scope.manager.itemStart(url);
    return request;
  },
  setResponseType: function(value) {
    this.responseType = value;
    return this;
  },
  setMimeType: function(value) {
    this.mimeType = value;
    return this;
  }
});
function AnimationLoader(manager) {
  Loader.call(this, manager);
}
AnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: AnimationLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      try {
        onLoad(scope.parse(JSON.parse(text)));
      } catch (e) {
        if (onError) {
          onError(e);
        } else {
          console.error(e);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  },
  parse: function(json) {
    const animations = [];
    for (let i = 0; i < json.length; i++) {
      const clip = AnimationClip.parse(json[i]);
      animations.push(clip);
    }
    return animations;
  }
});
function CompressedTextureLoader(manager) {
  Loader.call(this, manager);
}
CompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: CompressedTextureLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const images = [];
    const texture = new CompressedTexture();
    texture.image = images;
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setResponseType("arraybuffer");
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    let loaded = 0;
    function loadTexture(i) {
      loader.load(url[i], function(buffer) {
        const texDatas = scope.parse(buffer, true);
        images[i] = {
          width: texDatas.width,
          height: texDatas.height,
          format: texDatas.format,
          mipmaps: texDatas.mipmaps
        };
        loaded += 1;
        if (loaded === 6) {
          if (texDatas.mipmapCount === 1)
            texture.minFilter = LinearFilter;
          texture.format = texDatas.format;
          texture.needsUpdate = true;
          if (onLoad)
            onLoad(texture);
        }
      }, onProgress, onError);
    }
    if (Array.isArray(url)) {
      for (let i = 0, il = url.length; i < il; ++i) {
        loadTexture(i);
      }
    } else {
      loader.load(url, function(buffer) {
        const texDatas = scope.parse(buffer, true);
        if (texDatas.isCubemap) {
          const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
          for (let f = 0; f < faces; f++) {
            images[f] = { mipmaps: [] };
            for (let i = 0; i < texDatas.mipmapCount; i++) {
              images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
              images[f].format = texDatas.format;
              images[f].width = texDatas.width;
              images[f].height = texDatas.height;
            }
          }
        } else {
          texture.image.width = texDatas.width;
          texture.image.height = texDatas.height;
          texture.mipmaps = texDatas.mipmaps;
        }
        if (texDatas.mipmapCount === 1) {
          texture.minFilter = LinearFilter;
        }
        texture.format = texDatas.format;
        texture.needsUpdate = true;
        if (onLoad)
          onLoad(texture);
      }, onProgress, onError);
    }
    return texture;
  }
});
function ImageLoader(manager) {
  Loader.call(this, manager);
}
ImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: ImageLoader,
  load: function(url, onLoad, onProgress, onError) {
    if (this.path !== void 0)
      url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad)
          onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    const image = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
    function onImageLoad() {
      image.removeEventListener("load", onImageLoad, false);
      image.removeEventListener("error", onImageError, false);
      Cache.add(url, this);
      if (onLoad)
        onLoad(this);
      scope.manager.itemEnd(url);
    }
    function onImageError(event) {
      image.removeEventListener("load", onImageLoad, false);
      image.removeEventListener("error", onImageError, false);
      if (onError)
        onError(event);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    }
    image.addEventListener("load", onImageLoad, false);
    image.addEventListener("error", onImageError, false);
    if (url.substr(0, 5) !== "data:") {
      if (this.crossOrigin !== void 0)
        image.crossOrigin = this.crossOrigin;
    }
    scope.manager.itemStart(url);
    image.src = url;
    return image;
  }
});
function CubeTextureLoader(manager) {
  Loader.call(this, manager);
}
CubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: CubeTextureLoader,
  load: function(urls, onLoad, onProgress, onError) {
    const texture = new CubeTexture();
    const loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    let loaded = 0;
    function loadTexture(i) {
      loader.load(urls[i], function(image) {
        texture.images[i] = image;
        loaded++;
        if (loaded === 6) {
          texture.needsUpdate = true;
          if (onLoad)
            onLoad(texture);
        }
      }, void 0, onError);
    }
    for (let i = 0; i < urls.length; ++i) {
      loadTexture(i);
    }
    return texture;
  }
});
function DataTextureLoader(manager) {
  Loader.call(this, manager);
}
DataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: DataTextureLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const texture = new DataTexture();
    const loader = new FileLoader(this.manager);
    loader.setResponseType("arraybuffer");
    loader.setRequestHeader(this.requestHeader);
    loader.setPath(this.path);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(buffer) {
      const texData = scope.parse(buffer);
      if (!texData)
        return;
      if (texData.image !== void 0) {
        texture.image = texData.image;
      } else if (texData.data !== void 0) {
        texture.image.width = texData.width;
        texture.image.height = texData.height;
        texture.image.data = texData.data;
      }
      texture.wrapS = texData.wrapS !== void 0 ? texData.wrapS : ClampToEdgeWrapping;
      texture.wrapT = texData.wrapT !== void 0 ? texData.wrapT : ClampToEdgeWrapping;
      texture.magFilter = texData.magFilter !== void 0 ? texData.magFilter : LinearFilter;
      texture.minFilter = texData.minFilter !== void 0 ? texData.minFilter : LinearFilter;
      texture.anisotropy = texData.anisotropy !== void 0 ? texData.anisotropy : 1;
      if (texData.format !== void 0) {
        texture.format = texData.format;
      }
      if (texData.type !== void 0) {
        texture.type = texData.type;
      }
      if (texData.mipmaps !== void 0) {
        texture.mipmaps = texData.mipmaps;
        texture.minFilter = LinearMipmapLinearFilter;
      }
      if (texData.mipmapCount === 1) {
        texture.minFilter = LinearFilter;
      }
      texture.needsUpdate = true;
      if (onLoad)
        onLoad(texture, texData);
    }, onProgress, onError);
    return texture;
  }
});
function TextureLoader(manager) {
  Loader.call(this, manager);
}
TextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: TextureLoader,
  load: function(url, onLoad, onProgress, onError) {
    const texture = new Texture();
    const loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    loader.load(url, function(image) {
      texture.image = image;
      const isJPEG = url.search(/\.jpe?g($|\?)/i) > 0 || url.search(/^data\:image\/jpeg/) === 0;
      texture.format = isJPEG ? RGBFormat : RGBAFormat;
      texture.needsUpdate = true;
      if (onLoad !== void 0) {
        onLoad(texture);
      }
    }, onProgress, onError);
    return texture;
  }
});
function Curve() {
  this.type = "Curve";
  this.arcLengthDivisions = 200;
}
Object.assign(Curve.prototype, {
  getPoint: function() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  },
  getPointAt: function(u, optionalTarget) {
    const t = this.getUtoTmapping(u);
    return this.getPoint(t, optionalTarget);
  },
  getPoints: function(divisions = 5) {
    const points = [];
    for (let d = 0; d <= divisions; d++) {
      points.push(this.getPoint(d / divisions));
    }
    return points;
  },
  getSpacedPoints: function(divisions = 5) {
    const points = [];
    for (let d = 0; d <= divisions; d++) {
      points.push(this.getPointAt(d / divisions));
    }
    return points;
  },
  getLength: function() {
    const lengths = this.getLengths();
    return lengths[lengths.length - 1];
  },
  getLengths: function(divisions) {
    if (divisions === void 0)
      divisions = this.arcLengthDivisions;
    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = false;
    const cache = [];
    let current, last = this.getPoint(0);
    let sum = 0;
    cache.push(0);
    for (let p = 1; p <= divisions; p++) {
      current = this.getPoint(p / divisions);
      sum += current.distanceTo(last);
      cache.push(sum);
      last = current;
    }
    this.cacheArcLengths = cache;
    return cache;
  },
  updateArcLengths: function() {
    this.needsUpdate = true;
    this.getLengths();
  },
  getUtoTmapping: function(u, distance) {
    const arcLengths = this.getLengths();
    let i = 0;
    const il = arcLengths.length;
    let targetArcLength;
    if (distance) {
      targetArcLength = distance;
    } else {
      targetArcLength = u * arcLengths[il - 1];
    }
    let low = 0, high = il - 1, comparison;
    while (low <= high) {
      i = Math.floor(low + (high - low) / 2);
      comparison = arcLengths[i] - targetArcLength;
      if (comparison < 0) {
        low = i + 1;
      } else if (comparison > 0) {
        high = i - 1;
      } else {
        high = i;
        break;
      }
    }
    i = high;
    if (arcLengths[i] === targetArcLength) {
      return i / (il - 1);
    }
    const lengthBefore = arcLengths[i];
    const lengthAfter = arcLengths[i + 1];
    const segmentLength = lengthAfter - lengthBefore;
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    const t = (i + segmentFraction) / (il - 1);
    return t;
  },
  getTangent: function(t, optionalTarget) {
    const delta = 1e-4;
    let t1 = t - delta;
    let t2 = t + delta;
    if (t1 < 0)
      t1 = 0;
    if (t2 > 1)
      t2 = 1;
    const pt1 = this.getPoint(t1);
    const pt2 = this.getPoint(t2);
    const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
    tangent.copy(pt2).sub(pt1).normalize();
    return tangent;
  },
  getTangentAt: function(u, optionalTarget) {
    const t = this.getUtoTmapping(u);
    return this.getTangent(t, optionalTarget);
  },
  computeFrenetFrames: function(segments, closed) {
    const normal = new Vector3();
    const tangents = [];
    const normals = [];
    const binormals = [];
    const vec = new Vector3();
    const mat = new Matrix4();
    for (let i = 0; i <= segments; i++) {
      const u = i / segments;
      tangents[i] = this.getTangentAt(u, new Vector3());
      tangents[i].normalize();
    }
    normals[0] = new Vector3();
    binormals[0] = new Vector3();
    let min = Number.MAX_VALUE;
    const tx = Math.abs(tangents[0].x);
    const ty = Math.abs(tangents[0].y);
    const tz = Math.abs(tangents[0].z);
    if (tx <= min) {
      min = tx;
      normal.set(1, 0, 0);
    }
    if (ty <= min) {
      min = ty;
      normal.set(0, 1, 0);
    }
    if (tz <= min) {
      normal.set(0, 0, 1);
    }
    vec.crossVectors(tangents[0], normal).normalize();
    normals[0].crossVectors(tangents[0], vec);
    binormals[0].crossVectors(tangents[0], normals[0]);
    for (let i = 1; i <= segments; i++) {
      normals[i] = normals[i - 1].clone();
      binormals[i] = binormals[i - 1].clone();
      vec.crossVectors(tangents[i - 1], tangents[i]);
      if (vec.length() > Number.EPSILON) {
        vec.normalize();
        const theta = Math.acos(MathUtils.clamp(tangents[i - 1].dot(tangents[i]), -1, 1));
        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
      }
      binormals[i].crossVectors(tangents[i], normals[i]);
    }
    if (closed === true) {
      let theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));
      theta /= segments;
      if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
        theta = -theta;
      }
      for (let i = 1; i <= segments; i++) {
        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
        binormals[i].crossVectors(tangents[i], normals[i]);
      }
    }
    return {
      tangents,
      normals,
      binormals
    };
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.arcLengthDivisions = source.arcLengthDivisions;
    return this;
  },
  toJSON: function() {
    const data = {
      metadata: {
        version: 4.5,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    data.arcLengthDivisions = this.arcLengthDivisions;
    data.type = this.type;
    return data;
  },
  fromJSON: function(json) {
    this.arcLengthDivisions = json.arcLengthDivisions;
    return this;
  }
});
function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
  Curve.call(this);
  this.type = "EllipseCurve";
  this.aX = aX || 0;
  this.aY = aY || 0;
  this.xRadius = xRadius || 1;
  this.yRadius = yRadius || 1;
  this.aStartAngle = aStartAngle || 0;
  this.aEndAngle = aEndAngle || 2 * Math.PI;
  this.aClockwise = aClockwise || false;
  this.aRotation = aRotation || 0;
}
EllipseCurve.prototype = Object.create(Curve.prototype);
EllipseCurve.prototype.constructor = EllipseCurve;
EllipseCurve.prototype.isEllipseCurve = true;
EllipseCurve.prototype.getPoint = function(t, optionalTarget) {
  const point = optionalTarget || new Vector2();
  const twoPi = Math.PI * 2;
  let deltaAngle = this.aEndAngle - this.aStartAngle;
  const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
  while (deltaAngle < 0)
    deltaAngle += twoPi;
  while (deltaAngle > twoPi)
    deltaAngle -= twoPi;
  if (deltaAngle < Number.EPSILON) {
    if (samePoints) {
      deltaAngle = 0;
    } else {
      deltaAngle = twoPi;
    }
  }
  if (this.aClockwise === true && !samePoints) {
    if (deltaAngle === twoPi) {
      deltaAngle = -twoPi;
    } else {
      deltaAngle = deltaAngle - twoPi;
    }
  }
  const angle = this.aStartAngle + t * deltaAngle;
  let x = this.aX + this.xRadius * Math.cos(angle);
  let y = this.aY + this.yRadius * Math.sin(angle);
  if (this.aRotation !== 0) {
    const cos = Math.cos(this.aRotation);
    const sin = Math.sin(this.aRotation);
    const tx = x - this.aX;
    const ty = y - this.aY;
    x = tx * cos - ty * sin + this.aX;
    y = tx * sin + ty * cos + this.aY;
  }
  return point.set(x, y);
};
EllipseCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.aX = source.aX;
  this.aY = source.aY;
  this.xRadius = source.xRadius;
  this.yRadius = source.yRadius;
  this.aStartAngle = source.aStartAngle;
  this.aEndAngle = source.aEndAngle;
  this.aClockwise = source.aClockwise;
  this.aRotation = source.aRotation;
  return this;
};
EllipseCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.aX = this.aX;
  data.aY = this.aY;
  data.xRadius = this.xRadius;
  data.yRadius = this.yRadius;
  data.aStartAngle = this.aStartAngle;
  data.aEndAngle = this.aEndAngle;
  data.aClockwise = this.aClockwise;
  data.aRotation = this.aRotation;
  return data;
};
EllipseCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.aX = json.aX;
  this.aY = json.aY;
  this.xRadius = json.xRadius;
  this.yRadius = json.yRadius;
  this.aStartAngle = json.aStartAngle;
  this.aEndAngle = json.aEndAngle;
  this.aClockwise = json.aClockwise;
  this.aRotation = json.aRotation;
  return this;
};
function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
  this.type = "ArcCurve";
}
ArcCurve.prototype = Object.create(EllipseCurve.prototype);
ArcCurve.prototype.constructor = ArcCurve;
ArcCurve.prototype.isArcCurve = true;
function CubicPoly() {
  let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
  function init(x0, x1, t0, t1) {
    c0 = x0;
    c1 = t0;
    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
    c3 = 2 * x0 - 2 * x1 + t0 + t1;
  }
  return {
    initCatmullRom: function(x0, x1, x2, x3, tension) {
      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
    },
    initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
      let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
      t1 *= dt1;
      t2 *= dt1;
      init(x1, x2, t1, t2);
    },
    calc: function(t) {
      const t2 = t * t;
      const t3 = t2 * t;
      return c0 + c1 * t + c2 * t2 + c3 * t3;
    }
  };
}
var tmp = new Vector3();
var px = new CubicPoly();
var py = new CubicPoly();
var pz = new CubicPoly();
function CatmullRomCurve3(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
  Curve.call(this);
  this.type = "CatmullRomCurve3";
  this.points = points;
  this.closed = closed;
  this.curveType = curveType;
  this.tension = tension;
}
CatmullRomCurve3.prototype = Object.create(Curve.prototype);
CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
CatmullRomCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
  const point = optionalTarget;
  const points = this.points;
  const l = points.length;
  const p = (l - (this.closed ? 0 : 1)) * t;
  let intPoint = Math.floor(p);
  let weight = p - intPoint;
  if (this.closed) {
    intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
  } else if (weight === 0 && intPoint === l - 1) {
    intPoint = l - 2;
    weight = 1;
  }
  let p0, p3;
  if (this.closed || intPoint > 0) {
    p0 = points[(intPoint - 1) % l];
  } else {
    tmp.subVectors(points[0], points[1]).add(points[0]);
    p0 = tmp;
  }
  const p1 = points[intPoint % l];
  const p2 = points[(intPoint + 1) % l];
  if (this.closed || intPoint + 2 < l) {
    p3 = points[(intPoint + 2) % l];
  } else {
    tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
    p3 = tmp;
  }
  if (this.curveType === "centripetal" || this.curveType === "chordal") {
    const pow = this.curveType === "chordal" ? 0.5 : 0.25;
    let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
    let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
    let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
    if (dt1 < 1e-4)
      dt1 = 1;
    if (dt0 < 1e-4)
      dt0 = dt1;
    if (dt2 < 1e-4)
      dt2 = dt1;
    px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
    py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
    pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
  } else if (this.curveType === "catmullrom") {
    px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
    py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
    pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
  }
  point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
  return point;
};
CatmullRomCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.points = [];
  for (let i = 0, l = source.points.length; i < l; i++) {
    const point = source.points[i];
    this.points.push(point.clone());
  }
  this.closed = source.closed;
  this.curveType = source.curveType;
  this.tension = source.tension;
  return this;
};
CatmullRomCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.points = [];
  for (let i = 0, l = this.points.length; i < l; i++) {
    const point = this.points[i];
    data.points.push(point.toArray());
  }
  data.closed = this.closed;
  data.curveType = this.curveType;
  data.tension = this.tension;
  return data;
};
CatmullRomCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.points = [];
  for (let i = 0, l = json.points.length; i < l; i++) {
    const point = json.points[i];
    this.points.push(new Vector3().fromArray(point));
  }
  this.closed = json.closed;
  this.curveType = json.curveType;
  this.tension = json.tension;
  return this;
};
function CatmullRom(t, p0, p1, p2, p3) {
  const v0 = (p2 - p0) * 0.5;
  const v1 = (p3 - p1) * 0.5;
  const t2 = t * t;
  const t3 = t * t2;
  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
function QuadraticBezierP0(t, p) {
  const k = 1 - t;
  return k * k * p;
}
function QuadraticBezierP1(t, p) {
  return 2 * (1 - t) * t * p;
}
function QuadraticBezierP2(t, p) {
  return t * t * p;
}
function QuadraticBezier(t, p0, p1, p2) {
  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
}
function CubicBezierP0(t, p) {
  const k = 1 - t;
  return k * k * k * p;
}
function CubicBezierP1(t, p) {
  const k = 1 - t;
  return 3 * k * k * t * p;
}
function CubicBezierP2(t, p) {
  return 3 * (1 - t) * t * t * p;
}
function CubicBezierP3(t, p) {
  return t * t * t * p;
}
function CubicBezier(t, p0, p1, p2, p3) {
  return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
}
function CubicBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {
  Curve.call(this);
  this.type = "CubicBezierCurve";
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;
  this.v3 = v3;
}
CubicBezierCurve.prototype = Object.create(Curve.prototype);
CubicBezierCurve.prototype.constructor = CubicBezierCurve;
CubicBezierCurve.prototype.isCubicBezierCurve = true;
CubicBezierCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
  const point = optionalTarget;
  const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
  point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
  return point;
};
CubicBezierCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  this.v3.copy(source.v3);
  return this;
};
CubicBezierCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  data.v3 = this.v3.toArray();
  return data;
};
CubicBezierCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  this.v3.fromArray(json.v3);
  return this;
};
function CubicBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {
  Curve.call(this);
  this.type = "CubicBezierCurve3";
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;
  this.v3 = v3;
}
CubicBezierCurve3.prototype = Object.create(Curve.prototype);
CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
CubicBezierCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
  const point = optionalTarget;
  const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
  point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
  return point;
};
CubicBezierCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  this.v3.copy(source.v3);
  return this;
};
CubicBezierCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  data.v3 = this.v3.toArray();
  return data;
};
CubicBezierCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  this.v3.fromArray(json.v3);
  return this;
};
function LineCurve(v1 = new Vector2(), v2 = new Vector2()) {
  Curve.call(this);
  this.type = "LineCurve";
  this.v1 = v1;
  this.v2 = v2;
}
LineCurve.prototype = Object.create(Curve.prototype);
LineCurve.prototype.constructor = LineCurve;
LineCurve.prototype.isLineCurve = true;
LineCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
  const point = optionalTarget;
  if (t === 1) {
    point.copy(this.v2);
  } else {
    point.copy(this.v2).sub(this.v1);
    point.multiplyScalar(t).add(this.v1);
  }
  return point;
};
LineCurve.prototype.getPointAt = function(u, optionalTarget) {
  return this.getPoint(u, optionalTarget);
};
LineCurve.prototype.getTangent = function(t, optionalTarget) {
  const tangent = optionalTarget || new Vector2();
  tangent.copy(this.v2).sub(this.v1).normalize();
  return tangent;
};
LineCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
LineCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
LineCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function LineCurve3(v1 = new Vector3(), v2 = new Vector3()) {
  Curve.call(this);
  this.type = "LineCurve3";
  this.v1 = v1;
  this.v2 = v2;
}
LineCurve3.prototype = Object.create(Curve.prototype);
LineCurve3.prototype.constructor = LineCurve3;
LineCurve3.prototype.isLineCurve3 = true;
LineCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
  const point = optionalTarget;
  if (t === 1) {
    point.copy(this.v2);
  } else {
    point.copy(this.v2).sub(this.v1);
    point.multiplyScalar(t).add(this.v1);
  }
  return point;
};
LineCurve3.prototype.getPointAt = function(u, optionalTarget) {
  return this.getPoint(u, optionalTarget);
};
LineCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
LineCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
LineCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function QuadraticBezierCurve(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {
  Curve.call(this);
  this.type = "QuadraticBezierCurve";
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;
}
QuadraticBezierCurve.prototype = Object.create(Curve.prototype);
QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
QuadraticBezierCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
  const point = optionalTarget;
  const v0 = this.v0, v1 = this.v1, v2 = this.v2;
  point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
  return point;
};
QuadraticBezierCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
QuadraticBezierCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
QuadraticBezierCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function QuadraticBezierCurve3(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {
  Curve.call(this);
  this.type = "QuadraticBezierCurve3";
  this.v0 = v0;
  this.v1 = v1;
  this.v2 = v2;
}
QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);
QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
QuadraticBezierCurve3.prototype.getPoint = function(t, optionalTarget = new Vector3()) {
  const point = optionalTarget;
  const v0 = this.v0, v1 = this.v1, v2 = this.v2;
  point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
  return point;
};
QuadraticBezierCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
QuadraticBezierCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
QuadraticBezierCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function SplineCurve(points = []) {
  Curve.call(this);
  this.type = "SplineCurve";
  this.points = points;
}
SplineCurve.prototype = Object.create(Curve.prototype);
SplineCurve.prototype.constructor = SplineCurve;
SplineCurve.prototype.isSplineCurve = true;
SplineCurve.prototype.getPoint = function(t, optionalTarget = new Vector2()) {
  const point = optionalTarget;
  const points = this.points;
  const p = (points.length - 1) * t;
  const intPoint = Math.floor(p);
  const weight = p - intPoint;
  const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
  const p1 = points[intPoint];
  const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
  const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
  point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
  return point;
};
SplineCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.points = [];
  for (let i = 0, l = source.points.length; i < l; i++) {
    const point = source.points[i];
    this.points.push(point.clone());
  }
  return this;
};
SplineCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.points = [];
  for (let i = 0, l = this.points.length; i < l; i++) {
    const point = this.points[i];
    data.points.push(point.toArray());
  }
  return data;
};
SplineCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.points = [];
  for (let i = 0, l = json.points.length; i < l; i++) {
    const point = json.points[i];
    this.points.push(new Vector2().fromArray(point));
  }
  return this;
};
var Curves = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve,
  CatmullRomCurve3,
  CubicBezierCurve,
  CubicBezierCurve3,
  EllipseCurve,
  LineCurve,
  LineCurve3,
  QuadraticBezierCurve,
  QuadraticBezierCurve3,
  SplineCurve
});
function CurvePath() {
  Curve.call(this);
  this.type = "CurvePath";
  this.curves = [];
  this.autoClose = false;
}
CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {
  constructor: CurvePath,
  add: function(curve) {
    this.curves.push(curve);
  },
  closePath: function() {
    const startPoint = this.curves[0].getPoint(0);
    const endPoint = this.curves[this.curves.length - 1].getPoint(1);
    if (!startPoint.equals(endPoint)) {
      this.curves.push(new LineCurve(endPoint, startPoint));
    }
  },
  getPoint: function(t) {
    const d = t * this.getLength();
    const curveLengths = this.getCurveLengths();
    let i = 0;
    while (i < curveLengths.length) {
      if (curveLengths[i] >= d) {
        const diff = curveLengths[i] - d;
        const curve = this.curves[i];
        const segmentLength = curve.getLength();
        const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
        return curve.getPointAt(u);
      }
      i++;
    }
    return null;
  },
  getLength: function() {
    const lens = this.getCurveLengths();
    return lens[lens.length - 1];
  },
  updateArcLengths: function() {
    this.needsUpdate = true;
    this.cacheLengths = null;
    this.getCurveLengths();
  },
  getCurveLengths: function() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    const lengths = [];
    let sums = 0;
    for (let i = 0, l = this.curves.length; i < l; i++) {
      sums += this.curves[i].getLength();
      lengths.push(sums);
    }
    this.cacheLengths = lengths;
    return lengths;
  },
  getSpacedPoints: function(divisions = 40) {
    const points = [];
    for (let i = 0; i <= divisions; i++) {
      points.push(this.getPoint(i / divisions));
    }
    if (this.autoClose) {
      points.push(points[0]);
    }
    return points;
  },
  getPoints: function(divisions = 12) {
    const points = [];
    let last;
    for (let i = 0, curves = this.curves; i < curves.length; i++) {
      const curve = curves[i];
      const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
      const pts = curve.getPoints(resolution);
      for (let j = 0; j < pts.length; j++) {
        const point = pts[j];
        if (last && last.equals(point))
          continue;
        points.push(point);
        last = point;
      }
    }
    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
      points.push(points[0]);
    }
    return points;
  },
  copy: function(source) {
    Curve.prototype.copy.call(this, source);
    this.curves = [];
    for (let i = 0, l = source.curves.length; i < l; i++) {
      const curve = source.curves[i];
      this.curves.push(curve.clone());
    }
    this.autoClose = source.autoClose;
    return this;
  },
  toJSON: function() {
    const data = Curve.prototype.toJSON.call(this);
    data.autoClose = this.autoClose;
    data.curves = [];
    for (let i = 0, l = this.curves.length; i < l; i++) {
      const curve = this.curves[i];
      data.curves.push(curve.toJSON());
    }
    return data;
  },
  fromJSON: function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.autoClose = json.autoClose;
    this.curves = [];
    for (let i = 0, l = json.curves.length; i < l; i++) {
      const curve = json.curves[i];
      this.curves.push(new Curves[curve.type]().fromJSON(curve));
    }
    return this;
  }
});
function Path(points) {
  CurvePath.call(this);
  this.type = "Path";
  this.currentPoint = new Vector2();
  if (points) {
    this.setFromPoints(points);
  }
}
Path.prototype = Object.assign(Object.create(CurvePath.prototype), {
  constructor: Path,
  setFromPoints: function(points) {
    this.moveTo(points[0].x, points[0].y);
    for (let i = 1, l = points.length; i < l; i++) {
      this.lineTo(points[i].x, points[i].y);
    }
    return this;
  },
  moveTo: function(x, y) {
    this.currentPoint.set(x, y);
    return this;
  },
  lineTo: function(x, y) {
    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
    this.curves.push(curve);
    this.currentPoint.set(x, y);
    return this;
  },
  quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
    const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  },
  bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  },
  splineThru: function(pts) {
    const npts = [this.currentPoint.clone()].concat(pts);
    const curve = new SplineCurve(npts);
    this.curves.push(curve);
    this.currentPoint.copy(pts[pts.length - 1]);
    return this;
  },
  arc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    const x0 = this.currentPoint.x;
    const y0 = this.currentPoint.y;
    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
    return this;
  },
  absarc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    return this;
  },
  ellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const x0 = this.currentPoint.x;
    const y0 = this.currentPoint.y;
    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    return this;
  },
  absellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    if (this.curves.length > 0) {
      const firstPoint = curve.getPoint(0);
      if (!firstPoint.equals(this.currentPoint)) {
        this.lineTo(firstPoint.x, firstPoint.y);
      }
    }
    this.curves.push(curve);
    const lastPoint = curve.getPoint(1);
    this.currentPoint.copy(lastPoint);
    return this;
  },
  copy: function(source) {
    CurvePath.prototype.copy.call(this, source);
    this.currentPoint.copy(source.currentPoint);
    return this;
  },
  toJSON: function() {
    const data = CurvePath.prototype.toJSON.call(this);
    data.currentPoint = this.currentPoint.toArray();
    return data;
  },
  fromJSON: function(json) {
    CurvePath.prototype.fromJSON.call(this, json);
    this.currentPoint.fromArray(json.currentPoint);
    return this;
  }
});
function Shape(points) {
  Path.call(this, points);
  this.uuid = MathUtils.generateUUID();
  this.type = "Shape";
  this.holes = [];
}
Shape.prototype = Object.assign(Object.create(Path.prototype), {
  constructor: Shape,
  getPointsHoles: function(divisions) {
    const holesPts = [];
    for (let i = 0, l = this.holes.length; i < l; i++) {
      holesPts[i] = this.holes[i].getPoints(divisions);
    }
    return holesPts;
  },
  extractPoints: function(divisions) {
    return {
      shape: this.getPoints(divisions),
      holes: this.getPointsHoles(divisions)
    };
  },
  copy: function(source) {
    Path.prototype.copy.call(this, source);
    this.holes = [];
    for (let i = 0, l = source.holes.length; i < l; i++) {
      const hole = source.holes[i];
      this.holes.push(hole.clone());
    }
    return this;
  },
  toJSON: function() {
    const data = Path.prototype.toJSON.call(this);
    data.uuid = this.uuid;
    data.holes = [];
    for (let i = 0, l = this.holes.length; i < l; i++) {
      const hole = this.holes[i];
      data.holes.push(hole.toJSON());
    }
    return data;
  },
  fromJSON: function(json) {
    Path.prototype.fromJSON.call(this, json);
    this.uuid = json.uuid;
    this.holes = [];
    for (let i = 0, l = json.holes.length; i < l; i++) {
      const hole = json.holes[i];
      this.holes.push(new Path().fromJSON(hole));
    }
    return this;
  }
});
function Light(color, intensity = 1) {
  Object3D.call(this);
  this.type = "Light";
  this.color = new Color(color);
  this.intensity = intensity;
}
Light.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Light,
  isLight: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.intensity = source.intensity;
    return this;
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    data.object.color = this.color.getHex();
    data.object.intensity = this.intensity;
    if (this.groundColor !== void 0)
      data.object.groundColor = this.groundColor.getHex();
    if (this.distance !== void 0)
      data.object.distance = this.distance;
    if (this.angle !== void 0)
      data.object.angle = this.angle;
    if (this.decay !== void 0)
      data.object.decay = this.decay;
    if (this.penumbra !== void 0)
      data.object.penumbra = this.penumbra;
    if (this.shadow !== void 0)
      data.object.shadow = this.shadow.toJSON();
    return data;
  }
});
function HemisphereLight(skyColor, groundColor, intensity) {
  Light.call(this, skyColor, intensity);
  this.type = "HemisphereLight";
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.groundColor = new Color(groundColor);
}
HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: HemisphereLight,
  isHemisphereLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.groundColor.copy(source.groundColor);
    return this;
  }
});
function LightShadow(camera) {
  this.camera = camera;
  this.bias = 0;
  this.normalBias = 0;
  this.radius = 1;
  this.mapSize = new Vector2(512, 512);
  this.map = null;
  this.mapPass = null;
  this.matrix = new Matrix4();
  this.autoUpdate = true;
  this.needsUpdate = false;
  this._frustum = new Frustum();
  this._frameExtents = new Vector2(1, 1);
  this._viewportCount = 1;
  this._viewports = [
    new Vector4(0, 0, 1, 1)
  ];
}
Object.assign(LightShadow.prototype, {
  _projScreenMatrix: new Matrix4(),
  _lightPositionWorld: new Vector3(),
  _lookTarget: new Vector3(),
  getViewportCount: function() {
    return this._viewportCount;
  },
  getFrustum: function() {
    return this._frustum;
  },
  updateMatrices: function(light) {
    const shadowCamera = this.camera, shadowMatrix = this.matrix, projScreenMatrix = this._projScreenMatrix, lookTarget = this._lookTarget, lightPositionWorld = this._lightPositionWorld;
    lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
    shadowCamera.position.copy(lightPositionWorld);
    lookTarget.setFromMatrixPosition(light.target.matrixWorld);
    shadowCamera.lookAt(lookTarget);
    shadowCamera.updateMatrixWorld();
    projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(projScreenMatrix);
    shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    shadowMatrix.multiply(shadowCamera.projectionMatrix);
    shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
  },
  getViewport: function(viewportIndex) {
    return this._viewports[viewportIndex];
  },
  getFrameExtents: function() {
    return this._frameExtents;
  },
  copy: function(source) {
    this.camera = source.camera.clone();
    this.bias = source.bias;
    this.radius = source.radius;
    this.mapSize.copy(source.mapSize);
    return this;
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  toJSON: function() {
    const object = {};
    if (this.bias !== 0)
      object.bias = this.bias;
    if (this.normalBias !== 0)
      object.normalBias = this.normalBias;
    if (this.radius !== 1)
      object.radius = this.radius;
    if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
      object.mapSize = this.mapSize.toArray();
    object.camera = this.camera.toJSON(false).object;
    delete object.camera.matrix;
    return object;
  }
});
function SpotLightShadow() {
  LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));
  this.focus = 1;
}
SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: SpotLightShadow,
  isSpotLightShadow: true,
  updateMatrices: function(light) {
    const camera = this.camera;
    const fov2 = MathUtils.RAD2DEG * 2 * light.angle * this.focus;
    const aspect2 = this.mapSize.width / this.mapSize.height;
    const far = light.distance || camera.far;
    if (fov2 !== camera.fov || aspect2 !== camera.aspect || far !== camera.far) {
      camera.fov = fov2;
      camera.aspect = aspect2;
      camera.far = far;
      camera.updateProjectionMatrix();
    }
    LightShadow.prototype.updateMatrices.call(this, light);
  }
});
function SpotLight(color, intensity, distance, angle, penumbra, decay) {
  Light.call(this, color, intensity);
  this.type = "SpotLight";
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.target = new Object3D();
  Object.defineProperty(this, "power", {
    get: function() {
      return this.intensity * Math.PI;
    },
    set: function(power) {
      this.intensity = power / Math.PI;
    }
  });
  this.distance = distance !== void 0 ? distance : 0;
  this.angle = angle !== void 0 ? angle : Math.PI / 3;
  this.penumbra = penumbra !== void 0 ? penumbra : 0;
  this.decay = decay !== void 0 ? decay : 1;
  this.shadow = new SpotLightShadow();
}
SpotLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: SpotLight,
  isSpotLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.distance = source.distance;
    this.angle = source.angle;
    this.penumbra = source.penumbra;
    this.decay = source.decay;
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
});
function PointLightShadow() {
  LightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));
  this._frameExtents = new Vector2(4, 2);
  this._viewportCount = 6;
  this._viewports = [
    new Vector4(2, 1, 1, 1),
    new Vector4(0, 1, 1, 1),
    new Vector4(3, 1, 1, 1),
    new Vector4(1, 1, 1, 1),
    new Vector4(3, 0, 1, 1),
    new Vector4(1, 0, 1, 1)
  ];
  this._cubeDirections = [
    new Vector3(1, 0, 0),
    new Vector3(-1, 0, 0),
    new Vector3(0, 0, 1),
    new Vector3(0, 0, -1),
    new Vector3(0, 1, 0),
    new Vector3(0, -1, 0)
  ];
  this._cubeUps = [
    new Vector3(0, 1, 0),
    new Vector3(0, 1, 0),
    new Vector3(0, 1, 0),
    new Vector3(0, 1, 0),
    new Vector3(0, 0, 1),
    new Vector3(0, 0, -1)
  ];
}
PointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: PointLightShadow,
  isPointLightShadow: true,
  updateMatrices: function(light, viewportIndex = 0) {
    const camera = this.camera, shadowMatrix = this.matrix, lightPositionWorld = this._lightPositionWorld, lookTarget = this._lookTarget, projScreenMatrix = this._projScreenMatrix;
    lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
    camera.position.copy(lightPositionWorld);
    lookTarget.copy(camera.position);
    lookTarget.add(this._cubeDirections[viewportIndex]);
    camera.up.copy(this._cubeUps[viewportIndex]);
    camera.lookAt(lookTarget);
    camera.updateMatrixWorld();
    shadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);
    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(projScreenMatrix);
  }
});
function PointLight(color, intensity, distance, decay) {
  Light.call(this, color, intensity);
  this.type = "PointLight";
  Object.defineProperty(this, "power", {
    get: function() {
      return this.intensity * 4 * Math.PI;
    },
    set: function(power) {
      this.intensity = power / (4 * Math.PI);
    }
  });
  this.distance = distance !== void 0 ? distance : 0;
  this.decay = decay !== void 0 ? decay : 1;
  this.shadow = new PointLightShadow();
}
PointLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: PointLight,
  isPointLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.distance = source.distance;
    this.decay = source.decay;
    this.shadow = source.shadow.clone();
    return this;
  }
});
function OrthographicCamera(left, right, top, bottom, near, far) {
  Camera.call(this);
  this.type = "OrthographicCamera";
  this.zoom = 1;
  this.view = null;
  this.left = left !== void 0 ? left : -1;
  this.right = right !== void 0 ? right : 1;
  this.top = top !== void 0 ? top : 1;
  this.bottom = bottom !== void 0 ? bottom : -1;
  this.near = near !== void 0 ? near : 0.1;
  this.far = far !== void 0 ? far : 2e3;
  this.updateProjectionMatrix();
}
OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {
  constructor: OrthographicCamera,
  isOrthographicCamera: true,
  copy: function(source, recursive) {
    Camera.prototype.copy.call(this, source, recursive);
    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  },
  setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  },
  clearViewOffset: function() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  },
  updateProjectionMatrix: function() {
    const dx = (this.right - this.left) / (2 * this.zoom);
    const dy = (this.top - this.bottom) / (2 * this.zoom);
    const cx = (this.right + this.left) / 2;
    const cy = (this.top + this.bottom) / 2;
    let left = cx - dx;
    let right = cx + dx;
    let top = cy + dy;
    let bottom = cy - dy;
    if (this.view !== null && this.view.enabled) {
      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      left += scaleW * this.view.offsetX;
      right = left + scaleW * this.view.width;
      top -= scaleH * this.view.offsetY;
      bottom = top - scaleH * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null)
      data.object.view = Object.assign({}, this.view);
    return data;
  }
});
function DirectionalLightShadow() {
  LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
}
DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: DirectionalLightShadow,
  isDirectionalLightShadow: true,
  updateMatrices: function(light) {
    LightShadow.prototype.updateMatrices.call(this, light);
  }
});
function DirectionalLight(color, intensity) {
  Light.call(this, color, intensity);
  this.type = "DirectionalLight";
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.target = new Object3D();
  this.shadow = new DirectionalLightShadow();
}
DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: DirectionalLight,
  isDirectionalLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
});
function AmbientLight(color, intensity) {
  Light.call(this, color, intensity);
  this.type = "AmbientLight";
}
AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: AmbientLight,
  isAmbientLight: true
});
function RectAreaLight(color, intensity, width, height) {
  Light.call(this, color, intensity);
  this.type = "RectAreaLight";
  this.width = width !== void 0 ? width : 10;
  this.height = height !== void 0 ? height : 10;
}
RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: RectAreaLight,
  isRectAreaLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.width = source.width;
    this.height = source.height;
    return this;
  },
  toJSON: function(meta) {
    const data = Light.prototype.toJSON.call(this, meta);
    data.object.width = this.width;
    data.object.height = this.height;
    return data;
  }
});
var SphericalHarmonics3 = class {
  constructor() {
    Object.defineProperty(this, "isSphericalHarmonics3", { value: true });
    this.coefficients = [];
    for (let i = 0; i < 9; i++) {
      this.coefficients.push(new Vector3());
    }
  }
  set(coefficients) {
    for (let i = 0; i < 9; i++) {
      this.coefficients[i].copy(coefficients[i]);
    }
    return this;
  }
  zero() {
    for (let i = 0; i < 9; i++) {
      this.coefficients[i].set(0, 0, 0);
    }
    return this;
  }
  getAt(normal, target) {
    const x = normal.x, y = normal.y, z = normal.z;
    const coeff = this.coefficients;
    target.copy(coeff[0]).multiplyScalar(0.282095);
    target.addScaledVector(coeff[1], 0.488603 * y);
    target.addScaledVector(coeff[2], 0.488603 * z);
    target.addScaledVector(coeff[3], 0.488603 * x);
    target.addScaledVector(coeff[4], 1.092548 * (x * y));
    target.addScaledVector(coeff[5], 1.092548 * (y * z));
    target.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
    target.addScaledVector(coeff[7], 1.092548 * (x * z));
    target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
    return target;
  }
  getIrradianceAt(normal, target) {
    const x = normal.x, y = normal.y, z = normal.z;
    const coeff = this.coefficients;
    target.copy(coeff[0]).multiplyScalar(0.886227);
    target.addScaledVector(coeff[1], 2 * 0.511664 * y);
    target.addScaledVector(coeff[2], 2 * 0.511664 * z);
    target.addScaledVector(coeff[3], 2 * 0.511664 * x);
    target.addScaledVector(coeff[4], 2 * 0.429043 * x * y);
    target.addScaledVector(coeff[5], 2 * 0.429043 * y * z);
    target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708);
    target.addScaledVector(coeff[7], 2 * 0.429043 * x * z);
    target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y));
    return target;
  }
  add(sh) {
    for (let i = 0; i < 9; i++) {
      this.coefficients[i].add(sh.coefficients[i]);
    }
    return this;
  }
  addScaledSH(sh, s) {
    for (let i = 0; i < 9; i++) {
      this.coefficients[i].addScaledVector(sh.coefficients[i], s);
    }
    return this;
  }
  scale(s) {
    for (let i = 0; i < 9; i++) {
      this.coefficients[i].multiplyScalar(s);
    }
    return this;
  }
  lerp(sh, alpha) {
    for (let i = 0; i < 9; i++) {
      this.coefficients[i].lerp(sh.coefficients[i], alpha);
    }
    return this;
  }
  equals(sh) {
    for (let i = 0; i < 9; i++) {
      if (!this.coefficients[i].equals(sh.coefficients[i])) {
        return false;
      }
    }
    return true;
  }
  copy(sh) {
    return this.set(sh.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(array, offset = 0) {
    const coefficients = this.coefficients;
    for (let i = 0; i < 9; i++) {
      coefficients[i].fromArray(array, offset + i * 3);
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const coefficients = this.coefficients;
    for (let i = 0; i < 9; i++) {
      coefficients[i].toArray(array, offset + i * 3);
    }
    return array;
  }
  static getBasisAt(normal, shBasis) {
    const x = normal.x, y = normal.y, z = normal.z;
    shBasis[0] = 0.282095;
    shBasis[1] = 0.488603 * y;
    shBasis[2] = 0.488603 * z;
    shBasis[3] = 0.488603 * x;
    shBasis[4] = 1.092548 * x * y;
    shBasis[5] = 1.092548 * y * z;
    shBasis[6] = 0.315392 * (3 * z * z - 1);
    shBasis[7] = 1.092548 * x * z;
    shBasis[8] = 0.546274 * (x * x - y * y);
  }
};
function LightProbe(sh, intensity) {
  Light.call(this, void 0, intensity);
  this.type = "LightProbe";
  this.sh = sh !== void 0 ? sh : new SphericalHarmonics3();
}
LightProbe.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: LightProbe,
  isLightProbe: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.sh.copy(source.sh);
    return this;
  },
  fromJSON: function(json) {
    this.intensity = json.intensity;
    this.sh.fromArray(json.sh);
    return this;
  },
  toJSON: function(meta) {
    const data = Light.prototype.toJSON.call(this, meta);
    data.object.sh = this.sh.toArray();
    return data;
  }
});
function MaterialLoader(manager) {
  Loader.call(this, manager);
  this.textures = {};
}
MaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: MaterialLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      try {
        onLoad(scope.parse(JSON.parse(text)));
      } catch (e) {
        if (onError) {
          onError(e);
        } else {
          console.error(e);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  },
  parse: function(json) {
    const textures = this.textures;
    function getTexture(name) {
      if (textures[name] === void 0) {
        console.warn("THREE.MaterialLoader: Undefined texture", name);
      }
      return textures[name];
    }
    const material = new Materials[json.type]();
    if (json.uuid !== void 0)
      material.uuid = json.uuid;
    if (json.name !== void 0)
      material.name = json.name;
    if (json.color !== void 0 && material.color !== void 0)
      material.color.setHex(json.color);
    if (json.roughness !== void 0)
      material.roughness = json.roughness;
    if (json.metalness !== void 0)
      material.metalness = json.metalness;
    if (json.sheen !== void 0)
      material.sheen = new Color().setHex(json.sheen);
    if (json.emissive !== void 0 && material.emissive !== void 0)
      material.emissive.setHex(json.emissive);
    if (json.specular !== void 0 && material.specular !== void 0)
      material.specular.setHex(json.specular);
    if (json.shininess !== void 0)
      material.shininess = json.shininess;
    if (json.clearcoat !== void 0)
      material.clearcoat = json.clearcoat;
    if (json.clearcoatRoughness !== void 0)
      material.clearcoatRoughness = json.clearcoatRoughness;
    if (json.fog !== void 0)
      material.fog = json.fog;
    if (json.flatShading !== void 0)
      material.flatShading = json.flatShading;
    if (json.blending !== void 0)
      material.blending = json.blending;
    if (json.combine !== void 0)
      material.combine = json.combine;
    if (json.side !== void 0)
      material.side = json.side;
    if (json.opacity !== void 0)
      material.opacity = json.opacity;
    if (json.transparent !== void 0)
      material.transparent = json.transparent;
    if (json.alphaTest !== void 0)
      material.alphaTest = json.alphaTest;
    if (json.depthTest !== void 0)
      material.depthTest = json.depthTest;
    if (json.depthWrite !== void 0)
      material.depthWrite = json.depthWrite;
    if (json.colorWrite !== void 0)
      material.colorWrite = json.colorWrite;
    if (json.stencilWrite !== void 0)
      material.stencilWrite = json.stencilWrite;
    if (json.stencilWriteMask !== void 0)
      material.stencilWriteMask = json.stencilWriteMask;
    if (json.stencilFunc !== void 0)
      material.stencilFunc = json.stencilFunc;
    if (json.stencilRef !== void 0)
      material.stencilRef = json.stencilRef;
    if (json.stencilFuncMask !== void 0)
      material.stencilFuncMask = json.stencilFuncMask;
    if (json.stencilFail !== void 0)
      material.stencilFail = json.stencilFail;
    if (json.stencilZFail !== void 0)
      material.stencilZFail = json.stencilZFail;
    if (json.stencilZPass !== void 0)
      material.stencilZPass = json.stencilZPass;
    if (json.wireframe !== void 0)
      material.wireframe = json.wireframe;
    if (json.wireframeLinewidth !== void 0)
      material.wireframeLinewidth = json.wireframeLinewidth;
    if (json.wireframeLinecap !== void 0)
      material.wireframeLinecap = json.wireframeLinecap;
    if (json.wireframeLinejoin !== void 0)
      material.wireframeLinejoin = json.wireframeLinejoin;
    if (json.rotation !== void 0)
      material.rotation = json.rotation;
    if (json.linewidth !== 1)
      material.linewidth = json.linewidth;
    if (json.dashSize !== void 0)
      material.dashSize = json.dashSize;
    if (json.gapSize !== void 0)
      material.gapSize = json.gapSize;
    if (json.scale !== void 0)
      material.scale = json.scale;
    if (json.polygonOffset !== void 0)
      material.polygonOffset = json.polygonOffset;
    if (json.polygonOffsetFactor !== void 0)
      material.polygonOffsetFactor = json.polygonOffsetFactor;
    if (json.polygonOffsetUnits !== void 0)
      material.polygonOffsetUnits = json.polygonOffsetUnits;
    if (json.skinning !== void 0)
      material.skinning = json.skinning;
    if (json.morphTargets !== void 0)
      material.morphTargets = json.morphTargets;
    if (json.morphNormals !== void 0)
      material.morphNormals = json.morphNormals;
    if (json.dithering !== void 0)
      material.dithering = json.dithering;
    if (json.vertexTangents !== void 0)
      material.vertexTangents = json.vertexTangents;
    if (json.visible !== void 0)
      material.visible = json.visible;
    if (json.toneMapped !== void 0)
      material.toneMapped = json.toneMapped;
    if (json.userData !== void 0)
      material.userData = json.userData;
    if (json.vertexColors !== void 0) {
      if (typeof json.vertexColors === "number") {
        material.vertexColors = json.vertexColors > 0 ? true : false;
      } else {
        material.vertexColors = json.vertexColors;
      }
    }
    if (json.uniforms !== void 0) {
      for (const name in json.uniforms) {
        const uniform = json.uniforms[name];
        material.uniforms[name] = {};
        switch (uniform.type) {
          case "t":
            material.uniforms[name].value = getTexture(uniform.value);
            break;
          case "c":
            material.uniforms[name].value = new Color().setHex(uniform.value);
            break;
          case "v2":
            material.uniforms[name].value = new Vector2().fromArray(uniform.value);
            break;
          case "v3":
            material.uniforms[name].value = new Vector3().fromArray(uniform.value);
            break;
          case "v4":
            material.uniforms[name].value = new Vector4().fromArray(uniform.value);
            break;
          case "m3":
            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
            break;
          case "m4":
            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
            break;
          default:
            material.uniforms[name].value = uniform.value;
        }
      }
    }
    if (json.defines !== void 0)
      material.defines = json.defines;
    if (json.vertexShader !== void 0)
      material.vertexShader = json.vertexShader;
    if (json.fragmentShader !== void 0)
      material.fragmentShader = json.fragmentShader;
    if (json.extensions !== void 0) {
      for (const key in json.extensions) {
        material.extensions[key] = json.extensions[key];
      }
    }
    if (json.shading !== void 0)
      material.flatShading = json.shading === 1;
    if (json.size !== void 0)
      material.size = json.size;
    if (json.sizeAttenuation !== void 0)
      material.sizeAttenuation = json.sizeAttenuation;
    if (json.map !== void 0)
      material.map = getTexture(json.map);
    if (json.matcap !== void 0)
      material.matcap = getTexture(json.matcap);
    if (json.alphaMap !== void 0)
      material.alphaMap = getTexture(json.alphaMap);
    if (json.bumpMap !== void 0)
      material.bumpMap = getTexture(json.bumpMap);
    if (json.bumpScale !== void 0)
      material.bumpScale = json.bumpScale;
    if (json.normalMap !== void 0)
      material.normalMap = getTexture(json.normalMap);
    if (json.normalMapType !== void 0)
      material.normalMapType = json.normalMapType;
    if (json.normalScale !== void 0) {
      let normalScale = json.normalScale;
      if (Array.isArray(normalScale) === false) {
        normalScale = [normalScale, normalScale];
      }
      material.normalScale = new Vector2().fromArray(normalScale);
    }
    if (json.displacementMap !== void 0)
      material.displacementMap = getTexture(json.displacementMap);
    if (json.displacementScale !== void 0)
      material.displacementScale = json.displacementScale;
    if (json.displacementBias !== void 0)
      material.displacementBias = json.displacementBias;
    if (json.roughnessMap !== void 0)
      material.roughnessMap = getTexture(json.roughnessMap);
    if (json.metalnessMap !== void 0)
      material.metalnessMap = getTexture(json.metalnessMap);
    if (json.emissiveMap !== void 0)
      material.emissiveMap = getTexture(json.emissiveMap);
    if (json.emissiveIntensity !== void 0)
      material.emissiveIntensity = json.emissiveIntensity;
    if (json.specularMap !== void 0)
      material.specularMap = getTexture(json.specularMap);
    if (json.envMap !== void 0)
      material.envMap = getTexture(json.envMap);
    if (json.envMapIntensity !== void 0)
      material.envMapIntensity = json.envMapIntensity;
    if (json.reflectivity !== void 0)
      material.reflectivity = json.reflectivity;
    if (json.refractionRatio !== void 0)
      material.refractionRatio = json.refractionRatio;
    if (json.lightMap !== void 0)
      material.lightMap = getTexture(json.lightMap);
    if (json.lightMapIntensity !== void 0)
      material.lightMapIntensity = json.lightMapIntensity;
    if (json.aoMap !== void 0)
      material.aoMap = getTexture(json.aoMap);
    if (json.aoMapIntensity !== void 0)
      material.aoMapIntensity = json.aoMapIntensity;
    if (json.gradientMap !== void 0)
      material.gradientMap = getTexture(json.gradientMap);
    if (json.clearcoatMap !== void 0)
      material.clearcoatMap = getTexture(json.clearcoatMap);
    if (json.clearcoatRoughnessMap !== void 0)
      material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
    if (json.clearcoatNormalMap !== void 0)
      material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
    if (json.clearcoatNormalScale !== void 0)
      material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
    if (json.transmission !== void 0)
      material.transmission = json.transmission;
    if (json.transmissionMap !== void 0)
      material.transmissionMap = getTexture(json.transmissionMap);
    return material;
  },
  setTextures: function(value) {
    this.textures = value;
    return this;
  }
});
var LoaderUtils = {
  decodeText: function(array) {
    if (typeof TextDecoder !== "undefined") {
      return new TextDecoder().decode(array);
    }
    let s = "";
    for (let i = 0, il = array.length; i < il; i++) {
      s += String.fromCharCode(array[i]);
    }
    try {
      return decodeURIComponent(escape(s));
    } catch (e) {
      return s;
    }
  },
  extractUrlBase: function(url) {
    const index = url.lastIndexOf("/");
    if (index === -1)
      return "./";
    return url.substr(0, index + 1);
  }
};
function InstancedBufferGeometry() {
  BufferGeometry.call(this);
  this.type = "InstancedBufferGeometry";
  this.instanceCount = Infinity;
}
InstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {
  constructor: InstancedBufferGeometry,
  isInstancedBufferGeometry: true,
  copy: function(source) {
    BufferGeometry.prototype.copy.call(this, source);
    this.instanceCount = source.instanceCount;
    return this;
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  toJSON: function() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    data.instanceCount = this.instanceCount;
    data.isInstancedBufferGeometry = true;
    return data;
  }
});
function InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {
  if (typeof normalized === "number") {
    meshPerAttribute = normalized;
    normalized = false;
    console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.");
  }
  BufferAttribute.call(this, array, itemSize, normalized);
  this.meshPerAttribute = meshPerAttribute || 1;
}
InstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {
  constructor: InstancedBufferAttribute,
  isInstancedBufferAttribute: true,
  copy: function(source) {
    BufferAttribute.prototype.copy.call(this, source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  },
  toJSON: function() {
    const data = BufferAttribute.prototype.toJSON.call(this);
    data.meshPerAttribute = this.meshPerAttribute;
    data.isInstancedBufferAttribute = true;
    return data;
  }
});
function BufferGeometryLoader(manager) {
  Loader.call(this, manager);
}
BufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: BufferGeometryLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      try {
        onLoad(scope.parse(JSON.parse(text)));
      } catch (e) {
        if (onError) {
          onError(e);
        } else {
          console.error(e);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  },
  parse: function(json) {
    const interleavedBufferMap = {};
    const arrayBufferMap = {};
    function getInterleavedBuffer(json2, uuid) {
      if (interleavedBufferMap[uuid] !== void 0)
        return interleavedBufferMap[uuid];
      const interleavedBuffers = json2.interleavedBuffers;
      const interleavedBuffer = interleavedBuffers[uuid];
      const buffer = getArrayBuffer(json2, interleavedBuffer.buffer);
      const array = getTypedArray(interleavedBuffer.type, buffer);
      const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
      ib.uuid = interleavedBuffer.uuid;
      interleavedBufferMap[uuid] = ib;
      return ib;
    }
    function getArrayBuffer(json2, uuid) {
      if (arrayBufferMap[uuid] !== void 0)
        return arrayBufferMap[uuid];
      const arrayBuffers = json2.arrayBuffers;
      const arrayBuffer = arrayBuffers[uuid];
      const ab = new Uint32Array(arrayBuffer).buffer;
      arrayBufferMap[uuid] = ab;
      return ab;
    }
    const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
    const index = json.data.index;
    if (index !== void 0) {
      const typedArray = getTypedArray(index.type, index.array);
      geometry.setIndex(new BufferAttribute(typedArray, 1));
    }
    const attributes = json.data.attributes;
    for (const key in attributes) {
      const attribute = attributes[key];
      let bufferAttribute;
      if (attribute.isInterleavedBufferAttribute) {
        const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
        bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
      } else {
        const typedArray = getTypedArray(attribute.type, attribute.array);
        const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
        bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
      }
      if (attribute.name !== void 0)
        bufferAttribute.name = attribute.name;
      geometry.setAttribute(key, bufferAttribute);
    }
    const morphAttributes = json.data.morphAttributes;
    if (morphAttributes) {
      for (const key in morphAttributes) {
        const attributeArray = morphAttributes[key];
        const array = [];
        for (let i = 0, il = attributeArray.length; i < il; i++) {
          const attribute = attributeArray[i];
          let bufferAttribute;
          if (attribute.isInterleavedBufferAttribute) {
            const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
            bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
          } else {
            const typedArray = getTypedArray(attribute.type, attribute.array);
            bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
          }
          if (attribute.name !== void 0)
            bufferAttribute.name = attribute.name;
          array.push(bufferAttribute);
        }
        geometry.morphAttributes[key] = array;
      }
    }
    const morphTargetsRelative = json.data.morphTargetsRelative;
    if (morphTargetsRelative) {
      geometry.morphTargetsRelative = true;
    }
    const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
    if (groups !== void 0) {
      for (let i = 0, n = groups.length; i !== n; ++i) {
        const group = groups[i];
        geometry.addGroup(group.start, group.count, group.materialIndex);
      }
    }
    const boundingSphere = json.data.boundingSphere;
    if (boundingSphere !== void 0) {
      const center = new Vector3();
      if (boundingSphere.center !== void 0) {
        center.fromArray(boundingSphere.center);
      }
      geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
    }
    if (json.name)
      geometry.name = json.name;
    if (json.userData)
      geometry.userData = json.userData;
    return geometry;
  }
});
var ObjectLoader = class extends Loader {
  constructor(manager) {
    super(manager);
  }
  load(url, onLoad, onProgress, onError) {
    const scope = this;
    const path = this.path === "" ? LoaderUtils.extractUrlBase(url) : this.path;
    this.resourcePath = this.resourcePath || path;
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(this.withCredentials);
    loader.load(url, function(text) {
      let json = null;
      try {
        json = JSON.parse(text);
      } catch (error) {
        if (onError !== void 0)
          onError(error);
        console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
        return;
      }
      const metadata = json.metadata;
      if (metadata === void 0 || metadata.type === void 0 || metadata.type.toLowerCase() === "geometry") {
        console.error("THREE.ObjectLoader: Can't load " + url);
        return;
      }
      scope.parse(json, onLoad);
    }, onProgress, onError);
  }
  parse(json, onLoad) {
    const animations = this.parseAnimations(json.animations);
    const shapes = this.parseShapes(json.shapes);
    const geometries = this.parseGeometries(json.geometries, shapes);
    const images = this.parseImages(json.images, function() {
      if (onLoad !== void 0)
        onLoad(object);
    });
    const textures = this.parseTextures(json.textures, images);
    const materials = this.parseMaterials(json.materials, textures);
    const object = this.parseObject(json.object, geometries, materials, animations);
    const skeletons = this.parseSkeletons(json.skeletons, object);
    this.bindSkeletons(object, skeletons);
    if (onLoad !== void 0) {
      let hasImages = false;
      for (const uuid in images) {
        if (images[uuid] instanceof HTMLImageElement) {
          hasImages = true;
          break;
        }
      }
      if (hasImages === false)
        onLoad(object);
    }
    return object;
  }
  parseShapes(json) {
    const shapes = {};
    if (json !== void 0) {
      for (let i = 0, l = json.length; i < l; i++) {
        const shape = new Shape().fromJSON(json[i]);
        shapes[shape.uuid] = shape;
      }
    }
    return shapes;
  }
  parseSkeletons(json, object) {
    const skeletons = {};
    const bones = {};
    object.traverse(function(child) {
      if (child.isBone)
        bones[child.uuid] = child;
    });
    if (json !== void 0) {
      for (let i = 0, l = json.length; i < l; i++) {
        const skeleton = new Skeleton().fromJSON(json[i], bones);
        skeletons[skeleton.uuid] = skeleton;
      }
    }
    return skeletons;
  }
  parseGeometries(json, shapes) {
    const geometries = {};
    let geometryShapes;
    if (json !== void 0) {
      const bufferGeometryLoader = new BufferGeometryLoader();
      for (let i = 0, l = json.length; i < l; i++) {
        let geometry;
        const data = json[i];
        switch (data.type) {
          case "PlaneGeometry":
          case "PlaneBufferGeometry":
            geometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);
            break;
          case "BoxGeometry":
          case "BoxBufferGeometry":
          case "CubeGeometry":
            geometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
            break;
          case "CircleGeometry":
          case "CircleBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);
            break;
          case "CylinderGeometry":
          case "CylinderBufferGeometry":
            geometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            break;
          case "ConeGeometry":
          case "ConeBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            break;
          case "SphereGeometry":
          case "SphereBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
            break;
          case "DodecahedronGeometry":
          case "DodecahedronBufferGeometry":
          case "IcosahedronGeometry":
          case "IcosahedronBufferGeometry":
          case "OctahedronGeometry":
          case "OctahedronBufferGeometry":
          case "TetrahedronGeometry":
          case "TetrahedronBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.detail);
            break;
          case "RingGeometry":
          case "RingBufferGeometry":
            geometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
            break;
          case "TorusGeometry":
          case "TorusBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
            break;
          case "TorusKnotGeometry":
          case "TorusKnotBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
            break;
          case "TubeGeometry":
          case "TubeBufferGeometry":
            geometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
            break;
          case "LatheGeometry":
          case "LatheBufferGeometry":
            geometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);
            break;
          case "PolyhedronGeometry":
          case "PolyhedronBufferGeometry":
            geometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);
            break;
          case "ShapeGeometry":
          case "ShapeBufferGeometry":
            geometryShapes = [];
            for (let j = 0, jl = data.shapes.length; j < jl; j++) {
              const shape = shapes[data.shapes[j]];
              geometryShapes.push(shape);
            }
            geometry = new Geometries[data.type](geometryShapes, data.curveSegments);
            break;
          case "ExtrudeGeometry":
          case "ExtrudeBufferGeometry":
            geometryShapes = [];
            for (let j = 0, jl = data.shapes.length; j < jl; j++) {
              const shape = shapes[data.shapes[j]];
              geometryShapes.push(shape);
            }
            const extrudePath = data.options.extrudePath;
            if (extrudePath !== void 0) {
              data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
            }
            geometry = new Geometries[data.type](geometryShapes, data.options);
            break;
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            geometry = bufferGeometryLoader.parse(data);
            break;
          case "Geometry":
            console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
            break;
          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"');
            continue;
        }
        geometry.uuid = data.uuid;
        if (data.name !== void 0)
          geometry.name = data.name;
        if (geometry.isBufferGeometry === true && data.userData !== void 0)
          geometry.userData = data.userData;
        geometries[data.uuid] = geometry;
      }
    }
    return geometries;
  }
  parseMaterials(json, textures) {
    const cache = {};
    const materials = {};
    if (json !== void 0) {
      const loader = new MaterialLoader();
      loader.setTextures(textures);
      for (let i = 0, l = json.length; i < l; i++) {
        const data = json[i];
        if (data.type === "MultiMaterial") {
          const array = [];
          for (let j = 0; j < data.materials.length; j++) {
            const material = data.materials[j];
            if (cache[material.uuid] === void 0) {
              cache[material.uuid] = loader.parse(material);
            }
            array.push(cache[material.uuid]);
          }
          materials[data.uuid] = array;
        } else {
          if (cache[data.uuid] === void 0) {
            cache[data.uuid] = loader.parse(data);
          }
          materials[data.uuid] = cache[data.uuid];
        }
      }
    }
    return materials;
  }
  parseAnimations(json) {
    const animations = {};
    if (json !== void 0) {
      for (let i = 0; i < json.length; i++) {
        const data = json[i];
        const clip = AnimationClip.parse(data);
        animations[clip.uuid] = clip;
      }
    }
    return animations;
  }
  parseImages(json, onLoad) {
    const scope = this;
    const images = {};
    let loader;
    function loadImage(url) {
      scope.manager.itemStart(url);
      return loader.load(url, function() {
        scope.manager.itemEnd(url);
      }, void 0, function() {
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      });
    }
    function deserializeImage(image) {
      if (typeof image === "string") {
        const url = image;
        const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
        return loadImage(path);
      } else {
        if (image.data) {
          return {
            data: getTypedArray(image.type, image.data),
            width: image.width,
            height: image.height
          };
        } else {
          return null;
        }
      }
    }
    if (json !== void 0 && json.length > 0) {
      const manager = new LoadingManager(onLoad);
      loader = new ImageLoader(manager);
      loader.setCrossOrigin(this.crossOrigin);
      for (let i = 0, il = json.length; i < il; i++) {
        const image = json[i];
        const url = image.url;
        if (Array.isArray(url)) {
          images[image.uuid] = [];
          for (let j = 0, jl = url.length; j < jl; j++) {
            const currentUrl = url[j];
            const deserializedImage = deserializeImage(currentUrl);
            if (deserializedImage !== null) {
              if (deserializedImage instanceof HTMLImageElement) {
                images[image.uuid].push(deserializedImage);
              } else {
                images[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));
              }
            }
          }
        } else {
          const deserializedImage = deserializeImage(image.url);
          if (deserializedImage !== null) {
            images[image.uuid] = deserializedImage;
          }
        }
      }
    }
    return images;
  }
  parseTextures(json, images) {
    function parseConstant(value, type) {
      if (typeof value === "number")
        return value;
      console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
      return type[value];
    }
    const textures = {};
    if (json !== void 0) {
      for (let i = 0, l = json.length; i < l; i++) {
        const data = json[i];
        if (data.image === void 0) {
          console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
        }
        if (images[data.image] === void 0) {
          console.warn("THREE.ObjectLoader: Undefined image", data.image);
        }
        let texture;
        const image = images[data.image];
        if (Array.isArray(image)) {
          texture = new CubeTexture(image);
          if (image.length === 6)
            texture.needsUpdate = true;
        } else {
          if (image && image.data) {
            texture = new DataTexture(image.data, image.width, image.height);
          } else {
            texture = new Texture(image);
          }
          if (image)
            texture.needsUpdate = true;
        }
        texture.uuid = data.uuid;
        if (data.name !== void 0)
          texture.name = data.name;
        if (data.mapping !== void 0)
          texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
        if (data.offset !== void 0)
          texture.offset.fromArray(data.offset);
        if (data.repeat !== void 0)
          texture.repeat.fromArray(data.repeat);
        if (data.center !== void 0)
          texture.center.fromArray(data.center);
        if (data.rotation !== void 0)
          texture.rotation = data.rotation;
        if (data.wrap !== void 0) {
          texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
          texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
        }
        if (data.format !== void 0)
          texture.format = data.format;
        if (data.type !== void 0)
          texture.type = data.type;
        if (data.encoding !== void 0)
          texture.encoding = data.encoding;
        if (data.minFilter !== void 0)
          texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
        if (data.magFilter !== void 0)
          texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
        if (data.anisotropy !== void 0)
          texture.anisotropy = data.anisotropy;
        if (data.flipY !== void 0)
          texture.flipY = data.flipY;
        if (data.premultiplyAlpha !== void 0)
          texture.premultiplyAlpha = data.premultiplyAlpha;
        if (data.unpackAlignment !== void 0)
          texture.unpackAlignment = data.unpackAlignment;
        textures[data.uuid] = texture;
      }
    }
    return textures;
  }
  parseObject(data, geometries, materials, animations) {
    let object;
    function getGeometry(name) {
      if (geometries[name] === void 0) {
        console.warn("THREE.ObjectLoader: Undefined geometry", name);
      }
      return geometries[name];
    }
    function getMaterial(name) {
      if (name === void 0)
        return void 0;
      if (Array.isArray(name)) {
        const array = [];
        for (let i = 0, l = name.length; i < l; i++) {
          const uuid = name[i];
          if (materials[uuid] === void 0) {
            console.warn("THREE.ObjectLoader: Undefined material", uuid);
          }
          array.push(materials[uuid]);
        }
        return array;
      }
      if (materials[name] === void 0) {
        console.warn("THREE.ObjectLoader: Undefined material", name);
      }
      return materials[name];
    }
    let geometry, material;
    switch (data.type) {
      case "Scene":
        object = new Scene();
        if (data.background !== void 0) {
          if (Number.isInteger(data.background)) {
            object.background = new Color(data.background);
          }
        }
        if (data.fog !== void 0) {
          if (data.fog.type === "Fog") {
            object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
          } else if (data.fog.type === "FogExp2") {
            object.fog = new FogExp2(data.fog.color, data.fog.density);
          }
        }
        break;
      case "PerspectiveCamera":
        object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
        if (data.focus !== void 0)
          object.focus = data.focus;
        if (data.zoom !== void 0)
          object.zoom = data.zoom;
        if (data.filmGauge !== void 0)
          object.filmGauge = data.filmGauge;
        if (data.filmOffset !== void 0)
          object.filmOffset = data.filmOffset;
        if (data.view !== void 0)
          object.view = Object.assign({}, data.view);
        break;
      case "OrthographicCamera":
        object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
        if (data.zoom !== void 0)
          object.zoom = data.zoom;
        if (data.view !== void 0)
          object.view = Object.assign({}, data.view);
        break;
      case "AmbientLight":
        object = new AmbientLight(data.color, data.intensity);
        break;
      case "DirectionalLight":
        object = new DirectionalLight(data.color, data.intensity);
        break;
      case "PointLight":
        object = new PointLight(data.color, data.intensity, data.distance, data.decay);
        break;
      case "RectAreaLight":
        object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
        break;
      case "SpotLight":
        object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
        break;
      case "HemisphereLight":
        object = new HemisphereLight(data.color, data.groundColor, data.intensity);
        break;
      case "LightProbe":
        object = new LightProbe().fromJSON(data);
        break;
      case "SkinnedMesh":
        geometry = getGeometry(data.geometry);
        material = getMaterial(data.material);
        object = new SkinnedMesh(geometry, material);
        if (data.bindMode !== void 0)
          object.bindMode = data.bindMode;
        if (data.bindMatrix !== void 0)
          object.bindMatrix.fromArray(data.bindMatrix);
        if (data.skeleton !== void 0)
          object.skeleton = data.skeleton;
        break;
      case "Mesh":
        geometry = getGeometry(data.geometry);
        material = getMaterial(data.material);
        object = new Mesh(geometry, material);
        break;
      case "InstancedMesh":
        geometry = getGeometry(data.geometry);
        material = getMaterial(data.material);
        const count = data.count;
        const instanceMatrix = data.instanceMatrix;
        object = new InstancedMesh(geometry, material, count);
        object.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);
        break;
      case "LOD":
        object = new LOD();
        break;
      case "Line":
        object = new Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);
        break;
      case "LineLoop":
        object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
        break;
      case "LineSegments":
        object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
        break;
      case "PointCloud":
      case "Points":
        object = new Points(getGeometry(data.geometry), getMaterial(data.material));
        break;
      case "Sprite":
        object = new Sprite(getMaterial(data.material));
        break;
      case "Group":
        object = new Group();
        break;
      case "Bone":
        object = new Bone();
        break;
      default:
        object = new Object3D();
    }
    object.uuid = data.uuid;
    if (data.name !== void 0)
      object.name = data.name;
    if (data.matrix !== void 0) {
      object.matrix.fromArray(data.matrix);
      if (data.matrixAutoUpdate !== void 0)
        object.matrixAutoUpdate = data.matrixAutoUpdate;
      if (object.matrixAutoUpdate)
        object.matrix.decompose(object.position, object.quaternion, object.scale);
    } else {
      if (data.position !== void 0)
        object.position.fromArray(data.position);
      if (data.rotation !== void 0)
        object.rotation.fromArray(data.rotation);
      if (data.quaternion !== void 0)
        object.quaternion.fromArray(data.quaternion);
      if (data.scale !== void 0)
        object.scale.fromArray(data.scale);
    }
    if (data.castShadow !== void 0)
      object.castShadow = data.castShadow;
    if (data.receiveShadow !== void 0)
      object.receiveShadow = data.receiveShadow;
    if (data.shadow) {
      if (data.shadow.bias !== void 0)
        object.shadow.bias = data.shadow.bias;
      if (data.shadow.normalBias !== void 0)
        object.shadow.normalBias = data.shadow.normalBias;
      if (data.shadow.radius !== void 0)
        object.shadow.radius = data.shadow.radius;
      if (data.shadow.mapSize !== void 0)
        object.shadow.mapSize.fromArray(data.shadow.mapSize);
      if (data.shadow.camera !== void 0)
        object.shadow.camera = this.parseObject(data.shadow.camera);
    }
    if (data.visible !== void 0)
      object.visible = data.visible;
    if (data.frustumCulled !== void 0)
      object.frustumCulled = data.frustumCulled;
    if (data.renderOrder !== void 0)
      object.renderOrder = data.renderOrder;
    if (data.userData !== void 0)
      object.userData = data.userData;
    if (data.layers !== void 0)
      object.layers.mask = data.layers;
    if (data.children !== void 0) {
      const children = data.children;
      for (let i = 0; i < children.length; i++) {
        object.add(this.parseObject(children[i], geometries, materials, animations));
      }
    }
    if (data.animations !== void 0) {
      const objectAnimations = data.animations;
      for (let i = 0; i < objectAnimations.length; i++) {
        const uuid = objectAnimations[i];
        object.animations.push(animations[uuid]);
      }
    }
    if (data.type === "LOD") {
      if (data.autoUpdate !== void 0)
        object.autoUpdate = data.autoUpdate;
      const levels = data.levels;
      for (let l = 0; l < levels.length; l++) {
        const level = levels[l];
        const child = object.getObjectByProperty("uuid", level.object);
        if (child !== void 0) {
          object.addLevel(child, level.distance);
        }
      }
    }
    return object;
  }
  bindSkeletons(object, skeletons) {
    if (Object.keys(skeletons).length === 0)
      return;
    object.traverse(function(child) {
      if (child.isSkinnedMesh === true && child.skeleton !== void 0) {
        const skeleton = skeletons[child.skeleton];
        if (skeleton === void 0) {
          console.warn("THREE.ObjectLoader: No skeleton found with UUID:", child.skeleton);
        } else {
          child.bind(skeleton, child.bindMatrix);
        }
      }
    });
  }
  setTexturePath(value) {
    console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
    return this.setResourcePath(value);
  }
};
var TEXTURE_MAPPING = {
  UVMapping,
  CubeReflectionMapping,
  CubeRefractionMapping,
  EquirectangularReflectionMapping,
  EquirectangularRefractionMapping,
  CubeUVReflectionMapping,
  CubeUVRefractionMapping
};
var TEXTURE_WRAPPING = {
  RepeatWrapping,
  ClampToEdgeWrapping,
  MirroredRepeatWrapping
};
var TEXTURE_FILTER = {
  NearestFilter,
  NearestMipmapNearestFilter,
  NearestMipmapLinearFilter,
  LinearFilter,
  LinearMipmapNearestFilter,
  LinearMipmapLinearFilter
};
function ImageBitmapLoader(manager) {
  if (typeof createImageBitmap === "undefined") {
    console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
  }
  if (typeof fetch === "undefined") {
    console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
  }
  Loader.call(this, manager);
  this.options = { premultiplyAlpha: "none" };
}
ImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: ImageBitmapLoader,
  isImageBitmapLoader: true,
  setOptions: function setOptions(options) {
    this.options = options;
    return this;
  },
  load: function(url, onLoad, onProgress, onError) {
    if (url === void 0)
      url = "";
    if (this.path !== void 0)
      url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad)
          onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    const fetchOptions = {};
    fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
    fetch(url, fetchOptions).then(function(res) {
      return res.blob();
    }).then(function(blob) {
      return createImageBitmap(blob, scope.options);
    }).then(function(imageBitmap) {
      Cache.add(url, imageBitmap);
      if (onLoad)
        onLoad(imageBitmap);
      scope.manager.itemEnd(url);
    }).catch(function(e) {
      if (onError)
        onError(e);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    });
    scope.manager.itemStart(url);
  }
});
function ShapePath() {
  this.type = "ShapePath";
  this.color = new Color();
  this.subPaths = [];
  this.currentPath = null;
}
Object.assign(ShapePath.prototype, {
  moveTo: function(x, y) {
    this.currentPath = new Path();
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(x, y);
    return this;
  },
  lineTo: function(x, y) {
    this.currentPath.lineTo(x, y);
    return this;
  },
  quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
    this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
    return this;
  },
  bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
    return this;
  },
  splineThru: function(pts) {
    this.currentPath.splineThru(pts);
    return this;
  },
  toShapes: function(isCCW, noHoles) {
    function toShapesNoHoles(inSubpaths) {
      const shapes2 = [];
      for (let i = 0, l = inSubpaths.length; i < l; i++) {
        const tmpPath2 = inSubpaths[i];
        const tmpShape2 = new Shape();
        tmpShape2.curves = tmpPath2.curves;
        shapes2.push(tmpShape2);
      }
      return shapes2;
    }
    function isPointInsidePolygon(inPt, inPolygon) {
      const polyLen = inPolygon.length;
      let inside = false;
      for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {
        let edgeLowPt = inPolygon[p];
        let edgeHighPt = inPolygon[q];
        let edgeDx = edgeHighPt.x - edgeLowPt.x;
        let edgeDy = edgeHighPt.y - edgeLowPt.y;
        if (Math.abs(edgeDy) > Number.EPSILON) {
          if (edgeDy < 0) {
            edgeLowPt = inPolygon[q];
            edgeDx = -edgeDx;
            edgeHighPt = inPolygon[p];
            edgeDy = -edgeDy;
          }
          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y)
            continue;
          if (inPt.y === edgeLowPt.y) {
            if (inPt.x === edgeLowPt.x)
              return true;
          } else {
            const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
            if (perpEdge === 0)
              return true;
            if (perpEdge < 0)
              continue;
            inside = !inside;
          }
        } else {
          if (inPt.y !== edgeLowPt.y)
            continue;
          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)
            return true;
        }
      }
      return inside;
    }
    const isClockWise = ShapeUtils.isClockWise;
    const subPaths = this.subPaths;
    if (subPaths.length === 0)
      return [];
    if (noHoles === true)
      return toShapesNoHoles(subPaths);
    let solid, tmpPath, tmpShape;
    const shapes = [];
    if (subPaths.length === 1) {
      tmpPath = subPaths[0];
      tmpShape = new Shape();
      tmpShape.curves = tmpPath.curves;
      shapes.push(tmpShape);
      return shapes;
    }
    let holesFirst = !isClockWise(subPaths[0].getPoints());
    holesFirst = isCCW ? !holesFirst : holesFirst;
    const betterShapeHoles = [];
    const newShapes = [];
    let newShapeHoles = [];
    let mainIdx = 0;
    let tmpPoints;
    newShapes[mainIdx] = void 0;
    newShapeHoles[mainIdx] = [];
    for (let i = 0, l = subPaths.length; i < l; i++) {
      tmpPath = subPaths[i];
      tmpPoints = tmpPath.getPoints();
      solid = isClockWise(tmpPoints);
      solid = isCCW ? !solid : solid;
      if (solid) {
        if (!holesFirst && newShapes[mainIdx])
          mainIdx++;
        newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };
        newShapes[mainIdx].s.curves = tmpPath.curves;
        if (holesFirst)
          mainIdx++;
        newShapeHoles[mainIdx] = [];
      } else {
        newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });
      }
    }
    if (!newShapes[0])
      return toShapesNoHoles(subPaths);
    if (newShapes.length > 1) {
      let ambiguous = false;
      const toChange = [];
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        betterShapeHoles[sIdx] = [];
      }
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        const sho = newShapeHoles[sIdx];
        for (let hIdx = 0; hIdx < sho.length; hIdx++) {
          const ho = sho[hIdx];
          let hole_unassigned = true;
          for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
            if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
              if (sIdx !== s2Idx)
                toChange.push({ froms: sIdx, tos: s2Idx, hole: hIdx });
              if (hole_unassigned) {
                hole_unassigned = false;
                betterShapeHoles[s2Idx].push(ho);
              } else {
                ambiguous = true;
              }
            }
          }
          if (hole_unassigned) {
            betterShapeHoles[sIdx].push(ho);
          }
        }
      }
      if (toChange.length > 0) {
        if (!ambiguous)
          newShapeHoles = betterShapeHoles;
      }
    }
    let tmpHoles;
    for (let i = 0, il = newShapes.length; i < il; i++) {
      tmpShape = newShapes[i].s;
      shapes.push(tmpShape);
      tmpHoles = newShapeHoles[i];
      for (let j = 0, jl = tmpHoles.length; j < jl; j++) {
        tmpShape.holes.push(tmpHoles[j].h);
      }
    }
    return shapes;
  }
});
function Font(data) {
  this.type = "Font";
  this.data = data;
}
Object.assign(Font.prototype, {
  isFont: true,
  generateShapes: function(text, size = 100) {
    const shapes = [];
    const paths = createPaths(text, size, this.data);
    for (let p = 0, pl = paths.length; p < pl; p++) {
      Array.prototype.push.apply(shapes, paths[p].toShapes());
    }
    return shapes;
  }
});
function createPaths(text, size, data) {
  const chars = Array.from ? Array.from(text) : String(text).split("");
  const scale = size / data.resolution;
  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
  const paths = [];
  let offsetX = 0, offsetY = 0;
  for (let i = 0; i < chars.length; i++) {
    const char = chars[i];
    if (char === "\n") {
      offsetX = 0;
      offsetY -= line_height;
    } else {
      const ret = createPath(char, scale, offsetX, offsetY, data);
      offsetX += ret.offsetX;
      paths.push(ret.path);
    }
  }
  return paths;
}
function createPath(char, scale, offsetX, offsetY, data) {
  const glyph = data.glyphs[char] || data.glyphs["?"];
  if (!glyph) {
    console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
    return;
  }
  const path = new ShapePath();
  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
  if (glyph.o) {
    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
    for (let i = 0, l = outline.length; i < l; ) {
      const action = outline[i++];
      switch (action) {
        case "m":
          x = outline[i++] * scale + offsetX;
          y = outline[i++] * scale + offsetY;
          path.moveTo(x, y);
          break;
        case "l":
          x = outline[i++] * scale + offsetX;
          y = outline[i++] * scale + offsetY;
          path.lineTo(x, y);
          break;
        case "q":
          cpx = outline[i++] * scale + offsetX;
          cpy = outline[i++] * scale + offsetY;
          cpx1 = outline[i++] * scale + offsetX;
          cpy1 = outline[i++] * scale + offsetY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          break;
        case "b":
          cpx = outline[i++] * scale + offsetX;
          cpy = outline[i++] * scale + offsetY;
          cpx1 = outline[i++] * scale + offsetX;
          cpy1 = outline[i++] * scale + offsetY;
          cpx2 = outline[i++] * scale + offsetX;
          cpy2 = outline[i++] * scale + offsetY;
          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
          break;
      }
    }
  }
  return { offsetX: glyph.ha * scale, path };
}
function FontLoader(manager) {
  Loader.call(this, manager);
}
FontLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: FontLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      let json;
      try {
        json = JSON.parse(text);
      } catch (e) {
        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.");
        json = JSON.parse(text.substring(65, text.length - 2));
      }
      const font = scope.parse(json);
      if (onLoad)
        onLoad(font);
    }, onProgress, onError);
  },
  parse: function(json) {
    return new Font(json);
  }
});
var _context;
var AudioContext = {
  getContext: function() {
    if (_context === void 0) {
      _context = new (window.AudioContext || window.webkitAudioContext)();
    }
    return _context;
  },
  setContext: function(value) {
    _context = value;
  }
};
function AudioLoader(manager) {
  Loader.call(this, manager);
}
AudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: AudioLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setResponseType("arraybuffer");
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(buffer) {
      try {
        const bufferCopy = buffer.slice(0);
        const context = AudioContext.getContext();
        context.decodeAudioData(bufferCopy, function(audioBuffer) {
          onLoad(audioBuffer);
        });
      } catch (e) {
        if (onError) {
          onError(e);
        } else {
          console.error(e);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  }
});
function HemisphereLightProbe(skyColor, groundColor, intensity) {
  LightProbe.call(this, void 0, intensity);
  const color1 = new Color().set(skyColor);
  const color2 = new Color().set(groundColor);
  const sky = new Vector3(color1.r, color1.g, color1.b);
  const ground = new Vector3(color2.r, color2.g, color2.b);
  const c0 = Math.sqrt(Math.PI);
  const c1 = c0 * Math.sqrt(0.75);
  this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
  this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
}
HemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
  constructor: HemisphereLightProbe,
  isHemisphereLightProbe: true,
  copy: function(source) {
    LightProbe.prototype.copy.call(this, source);
    return this;
  },
  toJSON: function(meta) {
    const data = LightProbe.prototype.toJSON.call(this, meta);
    return data;
  }
});
function AmbientLightProbe(color, intensity) {
  LightProbe.call(this, void 0, intensity);
  const color1 = new Color().set(color);
  this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
}
AmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
  constructor: AmbientLightProbe,
  isAmbientLightProbe: true,
  copy: function(source) {
    LightProbe.prototype.copy.call(this, source);
    return this;
  },
  toJSON: function(meta) {
    const data = LightProbe.prototype.toJSON.call(this, meta);
    return data;
  }
});
var _eyeRight = new Matrix4();
var _eyeLeft = new Matrix4();
function StereoCamera() {
  this.type = "StereoCamera";
  this.aspect = 1;
  this.eyeSep = 0.064;
  this.cameraL = new PerspectiveCamera();
  this.cameraL.layers.enable(1);
  this.cameraL.matrixAutoUpdate = false;
  this.cameraR = new PerspectiveCamera();
  this.cameraR.layers.enable(2);
  this.cameraR.matrixAutoUpdate = false;
  this._cache = {
    focus: null,
    fov: null,
    aspect: null,
    near: null,
    far: null,
    zoom: null,
    eyeSep: null
  };
}
Object.assign(StereoCamera.prototype, {
  update: function(camera) {
    const cache = this._cache;
    const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
    if (needsUpdate) {
      cache.focus = camera.focus;
      cache.fov = camera.fov;
      cache.aspect = camera.aspect * this.aspect;
      cache.near = camera.near;
      cache.far = camera.far;
      cache.zoom = camera.zoom;
      cache.eyeSep = this.eyeSep;
      const projectionMatrix = camera.projectionMatrix.clone();
      const eyeSepHalf = cache.eyeSep / 2;
      const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
      const ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;
      let xmin, xmax;
      _eyeLeft.elements[12] = -eyeSepHalf;
      _eyeRight.elements[12] = eyeSepHalf;
      xmin = -ymax * cache.aspect + eyeSepOnProjection;
      xmax = ymax * cache.aspect + eyeSepOnProjection;
      projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
      projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
      this.cameraL.projectionMatrix.copy(projectionMatrix);
      xmin = -ymax * cache.aspect - eyeSepOnProjection;
      xmax = ymax * cache.aspect - eyeSepOnProjection;
      projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
      projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
      this.cameraR.projectionMatrix.copy(projectionMatrix);
    }
    this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
    this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
  }
});
var Clock = class {
  constructor(autoStart) {
    this.autoStart = autoStart !== void 0 ? autoStart : true;
    this.startTime = 0;
    this.oldTime = 0;
    this.elapsedTime = 0;
    this.running = false;
  }
  start() {
    this.startTime = now();
    this.oldTime = this.startTime;
    this.elapsedTime = 0;
    this.running = true;
  }
  stop() {
    this.getElapsedTime();
    this.running = false;
    this.autoStart = false;
  }
  getElapsedTime() {
    this.getDelta();
    return this.elapsedTime;
  }
  getDelta() {
    let diff = 0;
    if (this.autoStart && !this.running) {
      this.start();
      return 0;
    }
    if (this.running) {
      const newTime = now();
      diff = (newTime - this.oldTime) / 1e3;
      this.oldTime = newTime;
      this.elapsedTime += diff;
    }
    return diff;
  }
};
function now() {
  return (typeof performance === "undefined" ? Date : performance).now();
}
var _position$2 = /* @__PURE__ */ new Vector3();
var _quaternion$3 = /* @__PURE__ */ new Quaternion();
var _scale$1 = /* @__PURE__ */ new Vector3();
var _orientation = /* @__PURE__ */ new Vector3();
var AudioListener = class extends Object3D {
  constructor() {
    super();
    this.type = "AudioListener";
    this.context = AudioContext.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
    this.timeDelta = 0;
    this._clock = new Clock();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
      this.gain.connect(this.context.destination);
      this.filter = null;
    }
    return this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(value) {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
    } else {
      this.gain.disconnect(this.context.destination);
    }
    this.filter = value;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
    return this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(value) {
    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
    return this;
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    const listener = this.context.listener;
    const up = this.up;
    this.timeDelta = this._clock.getDelta();
    this.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);
    _orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);
    if (listener.positionX) {
      const endTime = this.context.currentTime + this.timeDelta;
      listener.positionX.linearRampToValueAtTime(_position$2.x, endTime);
      listener.positionY.linearRampToValueAtTime(_position$2.y, endTime);
      listener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);
      listener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);
      listener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);
      listener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);
      listener.upX.linearRampToValueAtTime(up.x, endTime);
      listener.upY.linearRampToValueAtTime(up.y, endTime);
      listener.upZ.linearRampToValueAtTime(up.z, endTime);
    } else {
      listener.setPosition(_position$2.x, _position$2.y, _position$2.z);
      listener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);
    }
  }
};
var Audio = class extends Object3D {
  constructor(listener) {
    super();
    this.type = "Audio";
    this.listener = listener;
    this.context = listener.context;
    this.gain = this.context.createGain();
    this.gain.connect(listener.getInput());
    this.autoplay = false;
    this.buffer = null;
    this.detune = 0;
    this.loop = false;
    this.loopStart = 0;
    this.loopEnd = 0;
    this.offset = 0;
    this.duration = void 0;
    this.playbackRate = 1;
    this.isPlaying = false;
    this.hasPlaybackControl = true;
    this.source = null;
    this.sourceType = "empty";
    this._startedAt = 0;
    this._progress = 0;
    this._connected = false;
    this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(audioNode) {
    this.hasPlaybackControl = false;
    this.sourceType = "audioNode";
    this.source = audioNode;
    this.connect();
    return this;
  }
  setMediaElementSource(mediaElement) {
    this.hasPlaybackControl = false;
    this.sourceType = "mediaNode";
    this.source = this.context.createMediaElementSource(mediaElement);
    this.connect();
    return this;
  }
  setMediaStreamSource(mediaStream) {
    this.hasPlaybackControl = false;
    this.sourceType = "mediaStreamNode";
    this.source = this.context.createMediaStreamSource(mediaStream);
    this.connect();
    return this;
  }
  setBuffer(audioBuffer) {
    this.buffer = audioBuffer;
    this.sourceType = "buffer";
    if (this.autoplay)
      this.play();
    return this;
  }
  play(delay = 0) {
    if (this.isPlaying === true) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + delay;
    const source = this.context.createBufferSource();
    source.buffer = this.buffer;
    source.loop = this.loop;
    source.loopStart = this.loopStart;
    source.loopEnd = this.loopEnd;
    source.onended = this.onEnded.bind(this);
    source.start(this._startedAt, this._progress + this.offset, this.duration);
    this.isPlaying = true;
    this.source = source;
    this.setDetune(this.detune);
    this.setPlaybackRate(this.playbackRate);
    return this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    if (this.isPlaying === true) {
      this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
      if (this.loop === true) {
        this._progress = this._progress % (this.duration || this.buffer.duration);
      }
      this.source.stop();
      this.source.onended = null;
      this.isPlaying = false;
    }
    return this;
  }
  stop() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._progress = 0;
    this.source.stop();
    this.source.onended = null;
    this.isPlaying = false;
    return this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let i = 1, l = this.filters.length; i < l; i++) {
        this.filters[i - 1].connect(this.filters[i]);
      }
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }
    this._connected = true;
    return this;
  }
  disconnect() {
    if (this.filters.length > 0) {
      this.source.disconnect(this.filters[0]);
      for (let i = 1, l = this.filters.length; i < l; i++) {
        this.filters[i - 1].disconnect(this.filters[i]);
      }
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }
    this._connected = false;
    return this;
  }
  getFilters() {
    return this.filters;
  }
  setFilters(value) {
    if (!value)
      value = [];
    if (this._connected === true) {
      this.disconnect();
      this.filters = value.slice();
      this.connect();
    } else {
      this.filters = value.slice();
    }
    return this;
  }
  setDetune(value) {
    this.detune = value;
    if (this.source.detune === void 0)
      return;
    if (this.isPlaying === true) {
      this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
    }
    return this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(filter) {
    return this.setFilters(filter ? [filter] : []);
  }
  setPlaybackRate(value) {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this.playbackRate = value;
    if (this.isPlaying === true) {
      this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
    }
    return this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = false;
  }
  getLoop() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return false;
    }
    return this.loop;
  }
  setLoop(value) {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this.loop = value;
    if (this.isPlaying === true) {
      this.source.loop = this.loop;
    }
    return this;
  }
  setLoopStart(value) {
    this.loopStart = value;
    return this;
  }
  setLoopEnd(value) {
    this.loopEnd = value;
    return this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(value) {
    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
    return this;
  }
};
var _position$3 = /* @__PURE__ */ new Vector3();
var _quaternion$4 = /* @__PURE__ */ new Quaternion();
var _scale$2 = /* @__PURE__ */ new Vector3();
var _orientation$1 = /* @__PURE__ */ new Vector3();
var PositionalAudio = class extends Audio {
  constructor(listener) {
    super(listener);
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.connect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(value) {
    this.panner.refDistance = value;
    return this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(value) {
    this.panner.rolloffFactor = value;
    return this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(value) {
    this.panner.distanceModel = value;
    return this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(value) {
    this.panner.maxDistance = value;
    return this;
  }
  setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
    this.panner.coneInnerAngle = coneInnerAngle;
    this.panner.coneOuterAngle = coneOuterAngle;
    this.panner.coneOuterGain = coneOuterGain;
    return this;
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    if (this.hasPlaybackControl === true && this.isPlaying === false)
      return;
    this.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);
    _orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);
    const panner = this.panner;
    if (panner.positionX) {
      const endTime = this.context.currentTime + this.listener.timeDelta;
      panner.positionX.linearRampToValueAtTime(_position$3.x, endTime);
      panner.positionY.linearRampToValueAtTime(_position$3.y, endTime);
      panner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);
      panner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);
      panner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);
      panner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);
    } else {
      panner.setPosition(_position$3.x, _position$3.y, _position$3.z);
      panner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);
    }
  }
};
var AudioAnalyser = class {
  constructor(audio, fftSize = 2048) {
    this.analyser = audio.context.createAnalyser();
    this.analyser.fftSize = fftSize;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    audio.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  }
  getAverageFrequency() {
    let value = 0;
    const data = this.getFrequencyData();
    for (let i = 0; i < data.length; i++) {
      value += data[i];
    }
    return value / data.length;
  }
};
function PropertyMixer(binding, typeName, valueSize) {
  this.binding = binding;
  this.valueSize = valueSize;
  let mixFunction, mixFunctionAdditive, setIdentity;
  switch (typeName) {
    case "quaternion":
      mixFunction = this._slerp;
      mixFunctionAdditive = this._slerpAdditive;
      setIdentity = this._setAdditiveIdentityQuaternion;
      this.buffer = new Float64Array(valueSize * 6);
      this._workIndex = 5;
      break;
    case "string":
    case "bool":
      mixFunction = this._select;
      mixFunctionAdditive = this._select;
      setIdentity = this._setAdditiveIdentityOther;
      this.buffer = new Array(valueSize * 5);
      break;
    default:
      mixFunction = this._lerp;
      mixFunctionAdditive = this._lerpAdditive;
      setIdentity = this._setAdditiveIdentityNumeric;
      this.buffer = new Float64Array(valueSize * 5);
  }
  this._mixBufferRegion = mixFunction;
  this._mixBufferRegionAdditive = mixFunctionAdditive;
  this._setIdentity = setIdentity;
  this._origIndex = 3;
  this._addIndex = 4;
  this.cumulativeWeight = 0;
  this.cumulativeWeightAdditive = 0;
  this.useCount = 0;
  this.referenceCount = 0;
}
Object.assign(PropertyMixer.prototype, {
  accumulate: function(accuIndex, weight) {
    const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
    let currentWeight = this.cumulativeWeight;
    if (currentWeight === 0) {
      for (let i = 0; i !== stride; ++i) {
        buffer[offset + i] = buffer[i];
      }
      currentWeight = weight;
    } else {
      currentWeight += weight;
      const mix = weight / currentWeight;
      this._mixBufferRegion(buffer, offset, 0, mix, stride);
    }
    this.cumulativeWeight = currentWeight;
  },
  accumulateAdditive: function(weight) {
    const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
    if (this.cumulativeWeightAdditive === 0) {
      this._setIdentity();
    }
    this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
    this.cumulativeWeightAdditive += weight;
  },
  apply: function(accuIndex) {
    const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
    if (weight < 1) {
      const originalValueOffset = stride * this._origIndex;
      this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
    }
    if (weightAdditive > 0) {
      this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
    }
    for (let i = stride, e = stride + stride; i !== e; ++i) {
      if (buffer[i] !== buffer[i + stride]) {
        binding.setValue(buffer, offset);
        break;
      }
    }
  },
  saveOriginalState: function() {
    const binding = this.binding;
    const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
    binding.getValue(buffer, originalValueOffset);
    for (let i = stride, e = originalValueOffset; i !== e; ++i) {
      buffer[i] = buffer[originalValueOffset + i % stride];
    }
    this._setIdentity();
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
  },
  restoreOriginalState: function() {
    const originalValueOffset = this.valueSize * 3;
    this.binding.setValue(this.buffer, originalValueOffset);
  },
  _setAdditiveIdentityNumeric: function() {
    const startIndex = this._addIndex * this.valueSize;
    const endIndex = startIndex + this.valueSize;
    for (let i = startIndex; i < endIndex; i++) {
      this.buffer[i] = 0;
    }
  },
  _setAdditiveIdentityQuaternion: function() {
    this._setAdditiveIdentityNumeric();
    this.buffer[this._addIndex * this.valueSize + 3] = 1;
  },
  _setAdditiveIdentityOther: function() {
    const startIndex = this._origIndex * this.valueSize;
    const targetIndex = this._addIndex * this.valueSize;
    for (let i = 0; i < this.valueSize; i++) {
      this.buffer[targetIndex + i] = this.buffer[startIndex + i];
    }
  },
  _select: function(buffer, dstOffset, srcOffset, t, stride) {
    if (t >= 0.5) {
      for (let i = 0; i !== stride; ++i) {
        buffer[dstOffset + i] = buffer[srcOffset + i];
      }
    }
  },
  _slerp: function(buffer, dstOffset, srcOffset, t) {
    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
  },
  _slerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
    const workOffset = this._workIndex * stride;
    Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
  },
  _lerp: function(buffer, dstOffset, srcOffset, t, stride) {
    const s = 1 - t;
    for (let i = 0; i !== stride; ++i) {
      const j = dstOffset + i;
      buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
    }
  },
  _lerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
    for (let i = 0; i !== stride; ++i) {
      const j = dstOffset + i;
      buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
    }
  }
});
var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
var _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
var _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
var _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$");
var _supportedObjectNames = ["material", "materials", "bones"];
function Composite(targetGroup, path, optionalParsedPath) {
  const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
  this._targetGroup = targetGroup;
  this._bindings = targetGroup.subscribe_(path, parsedPath);
}
Object.assign(Composite.prototype, {
  getValue: function(array, offset) {
    this.bind();
    const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
    if (binding !== void 0)
      binding.getValue(array, offset);
  },
  setValue: function(array, offset) {
    const bindings = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
      bindings[i].setValue(array, offset);
    }
  },
  bind: function() {
    const bindings = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
      bindings[i].bind();
    }
  },
  unbind: function() {
    const bindings = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
      bindings[i].unbind();
    }
  }
});
function PropertyBinding(rootNode, path, parsedPath) {
  this.path = path;
  this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
  this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
  this.rootNode = rootNode;
}
Object.assign(PropertyBinding, {
  Composite,
  create: function(root, path, parsedPath) {
    if (!(root && root.isAnimationObjectGroup)) {
      return new PropertyBinding(root, path, parsedPath);
    } else {
      return new PropertyBinding.Composite(root, path, parsedPath);
    }
  },
  sanitizeNodeName: function(name) {
    return name.replace(/\s/g, "_").replace(_reservedRe, "");
  },
  parseTrackName: function(trackName) {
    const matches = _trackRe.exec(trackName);
    if (!matches) {
      throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
    }
    const results = {
      nodeName: matches[2],
      objectName: matches[3],
      objectIndex: matches[4],
      propertyName: matches[5],
      propertyIndex: matches[6]
    };
    const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
    if (lastDot !== void 0 && lastDot !== -1) {
      const objectName = results.nodeName.substring(lastDot + 1);
      if (_supportedObjectNames.indexOf(objectName) !== -1) {
        results.nodeName = results.nodeName.substring(0, lastDot);
        results.objectName = objectName;
      }
    }
    if (results.propertyName === null || results.propertyName.length === 0) {
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
    }
    return results;
  },
  findNode: function(root, nodeName) {
    if (!nodeName || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
      return root;
    }
    if (root.skeleton) {
      const bone = root.skeleton.getBoneByName(nodeName);
      if (bone !== void 0) {
        return bone;
      }
    }
    if (root.children) {
      const searchNodeSubtree = function(children) {
        for (let i = 0; i < children.length; i++) {
          const childNode = children[i];
          if (childNode.name === nodeName || childNode.uuid === nodeName) {
            return childNode;
          }
          const result = searchNodeSubtree(childNode.children);
          if (result)
            return result;
        }
        return null;
      };
      const subTreeNode = searchNodeSubtree(root.children);
      if (subTreeNode) {
        return subTreeNode;
      }
    }
    return null;
  }
});
Object.assign(PropertyBinding.prototype, {
  _getValue_unavailable: function() {
  },
  _setValue_unavailable: function() {
  },
  BindingType: {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  },
  Versioning: {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  },
  GetterByBindingType: [
    function getValue_direct(buffer, offset) {
      buffer[offset] = this.node[this.propertyName];
    },
    function getValue_array(buffer, offset) {
      const source = this.resolvedProperty;
      for (let i = 0, n = source.length; i !== n; ++i) {
        buffer[offset++] = source[i];
      }
    },
    function getValue_arrayElement(buffer, offset) {
      buffer[offset] = this.resolvedProperty[this.propertyIndex];
    },
    function getValue_toArray(buffer, offset) {
      this.resolvedProperty.toArray(buffer, offset);
    }
  ],
  SetterByBindingTypeAndVersioning: [
    [
      function setValue_direct(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
      },
      function setValue_direct_setNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.needsUpdate = true;
      },
      function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ],
    [
      function setValue_array(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
      },
      function setValue_array_setNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
        this.targetObject.needsUpdate = true;
      },
      function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i = 0, n = dest.length; i !== n; ++i) {
          dest[i] = buffer[offset++];
        }
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ],
    [
      function setValue_arrayElement(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
      },
      function setValue_arrayElement_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.needsUpdate = true;
      },
      function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ],
    [
      function setValue_fromArray(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
      },
      function setValue_fromArray_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.needsUpdate = true;
      },
      function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ]
  ],
  getValue: function getValue_unbound(targetArray, offset) {
    this.bind();
    this.getValue(targetArray, offset);
  },
  setValue: function getValue_unbound2(sourceArray, offset) {
    this.bind();
    this.setValue(sourceArray, offset);
  },
  bind: function() {
    let targetObject = this.node;
    const parsedPath = this.parsedPath;
    const objectName = parsedPath.objectName;
    const propertyName = parsedPath.propertyName;
    let propertyIndex = parsedPath.propertyIndex;
    if (!targetObject) {
      targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
      this.node = targetObject;
    }
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (!targetObject) {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
      return;
    }
    if (objectName) {
      let objectIndex = parsedPath.objectIndex;
      switch (objectName) {
        case "materials":
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          targetObject = targetObject.material.materials;
          break;
        case "bones":
          if (!targetObject.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          targetObject = targetObject.skeleton.bones;
          for (let i = 0; i < targetObject.length; i++) {
            if (targetObject[i].name === objectIndex) {
              objectIndex = i;
              break;
            }
          }
          break;
        default:
          if (targetObject[objectName] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          targetObject = targetObject[objectName];
      }
      if (objectIndex !== void 0) {
        if (targetObject[objectIndex] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
          return;
        }
        targetObject = targetObject[objectIndex];
      }
    }
    const nodeProperty = targetObject[propertyName];
    if (nodeProperty === void 0) {
      const nodeName = parsedPath.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
      return;
    }
    let versioning = this.Versioning.None;
    this.targetObject = targetObject;
    if (targetObject.needsUpdate !== void 0) {
      versioning = this.Versioning.NeedsUpdate;
    } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
      versioning = this.Versioning.MatrixWorldNeedsUpdate;
    }
    let bindingType = this.BindingType.Direct;
    if (propertyIndex !== void 0) {
      if (propertyName === "morphTargetInfluences") {
        if (!targetObject.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (targetObject.geometry.isBufferGeometry) {
          if (!targetObject.geometry.morphAttributes) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            return;
          }
          if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
            propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
          }
        } else {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
          return;
        }
      }
      bindingType = this.BindingType.ArrayElement;
      this.resolvedProperty = nodeProperty;
      this.propertyIndex = propertyIndex;
    } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
      bindingType = this.BindingType.HasFromToArray;
      this.resolvedProperty = nodeProperty;
    } else if (Array.isArray(nodeProperty)) {
      bindingType = this.BindingType.EntireArray;
      this.resolvedProperty = nodeProperty;
    } else {
      this.propertyName = propertyName;
    }
    this.getValue = this.GetterByBindingType[bindingType];
    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
  },
  unbind: function() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
});
Object.assign(PropertyBinding.prototype, {
  _getValue_unbound: PropertyBinding.prototype.getValue,
  _setValue_unbound: PropertyBinding.prototype.setValue
});
function AnimationObjectGroup() {
  this.uuid = MathUtils.generateUUID();
  this._objects = Array.prototype.slice.call(arguments);
  this.nCachedObjects_ = 0;
  const indices = {};
  this._indicesByUUID = indices;
  for (let i = 0, n = arguments.length; i !== n; ++i) {
    indices[arguments[i].uuid] = i;
  }
  this._paths = [];
  this._parsedPaths = [];
  this._bindings = [];
  this._bindingsIndicesByPath = {};
  const scope = this;
  this.stats = {
    objects: {
      get total() {
        return scope._objects.length;
      },
      get inUse() {
        return this.total - scope.nCachedObjects_;
      }
    },
    get bindingsPerObject() {
      return scope._bindings.length;
    }
  };
}
Object.assign(AnimationObjectGroup.prototype, {
  isAnimationObjectGroup: true,
  add: function() {
    const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
    let knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
    for (let i = 0, n = arguments.length; i !== n; ++i) {
      const object = arguments[i], uuid = object.uuid;
      let index = indicesByUUID[uuid];
      if (index === void 0) {
        index = nObjects++;
        indicesByUUID[uuid] = index;
        objects.push(object);
        for (let j = 0, m = nBindings; j !== m; ++j) {
          bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
        }
      } else if (index < nCachedObjects) {
        knownObject = objects[index];
        const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
        indicesByUUID[lastCachedObject.uuid] = index;
        objects[index] = lastCachedObject;
        indicesByUUID[uuid] = firstActiveIndex;
        objects[firstActiveIndex] = object;
        for (let j = 0, m = nBindings; j !== m; ++j) {
          const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
          let binding = bindingsForPath[index];
          bindingsForPath[index] = lastCached;
          if (binding === void 0) {
            binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
          }
          bindingsForPath[firstActiveIndex] = binding;
        }
      } else if (objects[index] !== knownObject) {
        console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
      }
    }
    this.nCachedObjects_ = nCachedObjects;
  },
  remove: function() {
    const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
    let nCachedObjects = this.nCachedObjects_;
    for (let i = 0, n = arguments.length; i !== n; ++i) {
      const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
      if (index !== void 0 && index >= nCachedObjects) {
        const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
        indicesByUUID[firstActiveObject.uuid] = index;
        objects[index] = firstActiveObject;
        indicesByUUID[uuid] = lastCachedIndex;
        objects[lastCachedIndex] = object;
        for (let j = 0, m = nBindings; j !== m; ++j) {
          const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
          bindingsForPath[index] = firstActive;
          bindingsForPath[lastCachedIndex] = binding;
        }
      }
    }
    this.nCachedObjects_ = nCachedObjects;
  },
  uncache: function() {
    const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
    let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
    for (let i = 0, n = arguments.length; i !== n; ++i) {
      const object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
      if (index !== void 0) {
        delete indicesByUUID[uuid];
        if (index < nCachedObjects) {
          const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
          indicesByUUID[lastCachedObject.uuid] = index;
          objects[index] = lastCachedObject;
          indicesByUUID[lastObject.uuid] = firstActiveIndex;
          objects[firstActiveIndex] = lastObject;
          objects.pop();
          for (let j = 0, m = nBindings; j !== m; ++j) {
            const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
            bindingsForPath[index] = lastCached;
            bindingsForPath[firstActiveIndex] = last;
            bindingsForPath.pop();
          }
        } else {
          const lastIndex = --nObjects, lastObject = objects[lastIndex];
          if (lastIndex > 0) {
            indicesByUUID[lastObject.uuid] = index;
          }
          objects[index] = lastObject;
          objects.pop();
          for (let j = 0, m = nBindings; j !== m; ++j) {
            const bindingsForPath = bindings[j];
            bindingsForPath[index] = bindingsForPath[lastIndex];
            bindingsForPath.pop();
          }
        }
      }
    }
    this.nCachedObjects_ = nCachedObjects;
  },
  subscribe_: function(path, parsedPath) {
    const indicesByPath = this._bindingsIndicesByPath;
    let index = indicesByPath[path];
    const bindings = this._bindings;
    if (index !== void 0)
      return bindings[index];
    const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
    index = bindings.length;
    indicesByPath[path] = index;
    paths.push(path);
    parsedPaths.push(parsedPath);
    bindings.push(bindingsForPath);
    for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {
      const object = objects[i];
      bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
    }
    return bindingsForPath;
  },
  unsubscribe_: function(path) {
    const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
    if (index !== void 0) {
      const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
      indicesByPath[lastBindingsPath] = index;
      bindings[index] = lastBindings;
      bindings.pop();
      parsedPaths[index] = parsedPaths[lastBindingsIndex];
      parsedPaths.pop();
      paths[index] = paths[lastBindingsIndex];
      paths.pop();
    }
  }
});
var AnimationAction = class {
  constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {
    this._mixer = mixer;
    this._clip = clip;
    this._localRoot = localRoot;
    this.blendMode = blendMode;
    const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
    const interpolantSettings = {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    };
    for (let i = 0; i !== nTracks; ++i) {
      const interpolant = tracks[i].createInterpolant(null);
      interpolants[i] = interpolant;
      interpolant.settings = interpolantSettings;
    }
    this._interpolantSettings = interpolantSettings;
    this._interpolants = interpolants;
    this._propertyBindings = new Array(nTracks);
    this._cacheIndex = null;
    this._byClipCacheIndex = null;
    this._timeScaleInterpolant = null;
    this._weightInterpolant = null;
    this.loop = LoopRepeat;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this.timeScale = 1;
    this._effectiveTimeScale = 1;
    this.weight = 1;
    this._effectiveWeight = 1;
    this.repetitions = Infinity;
    this.paused = false;
    this.enabled = true;
    this.clampWhenFinished = false;
    this.zeroSlopeAtStart = true;
    this.zeroSlopeAtEnd = true;
  }
  play() {
    this._mixer._activateAction(this);
    return this;
  }
  stop() {
    this._mixer._deactivateAction(this);
    return this.reset();
  }
  reset() {
    this.paused = false;
    this.enabled = true;
    this.time = 0;
    this._loopCount = -1;
    this._startTime = null;
    return this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(time) {
    this._startTime = time;
    return this;
  }
  setLoop(mode, repetitions) {
    this.loop = mode;
    this.repetitions = repetitions;
    return this;
  }
  setEffectiveWeight(weight) {
    this.weight = weight;
    this._effectiveWeight = this.enabled ? weight : 0;
    return this.stopFading();
  }
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(duration) {
    return this._scheduleFading(duration, 0, 1);
  }
  fadeOut(duration) {
    return this._scheduleFading(duration, 1, 0);
  }
  crossFadeFrom(fadeOutAction, duration, warp) {
    fadeOutAction.fadeOut(duration);
    this.fadeIn(duration);
    if (warp) {
      const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
      fadeOutAction.warp(1, startEndRatio, duration);
      this.warp(endStartRatio, 1, duration);
    }
    return this;
  }
  crossFadeTo(fadeInAction, duration, warp) {
    return fadeInAction.crossFadeFrom(this, duration, warp);
  }
  stopFading() {
    const weightInterpolant = this._weightInterpolant;
    if (weightInterpolant !== null) {
      this._weightInterpolant = null;
      this._mixer._takeBackControlInterpolant(weightInterpolant);
    }
    return this;
  }
  setEffectiveTimeScale(timeScale) {
    this.timeScale = timeScale;
    this._effectiveTimeScale = this.paused ? 0 : timeScale;
    return this.stopWarping();
  }
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(duration) {
    this.timeScale = this._clip.duration / duration;
    return this.stopWarping();
  }
  syncWith(action) {
    this.time = action.time;
    this.timeScale = action.timeScale;
    return this.stopWarping();
  }
  halt(duration) {
    return this.warp(this._effectiveTimeScale, 0, duration);
  }
  warp(startTimeScale, endTimeScale, duration) {
    const mixer = this._mixer, now2 = mixer.time, timeScale = this.timeScale;
    let interpolant = this._timeScaleInterpolant;
    if (interpolant === null) {
      interpolant = mixer._lendControlInterpolant();
      this._timeScaleInterpolant = interpolant;
    }
    const times = interpolant.parameterPositions, values = interpolant.sampleValues;
    times[0] = now2;
    times[1] = now2 + duration;
    values[0] = startTimeScale / timeScale;
    values[1] = endTimeScale / timeScale;
    return this;
  }
  stopWarping() {
    const timeScaleInterpolant = this._timeScaleInterpolant;
    if (timeScaleInterpolant !== null) {
      this._timeScaleInterpolant = null;
      this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
    }
    return this;
  }
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  _update(time, deltaTime, timeDirection, accuIndex) {
    if (!this.enabled) {
      this._updateWeight(time);
      return;
    }
    const startTime = this._startTime;
    if (startTime !== null) {
      const timeRunning = (time - startTime) * timeDirection;
      if (timeRunning < 0 || timeDirection === 0) {
        return;
      }
      this._startTime = null;
      deltaTime = timeDirection * timeRunning;
    }
    deltaTime *= this._updateTimeScale(time);
    const clipTime = this._updateTime(deltaTime);
    const weight = this._updateWeight(time);
    if (weight > 0) {
      const interpolants = this._interpolants;
      const propertyMixers = this._propertyBindings;
      switch (this.blendMode) {
        case AdditiveAnimationBlendMode:
          for (let j = 0, m = interpolants.length; j !== m; ++j) {
            interpolants[j].evaluate(clipTime);
            propertyMixers[j].accumulateAdditive(weight);
          }
          break;
        case NormalAnimationBlendMode:
        default:
          for (let j = 0, m = interpolants.length; j !== m; ++j) {
            interpolants[j].evaluate(clipTime);
            propertyMixers[j].accumulate(accuIndex, weight);
          }
      }
    }
  }
  _updateWeight(time) {
    let weight = 0;
    if (this.enabled) {
      weight = this.weight;
      const interpolant = this._weightInterpolant;
      if (interpolant !== null) {
        const interpolantValue = interpolant.evaluate(time)[0];
        weight *= interpolantValue;
        if (time > interpolant.parameterPositions[1]) {
          this.stopFading();
          if (interpolantValue === 0) {
            this.enabled = false;
          }
        }
      }
    }
    this._effectiveWeight = weight;
    return weight;
  }
  _updateTimeScale(time) {
    let timeScale = 0;
    if (!this.paused) {
      timeScale = this.timeScale;
      const interpolant = this._timeScaleInterpolant;
      if (interpolant !== null) {
        const interpolantValue = interpolant.evaluate(time)[0];
        timeScale *= interpolantValue;
        if (time > interpolant.parameterPositions[1]) {
          this.stopWarping();
          if (timeScale === 0) {
            this.paused = true;
          } else {
            this.timeScale = timeScale;
          }
        }
      }
    }
    this._effectiveTimeScale = timeScale;
    return timeScale;
  }
  _updateTime(deltaTime) {
    const duration = this._clip.duration;
    const loop = this.loop;
    let time = this.time + deltaTime;
    let loopCount = this._loopCount;
    const pingPong = loop === LoopPingPong;
    if (deltaTime === 0) {
      if (loopCount === -1)
        return time;
      return pingPong && (loopCount & 1) === 1 ? duration - time : time;
    }
    if (loop === LoopOnce) {
      if (loopCount === -1) {
        this._loopCount = 0;
        this._setEndings(true, true, false);
      }
      handle_stop: {
        if (time >= duration) {
          time = duration;
        } else if (time < 0) {
          time = 0;
        } else {
          this.time = time;
          break handle_stop;
        }
        if (this.clampWhenFinished)
          this.paused = true;
        else
          this.enabled = false;
        this.time = time;
        this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: deltaTime < 0 ? -1 : 1
        });
      }
    } else {
      if (loopCount === -1) {
        if (deltaTime >= 0) {
          loopCount = 0;
          this._setEndings(true, this.repetitions === 0, pingPong);
        } else {
          this._setEndings(this.repetitions === 0, true, pingPong);
        }
      }
      if (time >= duration || time < 0) {
        const loopDelta = Math.floor(time / duration);
        time -= duration * loopDelta;
        loopCount += Math.abs(loopDelta);
        const pending = this.repetitions - loopCount;
        if (pending <= 0) {
          if (this.clampWhenFinished)
            this.paused = true;
          else
            this.enabled = false;
          time = deltaTime > 0 ? duration : 0;
          this.time = time;
          this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: deltaTime > 0 ? 1 : -1
          });
        } else {
          if (pending === 1) {
            const atStart = deltaTime < 0;
            this._setEndings(atStart, !atStart, pingPong);
          } else {
            this._setEndings(false, false, pingPong);
          }
          this._loopCount = loopCount;
          this.time = time;
          this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta
          });
        }
      } else {
        this.time = time;
      }
      if (pingPong && (loopCount & 1) === 1) {
        return duration - time;
      }
    }
    return time;
  }
  _setEndings(atStart, atEnd, pingPong) {
    const settings = this._interpolantSettings;
    if (pingPong) {
      settings.endingStart = ZeroSlopeEnding;
      settings.endingEnd = ZeroSlopeEnding;
    } else {
      if (atStart) {
        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
      } else {
        settings.endingStart = WrapAroundEnding;
      }
      if (atEnd) {
        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
      } else {
        settings.endingEnd = WrapAroundEnding;
      }
    }
  }
  _scheduleFading(duration, weightNow, weightThen) {
    const mixer = this._mixer, now2 = mixer.time;
    let interpolant = this._weightInterpolant;
    if (interpolant === null) {
      interpolant = mixer._lendControlInterpolant();
      this._weightInterpolant = interpolant;
    }
    const times = interpolant.parameterPositions, values = interpolant.sampleValues;
    times[0] = now2;
    values[0] = weightNow;
    times[1] = now2 + duration;
    values[1] = weightThen;
    return this;
  }
};
function AnimationMixer(root) {
  this._root = root;
  this._initMemoryManager();
  this._accuIndex = 0;
  this.time = 0;
  this.timeScale = 1;
}
AnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: AnimationMixer,
  _bindAction: function(action, prototypeAction) {
    const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
    let bindingsByName = bindingsByRoot[rootUuid];
    if (bindingsByName === void 0) {
      bindingsByName = {};
      bindingsByRoot[rootUuid] = bindingsByName;
    }
    for (let i = 0; i !== nTracks; ++i) {
      const track = tracks[i], trackName = track.name;
      let binding = bindingsByName[trackName];
      if (binding !== void 0) {
        bindings[i] = binding;
      } else {
        binding = bindings[i];
        if (binding !== void 0) {
          if (binding._cacheIndex === null) {
            ++binding.referenceCount;
            this._addInactiveBinding(binding, rootUuid, trackName);
          }
          continue;
        }
        const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
        binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
        ++binding.referenceCount;
        this._addInactiveBinding(binding, rootUuid, trackName);
        bindings[i] = binding;
      }
      interpolants[i].resultBuffer = binding.buffer;
    }
  },
  _activateAction: function(action) {
    if (!this._isActiveAction(action)) {
      if (action._cacheIndex === null) {
        const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
        this._addInactiveAction(action, clipUuid, rootUuid);
      }
      const bindings = action._propertyBindings;
      for (let i = 0, n = bindings.length; i !== n; ++i) {
        const binding = bindings[i];
        if (binding.useCount++ === 0) {
          this._lendBinding(binding);
          binding.saveOriginalState();
        }
      }
      this._lendAction(action);
    }
  },
  _deactivateAction: function(action) {
    if (this._isActiveAction(action)) {
      const bindings = action._propertyBindings;
      for (let i = 0, n = bindings.length; i !== n; ++i) {
        const binding = bindings[i];
        if (--binding.useCount === 0) {
          binding.restoreOriginalState();
          this._takeBackBinding(binding);
        }
      }
      this._takeBackAction(action);
    }
  },
  _initMemoryManager: function() {
    this._actions = [];
    this._nActiveActions = 0;
    this._actionsByClip = {};
    this._bindings = [];
    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {};
    this._controlInterpolants = [];
    this._nActiveControlInterpolants = 0;
    const scope = this;
    this.stats = {
      actions: {
        get total() {
          return scope._actions.length;
        },
        get inUse() {
          return scope._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return scope._bindings.length;
        },
        get inUse() {
          return scope._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return scope._controlInterpolants.length;
        },
        get inUse() {
          return scope._nActiveControlInterpolants;
        }
      }
    };
  },
  _isActiveAction: function(action) {
    const index = action._cacheIndex;
    return index !== null && index < this._nActiveActions;
  },
  _addInactiveAction: function(action, clipUuid, rootUuid) {
    const actions = this._actions, actionsByClip = this._actionsByClip;
    let actionsForClip = actionsByClip[clipUuid];
    if (actionsForClip === void 0) {
      actionsForClip = {
        knownActions: [action],
        actionByRoot: {}
      };
      action._byClipCacheIndex = 0;
      actionsByClip[clipUuid] = actionsForClip;
    } else {
      const knownActions = actionsForClip.knownActions;
      action._byClipCacheIndex = knownActions.length;
      knownActions.push(action);
    }
    action._cacheIndex = actions.length;
    actions.push(action);
    actionsForClip.actionByRoot[rootUuid] = action;
  },
  _removeInactiveAction: function(action) {
    const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
    lastInactiveAction._cacheIndex = cacheIndex;
    actions[cacheIndex] = lastInactiveAction;
    actions.pop();
    action._cacheIndex = null;
    const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
    lastKnownAction._byClipCacheIndex = byClipCacheIndex;
    knownActionsForClip[byClipCacheIndex] = lastKnownAction;
    knownActionsForClip.pop();
    action._byClipCacheIndex = null;
    const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
    delete actionByRoot[rootUuid];
    if (knownActionsForClip.length === 0) {
      delete actionsByClip[clipUuid];
    }
    this._removeInactiveBindingsForAction(action);
  },
  _removeInactiveBindingsForAction: function(action) {
    const bindings = action._propertyBindings;
    for (let i = 0, n = bindings.length; i !== n; ++i) {
      const binding = bindings[i];
      if (--binding.referenceCount === 0) {
        this._removeInactiveBinding(binding);
      }
    }
  },
  _lendAction: function(action) {
    const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
    action._cacheIndex = lastActiveIndex;
    actions[lastActiveIndex] = action;
    firstInactiveAction._cacheIndex = prevIndex;
    actions[prevIndex] = firstInactiveAction;
  },
  _takeBackAction: function(action) {
    const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
    action._cacheIndex = firstInactiveIndex;
    actions[firstInactiveIndex] = action;
    lastActiveAction._cacheIndex = prevIndex;
    actions[prevIndex] = lastActiveAction;
  },
  _addInactiveBinding: function(binding, rootUuid, trackName) {
    const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
    let bindingByName = bindingsByRoot[rootUuid];
    if (bindingByName === void 0) {
      bindingByName = {};
      bindingsByRoot[rootUuid] = bindingByName;
    }
    bindingByName[trackName] = binding;
    binding._cacheIndex = bindings.length;
    bindings.push(binding);
  },
  _removeInactiveBinding: function(binding) {
    const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
    lastInactiveBinding._cacheIndex = cacheIndex;
    bindings[cacheIndex] = lastInactiveBinding;
    bindings.pop();
    delete bindingByName[trackName];
    if (Object.keys(bindingByName).length === 0) {
      delete bindingsByRoot[rootUuid];
    }
  },
  _lendBinding: function(binding) {
    const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
    binding._cacheIndex = lastActiveIndex;
    bindings[lastActiveIndex] = binding;
    firstInactiveBinding._cacheIndex = prevIndex;
    bindings[prevIndex] = firstInactiveBinding;
  },
  _takeBackBinding: function(binding) {
    const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
    binding._cacheIndex = firstInactiveIndex;
    bindings[firstInactiveIndex] = binding;
    lastActiveBinding._cacheIndex = prevIndex;
    bindings[prevIndex] = lastActiveBinding;
  },
  _lendControlInterpolant: function() {
    const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
    let interpolant = interpolants[lastActiveIndex];
    if (interpolant === void 0) {
      interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
      interpolant.__cacheIndex = lastActiveIndex;
      interpolants[lastActiveIndex] = interpolant;
    }
    return interpolant;
  },
  _takeBackControlInterpolant: function(interpolant) {
    const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
    interpolant.__cacheIndex = firstInactiveIndex;
    interpolants[firstInactiveIndex] = interpolant;
    lastActiveInterpolant.__cacheIndex = prevIndex;
    interpolants[prevIndex] = lastActiveInterpolant;
  },
  _controlInterpolantsResultBuffer: new Float32Array(1),
  clipAction: function(clip, optionalRoot, blendMode) {
    const root = optionalRoot || this._root, rootUuid = root.uuid;
    let clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip;
    const clipUuid = clipObject !== null ? clipObject.uuid : clip;
    const actionsForClip = this._actionsByClip[clipUuid];
    let prototypeAction = null;
    if (blendMode === void 0) {
      if (clipObject !== null) {
        blendMode = clipObject.blendMode;
      } else {
        blendMode = NormalAnimationBlendMode;
      }
    }
    if (actionsForClip !== void 0) {
      const existingAction = actionsForClip.actionByRoot[rootUuid];
      if (existingAction !== void 0 && existingAction.blendMode === blendMode) {
        return existingAction;
      }
      prototypeAction = actionsForClip.knownActions[0];
      if (clipObject === null)
        clipObject = prototypeAction._clip;
    }
    if (clipObject === null)
      return null;
    const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
    this._bindAction(newAction, prototypeAction);
    this._addInactiveAction(newAction, clipUuid, rootUuid);
    return newAction;
  },
  existingAction: function(clip, optionalRoot) {
    const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
    if (actionsForClip !== void 0) {
      return actionsForClip.actionByRoot[rootUuid] || null;
    }
    return null;
  },
  stopAllAction: function() {
    const actions = this._actions, nActions = this._nActiveActions;
    for (let i = nActions - 1; i >= 0; --i) {
      actions[i].stop();
    }
    return this;
  },
  update: function(deltaTime) {
    deltaTime *= this.timeScale;
    const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
    for (let i = 0; i !== nActions; ++i) {
      const action = actions[i];
      action._update(time, deltaTime, timeDirection, accuIndex);
    }
    const bindings = this._bindings, nBindings = this._nActiveBindings;
    for (let i = 0; i !== nBindings; ++i) {
      bindings[i].apply(accuIndex);
    }
    return this;
  },
  setTime: function(timeInSeconds) {
    this.time = 0;
    for (let i = 0; i < this._actions.length; i++) {
      this._actions[i].time = 0;
    }
    return this.update(timeInSeconds);
  },
  getRoot: function() {
    return this._root;
  },
  uncacheClip: function(clip) {
    const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
    if (actionsForClip !== void 0) {
      const actionsToRemove = actionsForClip.knownActions;
      for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {
        const action = actionsToRemove[i];
        this._deactivateAction(action);
        const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
        action._cacheIndex = null;
        action._byClipCacheIndex = null;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();
        this._removeInactiveBindingsForAction(action);
      }
      delete actionsByClip[clipUuid];
    }
  },
  uncacheRoot: function(root) {
    const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
    for (const clipUuid in actionsByClip) {
      const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
      if (action !== void 0) {
        this._deactivateAction(action);
        this._removeInactiveAction(action);
      }
    }
    const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
    if (bindingByName !== void 0) {
      for (const trackName in bindingByName) {
        const binding = bindingByName[trackName];
        binding.restoreOriginalState();
        this._removeInactiveBinding(binding);
      }
    }
  },
  uncacheAction: function(clip, optionalRoot) {
    const action = this.existingAction(clip, optionalRoot);
    if (action !== null) {
      this._deactivateAction(action);
      this._removeInactiveAction(action);
    }
  }
});
var Uniform = class {
  constructor(value) {
    if (typeof value === "string") {
      console.warn("THREE.Uniform: Type parameter is no longer needed.");
      value = arguments[1];
    }
    this.value = value;
  }
  clone() {
    return new Uniform(this.value.clone === void 0 ? this.value : this.value.clone());
  }
};
function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {
  InterleavedBuffer.call(this, array, stride);
  this.meshPerAttribute = meshPerAttribute || 1;
}
InstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {
  constructor: InstancedInterleavedBuffer,
  isInstancedInterleavedBuffer: true,
  copy: function(source) {
    InterleavedBuffer.prototype.copy.call(this, source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  },
  clone: function(data) {
    const ib = InterleavedBuffer.prototype.clone.call(this, data);
    ib.meshPerAttribute = this.meshPerAttribute;
    return ib;
  },
  toJSON: function(data) {
    const json = InterleavedBuffer.prototype.toJSON.call(this, data);
    json.isInstancedInterleavedBuffer = true;
    json.meshPerAttribute = this.meshPerAttribute;
    return json;
  }
});
function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {
  this.buffer = buffer;
  this.type = type;
  this.itemSize = itemSize;
  this.elementSize = elementSize;
  this.count = count;
  this.version = 0;
}
Object.defineProperty(GLBufferAttribute.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
Object.assign(GLBufferAttribute.prototype, {
  isGLBufferAttribute: true,
  setBuffer: function(buffer) {
    this.buffer = buffer;
    return this;
  },
  setType: function(type, elementSize) {
    this.type = type;
    this.elementSize = elementSize;
    return this;
  },
  setItemSize: function(itemSize) {
    this.itemSize = itemSize;
    return this;
  },
  setCount: function(count) {
    this.count = count;
    return this;
  }
});
function Raycaster(origin, direction, near, far) {
  this.ray = new Ray(origin, direction);
  this.near = near || 0;
  this.far = far || Infinity;
  this.camera = null;
  this.layers = new Layers();
  this.params = {
    Mesh: {},
    Line: { threshold: 1 },
    LOD: {},
    Points: { threshold: 1 },
    Sprite: {}
  };
  Object.defineProperties(this.params, {
    PointCloud: {
      get: function() {
        console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
        return this.Points;
      }
    }
  });
}
function ascSort(a, b) {
  return a.distance - b.distance;
}
function intersectObject(object, raycaster, intersects2, recursive) {
  if (object.layers.test(raycaster.layers)) {
    object.raycast(raycaster, intersects2);
  }
  if (recursive === true) {
    const children = object.children;
    for (let i = 0, l = children.length; i < l; i++) {
      intersectObject(children[i], raycaster, intersects2, true);
    }
  }
}
Object.assign(Raycaster.prototype, {
  set: function(origin, direction) {
    this.ray.set(origin, direction);
  },
  setFromCamera: function(coords, camera) {
    if (camera && camera.isPerspectiveCamera) {
      this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
      this.camera = camera;
    } else if (camera && camera.isOrthographicCamera) {
      this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);
      this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
      this.camera = camera;
    } else {
      console.error("THREE.Raycaster: Unsupported camera type.");
    }
  },
  intersectObject: function(object, recursive, optionalTarget) {
    const intersects2 = optionalTarget || [];
    intersectObject(object, this, intersects2, recursive);
    intersects2.sort(ascSort);
    return intersects2;
  },
  intersectObjects: function(objects, recursive, optionalTarget) {
    const intersects2 = optionalTarget || [];
    if (Array.isArray(objects) === false) {
      console.warn("THREE.Raycaster.intersectObjects: objects is not an Array.");
      return intersects2;
    }
    for (let i = 0, l = objects.length; i < l; i++) {
      intersectObject(objects[i], this, intersects2, recursive);
    }
    intersects2.sort(ascSort);
    return intersects2;
  }
});
var Spherical = class {
  constructor(radius = 1, phi = 0, theta = 0) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this;
  }
  set(radius, phi, theta) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(other) {
    this.radius = other.radius;
    this.phi = other.phi;
    this.theta = other.theta;
    return this;
  }
  makeSafe() {
    const EPS = 1e-6;
    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
    return this;
  }
  setFromVector3(v) {
    return this.setFromCartesianCoords(v.x, v.y, v.z);
  }
  setFromCartesianCoords(x, y, z) {
    this.radius = Math.sqrt(x * x + y * y + z * z);
    if (this.radius === 0) {
      this.theta = 0;
      this.phi = 0;
    } else {
      this.theta = Math.atan2(x, z);
      this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));
    }
    return this;
  }
};
var Cylindrical = class {
  constructor(radius, theta, y) {
    this.radius = radius !== void 0 ? radius : 1;
    this.theta = theta !== void 0 ? theta : 0;
    this.y = y !== void 0 ? y : 0;
    return this;
  }
  set(radius, theta, y) {
    this.radius = radius;
    this.theta = theta;
    this.y = y;
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(other) {
    this.radius = other.radius;
    this.theta = other.theta;
    this.y = other.y;
    return this;
  }
  setFromVector3(v) {
    return this.setFromCartesianCoords(v.x, v.y, v.z);
  }
  setFromCartesianCoords(x, y, z) {
    this.radius = Math.sqrt(x * x + z * z);
    this.theta = Math.atan2(x, z);
    this.y = y;
    return this;
  }
};
var _vector$7 = /* @__PURE__ */ new Vector2();
var Box2 = class {
  constructor(min, max) {
    Object.defineProperty(this, "isBox2", { value: true });
    this.min = min !== void 0 ? min : new Vector2(Infinity, Infinity);
    this.max = max !== void 0 ? max : new Vector2(-Infinity, -Infinity);
  }
  set(min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  }
  setFromPoints(points) {
    this.makeEmpty();
    for (let i = 0, il = points.length; i < il; i++) {
      this.expandByPoint(points[i]);
    }
    return this;
  }
  setFromCenterAndSize(center, size) {
    const halfSize = _vector$7.copy(size).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .getCenter() target is now required");
      target = new Vector2();
    }
    return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .getSize() target is now required");
      target = new Vector2();
    }
    return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
  }
  expandByPoint(point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  }
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  containsPoint(point) {
    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
  }
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
  }
  getParameter(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .getParameter() target is now required");
      target = new Vector2();
    }
    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
  }
  intersectsBox(box) {
    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
  }
  clampPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .clampPoint() target is now required");
      target = new Vector2();
    }
    return target.copy(point).clamp(this.min, this.max);
  }
  distanceToPoint(point) {
    const clampedPoint = _vector$7.copy(point).clamp(this.min, this.max);
    return clampedPoint.sub(point).length();
  }
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    return this;
  }
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
};
var _startP = /* @__PURE__ */ new Vector3();
var _startEnd = /* @__PURE__ */ new Vector3();
var Line3 = class {
  constructor(start, end) {
    this.start = start !== void 0 ? start : new Vector3();
    this.end = end !== void 0 ? end : new Vector3();
  }
  set(start, end) {
    this.start.copy(start);
    this.end.copy(end);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(line) {
    this.start.copy(line.start);
    this.end.copy(line.end);
    return this;
  }
  getCenter(target) {
    if (target === void 0) {
      console.warn("THREE.Line3: .getCenter() target is now required");
      target = new Vector3();
    }
    return target.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(target) {
    if (target === void 0) {
      console.warn("THREE.Line3: .delta() target is now required");
      target = new Vector3();
    }
    return target.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(t, target) {
    if (target === void 0) {
      console.warn("THREE.Line3: .at() target is now required");
      target = new Vector3();
    }
    return this.delta(target).multiplyScalar(t).add(this.start);
  }
  closestPointToPointParameter(point, clampToLine) {
    _startP.subVectors(point, this.start);
    _startEnd.subVectors(this.end, this.start);
    const startEnd2 = _startEnd.dot(_startEnd);
    const startEnd_startP = _startEnd.dot(_startP);
    let t = startEnd_startP / startEnd2;
    if (clampToLine) {
      t = MathUtils.clamp(t, 0, 1);
    }
    return t;
  }
  closestPointToPoint(point, clampToLine, target) {
    const t = this.closestPointToPointParameter(point, clampToLine);
    if (target === void 0) {
      console.warn("THREE.Line3: .closestPointToPoint() target is now required");
      target = new Vector3();
    }
    return this.delta(target).multiplyScalar(t).add(this.start);
  }
  applyMatrix4(matrix) {
    this.start.applyMatrix4(matrix);
    this.end.applyMatrix4(matrix);
    return this;
  }
  equals(line) {
    return line.start.equals(this.start) && line.end.equals(this.end);
  }
};
function ImmediateRenderObject(material) {
  Object3D.call(this);
  this.material = material;
  this.render = function() {
  };
  this.hasPositions = false;
  this.hasNormals = false;
  this.hasColors = false;
  this.hasUvs = false;
  this.positionArray = null;
  this.normalArray = null;
  this.colorArray = null;
  this.uvArray = null;
  this.count = 0;
}
ImmediateRenderObject.prototype = Object.create(Object3D.prototype);
ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
ImmediateRenderObject.prototype.isImmediateRenderObject = true;
var _vector$8 = /* @__PURE__ */ new Vector3();
var SpotLightHelper = class extends Object3D {
  constructor(light, color) {
    super();
    this.light = light;
    this.light.updateMatrixWorld();
    this.matrix = light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = color;
    const geometry = new BufferGeometry();
    const positions = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let i = 0, j = 1, l = 32; i < l; i++, j++) {
      const p1 = i / l * Math.PI * 2;
      const p2 = j / l * Math.PI * 2;
      positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
    }
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    const material = new LineBasicMaterial({ fog: false, toneMapped: false });
    this.cone = new LineSegments(geometry, material);
    this.add(this.cone);
    this.update();
  }
  dispose() {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  }
  update() {
    this.light.updateMatrixWorld();
    const coneLength = this.light.distance ? this.light.distance : 1e3;
    const coneWidth = coneLength * Math.tan(this.light.angle);
    this.cone.scale.set(coneWidth, coneWidth, coneLength);
    _vector$8.setFromMatrixPosition(this.light.target.matrixWorld);
    this.cone.lookAt(_vector$8);
    if (this.color !== void 0) {
      this.cone.material.color.set(this.color);
    } else {
      this.cone.material.color.copy(this.light.color);
    }
  }
};
var _vector$9 = /* @__PURE__ */ new Vector3();
var _boneMatrix = /* @__PURE__ */ new Matrix4();
var _matrixWorldInv = /* @__PURE__ */ new Matrix4();
var SkeletonHelper = class extends LineSegments {
  constructor(object) {
    const bones = getBoneList(object);
    const geometry = new BufferGeometry();
    const vertices = [];
    const colors = [];
    const color1 = new Color(0, 0, 1);
    const color2 = new Color(0, 1, 0);
    for (let i = 0; i < bones.length; i++) {
      const bone = bones[i];
      if (bone.parent && bone.parent.isBone) {
        vertices.push(0, 0, 0);
        vertices.push(0, 0, 0);
        colors.push(color1.r, color1.g, color1.b);
        colors.push(color2.r, color2.g, color2.b);
      }
    }
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true });
    super(geometry, material);
    this.type = "SkeletonHelper";
    this.isSkeletonHelper = true;
    this.root = object;
    this.bones = bones;
    this.matrix = object.matrixWorld;
    this.matrixAutoUpdate = false;
  }
  updateMatrixWorld(force) {
    const bones = this.bones;
    const geometry = this.geometry;
    const position = geometry.getAttribute("position");
    _matrixWorldInv.copy(this.root.matrixWorld).invert();
    for (let i = 0, j = 0; i < bones.length; i++) {
      const bone = bones[i];
      if (bone.parent && bone.parent.isBone) {
        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
        _vector$9.setFromMatrixPosition(_boneMatrix);
        position.setXYZ(j, _vector$9.x, _vector$9.y, _vector$9.z);
        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
        _vector$9.setFromMatrixPosition(_boneMatrix);
        position.setXYZ(j + 1, _vector$9.x, _vector$9.y, _vector$9.z);
        j += 2;
      }
    }
    geometry.getAttribute("position").needsUpdate = true;
    super.updateMatrixWorld(force);
  }
};
function getBoneList(object) {
  const boneList = [];
  if (object && object.isBone) {
    boneList.push(object);
  }
  for (let i = 0; i < object.children.length; i++) {
    boneList.push.apply(boneList, getBoneList(object.children[i]));
  }
  return boneList;
}
var PointLightHelper = class extends Mesh {
  constructor(light, sphereSize, color) {
    const geometry = new SphereBufferGeometry(sphereSize, 4, 2);
    const material = new MeshBasicMaterial({ wireframe: true, fog: false, toneMapped: false });
    super(geometry, material);
    this.light = light;
    this.light.updateMatrixWorld();
    this.color = color;
    this.type = "PointLightHelper";
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.update();
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
  update() {
    if (this.color !== void 0) {
      this.material.color.set(this.color);
    } else {
      this.material.color.copy(this.light.color);
    }
  }
};
var _vector$a = /* @__PURE__ */ new Vector3();
var _color1 = /* @__PURE__ */ new Color();
var _color2 = /* @__PURE__ */ new Color();
var HemisphereLightHelper = class extends Object3D {
  constructor(light, size, color) {
    super();
    this.light = light;
    this.light.updateMatrixWorld();
    this.matrix = light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = color;
    const geometry = new OctahedronBufferGeometry(size);
    geometry.rotateY(Math.PI * 0.5);
    this.material = new MeshBasicMaterial({ wireframe: true, fog: false, toneMapped: false });
    if (this.color === void 0)
      this.material.vertexColors = true;
    const position = geometry.getAttribute("position");
    const colors = new Float32Array(position.count * 3);
    geometry.setAttribute("color", new BufferAttribute(colors, 3));
    this.add(new Mesh(geometry, this.material));
    this.update();
  }
  dispose() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  }
  update() {
    const mesh = this.children[0];
    if (this.color !== void 0) {
      this.material.color.set(this.color);
    } else {
      const colors = mesh.geometry.getAttribute("color");
      _color1.copy(this.light.color);
      _color2.copy(this.light.groundColor);
      for (let i = 0, l = colors.count; i < l; i++) {
        const color = i < l / 2 ? _color1 : _color2;
        colors.setXYZ(i, color.r, color.g, color.b);
      }
      colors.needsUpdate = true;
    }
    mesh.lookAt(_vector$a.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
};
var GridHelper = class extends LineSegments {
  constructor(size = 10, divisions = 10, color1 = 4473924, color2 = 8947848) {
    color1 = new Color(color1);
    color2 = new Color(color2);
    const center = divisions / 2;
    const step = size / divisions;
    const halfSize = size / 2;
    const vertices = [], colors = [];
    for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
      vertices.push(-halfSize, 0, k, halfSize, 0, k);
      vertices.push(k, 0, -halfSize, k, 0, halfSize);
      const color = i === center ? color1 : color2;
      color.toArray(colors, j);
      j += 3;
      color.toArray(colors, j);
      j += 3;
      color.toArray(colors, j);
      j += 3;
      color.toArray(colors, j);
      j += 3;
    }
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
    super(geometry, material);
    this.type = "GridHelper";
  }
};
var PolarGridHelper = class extends LineSegments {
  constructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 4473924, color2 = 8947848) {
    color1 = new Color(color1);
    color2 = new Color(color2);
    const vertices = [];
    const colors = [];
    for (let i = 0; i <= radials; i++) {
      const v = i / radials * (Math.PI * 2);
      const x = Math.sin(v) * radius;
      const z = Math.cos(v) * radius;
      vertices.push(0, 0, 0);
      vertices.push(x, 0, z);
      const color = i & 1 ? color1 : color2;
      colors.push(color.r, color.g, color.b);
      colors.push(color.r, color.g, color.b);
    }
    for (let i = 0; i <= circles; i++) {
      const color = i & 1 ? color1 : color2;
      const r = radius - radius / circles * i;
      for (let j = 0; j < divisions; j++) {
        let v = j / divisions * (Math.PI * 2);
        let x = Math.sin(v) * r;
        let z = Math.cos(v) * r;
        vertices.push(x, 0, z);
        colors.push(color.r, color.g, color.b);
        v = (j + 1) / divisions * (Math.PI * 2);
        x = Math.sin(v) * r;
        z = Math.cos(v) * r;
        vertices.push(x, 0, z);
        colors.push(color.r, color.g, color.b);
      }
    }
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
    super(geometry, material);
    this.type = "PolarGridHelper";
  }
};
var _v1$6 = /* @__PURE__ */ new Vector3();
var _v2$3 = /* @__PURE__ */ new Vector3();
var _v3$1 = /* @__PURE__ */ new Vector3();
var DirectionalLightHelper = class extends Object3D {
  constructor(light, size, color) {
    super();
    this.light = light;
    this.light.updateMatrixWorld();
    this.matrix = light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = color;
    if (size === void 0)
      size = 1;
    let geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute([
      -size,
      size,
      0,
      size,
      size,
      0,
      size,
      -size,
      0,
      -size,
      -size,
      0,
      -size,
      size,
      0
    ], 3));
    const material = new LineBasicMaterial({ fog: false, toneMapped: false });
    this.lightPlane = new Line(geometry, material);
    this.add(this.lightPlane);
    geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new Line(geometry, material);
    this.add(this.targetLine);
    this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  }
  update() {
    _v1$6.setFromMatrixPosition(this.light.matrixWorld);
    _v2$3.setFromMatrixPosition(this.light.target.matrixWorld);
    _v3$1.subVectors(_v2$3, _v1$6);
    this.lightPlane.lookAt(_v2$3);
    if (this.color !== void 0) {
      this.lightPlane.material.color.set(this.color);
      this.targetLine.material.color.set(this.color);
    } else {
      this.lightPlane.material.color.copy(this.light.color);
      this.targetLine.material.color.copy(this.light.color);
    }
    this.targetLine.lookAt(_v2$3);
    this.targetLine.scale.z = _v3$1.length();
  }
};
var _vector$b = /* @__PURE__ */ new Vector3();
var _camera = /* @__PURE__ */ new Camera();
var CameraHelper = class extends LineSegments {
  constructor(camera) {
    const geometry = new BufferGeometry();
    const material = new LineBasicMaterial({ color: 16777215, vertexColors: true, toneMapped: false });
    const vertices = [];
    const colors = [];
    const pointMap = {};
    const colorFrustum = new Color(16755200);
    const colorCone = new Color(16711680);
    const colorUp = new Color(43775);
    const colorTarget = new Color(16777215);
    const colorCross = new Color(3355443);
    addLine("n1", "n2", colorFrustum);
    addLine("n2", "n4", colorFrustum);
    addLine("n4", "n3", colorFrustum);
    addLine("n3", "n1", colorFrustum);
    addLine("f1", "f2", colorFrustum);
    addLine("f2", "f4", colorFrustum);
    addLine("f4", "f3", colorFrustum);
    addLine("f3", "f1", colorFrustum);
    addLine("n1", "f1", colorFrustum);
    addLine("n2", "f2", colorFrustum);
    addLine("n3", "f3", colorFrustum);
    addLine("n4", "f4", colorFrustum);
    addLine("p", "n1", colorCone);
    addLine("p", "n2", colorCone);
    addLine("p", "n3", colorCone);
    addLine("p", "n4", colorCone);
    addLine("u1", "u2", colorUp);
    addLine("u2", "u3", colorUp);
    addLine("u3", "u1", colorUp);
    addLine("c", "t", colorTarget);
    addLine("p", "c", colorCross);
    addLine("cn1", "cn2", colorCross);
    addLine("cn3", "cn4", colorCross);
    addLine("cf1", "cf2", colorCross);
    addLine("cf3", "cf4", colorCross);
    function addLine(a, b, color) {
      addPoint(a, color);
      addPoint(b, color);
    }
    function addPoint(id, color) {
      vertices.push(0, 0, 0);
      colors.push(color.r, color.g, color.b);
      if (pointMap[id] === void 0) {
        pointMap[id] = [];
      }
      pointMap[id].push(vertices.length / 3 - 1);
    }
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    super(geometry, material);
    this.type = "CameraHelper";
    this.camera = camera;
    if (this.camera.updateProjectionMatrix)
      this.camera.updateProjectionMatrix();
    this.matrix = camera.matrixWorld;
    this.matrixAutoUpdate = false;
    this.pointMap = pointMap;
    this.update();
  }
  update() {
    const geometry = this.geometry;
    const pointMap = this.pointMap;
    const w = 1, h = 1;
    _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
    setPoint("c", pointMap, geometry, _camera, 0, 0, -1);
    setPoint("t", pointMap, geometry, _camera, 0, 0, 1);
    setPoint("n1", pointMap, geometry, _camera, -w, -h, -1);
    setPoint("n2", pointMap, geometry, _camera, w, -h, -1);
    setPoint("n3", pointMap, geometry, _camera, -w, h, -1);
    setPoint("n4", pointMap, geometry, _camera, w, h, -1);
    setPoint("f1", pointMap, geometry, _camera, -w, -h, 1);
    setPoint("f2", pointMap, geometry, _camera, w, -h, 1);
    setPoint("f3", pointMap, geometry, _camera, -w, h, 1);
    setPoint("f4", pointMap, geometry, _camera, w, h, 1);
    setPoint("u1", pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);
    setPoint("u2", pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);
    setPoint("u3", pointMap, geometry, _camera, 0, h * 2, -1);
    setPoint("cf1", pointMap, geometry, _camera, -w, 0, 1);
    setPoint("cf2", pointMap, geometry, _camera, w, 0, 1);
    setPoint("cf3", pointMap, geometry, _camera, 0, -h, 1);
    setPoint("cf4", pointMap, geometry, _camera, 0, h, 1);
    setPoint("cn1", pointMap, geometry, _camera, -w, 0, -1);
    setPoint("cn2", pointMap, geometry, _camera, w, 0, -1);
    setPoint("cn3", pointMap, geometry, _camera, 0, -h, -1);
    setPoint("cn4", pointMap, geometry, _camera, 0, h, -1);
    geometry.getAttribute("position").needsUpdate = true;
  }
};
function setPoint(point, pointMap, geometry, camera, x, y, z) {
  _vector$b.set(x, y, z).unproject(camera);
  const points = pointMap[point];
  if (points !== void 0) {
    const position = geometry.getAttribute("position");
    for (let i = 0, l = points.length; i < l; i++) {
      position.setXYZ(points[i], _vector$b.x, _vector$b.y, _vector$b.z);
    }
  }
}
var _box$3 = /* @__PURE__ */ new Box3();
var BoxHelper = class extends LineSegments {
  constructor(object, color = 16776960) {
    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    const positions = new Float32Array(8 * 3);
    const geometry = new BufferGeometry();
    geometry.setIndex(new BufferAttribute(indices, 1));
    geometry.setAttribute("position", new BufferAttribute(positions, 3));
    super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.object = object;
    this.type = "BoxHelper";
    this.matrixAutoUpdate = false;
    this.update();
  }
  update(object) {
    if (object !== void 0) {
      console.warn("THREE.BoxHelper: .update() has no longer arguments.");
    }
    if (this.object !== void 0) {
      _box$3.setFromObject(this.object);
    }
    if (_box$3.isEmpty())
      return;
    const min = _box$3.min;
    const max = _box$3.max;
    const position = this.geometry.attributes.position;
    const array = position.array;
    array[0] = max.x;
    array[1] = max.y;
    array[2] = max.z;
    array[3] = min.x;
    array[4] = max.y;
    array[5] = max.z;
    array[6] = min.x;
    array[7] = min.y;
    array[8] = max.z;
    array[9] = max.x;
    array[10] = min.y;
    array[11] = max.z;
    array[12] = max.x;
    array[13] = max.y;
    array[14] = min.z;
    array[15] = min.x;
    array[16] = max.y;
    array[17] = min.z;
    array[18] = min.x;
    array[19] = min.y;
    array[20] = min.z;
    array[21] = max.x;
    array[22] = min.y;
    array[23] = min.z;
    position.needsUpdate = true;
    this.geometry.computeBoundingSphere();
  }
  setFromObject(object) {
    this.object = object;
    this.update();
    return this;
  }
  copy(source) {
    LineSegments.prototype.copy.call(this, source);
    this.object = source.object;
    return this;
  }
};
var Box3Helper = class extends LineSegments {
  constructor(box, color = 16776960) {
    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
    const geometry = new BufferGeometry();
    geometry.setIndex(new BufferAttribute(indices, 1));
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.box = box;
    this.type = "Box3Helper";
    this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(force) {
    const box = this.box;
    if (box.isEmpty())
      return;
    box.getCenter(this.position);
    box.getSize(this.scale);
    this.scale.multiplyScalar(0.5);
    super.updateMatrixWorld(force);
  }
};
var PlaneHelper = class extends Line {
  constructor(plane, size = 1, hex = 16776960) {
    const color = hex;
    const positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    geometry.computeBoundingSphere();
    super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.type = "PlaneHelper";
    this.plane = plane;
    this.size = size;
    const positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];
    const geometry2 = new BufferGeometry();
    geometry2.setAttribute("position", new Float32BufferAttribute(positions2, 3));
    geometry2.computeBoundingSphere();
    this.add(new Mesh(geometry2, new MeshBasicMaterial({ color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false })));
  }
  updateMatrixWorld(force) {
    let scale = -this.plane.constant;
    if (Math.abs(scale) < 1e-8)
      scale = 1e-8;
    this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
    this.children[0].material.side = scale < 0 ? BackSide : FrontSide;
    this.lookAt(this.plane.normal);
    super.updateMatrixWorld(force);
  }
};
var _axis = /* @__PURE__ */ new Vector3();
var _lineGeometry;
var _coneGeometry;
var ArrowHelper = class extends Object3D {
  constructor(dir, origin, length, color, headLength, headWidth) {
    super();
    this.type = "ArrowHelper";
    if (dir === void 0)
      dir = new Vector3(0, 0, 1);
    if (origin === void 0)
      origin = new Vector3(0, 0, 0);
    if (length === void 0)
      length = 1;
    if (color === void 0)
      color = 16776960;
    if (headLength === void 0)
      headLength = 0.2 * length;
    if (headWidth === void 0)
      headWidth = 0.2 * headLength;
    if (_lineGeometry === void 0) {
      _lineGeometry = new BufferGeometry();
      _lineGeometry.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));
      _coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);
      _coneGeometry.translate(0, -0.5, 0);
    }
    this.position.copy(origin);
    this.line = new Line(_lineGeometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.line.matrixAutoUpdate = false;
    this.add(this.line);
    this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({ color, toneMapped: false }));
    this.cone.matrixAutoUpdate = false;
    this.add(this.cone);
    this.setDirection(dir);
    this.setLength(length, headLength, headWidth);
  }
  setDirection(dir) {
    if (dir.y > 0.99999) {
      this.quaternion.set(0, 0, 0, 1);
    } else if (dir.y < -0.99999) {
      this.quaternion.set(1, 0, 0, 0);
    } else {
      _axis.set(dir.z, 0, -dir.x).normalize();
      const radians = Math.acos(dir.y);
      this.quaternion.setFromAxisAngle(_axis, radians);
    }
  }
  setLength(length, headLength, headWidth) {
    if (headLength === void 0)
      headLength = 0.2 * length;
    if (headWidth === void 0)
      headWidth = 0.2 * headLength;
    this.line.scale.set(1, Math.max(1e-4, length - headLength), 1);
    this.line.updateMatrix();
    this.cone.scale.set(headWidth, headLength, headWidth);
    this.cone.position.y = length;
    this.cone.updateMatrix();
  }
  setColor(color) {
    this.line.material.color.set(color);
    this.cone.material.color.set(color);
  }
  copy(source) {
    super.copy(source, false);
    this.line.copy(source.line);
    this.cone.copy(source.cone);
    return this;
  }
};
var AxesHelper = class extends LineSegments {
  constructor(size = 1) {
    const vertices = [
      0,
      0,
      0,
      size,
      0,
      0,
      0,
      0,
      0,
      0,
      size,
      0,
      0,
      0,
      0,
      0,
      0,
      size
    ];
    const colors = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ];
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
    super(geometry, material);
    this.type = "AxesHelper";
  }
};
var _floatView = new Float32Array(1);
var _int32View = new Int32Array(_floatView.buffer);
var DataUtils = {
  toHalfFloat: function(val) {
    _floatView[0] = val;
    const x = _int32View[0];
    let bits = x >> 16 & 32768;
    let m = x >> 12 & 2047;
    const e = x >> 23 & 255;
    if (e < 103)
      return bits;
    if (e > 142) {
      bits |= 31744;
      bits |= (e == 255 ? 0 : 1) && x & 8388607;
      return bits;
    }
    if (e < 113) {
      m |= 2048;
      bits |= (m >> 114 - e) + (m >> 113 - e & 1);
      return bits;
    }
    bits |= e - 112 << 10 | m >> 1;
    bits += m & 1;
    return bits;
  }
};
var LOD_MIN = 4;
var LOD_MAX = 8;
var SIZE_MAX = Math.pow(2, LOD_MAX);
var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
var TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
var MAX_SAMPLES = 20;
var ENCODINGS = {
  [LinearEncoding]: 0,
  [sRGBEncoding]: 1,
  [RGBEEncoding]: 2,
  [RGBM7Encoding]: 3,
  [RGBM16Encoding]: 4,
  [RGBDEncoding]: 5,
  [GammaEncoding]: 6
};
var _flatCamera = /* @__PURE__ */ new OrthographicCamera();
var { _lodPlanes, _sizeLods, _sigmas } = /* @__PURE__ */ _createPlanes();
var _oldTarget = null;
var PHI = (1 + Math.sqrt(5)) / 2;
var INV_PHI = 1 / PHI;
var _axisDirections = [
  /* @__PURE__ */ new Vector3(1, 1, 1),
  /* @__PURE__ */ new Vector3(-1, 1, 1),
  /* @__PURE__ */ new Vector3(1, 1, -1),
  /* @__PURE__ */ new Vector3(-1, 1, -1),
  /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
  /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
  /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
  /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0)
];
var PMREMGenerator = class {
  constructor(renderer) {
    this._renderer = renderer;
    this._pingPongRenderTarget = null;
    this._blurMaterial = _getBlurShader(MAX_SAMPLES);
    this._equirectShader = null;
    this._cubemapShader = null;
    this._compileMaterial(this._blurMaterial);
  }
  fromScene(scene, sigma = 0, near = 0.1, far = 100) {
    _oldTarget = this._renderer.getRenderTarget();
    const cubeUVRenderTarget = this._allocateTargets();
    this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
    if (sigma > 0) {
      this._blur(cubeUVRenderTarget, 0, 0, sigma);
    }
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  fromEquirectangular(equirectangular) {
    return this._fromTexture(equirectangular);
  }
  fromCubemap(cubemap) {
    return this._fromTexture(cubemap);
  }
  compileCubemapShader() {
    if (this._cubemapShader === null) {
      this._cubemapShader = _getCubemapShader();
      this._compileMaterial(this._cubemapShader);
    }
  }
  compileEquirectangularShader() {
    if (this._equirectShader === null) {
      this._equirectShader = _getEquirectShader();
      this._compileMaterial(this._equirectShader);
    }
  }
  dispose() {
    this._blurMaterial.dispose();
    if (this._cubemapShader !== null)
      this._cubemapShader.dispose();
    if (this._equirectShader !== null)
      this._equirectShader.dispose();
    for (let i = 0; i < _lodPlanes.length; i++) {
      _lodPlanes[i].dispose();
    }
  }
  _cleanup(outputTarget) {
    this._pingPongRenderTarget.dispose();
    this._renderer.setRenderTarget(_oldTarget);
    outputTarget.scissorTest = false;
    _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
  }
  _fromTexture(texture) {
    _oldTarget = this._renderer.getRenderTarget();
    const cubeUVRenderTarget = this._allocateTargets(texture);
    this._textureToCubeUV(texture, cubeUVRenderTarget);
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  _allocateTargets(texture) {
    const params = {
      magFilter: NearestFilter,
      minFilter: NearestFilter,
      generateMipmaps: false,
      type: UnsignedByteType,
      format: RGBEFormat,
      encoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,
      depthBuffer: false
    };
    const cubeUVRenderTarget = _createRenderTarget(params);
    cubeUVRenderTarget.depthBuffer = texture ? false : true;
    this._pingPongRenderTarget = _createRenderTarget(params);
    return cubeUVRenderTarget;
  }
  _compileMaterial(material) {
    const tmpMesh = new Mesh(_lodPlanes[0], material);
    this._renderer.compile(tmpMesh, _flatCamera);
  }
  _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
    const fov2 = 90;
    const aspect2 = 1;
    const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
    const upSign = [1, -1, 1, 1, 1, 1];
    const forwardSign = [1, 1, 1, -1, -1, -1];
    const renderer = this._renderer;
    const outputEncoding = renderer.outputEncoding;
    const toneMapping = renderer.toneMapping;
    const clearColor = renderer.getClearColor();
    const clearAlpha = renderer.getClearAlpha();
    renderer.toneMapping = NoToneMapping;
    renderer.outputEncoding = LinearEncoding;
    let background = scene.background;
    if (background && background.isColor) {
      background.convertSRGBToLinear();
      const maxComponent = Math.max(background.r, background.g, background.b);
      const fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128), 127);
      background = background.multiplyScalar(Math.pow(2, -fExp));
      const alpha = (fExp + 128) / 255;
      renderer.setClearColor(background, alpha);
      scene.background = null;
    }
    for (let i = 0; i < 6; i++) {
      const col = i % 3;
      if (col == 0) {
        cubeCamera.up.set(0, upSign[i], 0);
        cubeCamera.lookAt(forwardSign[i], 0, 0);
      } else if (col == 1) {
        cubeCamera.up.set(0, 0, upSign[i]);
        cubeCamera.lookAt(0, forwardSign[i], 0);
      } else {
        cubeCamera.up.set(0, upSign[i], 0);
        cubeCamera.lookAt(0, 0, forwardSign[i]);
      }
      _setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);
      renderer.setRenderTarget(cubeUVRenderTarget);
      renderer.render(scene, cubeCamera);
    }
    renderer.toneMapping = toneMapping;
    renderer.outputEncoding = outputEncoding;
    renderer.setClearColor(clearColor, clearAlpha);
  }
  _textureToCubeUV(texture, cubeUVRenderTarget) {
    const renderer = this._renderer;
    if (texture.isCubeTexture) {
      if (this._cubemapShader == null) {
        this._cubemapShader = _getCubemapShader();
      }
    } else {
      if (this._equirectShader == null) {
        this._equirectShader = _getEquirectShader();
      }
    }
    const material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;
    const mesh = new Mesh(_lodPlanes[0], material);
    const uniforms = material.uniforms;
    uniforms["envMap"].value = texture;
    if (!texture.isCubeTexture) {
      uniforms["texelSize"].value.set(1 / texture.image.width, 1 / texture.image.height);
    }
    uniforms["inputEncoding"].value = ENCODINGS[texture.encoding];
    uniforms["outputEncoding"].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];
    _setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);
    renderer.setRenderTarget(cubeUVRenderTarget);
    renderer.render(mesh, _flatCamera);
  }
  _applyPMREM(cubeUVRenderTarget) {
    const renderer = this._renderer;
    const autoClear = renderer.autoClear;
    renderer.autoClear = false;
    for (let i = 1; i < TOTAL_LODS; i++) {
      const sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);
      const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
      this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
    }
    renderer.autoClear = autoClear;
  }
  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
    const pingPongRenderTarget = this._pingPongRenderTarget;
    this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, "latitudinal", poleAxis);
    this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, "longitudinal", poleAxis);
  }
  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
    const renderer = this._renderer;
    const blurMaterial = this._blurMaterial;
    if (direction !== "latitudinal" && direction !== "longitudinal") {
      console.error("blur direction must be either latitudinal or longitudinal!");
    }
    const STANDARD_DEVIATIONS = 3;
    const blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);
    const blurUniforms = blurMaterial.uniforms;
    const pixels = _sizeLods[lodIn] - 1;
    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
    const sigmaPixels = sigmaRadians / radiansPerPixel;
    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
    if (samples > MAX_SAMPLES) {
      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
    }
    const weights = [];
    let sum = 0;
    for (let i = 0; i < MAX_SAMPLES; ++i) {
      const x2 = i / sigmaPixels;
      const weight = Math.exp(-x2 * x2 / 2);
      weights.push(weight);
      if (i == 0) {
        sum += weight;
      } else if (i < samples) {
        sum += 2 * weight;
      }
    }
    for (let i = 0; i < weights.length; i++) {
      weights[i] = weights[i] / sum;
    }
    blurUniforms["envMap"].value = targetIn.texture;
    blurUniforms["samples"].value = samples;
    blurUniforms["weights"].value = weights;
    blurUniforms["latitudinal"].value = direction === "latitudinal";
    if (poleAxis) {
      blurUniforms["poleAxis"].value = poleAxis;
    }
    blurUniforms["dTheta"].value = radiansPerPixel;
    blurUniforms["mipInt"].value = LOD_MAX - lodIn;
    blurUniforms["inputEncoding"].value = ENCODINGS[targetIn.texture.encoding];
    blurUniforms["outputEncoding"].value = ENCODINGS[targetIn.texture.encoding];
    const outputSize = _sizeLods[lodOut];
    const x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);
    const y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);
    _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
    renderer.setRenderTarget(targetOut);
    renderer.render(blurMesh, _flatCamera);
  }
};
function _isLDR(texture) {
  if (texture === void 0 || texture.type !== UnsignedByteType)
    return false;
  return texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;
}
function _createPlanes() {
  const _lodPlanes2 = [];
  const _sizeLods2 = [];
  const _sigmas2 = [];
  let lod = LOD_MAX;
  for (let i = 0; i < TOTAL_LODS; i++) {
    const sizeLod = Math.pow(2, lod);
    _sizeLods2.push(sizeLod);
    let sigma = 1 / sizeLod;
    if (i > LOD_MAX - LOD_MIN) {
      sigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];
    } else if (i == 0) {
      sigma = 0;
    }
    _sigmas2.push(sigma);
    const texelSize = 1 / (sizeLod - 1);
    const min = -texelSize / 2;
    const max = 1 + texelSize / 2;
    const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
    const cubeFaces = 6;
    const vertices = 6;
    const positionSize = 3;
    const uvSize = 2;
    const faceIndexSize = 1;
    const position = new Float32Array(positionSize * vertices * cubeFaces);
    const uv = new Float32Array(uvSize * vertices * cubeFaces);
    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
    for (let face = 0; face < cubeFaces; face++) {
      const x = face % 3 * 2 / 3 - 1;
      const y = face > 2 ? 0 : -1;
      const coordinates = [
        x,
        y,
        0,
        x + 2 / 3,
        y,
        0,
        x + 2 / 3,
        y + 1,
        0,
        x,
        y,
        0,
        x + 2 / 3,
        y + 1,
        0,
        x,
        y + 1,
        0
      ];
      position.set(coordinates, positionSize * vertices * face);
      uv.set(uv1, uvSize * vertices * face);
      const fill = [face, face, face, face, face, face];
      faceIndex.set(fill, faceIndexSize * vertices * face);
    }
    const planes = new BufferGeometry();
    planes.setAttribute("position", new BufferAttribute(position, positionSize));
    planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
    planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
    _lodPlanes2.push(planes);
    if (lod > LOD_MIN) {
      lod--;
    }
  }
  return { _lodPlanes: _lodPlanes2, _sizeLods: _sizeLods2, _sigmas: _sigmas2 };
}
function _createRenderTarget(params) {
  const cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}
function _setViewport(target, x, y, width, height) {
  target.viewport.set(x, y, width, height);
  target.scissor.set(x, y, width, height);
}
function _getBlurShader(maxSamples) {
  const weights = new Float32Array(maxSamples);
  const poleAxis = new Vector3(0, 1, 0);
  const shaderMaterial = new RawShaderMaterial({
    name: "SphericalGaussianBlur",
    defines: { "n": maxSamples },
    uniforms: {
      "envMap": { value: null },
      "samples": { value: 1 },
      "weights": { value: weights },
      "latitudinal": { value: false },
      "dTheta": { value: 0 },
      "mipInt": { value: 0 },
      "poleAxis": { value: poleAxis },
      "inputEncoding": { value: ENCODINGS[LinearEncoding] },
      "outputEncoding": { value: ENCODINGS[LinearEncoding] }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${_getEncodings()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getEquirectShader() {
  const texelSize = new Vector2(1, 1);
  const shaderMaterial = new RawShaderMaterial({
    name: "EquirectangularToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "texelSize": { value: texelSize },
      "inputEncoding": { value: ENCODINGS[LinearEncoding] },
      "outputEncoding": { value: ENCODINGS[LinearEncoding] }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${_getEncodings()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getCubemapShader() {
  const shaderMaterial = new RawShaderMaterial({
    name: "CubemapToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "inputEncoding": { value: ENCODINGS[LinearEncoding] },
      "outputEncoding": { value: ENCODINGS[LinearEncoding] }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${_getEncodings()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getCommonVertexShader() {
  return `

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function _getEncodings() {
  return `

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`;
}
function Face4(a, b, c, d, normal, color, materialIndex) {
  console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
  return new Face3(a, b, c, normal, color, materialIndex);
}
var LineStrip = 0;
var LinePieces = 1;
var NoColors = 0;
var FaceColors = 1;
var VertexColors = 2;
function MeshFaceMaterial(materials) {
  console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
  return materials;
}
function MultiMaterial(materials = []) {
  console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
  materials.isMultiMaterial = true;
  materials.materials = materials;
  materials.clone = function() {
    return materials.slice();
  };
  return materials;
}
function PointCloud(geometry, material) {
  console.warn("THREE.PointCloud has been renamed to THREE.Points.");
  return new Points(geometry, material);
}
function Particle(material) {
  console.warn("THREE.Particle has been renamed to THREE.Sprite.");
  return new Sprite(material);
}
function ParticleSystem(geometry, material) {
  console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
  return new Points(geometry, material);
}
function PointCloudMaterial(parameters) {
  console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
  return new PointsMaterial(parameters);
}
function ParticleBasicMaterial(parameters) {
  console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
  return new PointsMaterial(parameters);
}
function ParticleSystemMaterial(parameters) {
  console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
  return new PointsMaterial(parameters);
}
function Vertex(x, y, z) {
  console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
  return new Vector3(x, y, z);
}
function DynamicBufferAttribute(array, itemSize) {
  console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");
  return new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);
}
function Int8Attribute(array, itemSize) {
  console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
  return new Int8BufferAttribute(array, itemSize);
}
function Uint8Attribute(array, itemSize) {
  console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
  return new Uint8BufferAttribute(array, itemSize);
}
function Uint8ClampedAttribute(array, itemSize) {
  console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
  return new Uint8ClampedBufferAttribute(array, itemSize);
}
function Int16Attribute(array, itemSize) {
  console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
  return new Int16BufferAttribute(array, itemSize);
}
function Uint16Attribute(array, itemSize) {
  console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
  return new Uint16BufferAttribute(array, itemSize);
}
function Int32Attribute(array, itemSize) {
  console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
  return new Int32BufferAttribute(array, itemSize);
}
function Uint32Attribute(array, itemSize) {
  console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
  return new Uint32BufferAttribute(array, itemSize);
}
function Float32Attribute(array, itemSize) {
  console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
  return new Float32BufferAttribute(array, itemSize);
}
function Float64Attribute(array, itemSize) {
  console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
  return new Float64BufferAttribute(array, itemSize);
}
Curve.create = function(construct, getPoint) {
  console.log("THREE.Curve.create() has been deprecated");
  construct.prototype = Object.create(Curve.prototype);
  construct.prototype.constructor = construct;
  construct.prototype.getPoint = getPoint;
  return construct;
};
Object.assign(CurvePath.prototype, {
  createPointsGeometry: function(divisions) {
    console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    const pts = this.getPoints(divisions);
    return this.createGeometry(pts);
  },
  createSpacedPointsGeometry: function(divisions) {
    console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    const pts = this.getSpacedPoints(divisions);
    return this.createGeometry(pts);
  },
  createGeometry: function(points) {
    console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    const geometry = new Geometry();
    for (let i = 0, l = points.length; i < l; i++) {
      const point = points[i];
      geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));
    }
    return geometry;
  }
});
Object.assign(Path.prototype, {
  fromPoints: function(points) {
    console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
    return this.setFromPoints(points);
  }
});
function ClosedSplineCurve3(points) {
  console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
  CatmullRomCurve3.call(this, points);
  this.type = "catmullrom";
  this.closed = true;
}
ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
function SplineCurve3(points) {
  console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
  CatmullRomCurve3.call(this, points);
  this.type = "catmullrom";
}
SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
function Spline(points) {
  console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
  CatmullRomCurve3.call(this, points);
  this.type = "catmullrom";
}
Spline.prototype = Object.create(CatmullRomCurve3.prototype);
Object.assign(Spline.prototype, {
  initFromArray: function() {
    console.error("THREE.Spline: .initFromArray() has been removed.");
  },
  getControlPointsArray: function() {
    console.error("THREE.Spline: .getControlPointsArray() has been removed.");
  },
  reparametrizeByArcLength: function() {
    console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
  }
});
function AxisHelper(size) {
  console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
  return new AxesHelper(size);
}
function BoundingBoxHelper(object, color) {
  console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
  return new BoxHelper(object, color);
}
function EdgesHelper(object, hex) {
  console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
  return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({ color: hex !== void 0 ? hex : 16777215 }));
}
GridHelper.prototype.setColors = function() {
  console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
};
SkeletonHelper.prototype.update = function() {
  console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
};
function WireframeHelper(object, hex) {
  console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
  return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({ color: hex !== void 0 ? hex : 16777215 }));
}
Object.assign(Loader.prototype, {
  extractUrlBase: function(url) {
    console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return LoaderUtils.extractUrlBase(url);
  }
});
Loader.Handlers = {
  add: function() {
    console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
  },
  get: function() {
    console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
  }
};
function XHRLoader(manager) {
  console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
  return new FileLoader(manager);
}
function BinaryTextureLoader(manager) {
  console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
  return new DataTextureLoader(manager);
}
Object.assign(Box2.prototype, {
  center: function(optionalTarget) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  },
  empty: function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  },
  isIntersectionBox: function(box) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  },
  size: function(optionalTarget) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
  }
});
Object.assign(Box3.prototype, {
  center: function(optionalTarget) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  },
  empty: function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  },
  isIntersectionBox: function(box) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  },
  isIntersectionSphere: function(sphere) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
  },
  size: function(optionalTarget) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
  }
});
Object.assign(Sphere.prototype, {
  empty: function() {
    console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }
});
Frustum.prototype.setFromMatrix = function(m) {
  console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
  return this.setFromProjectionMatrix(m);
};
Line3.prototype.center = function(optionalTarget) {
  console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
  return this.getCenter(optionalTarget);
};
Object.assign(MathUtils, {
  random16: function() {
    console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
    return Math.random();
  },
  nearestPowerOfTwo: function(value) {
    console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
    return MathUtils.floorPowerOfTwo(value);
  },
  nextPowerOfTwo: function(value) {
    console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
    return MathUtils.ceilPowerOfTwo(value);
  }
});
Object.assign(Matrix3.prototype, {
  flattenToArrayOffset: function(array, offset) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  },
  multiplyVector3: function(vector) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return vector.applyMatrix3(this);
  },
  multiplyVector3Array: function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
  },
  applyToBufferAttribute: function(attribute) {
    console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
    return attribute.applyMatrix3(this);
  },
  applyToVector3Array: function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
  },
  getInverse: function(matrix) {
    console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
    return this.copy(matrix).invert();
  }
});
Object.assign(Matrix4.prototype, {
  extractPosition: function(m) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(m);
  },
  flattenToArrayOffset: function(array, offset) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  },
  getPosition: function() {
    console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
    return new Vector3().setFromMatrixColumn(this, 3);
  },
  setRotationFromQuaternion: function(q) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(q);
  },
  multiplyToArray: function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
  },
  multiplyVector3: function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  },
  multiplyVector4: function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  },
  multiplyVector3Array: function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
  },
  rotateAxis: function(v) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    v.transformDirection(this);
  },
  crossVector: function(vector) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  },
  translate: function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
  },
  rotateX: function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
  },
  rotateY: function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
  },
  rotateZ: function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
  },
  rotateByAxis: function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
  },
  applyToBufferAttribute: function(attribute) {
    console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
    return attribute.applyMatrix4(this);
  },
  applyToVector3Array: function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
  },
  makeFrustum: function(left, right, bottom, top, near, far) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(left, right, top, bottom, near, far);
  },
  getInverse: function(matrix) {
    console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
    return this.copy(matrix).invert();
  }
});
Plane.prototype.isIntersectionLine = function(line) {
  console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
  return this.intersectsLine(line);
};
Object.assign(Quaternion.prototype, {
  multiplyVector3: function(vector) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return vector.applyQuaternion(this);
  },
  inverse: function() {
    console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");
    return this.invert();
  }
});
Object.assign(Ray.prototype, {
  isIntersectionBox: function(box) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  },
  isIntersectionPlane: function(plane) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(plane);
  },
  isIntersectionSphere: function(sphere) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
  }
});
Object.assign(Triangle.prototype, {
  area: function() {
    console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
    return this.getArea();
  },
  barycoordFromPoint: function(point, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return this.getBarycoord(point, target);
  },
  midpoint: function(target) {
    console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
    return this.getMidpoint(target);
  },
  normal: function(target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return this.getNormal(target);
  },
  plane: function(target) {
    console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
    return this.getPlane(target);
  }
});
Object.assign(Triangle, {
  barycoordFromPoint: function(point, a, b, c, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return Triangle.getBarycoord(point, a, b, c, target);
  },
  normal: function(a, b, c, target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return Triangle.getNormal(a, b, c, target);
  }
});
Object.assign(Shape.prototype, {
  extractAllPoints: function(divisions) {
    console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
    return this.extractPoints(divisions);
  },
  extrude: function(options) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new ExtrudeGeometry(this, options);
  },
  makeGeometry: function(options) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new ShapeGeometry(this, options);
  }
});
Object.assign(Vector2.prototype, {
  fromAttribute: function(attribute, index, offset) {
    console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  },
  distanceToManhattan: function(v) {
    console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v);
  },
  lengthManhattan: function() {
    console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }
});
Object.assign(Vector3.prototype, {
  setEulerFromRotationMatrix: function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  },
  setEulerFromQuaternion: function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  },
  getPositionFromMatrix: function(m) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(m);
  },
  getScaleFromMatrix: function(m) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(m);
  },
  getColumnFromMatrix: function(index, matrix) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(matrix, index);
  },
  applyProjection: function(m) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(m);
  },
  fromAttribute: function(attribute, index, offset) {
    console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  },
  distanceToManhattan: function(v) {
    console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v);
  },
  lengthManhattan: function() {
    console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }
});
Object.assign(Vector4.prototype, {
  fromAttribute: function(attribute, index, offset) {
    console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  },
  lengthManhattan: function() {
    console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }
});
Object.assign(Geometry.prototype, {
  computeTangents: function() {
    console.error("THREE.Geometry: .computeTangents() has been removed.");
  },
  computeLineDistances: function() {
    console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
  },
  applyMatrix: function(matrix) {
    console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
});
Object.assign(Object3D.prototype, {
  getChildByName: function(name) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(name);
  },
  renderDepth: function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
  },
  translate: function(distance, axis) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(axis, distance);
  },
  getWorldRotation: function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
  },
  applyMatrix: function(matrix) {
    console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
});
Object.defineProperties(Object3D.prototype, {
  eulerOrder: {
    get: function() {
      console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
      return this.rotation.order;
    },
    set: function(value) {
      console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
      this.rotation.order = value;
    }
  },
  useQuaternion: {
    get: function() {
      console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
    },
    set: function() {
      console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
    }
  }
});
Object.assign(Mesh.prototype, {
  setDrawMode: function() {
    console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
  }
});
Object.defineProperties(Mesh.prototype, {
  drawMode: {
    get: function() {
      console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
      return TrianglesDrawMode;
    },
    set: function() {
      console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
    }
  }
});
Object.defineProperties(LOD.prototype, {
  objects: {
    get: function() {
      console.warn("THREE.LOD: .objects has been renamed to .levels.");
      return this.levels;
    }
  }
});
Object.defineProperty(Skeleton.prototype, "useVertexTexture", {
  get: function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  },
  set: function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }
});
SkinnedMesh.prototype.initBones = function() {
  console.error("THREE.SkinnedMesh: initBones() has been removed.");
};
Object.defineProperty(Curve.prototype, "__arcLengthDivisions", {
  get: function() {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    return this.arcLengthDivisions;
  },
  set: function(value) {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    this.arcLengthDivisions = value;
  }
});
PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
  console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
  if (filmGauge !== void 0)
    this.filmGauge = filmGauge;
  this.setFocalLength(focalLength);
};
Object.defineProperties(Light.prototype, {
  onlyShadow: {
    set: function() {
      console.warn("THREE.Light: .onlyShadow has been removed.");
    }
  },
  shadowCameraFov: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
      this.shadow.camera.fov = value;
    }
  },
  shadowCameraLeft: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
      this.shadow.camera.left = value;
    }
  },
  shadowCameraRight: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
      this.shadow.camera.right = value;
    }
  },
  shadowCameraTop: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
      this.shadow.camera.top = value;
    }
  },
  shadowCameraBottom: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
      this.shadow.camera.bottom = value;
    }
  },
  shadowCameraNear: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
      this.shadow.camera.near = value;
    }
  },
  shadowCameraFar: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
      this.shadow.camera.far = value;
    }
  },
  shadowCameraVisible: {
    set: function() {
      console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
    }
  },
  shadowBias: {
    set: function(value) {
      console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
      this.shadow.bias = value;
    }
  },
  shadowDarkness: {
    set: function() {
      console.warn("THREE.Light: .shadowDarkness has been removed.");
    }
  },
  shadowMapWidth: {
    set: function(value) {
      console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
      this.shadow.mapSize.width = value;
    }
  },
  shadowMapHeight: {
    set: function(value) {
      console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
      this.shadow.mapSize.height = value;
    }
  }
});
Object.defineProperties(BufferAttribute.prototype, {
  length: {
    get: function() {
      console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
      return this.array.length;
    }
  },
  dynamic: {
    get: function() {
      console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
      return this.usage === DynamicDrawUsage;
    },
    set: function() {
      console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
      this.setUsage(DynamicDrawUsage);
    }
  }
});
Object.assign(BufferAttribute.prototype, {
  setDynamic: function(value) {
    console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
  },
  copyIndicesArray: function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
  },
  setArray: function() {
    console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }
});
Object.assign(BufferGeometry.prototype, {
  addIndex: function(index) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(index);
  },
  addAttribute: function(name, attribute) {
    console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
      console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
      return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
    }
    if (name === "index") {
      console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
      this.setIndex(attribute);
      return this;
    }
    return this.setAttribute(name, attribute);
  },
  addDrawCall: function(start, count, indexOffset) {
    if (indexOffset !== void 0) {
      console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    }
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(start, count);
  },
  clearDrawCalls: function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
  },
  computeTangents: function() {
    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
  },
  computeOffsets: function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
  },
  removeAttribute: function(name) {
    console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
    return this.deleteAttribute(name);
  },
  applyMatrix: function(matrix) {
    console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
});
Object.defineProperties(BufferGeometry.prototype, {
  drawcalls: {
    get: function() {
      console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
      return this.groups;
    }
  },
  offsets: {
    get: function() {
      console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
      return this.groups;
    }
  }
});
Object.defineProperties(InstancedBufferGeometry.prototype, {
  maxInstancedCount: {
    get: function() {
      console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
      return this.instanceCount;
    },
    set: function(value) {
      console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
      this.instanceCount = value;
    }
  }
});
Object.defineProperties(Raycaster.prototype, {
  linePrecision: {
    get: function() {
      console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
      return this.params.Line.threshold;
    },
    set: function(value) {
      console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
      this.params.Line.threshold = value;
    }
  }
});
Object.defineProperties(InterleavedBuffer.prototype, {
  dynamic: {
    get: function() {
      console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
      return this.usage === DynamicDrawUsage;
    },
    set: function(value) {
      console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
      this.setUsage(value);
    }
  }
});
Object.assign(InterleavedBuffer.prototype, {
  setDynamic: function(value) {
    console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
  },
  setArray: function() {
    console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }
});
Object.assign(ExtrudeBufferGeometry.prototype, {
  getArrays: function() {
    console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
  },
  addShapeList: function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
  },
  addShape: function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
  }
});
Object.assign(Scene.prototype, {
  dispose: function() {
    console.error("THREE.Scene: .dispose() has been removed.");
  }
});
Object.defineProperties(Uniform.prototype, {
  dynamic: {
    set: function() {
      console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
    }
  },
  onUpdate: {
    value: function() {
      console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
      return this;
    }
  }
});
Object.defineProperties(Material.prototype, {
  wrapAround: {
    get: function() {
      console.warn("THREE.Material: .wrapAround has been removed.");
    },
    set: function() {
      console.warn("THREE.Material: .wrapAround has been removed.");
    }
  },
  overdraw: {
    get: function() {
      console.warn("THREE.Material: .overdraw has been removed.");
    },
    set: function() {
      console.warn("THREE.Material: .overdraw has been removed.");
    }
  },
  wrapRGB: {
    get: function() {
      console.warn("THREE.Material: .wrapRGB has been removed.");
      return new Color();
    }
  },
  shading: {
    get: function() {
      console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
    },
    set: function(value) {
      console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
      this.flatShading = value === FlatShading;
    }
  },
  stencilMask: {
    get: function() {
      console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
      return this.stencilFuncMask;
    },
    set: function(value) {
      console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
      this.stencilFuncMask = value;
    }
  }
});
Object.defineProperties(MeshPhongMaterial.prototype, {
  metal: {
    get: function() {
      console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
      return false;
    },
    set: function() {
      console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
    }
  }
});
Object.defineProperties(MeshPhysicalMaterial.prototype, {
  transparency: {
    get: function() {
      console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
      return this.transmission;
    },
    set: function(value) {
      console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
      this.transmission = value;
    }
  }
});
Object.defineProperties(ShaderMaterial.prototype, {
  derivatives: {
    get: function() {
      console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
      return this.extensions.derivatives;
    },
    set: function(value) {
      console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
      this.extensions.derivatives = value;
    }
  }
});
Object.assign(WebGLRenderer.prototype, {
  clearTarget: function(renderTarget, color, depth, stencil) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil);
  },
  animate: function(callback) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
    this.setAnimationLoop(callback);
  },
  getCurrentRenderTarget: function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
  },
  getMaxAnisotropy: function() {
    console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
    return this.capabilities.getMaxAnisotropy();
  },
  getPrecision: function() {
    console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
    return this.capabilities.precision;
  },
  resetGLState: function() {
    console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset();
  },
  supportsFloatTextures: function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
  },
  supportsHalfFloatTextures: function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
  },
  supportsStandardDerivatives: function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
  },
  supportsCompressedTextureS3TC: function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
  },
  supportsCompressedTexturePVRTC: function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
  },
  supportsBlendMinMax: function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
  },
  supportsVertexTextures: function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
  },
  supportsInstancedArrays: function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
  },
  enableScissorTest: function(boolean) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(boolean);
  },
  initMaterial: function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  },
  addPrePlugin: function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  },
  addPostPlugin: function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  },
  updateShadowMap: function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  },
  setFaceCulling: function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
  },
  allocTextureUnit: function() {
    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
  },
  setTexture: function() {
    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
  },
  setTexture2D: function() {
    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
  },
  setTextureCube: function() {
    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
  },
  getActiveMipMapLevel: function() {
    console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
    return this.getActiveMipmapLevel();
  }
});
Object.defineProperties(WebGLRenderer.prototype, {
  shadowMapEnabled: {
    get: function() {
      return this.shadowMap.enabled;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
      this.shadowMap.enabled = value;
    }
  },
  shadowMapType: {
    get: function() {
      return this.shadowMap.type;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
      this.shadowMap.type = value;
    }
  },
  shadowMapCullFace: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
    }
  },
  context: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
      return this.getContext();
    }
  },
  vr: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
      return this.xr;
    }
  },
  gammaInput: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
      return false;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
    }
  },
  gammaOutput: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
      return false;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
      this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
    }
  },
  toneMappingWhitePoint: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
      return 1;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
    }
  }
});
Object.defineProperties(WebGLShadowMap.prototype, {
  cullFace: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
    }
  },
  renderReverseSided: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
    }
  },
  renderSingleSided: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
    }
  }
});
function WebGLRenderTargetCube(width, height, options) {
  console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");
  return new WebGLCubeRenderTarget(width, options);
}
Object.defineProperties(WebGLRenderTarget.prototype, {
  wrapS: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
      return this.texture.wrapS;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
      this.texture.wrapS = value;
    }
  },
  wrapT: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
      return this.texture.wrapT;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
      this.texture.wrapT = value;
    }
  },
  magFilter: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
      return this.texture.magFilter;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
      this.texture.magFilter = value;
    }
  },
  minFilter: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
      return this.texture.minFilter;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
      this.texture.minFilter = value;
    }
  },
  anisotropy: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
      return this.texture.anisotropy;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
      this.texture.anisotropy = value;
    }
  },
  offset: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
      return this.texture.offset;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
      this.texture.offset = value;
    }
  },
  repeat: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
      return this.texture.repeat;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
      this.texture.repeat = value;
    }
  },
  format: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
      return this.texture.format;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
      this.texture.format = value;
    }
  },
  type: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
      return this.texture.type;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
      this.texture.type = value;
    }
  },
  generateMipmaps: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
      return this.texture.generateMipmaps;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
      this.texture.generateMipmaps = value;
    }
  }
});
Object.defineProperties(Audio.prototype, {
  load: {
    value: function(file) {
      console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
      const scope = this;
      const audioLoader = new AudioLoader();
      audioLoader.load(file, function(buffer) {
        scope.setBuffer(buffer);
      });
      return this;
    }
  },
  startTime: {
    set: function() {
      console.warn("THREE.Audio: .startTime is now .play( delay ).");
    }
  }
});
AudioAnalyser.prototype.getData = function() {
  console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
  return this.getFrequencyData();
};
CubeCamera.prototype.updateCubeMap = function(renderer, scene) {
  console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
  return this.update(renderer, scene);
};
CubeCamera.prototype.clear = function(renderer, color, depth, stencil) {
  console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");
  return this.renderTarget.clear(renderer, color, depth, stencil);
};
var GeometryUtils = {
  merge: function(geometry1, geometry2, materialIndexOffset) {
    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    let matrix;
    if (geometry2.isMesh) {
      geometry2.matrixAutoUpdate && geometry2.updateMatrix();
      matrix = geometry2.matrix;
      geometry2 = geometry2.geometry;
    }
    geometry1.merge(geometry2, matrix, materialIndexOffset);
  },
  center: function(geometry) {
    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
    return geometry.center();
  }
};
ImageUtils.crossOrigin = void 0;
ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
  console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
  const loader = new TextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  const texture = loader.load(url, onLoad, void 0, onError);
  if (mapping)
    texture.mapping = mapping;
  return texture;
};
ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
  console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
  const loader = new CubeTextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  const texture = loader.load(urls, onLoad, void 0, onError);
  if (mapping)
    texture.mapping = mapping;
  return texture;
};
ImageUtils.loadCompressedTexture = function() {
  console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
};
ImageUtils.loadCompressedTextureCube = function() {
  console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
};
function CanvasRenderer() {
  console.error("THREE.CanvasRenderer has been removed");
}
function JSONLoader() {
  console.error("THREE.JSONLoader has been removed.");
}
var SceneUtils = {
  createMultiMaterialObject: function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  },
  detach: function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  },
  attach: function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  }
};
function LensFlare() {
  console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js");
}
if (typeof __THREE_DEVTOOLS__ !== "undefined") {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
    revision: REVISION
  } }));
}

// src/defaults/TransformDefaults.ts
var TransformDefaults = class {
};
TransformDefaults.VectorUp = new Vector3(0, 1, 0);
TransformDefaults.VectorRight = new Vector3(0, 0, 1);
TransformDefaults.VectorForward = new Vector3(1, 0, 0);
TransformDefaults.Position = new Vector3();
TransformDefaults.Rotation = new Quaternion();
TransformDefaults.Scale = new Vector3(1, 1, 1);

// src/enums/ComponentsEnum.ts
var ComponentsEnum;
(function(ComponentsEnum2) {
  ComponentsEnum2["Transform"] = "Transform";
  ComponentsEnum2["GameObject"] = "GameObject";
  ComponentsEnum2["MeshFilter"] = "MeshFilter";
  ComponentsEnum2["MeshRenderer"] = "MeshRenderer";
  ComponentsEnum2["Rigidbody"] = "Rigidbody";
  ComponentsEnum2["BoxCollider"] = "BoxCollider";
  ComponentsEnum2["SphereCollider"] = "SphereCollider";
  ComponentsEnum2["Terrain"] = "Terrain";
  ComponentsEnum2["TerrainCollider"] = "TerrainCollider";
  ComponentsEnum2["Animation"] = "Animation";
})(ComponentsEnum || (ComponentsEnum = {}));

// src/utils/UUID.ts
var UUID = class {
  static v4() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
};

// src/utils/Mathf.ts
var Mathf = class {
  static QuaternionDot(left, right) {
    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;
  }
  static QuaternionDifferent(quat1, quat2, epsilon) {
    if (Math.abs(quat1.x - quat2.x) > epsilon)
      return true;
    if (Math.abs(quat1.y - quat2.y) > epsilon)
      return true;
    if (Math.abs(quat1.z - quat2.z) > epsilon)
      return true;
    if (Math.abs(quat1.w - quat2.w) > epsilon)
      return true;
  }
};
Mathf.Deg2Rad = Math.PI * 2 / 360;
Mathf.Rad2Deg = 360 / (Math.PI * 2);
Mathf.Epsilon = 1e-6;

// src/utils/Object3DExtended.ts
var Object3DExtended = class extends Object3D {
  constructor() {
    super();
    this.worldPosition = new Vector3();
    this.worldEuler = new Vector3();
    this.worldRotation = new Quaternion();
    this.worldScale = new Vector3();
    this.euler = new Vector3();
    this.previousWorldPosition = new Vector3();
    this.previousWorldEuler = new Vector3();
    this.previousWorldRotation = new Quaternion();
    this.previousEuler = new Vector3();
    this._e1 = new Euler();
    this._v1 = new Vector3();
    this._v2 = new Vector3();
    this._q1 = new Quaternion();
    this._q2 = new Quaternion();
  }
  updateMatrix() {
    this.CheckWorldPosition();
    this.CheckWorldEuler();
    this.CheckWorldRotation();
    this.CheckEuler();
    super.updateMatrix();
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    this.matrixWorld.decompose(this.worldPosition, this.worldRotation, this.worldScale);
    this.worldEuler.copy(this.getWorldEuler());
    this.previousWorldEuler.copy(this.worldEuler);
    this.previousWorldPosition.copy(this.worldPosition);
    this.previousWorldRotation.copy(this.worldRotation);
    this.euler.copy(this.getEuler());
    this.previousEuler.copy(this.euler);
  }
  getWorldEuler() {
    this._e1.copy(this.rotation);
    if (this.parent) {
      this._e1.x += this.parent.rotation.x;
      this._e1.y += this.parent.rotation.y;
      this._e1.z += this.parent.rotation.z;
    }
    this._e1.toVector3(this._v1);
    return this._v1.multiplyScalar(MathUtils.RAD2DEG);
  }
  setWorldEuler(x, y, z) {
    this._e1.set(x * MathUtils.DEG2RAD, y * MathUtils.DEG2RAD, z * MathUtils.DEG2RAD);
    if (this.parent) {
      this._e1.x -= this.parent.rotation.x;
      this._e1.y -= this.parent.rotation.y;
      this._e1.z -= this.parent.rotation.z;
      this.rotation.copy(this._e1);
    }
  }
  getWorldPositiona() {
    this._v1.copy(this.position);
    this.getWorldPosition(this._v1);
    return this._v1;
  }
  setWorldPosition(x, y, z) {
    this._v1.set(x, y, z);
    if (this.parent) {
      this.parent.getWorldPosition(this._v2);
      this._q1.copy(this.parent.quaternion);
      this.position.copy(this._v1.sub(this._v2).applyQuaternion(this._q1.invert()).divide(this.parent.scale));
    }
  }
  getWorldRotation() {
    this.getWorldQuaternion(this._q1);
    return this._q1;
  }
  setWorldRotation(x, y, z, w) {
    this._q1.set(x, y, z, w);
    if (this.parent) {
      this.parent.getWorldQuaternion(this._q2);
      this.quaternion.copy(this._q1.multiply(this._q2.invert()));
    }
  }
  getEuler() {
    return this._v1.set(this.rotation.x * MathUtils.RAD2DEG, this.rotation.y * MathUtils.RAD2DEG, this.rotation.z * MathUtils.RAD2DEG);
  }
  setEuler(x, y, z) {
    this.rotation.set(x * MathUtils.DEG2RAD, y * MathUtils.DEG2RAD, z * MathUtils.DEG2RAD);
  }
  CheckWorldPosition() {
    if (this.previousWorldPosition.distanceToSquared(this.worldPosition) > Number.EPSILON) {
      this.setWorldPosition(this.worldPosition.x, this.worldPosition.y, this.worldPosition.z);
      this.previousWorldPosition.copy(this.worldPosition);
    }
  }
  CheckWorldEuler() {
    if (this.previousWorldEuler.distanceToSquared(this.worldEuler) > Number.EPSILON) {
      this.setWorldEuler(this.worldEuler.x, this.worldEuler.y, this.worldEuler.z);
      this.previousWorldEuler.copy(this.worldEuler);
    }
  }
  CheckWorldRotation() {
    if (Mathf.QuaternionDifferent(this.previousWorldRotation, this.worldRotation, Mathf.Epsilon)) {
      this.setWorldRotation(this.worldRotation.x, this.worldRotation.y, this.worldRotation.z, this.worldRotation.w);
      this.previousWorldRotation.copy(this.worldRotation);
    }
  }
  CheckEuler() {
    if (this.previousEuler.distanceToSquared(this.euler) > Number.EPSILON) {
      this.setEuler(this.euler.x, this.euler.y, this.euler.z);
      this.previousEuler.copy(this.euler);
    }
  }
};

// src/components/Transform.ts
var Transform = class {
  constructor(gameObject) {
    this.uuid = UUID.v4();
    this.classtype = ComponentsEnum.Transform;
    this.tag = "Untagged";
    this.up = TransformDefaults.VectorUp.clone();
    this.right = TransformDefaults.VectorRight.clone();
    this.forward = TransformDefaults.VectorForward.clone();
    this.gameObject = gameObject;
    this.group = new Object3DExtended();
    this.group["transform"] = this;
    this.gameObject.scene.GetRenderer().scene.add(this.group);
  }
  get position() {
    return this.group.worldPosition;
  }
  set position(position) {
    this.group.worldPosition.copy(position);
  }
  get localPosition() {
    return this.group.position;
  }
  set localPosition(localPosition) {
    this.group.position.copy(localPosition);
  }
  get rotation() {
    return this.group.worldRotation;
  }
  set rotation(rotation) {
    this.group.worldRotation.copy(rotation);
  }
  get localRotation() {
    return this.group.quaternion;
  }
  set localRotation(localRotation) {
    this.group.quaternion.copy(localRotation);
  }
  get eulerAngles() {
    return this.group.worldEuler;
  }
  set eulerAngles(eulerAngles) {
    this.group.worldEuler.copy(eulerAngles);
  }
  get localEulerAngles() {
    return this.group.euler;
  }
  set localEulerAngles(localEulerAngles) {
    this.group.euler.copy(localEulerAngles);
  }
  get localScale() {
    return this.group.scale;
  }
  set localScale(localScale) {
    this.group.scale.copy(localScale);
  }
  get parent() {
    return this._parent;
  }
  set parent(parent) {
    if (parent == null) {
      this._parent = null;
      this.gameObject.scene.GetRenderer().scene.attach(this.group);
      return;
    }
    this._parent = parent;
    parent.group.attach(this.group);
  }
  Translate(translation) {
    this.group.translateX(translation.x);
    this.group.translateY(translation.y);
    this.group.translateZ(translation.z);
  }
  RotateAround(point, axis, angle) {
    const q = new Quaternion();
    q.setFromAxisAngle(axis, angle * Mathf.Deg2Rad);
    this.group.applyQuaternion(q);
    this.group.position.sub(point);
    this.group.position.applyQuaternion(q);
    this.group.position.add(point);
  }
  Tick() {
  }
  FixedUpdate() {
  }
  LateUpdate() {
  }
  Update() {
    this.up.copy(TransformDefaults.VectorUp);
    this.up.applyQuaternion(this.rotation);
    this.right.copy(TransformDefaults.VectorRight);
    this.right.applyQuaternion(this.rotation);
    this.forward.copy(TransformDefaults.VectorForward);
    this.forward.applyQuaternion(this.rotation);
  }
  Start() {
  }
  Stop() {
  }
  Destroy() {
    this.group.clear();
    this.gameObject.scene.GetRenderer().scene.remove(this.group);
  }
};

// src/enums/LayerMask.ts
var LayerMask;
(function(LayerMask2) {
  LayerMask2[LayerMask2["LAYER0"] = 1] = "LAYER0";
  LayerMask2[LayerMask2["LAYER1"] = 2] = "LAYER1";
  LayerMask2[LayerMask2["LAYER2"] = 4] = "LAYER2";
  LayerMask2[LayerMask2["LAYER3"] = 8] = "LAYER3";
  LayerMask2[LayerMask2["LAYER4"] = 16] = "LAYER4";
  LayerMask2[LayerMask2["LAYER5"] = 32] = "LAYER5";
  LayerMask2[LayerMask2["LAYER6"] = 64] = "LAYER6";
  LayerMask2[LayerMask2["LAYER7"] = 128] = "LAYER7";
  LayerMask2[LayerMask2["LAYER8"] = 256] = "LAYER8";
  LayerMask2[LayerMask2["LAYER9"] = 512] = "LAYER9";
})(LayerMask || (LayerMask = {}));

// src/components/GameObject.ts
var GameObject = class {
  constructor(scene) {
    this.uuid = UUID.v4();
    this.classtype = ComponentsEnum.GameObject;
    this.components = [];
    this.layer = LayerMask.LAYER0;
    if (!scene) {
      console.error("Invalid scene provided");
      return;
    }
    this.scene = scene;
    this.transform = new Transform(this);
    this.scene.AddGameObject(this);
  }
  IsValidComponent(object) {
    const componentInterface = object;
    if (componentInterface.classtype !== void 0) {
      if (componentInterface.classtype == "Component") {
        return true;
      }
    }
    return false;
  }
  AddComponent(component) {
    if (component == Object) {
      return null;
    }
    let componentObject = new component(this, this.transform);
    if (!this.IsValidComponent(componentObject)) {
      console.error(`Invalid Component ${componentObject}`);
      return null;
    }
    this.components.push(componentObject);
    componentObject.OnEnable();
    if (this.scene.HasGizmosEnabled()) {
      componentObject.OnGizmosEnabled();
    }
    return componentObject;
    return null;
  }
  BroadcastMessage(methodName, parameter) {
    for (let component of this.components) {
      if (component[methodName] !== void 0 && typeof component[methodName] === "function") {
        component[methodName](parameter);
      }
    }
  }
  OnEnable() {
    for (let component of this.components) {
      component.OnEnable();
    }
  }
  OnDisable() {
  }
  RemoveComponent(component) {
    if (!this.IsValidComponent(component)) {
      console.error(`Invalid Component ${component}`);
      return false;
    }
    const componentIndex = this.components.indexOf(component);
    if (componentIndex == -1) {
      return false;
    }
    this.components.splice(componentIndex, 1);
    component.Destroy();
    return true;
  }
  GetComponent(type) {
    for (let component of this.components) {
      if (component instanceof type) {
        return component;
      }
    }
    return null;
  }
  GetComponents(type) {
    let matches = [];
    for (let component of this.components) {
      if (component.classname == type.name) {
        matches.push(component);
      }
    }
    return matches;
  }
  FixedUpdate() {
    this.transform.FixedUpdate();
    for (let component of this.components) {
      component.FixedUpdate();
    }
  }
  Update() {
    this.transform.Update();
    if (this.scene.isPlaying) {
      for (let component of this.components) {
        if (!component.hasStarted) {
          component.Start();
          component.hasStarted = true;
        }
        component.Update();
      }
    }
  }
  LateUpdate() {
    this.transform.LateUpdate();
    for (let component of this.components) {
      component.LateUpdate();
    }
  }
  Start() {
    this.transform.Start();
    for (let component of this.components) {
      component.Start();
      component.hasStarted = true;
    }
  }
  Stop() {
    this.transform.Stop();
    for (let component of this.components) {
      component.Stop();
    }
  }
  OnGizmosEnabled() {
    for (let component of this.components) {
      component.OnGizmosEnabled();
    }
  }
  OnGizmosDisabled() {
    for (let component of this.components) {
      component.OnGizmosDisabled();
    }
  }
  OnDrawGizmos() {
    for (let component of this.components) {
      component.OnDrawGizmos();
    }
  }
  Destroy() {
    this.transform.Destroy();
    const componentsCopy = this.components.slice();
    for (let component of componentsCopy) {
      component.Destroy();
    }
    this.scene.RemoveGameObject(this);
  }
};

// src/Renderer.ts
var Renderer = class {
  constructor(config, loadedCb) {
    this.now = 0;
    this.then = 0;
    this.elapsed = 0;
    this.fpsInterval = 0;
    this.startTime = 0;
    this.frameCount = 0;
    this.currentFps = 0;
    const scene = new Scene();
    this.canvas = document.getElementById(config.containerId);
    const renderer = new WebGLRenderer({ canvas: this.canvas, logarithmicDepthBuffer: true });
    renderer.setSize(this.canvas.parentElement.offsetWidth, this.canvas.parentElement.offsetHeight);
    this.scene = scene;
    this.renderer = renderer;
    this.fpsInterval = 1e3 / config.targetFrameRate;
    this.then = Date.now();
    this.startTime = this.then;
    window.addEventListener("resize", (event) => {
      this.renderer.setSize(this.canvas.parentElement.offsetWidth, this.canvas.parentElement.offsetHeight);
    });
    if (loadedCb) {
      loadedCb();
    }
  }
  Tick(camera) {
    this.now = Date.now();
    this.elapsed = this.now - this.then;
    if (this.elapsed > this.fpsInterval) {
      this.then = this.now - this.elapsed % this.fpsInterval;
      if (camera) {
        this.renderer.render(this.scene, camera);
      }
      var sinceStart = this.now - this.startTime;
      this.currentFps = Math.round(1e3 / (sinceStart / ++this.frameCount) * 100) / 100;
    }
  }
};

// src/Physics.ts
var import_trident_physx_js_webidl2 = __toModule(require_trident_physx_js_webidl_wasm());

// src/physics/PhysicsRaycast.ts
var import_trident_physx_js_webidl = __toModule(require_trident_physx_js_webidl_wasm());
var PhysicsRaycast = class {
  constructor(physxScene) {
    this.physxScene = physxScene;
    this._origin = new import_trident_physx_js_webidl.default.PxVec3();
    this._direction = new import_trident_physx_js_webidl.default.PxVec3();
    this._filterData = new import_trident_physx_js_webidl.default.PxQueryFilterData();
    this._hitFlags = new import_trident_physx_js_webidl.default.PxHitFlags(import_trident_physx_js_webidl.default.ePOSITION | import_trident_physx_js_webidl.default.eNORMAL);
  }
  Raycast(origin, direction, maxDistance, layerMask = 0) {
    this._origin.x = origin.x;
    this._origin.y = origin.y;
    this._origin.z = origin.z;
    this._direction.x = direction.x;
    this._direction.y = direction.y;
    this._direction.z = direction.z;
    const callback = new import_trident_physx_js_webidl.default.PxRaycastBuffer10();
    this._filterData.data.word2 = layerMask;
    this.physxScene.raycast(this._origin, this._direction, maxDistance, callback, this._hitFlags, this._filterData);
    return callback;
  }
};

// src/Physics.ts
var PhysicsConfigurationDefault = {
  physxWasmURL: "./trident-physx-js-webidl/dist/trident-physx-js-webidl.wasm.wasm",
  gravity: {
    x: 0,
    y: -9.8,
    z: 0
  },
  framerate: 50,
  performanceCooking: false
};
var Physics = class {
  constructor(scene, config, loadedCb) {
    this.OnLoaded = () => {
    };
    this.scene = scene;
    this.config = Object.assign({}, PhysicsConfigurationDefault, config);
    this.InitPhysX(loadedCb);
  }
  InitPhysX(loadedCb) {
    fetch(this.config.physxWasmURL).then((response) => {
      response.arrayBuffer().then((bytes) => {
        import_trident_physx_js_webidl2.default["wasmBinary"] = bytes;
        (0, import_trident_physx_js_webidl2.default)().then((ret) => {
          this.physx = ret;
          const version = import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.PHYSICS_VERSION;
          const defaultErrorCallback = new import_trident_physx_js_webidl2.default.PxDefaultErrorCallback();
          const allocator = new import_trident_physx_js_webidl2.default.PxDefaultAllocator();
          const tolerance = new import_trident_physx_js_webidl2.default.PxTolerancesScale();
          const foundation = import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.CreateFoundation(version, allocator, defaultErrorCallback);
          let pvdPvd = null;
          if (this.config.debug) {
            console.warn(`\u26A0\uFE0F Make sure Profile/Debug PhysX build is used.`);
            pvdPvd = import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.CreatePvd(foundation);
            const pvdTransport = this.createPhysXDebugger(this.config.debugHost, this.config.debugPort);
            pvdPvd.connect(pvdTransport, new import_trident_physx_js_webidl2.default.PxPvdInstrumentationFlags(import_trident_physx_js_webidl2.default._emscripten_enum_PxPvdInstrumentationFlagEnum_eDEBUG()));
          }
          const physics = import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.CreatePhysics(version, foundation, tolerance, pvdPvd);
          const cookingParamas = new import_trident_physx_js_webidl2.default.PxCookingParams(tolerance);
          if (this.config.performanceCooking) {
            const flags = new import_trident_physx_js_webidl2.default.PxMeshPreprocessingFlags(import_trident_physx_js_webidl2.default.eDISABLE_CLEAN_MESH | import_trident_physx_js_webidl2.default.eDISABLE_ACTIVE_EDGES_PRECOMPUTE);
            cookingParamas.meshPreprocessParams = flags;
            cookingParamas.midphaseDesc.mBVH33Desc.meshCookingHint = import_trident_physx_js_webidl2.default.eCOOKING_PERFORMANCE;
          }
          const cooking = import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.CreateCooking(version, foundation, cookingParamas);
          import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.InitExtensions(physics);
          const sceneDesc = new import_trident_physx_js_webidl2.default.PxSceneDesc(tolerance);
          sceneDesc.gravity = new import_trident_physx_js_webidl2.default.PxVec3(this.config.gravity.x, this.config.gravity.y, this.config.gravity.z);
          sceneDesc.cpuDispatcher = import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.DefaultCpuDispatcherCreate(0);
          sceneDesc.filterShader = import_trident_physx_js_webidl2.default.PxTopLevelFunctions.prototype.DefaultFilterShader();
          sceneDesc.kineKineFilteringMode = 0;
          sceneDesc.staticKineFilteringMode = 0;
          sceneDesc.solverType = import_trident_physx_js_webidl2.default.ePGS;
          sceneDesc.flags = new import_trident_physx_js_webidl2.default.PxSceneFlags(import_trident_physx_js_webidl2.default.eENABLE_PCM);
          const sceneFlags = new import_trident_physx_js_webidl2.default.PxSceneFlags(import_trident_physx_js_webidl2.default.ENABLE_CCD);
          const physicsScene = physics.createScene(sceneDesc);
          this.physxPhysics = physics;
          this.physxScene = physicsScene;
          this.physxCooking = cooking;
          this.physicsRaycast = new PhysicsRaycast(this.physxScene);
          if (loadedCb) {
            loadedCb();
          }
        });
      });
    });
  }
  createPhysXDebugger(host = "localhost", port = 8090) {
    const pvdTransport = new import_trident_physx_js_webidl2.default.JSPvdTransport();
    let socket;
    let queue = [];
    let connected = false;
    pvdTransport.connect = () => {
      socket = new WebSocket(`ws://${host}:${port}`, ["binary"]);
      socket.onopen = () => {
        console.log("\u{1F50C} Connected to PhysX Debugger");
        queue.forEach((data) => socket.send(data));
        queue = [];
        connected = true;
      };
      socket.onerror = () => {
        console.error("An error has occurred with the PhysX PVD debugger socket");
      };
      return true;
    };
    pvdTransport.send = (inBytes, inLength) => {
      const data = import_trident_physx_js_webidl2.default.HEAPU8.slice(inBytes, inBytes + inLength);
      if (!connected) {
        queue.push(data);
      } else {
        socket.send(data);
      }
      return true;
    };
    return pvdTransport;
  }
  GetPhysX() {
    return this.physx;
  }
  GetPhysics() {
    return this.physxPhysics;
  }
  GetScene() {
    return this.physxScene;
  }
  GetCooking() {
    return this.physxCooking;
  }
  Raycast(origin, direction, maxDistance, layerMask = 0) {
    const ray = this.physicsRaycast.Raycast(origin, direction, maxDistance, layerMask);
    return this.physicsRaycast.Raycast(origin, direction, maxDistance, layerMask);
  }
  Start() {
  }
  Update() {
    if (this.physxScene) {
      this.scene.FixedUpdate();
      this.physxScene.simulate(1 / this.config.framerate, null);
      this.physxScene.fetchResults();
    }
  }
};

// src/Input.ts
var Input = class {
  constructor(scene) {
    this.keysDown = {};
    this.keysUp = {};
    this.mousePosition = new Vector2();
    this.horizontalAxis = 0;
    this.verticalAxis = 0;
    this.previousTouch = new Vector2();
    this.scene = scene;
    const canvas = this.scene.GetRenderer().renderer.domElement;
    document.onkeydown = (event) => {
      this.OnKeyDown(event);
    };
    document.onkeyup = (event) => {
      this.OnKeyUp(event);
    };
    canvas.onmousemove = (event) => {
      this.OnMouseMove(event);
    };
    canvas.ontouchmove = (event) => {
      this.OnTouchMove(event);
    };
  }
  OnTouchMove(event) {
    event.preventDefault();
    this.mousePosition.x = event.touches[0].clientX;
    this.mousePosition.y = event.touches[0].clientY;
    this.horizontalAxis = Math.round(this.mousePosition.x - this.previousTouch.x);
    this.verticalAxis = Math.round(this.mousePosition.y - this.previousTouch.y);
    this.previousTouch.set(this.mousePosition.x, this.mousePosition.y);
  }
  OnMouseMove(event) {
    this.mousePosition.x = event.clientX;
    this.mousePosition.y = event.clientY;
    this.horizontalAxis = event.movementX;
    this.verticalAxis = event.movementY;
  }
  OnKeyDown(event) {
    if (this.keysDown[event.keyCode] === void 0) {
      this.keysDown[event.keyCode] = this.scene.currentFrame;
      delete this.keysUp[event.keyCode];
    }
  }
  OnKeyUp(event) {
    this.keysUp[event.keyCode] = this.scene.currentFrame;
    delete this.keysDown[event.keyCode];
  }
  GetKeyDown(key) {
    if (this.keysDown[key] == this.scene.currentFrame) {
      return true;
    }
    return false;
  }
  GetKeyUp(key) {
    if (this.keysUp[key] == this.scene.currentFrame) {
      return true;
    }
    return false;
  }
  GetKey(key) {
    if (this.keysDown[key] !== void 0) {
      return true;
    }
    return false;
  }
  GetAxis(axisName) {
    if (axisName == "Horizontal") {
      return this.horizontalAxis;
    } else if (axisName == "Vertical") {
      return this.verticalAxis;
    }
  }
  Tick() {
  }
};

// src/components/Component.ts
var Component = class {
  constructor(gameObject, transform) {
    this.uuid = UUID.v4();
    this.classtype = "Component";
    this.gameObject = gameObject;
    this.transform = transform;
    this.classname = this.constructor.name;
  }
  OnEnable() {
  }
  OnDisable() {
  }
  Start() {
  }
  Stop() {
  }
  FixedUpdate() {
  }
  Update() {
  }
  LateUpdate() {
  }
  OnGizmosEnabled() {
  }
  OnGizmosDisabled() {
  }
  OnDrawGizmos() {
  }
  Destroy() {
    this.gameObject.RemoveComponent(this);
  }
};

// src/components/Camera.ts
var ProjectionTypes;
(function(ProjectionTypes2) {
  ProjectionTypes2[ProjectionTypes2["Perspective"] = 0] = "Perspective";
  ProjectionTypes2[ProjectionTypes2["Orthographic"] = 1] = "Orthographic";
})(ProjectionTypes || (ProjectionTypes = {}));
var Camera2 = class extends Component {
  constructor() {
    super(...arguments);
    this.previousTransformPosition = new Vector3();
    this.previousCameraPosition = new Vector3();
  }
  get far() {
    return this.camera.far;
  }
  set far(far) {
    this.camera.far = far;
    this.camera.updateProjectionMatrix();
  }
  get near() {
    return this.camera.near;
  }
  set near(near) {
    this.camera.near = near;
    this.camera.updateProjectionMatrix();
  }
  get fieldOfView() {
    return this.camera.fov;
  }
  set fieldOfView(fieldOfView) {
    this.camera.fov = fieldOfView;
    this.camera.updateProjectionMatrix();
  }
  OnEnable() {
    const canvas = this.gameObject.scene.GetRenderer().renderer.domElement;
    this.camera = new PerspectiveCamera(59, canvas.offsetWidth / canvas.offsetHeight, 0.1, 1e3);
    this.transform.group.add(this.camera);
    this.previousTransformPosition.copy(this.transform.localPosition);
    this.previousCameraPosition.copy(this.transform.localPosition);
    window.addEventListener("resize", (event) => {
      const canvas2 = this.gameObject.scene.GetRenderer().renderer.domElement;
      this.camera.aspect = canvas2.parentElement.offsetWidth / canvas2.parentElement.offsetHeight;
      this.camera.updateProjectionMatrix();
    });
  }
  GetCamera() {
    return this.camera;
  }
  OnGizmosEnabled() {
    if (!this.helper) {
      this.helper = new CameraHelper(this.camera);
      this.transform.group.add(this.helper);
    }
  }
  OnDrawGizmos() {
    if (this.helper) {
      this.helper.update();
    }
  }
  OnGizmosDisabled() {
    if (this.helper) {
      this.transform.group.remove(this.helper);
      this.helper = void 0;
    }
  }
  Destroy() {
    this.OnGizmosDisabled();
    this.transform.group.remove(this.camera);
    this.gameObject.RemoveComponent(this);
  }
};

// src/Scene.ts
var Scene2 = class {
  constructor(rendererConfig, physicsConfig) {
    this.currentFrame = 0;
    this.gameObjects = [];
    this.OnLoaded = () => {
    };
    this.renderer = this.InitializeRenderer(rendererConfig);
    this.physics = this.InitializePhysics(physicsConfig);
    this.input = new Input(this);
    const cameraGameObject = new GameObject(this);
    this.camera = cameraGameObject.AddComponent(Camera2);
    requestAnimationFrame((now2) => {
      this.Update();
    });
  }
  InitializeRenderer(rendererConfig) {
    return new Renderer(rendererConfig, () => {
      this.rendererLoaded = true;
      this.CheckLoaded();
    });
  }
  InitializePhysics(physicsConfig) {
    return new Physics(this, physicsConfig, () => {
      this.physicsLoaded = true;
      this.CheckLoaded();
    });
  }
  CheckLoaded() {
    if (this.rendererLoaded && this.physicsLoaded) {
      if (typeof this.OnLoaded == "function") {
        this.OnLoaded();
      }
    }
  }
  GetRenderer() {
    return this.renderer;
  }
  GetPhysics() {
    return this.physics;
  }
  GetInput() {
    return this.input;
  }
  GetActiveCamera() {
    return this.camera;
  }
  SetActiveCamera(camera) {
    this.camera = camera;
  }
  EnableGizmos() {
    if (!this.gizmosEnabled) {
      for (let gameObject of this.gameObjects) {
        gameObject.OnGizmosEnabled();
      }
      this.gizmosEnabled = true;
    }
  }
  DisableGizmos() {
    if (this.gizmosEnabled) {
      for (let gameObject of this.gameObjects) {
        gameObject.OnGizmosDisabled();
      }
      this.gizmosEnabled = false;
    }
  }
  HasGizmosEnabled() {
    return this.gizmosEnabled;
  }
  AddGameObject(gameObject) {
    this.gameObjects.push(gameObject);
    return true;
  }
  RemoveGameObject(gameObject) {
    if (gameObject instanceof GameObject == false) {
      console.error(`Invalid GameObject ${gameObject}`);
      return false;
    }
    const gameObjectIndex = this.gameObjects.indexOf(gameObject);
    if (gameObjectIndex == -1) {
      console.warn(`Tried to remove GameObject ${gameObject} but it wasn't found in ${this}`);
      return false;
    }
    this.gameObjects.splice(gameObjectIndex, 1);
    return true;
  }
  FixedUpdate() {
    for (let gameObject of this.gameObjects) {
      gameObject.FixedUpdate();
    }
  }
  Update() {
    if (this.isPlaying) {
      this.physics.Update();
      for (let gameObject of this.gameObjects) {
        gameObject.Update();
        if (this.gizmosEnabled) {
          gameObject.OnDrawGizmos();
        }
      }
    }
    if (this.camera) {
      this.renderer.Tick(this.camera.GetCamera());
    }
    for (let gameObject of this.gameObjects) {
      gameObject.LateUpdate();
    }
    this.input.Tick();
    this.currentFrame++;
    requestAnimationFrame(() => {
      this.Update();
    });
  }
  Start() {
    this.isPlaying = true;
    for (let gameObject of this.gameObjects) {
      gameObject.Start();
    }
  }
  Stop() {
    this.isPlaying = false;
    for (let gameObject of this.gameObjects) {
      gameObject.Stop();
    }
  }
};

// src/enums/KeyCodes.ts
var KeyCodes;
(function(KeyCodes2) {
  KeyCodes2[KeyCodes2["CANCEL"] = 3] = "CANCEL";
  KeyCodes2[KeyCodes2["HELP"] = 6] = "HELP";
  KeyCodes2[KeyCodes2["BACK_SPACE"] = 8] = "BACK_SPACE";
  KeyCodes2[KeyCodes2["TAB"] = 9] = "TAB";
  KeyCodes2[KeyCodes2["CLEAR"] = 12] = "CLEAR";
  KeyCodes2[KeyCodes2["RETURN"] = 13] = "RETURN";
  KeyCodes2[KeyCodes2["ENTER"] = 14] = "ENTER";
  KeyCodes2[KeyCodes2["SHIFT"] = 16] = "SHIFT";
  KeyCodes2[KeyCodes2["CONTROL"] = 17] = "CONTROL";
  KeyCodes2[KeyCodes2["ALT"] = 18] = "ALT";
  KeyCodes2[KeyCodes2["PAUSE"] = 19] = "PAUSE";
  KeyCodes2[KeyCodes2["CAPS_LOCK"] = 20] = "CAPS_LOCK";
  KeyCodes2[KeyCodes2["ESCAPE"] = 27] = "ESCAPE";
  KeyCodes2[KeyCodes2["SPACE"] = 32] = "SPACE";
  KeyCodes2[KeyCodes2["PAGE_UP"] = 33] = "PAGE_UP";
  KeyCodes2[KeyCodes2["PAGE_DOWN"] = 34] = "PAGE_DOWN";
  KeyCodes2[KeyCodes2["END"] = 35] = "END";
  KeyCodes2[KeyCodes2["HOME"] = 36] = "HOME";
  KeyCodes2[KeyCodes2["LEFT"] = 37] = "LEFT";
  KeyCodes2[KeyCodes2["UP"] = 38] = "UP";
  KeyCodes2[KeyCodes2["RIGHT"] = 39] = "RIGHT";
  KeyCodes2[KeyCodes2["DOWN"] = 40] = "DOWN";
  KeyCodes2[KeyCodes2["PRINTSCREEN"] = 44] = "PRINTSCREEN";
  KeyCodes2[KeyCodes2["INSERT"] = 45] = "INSERT";
  KeyCodes2[KeyCodes2["DELETE"] = 46] = "DELETE";
  KeyCodes2[KeyCodes2["NUM_0"] = 48] = "NUM_0";
  KeyCodes2[KeyCodes2["NUM_1"] = 49] = "NUM_1";
  KeyCodes2[KeyCodes2["NUM_2"] = 50] = "NUM_2";
  KeyCodes2[KeyCodes2["NUM_3"] = 51] = "NUM_3";
  KeyCodes2[KeyCodes2["NUM_4"] = 52] = "NUM_4";
  KeyCodes2[KeyCodes2["NUM_5"] = 53] = "NUM_5";
  KeyCodes2[KeyCodes2["NUM_6"] = 54] = "NUM_6";
  KeyCodes2[KeyCodes2["NUM_7"] = 55] = "NUM_7";
  KeyCodes2[KeyCodes2["NUM_8"] = 56] = "NUM_8";
  KeyCodes2[KeyCodes2["NUM_9"] = 57] = "NUM_9";
  KeyCodes2[KeyCodes2["SEMICOLON"] = 59] = "SEMICOLON";
  KeyCodes2[KeyCodes2["EQUALS"] = 61] = "EQUALS";
  KeyCodes2[KeyCodes2["A"] = 65] = "A";
  KeyCodes2[KeyCodes2["B"] = 66] = "B";
  KeyCodes2[KeyCodes2["C"] = 67] = "C";
  KeyCodes2[KeyCodes2["D"] = 68] = "D";
  KeyCodes2[KeyCodes2["E"] = 69] = "E";
  KeyCodes2[KeyCodes2["F"] = 70] = "F";
  KeyCodes2[KeyCodes2["G"] = 71] = "G";
  KeyCodes2[KeyCodes2["H"] = 72] = "H";
  KeyCodes2[KeyCodes2["I"] = 73] = "I";
  KeyCodes2[KeyCodes2["J"] = 74] = "J";
  KeyCodes2[KeyCodes2["K"] = 75] = "K";
  KeyCodes2[KeyCodes2["L"] = 76] = "L";
  KeyCodes2[KeyCodes2["M"] = 77] = "M";
  KeyCodes2[KeyCodes2["N"] = 78] = "N";
  KeyCodes2[KeyCodes2["O"] = 79] = "O";
  KeyCodes2[KeyCodes2["P"] = 80] = "P";
  KeyCodes2[KeyCodes2["Q"] = 81] = "Q";
  KeyCodes2[KeyCodes2["R"] = 82] = "R";
  KeyCodes2[KeyCodes2["S"] = 83] = "S";
  KeyCodes2[KeyCodes2["T"] = 84] = "T";
  KeyCodes2[KeyCodes2["U"] = 85] = "U";
  KeyCodes2[KeyCodes2["V"] = 86] = "V";
  KeyCodes2[KeyCodes2["W"] = 87] = "W";
  KeyCodes2[KeyCodes2["X"] = 88] = "X";
  KeyCodes2[KeyCodes2["Y"] = 89] = "Y";
  KeyCodes2[KeyCodes2["Z"] = 90] = "Z";
  KeyCodes2[KeyCodes2["CONTEXT_MENU"] = 93] = "CONTEXT_MENU";
  KeyCodes2[KeyCodes2["NUMPAD0"] = 96] = "NUMPAD0";
  KeyCodes2[KeyCodes2["NUMPAD1"] = 97] = "NUMPAD1";
  KeyCodes2[KeyCodes2["NUMPAD2"] = 98] = "NUMPAD2";
  KeyCodes2[KeyCodes2["NUMPAD3"] = 99] = "NUMPAD3";
  KeyCodes2[KeyCodes2["NUMPAD4"] = 100] = "NUMPAD4";
  KeyCodes2[KeyCodes2["NUMPAD5"] = 101] = "NUMPAD5";
  KeyCodes2[KeyCodes2["NUMPAD6"] = 102] = "NUMPAD6";
  KeyCodes2[KeyCodes2["NUMPAD7"] = 103] = "NUMPAD7";
  KeyCodes2[KeyCodes2["NUMPAD8"] = 104] = "NUMPAD8";
  KeyCodes2[KeyCodes2["NUMPAD9"] = 105] = "NUMPAD9";
  KeyCodes2[KeyCodes2["MULTIPLY"] = 106] = "MULTIPLY";
  KeyCodes2[KeyCodes2["ADD"] = 107] = "ADD";
  KeyCodes2[KeyCodes2["SEPARATOR"] = 108] = "SEPARATOR";
  KeyCodes2[KeyCodes2["SUBTRACT"] = 109] = "SUBTRACT";
  KeyCodes2[KeyCodes2["DECIMAL"] = 110] = "DECIMAL";
  KeyCodes2[KeyCodes2["DIVIDE"] = 111] = "DIVIDE";
  KeyCodes2[KeyCodes2["F1"] = 112] = "F1";
  KeyCodes2[KeyCodes2["F2"] = 113] = "F2";
  KeyCodes2[KeyCodes2["F3"] = 114] = "F3";
  KeyCodes2[KeyCodes2["F4"] = 115] = "F4";
  KeyCodes2[KeyCodes2["F5"] = 116] = "F5";
  KeyCodes2[KeyCodes2["F6"] = 117] = "F6";
  KeyCodes2[KeyCodes2["F7"] = 118] = "F7";
  KeyCodes2[KeyCodes2["F8"] = 119] = "F8";
  KeyCodes2[KeyCodes2["F9"] = 120] = "F9";
  KeyCodes2[KeyCodes2["F10"] = 121] = "F10";
  KeyCodes2[KeyCodes2["F11"] = 122] = "F11";
  KeyCodes2[KeyCodes2["F12"] = 123] = "F12";
  KeyCodes2[KeyCodes2["F13"] = 124] = "F13";
  KeyCodes2[KeyCodes2["F14"] = 125] = "F14";
  KeyCodes2[KeyCodes2["F15"] = 126] = "F15";
  KeyCodes2[KeyCodes2["F16"] = 127] = "F16";
  KeyCodes2[KeyCodes2["F17"] = 128] = "F17";
  KeyCodes2[KeyCodes2["F18"] = 129] = "F18";
  KeyCodes2[KeyCodes2["F19"] = 130] = "F19";
  KeyCodes2[KeyCodes2["F20"] = 131] = "F20";
  KeyCodes2[KeyCodes2["F21"] = 132] = "F21";
  KeyCodes2[KeyCodes2["F22"] = 133] = "F22";
  KeyCodes2[KeyCodes2["F23"] = 134] = "F23";
  KeyCodes2[KeyCodes2["F24"] = 135] = "F24";
  KeyCodes2[KeyCodes2["NUM_LOCK"] = 144] = "NUM_LOCK";
  KeyCodes2[KeyCodes2["SCROLL_LOCK"] = 145] = "SCROLL_LOCK";
  KeyCodes2[KeyCodes2["COMMA"] = 188] = "COMMA";
  KeyCodes2[KeyCodes2["PERIOD"] = 190] = "PERIOD";
  KeyCodes2[KeyCodes2["SLASH"] = 191] = "SLASH";
  KeyCodes2[KeyCodes2["BACK_QUOTE"] = 192] = "BACK_QUOTE";
  KeyCodes2[KeyCodes2["OPEN_BRACKET"] = 219] = "OPEN_BRACKET";
  KeyCodes2[KeyCodes2["BACK_SLASH"] = 220] = "BACK_SLASH";
  KeyCodes2[KeyCodes2["CLOSE_BRACKET"] = 221] = "CLOSE_BRACKET";
  KeyCodes2[KeyCodes2["QUOTE"] = 222] = "QUOTE";
  KeyCodes2[KeyCodes2["META"] = 224] = "META";
})(KeyCodes || (KeyCodes = {}));

// src/components/index.ts
var components_exports = {};
__export(components_exports, {
  Animation: () => Animation,
  AreaLight: () => AreaLight,
  BoxCollider: () => BoxCollider,
  Camera: () => Camera2,
  Capsule: () => Capsule,
  CapsuleCollider: () => CapsuleCollider,
  Component: () => Component,
  Cube: () => Cube,
  DirectionalLight: () => DirectionalLight2,
  GameObject: () => GameObject,
  Gizmo: () => Gizmo,
  LineRenderer: () => LineRenderer,
  MeshCollider: () => MeshCollider,
  MeshFilter: () => MeshFilter,
  MeshRenderer: () => MeshRenderer,
  Plane: () => Plane2,
  PlaneCollider: () => PlaneCollider,
  PointLight: () => PointLight2,
  ProjectionTypes: () => ProjectionTypes,
  Rigidbody: () => Rigidbody,
  Sphere: () => Sphere2,
  SphereCollider: () => SphereCollider,
  SpotLight: () => SpotLight2,
  Transform: () => Transform
});

// src/components/MeshFilter.ts
var MeshFilter = class extends Component {
  OnEnable() {
  }
  get mesh() {
    return this._mesh;
  }
  set mesh(mesh) {
    this._mesh = mesh;
    this.gameObject.BroadcastMessage("MeshFilterModelChanged", this._mesh);
  }
  Destroy() {
    if (this.mesh) {
      this.mesh.dispose();
    }
  }
};

// src/defaults/MeshRendererDefaults.ts
var MeshRendererDefaults = class {
  static DefaultMaterial() {
    return new MeshBasicMaterial({ color: 65280 });
  }
};

// src/components/MeshRenderer.ts
var MeshRenderer = class extends Component {
  constructor() {
    super(...arguments);
    this._material = MeshRendererDefaults.DefaultMaterial();
  }
  get mesh() {
    return this._mesh;
  }
  set mesh(mesh) {
    this.RemoveMesh();
    this.AddMeshToViewer(mesh);
    this._mesh = mesh;
  }
  get material() {
    return this._material;
  }
  set material(material) {
    this._material = material;
    if (this._mesh) {
      this._mesh.material = this._material;
    }
  }
  get castShadows() {
    return this.transform.group.castShadow;
  }
  set castShadows(castShadows) {
    this.transform.group.castShadow = castShadows;
  }
  get receiveShadows() {
    return this.transform.group.receiveShadow;
  }
  set receiveShadows(receiveShadows) {
    this.transform.group.receiveShadow = receiveShadows;
  }
  OnEnable() {
    this.renderer = this.gameObject.scene.GetRenderer();
    this.AddMeshFromMeshFilter();
  }
  MeshFilterModelChanged(mesh) {
    this.AddMeshFromMeshFilter();
  }
  RemoveMesh() {
    if (this._mesh) {
      this.transform.group.remove(this._mesh);
      this.renderer.scene.remove(this._mesh);
      const material = this._mesh.material;
      if (material && material.dispose) {
        material.dispose();
      }
    }
  }
  AddMeshFromMeshFilter() {
    const geometry = this.GetMeshFromMeshFilter();
    if (geometry) {
      this.mesh = new Mesh(geometry);
    }
  }
  AddMeshToViewer(mesh) {
    if (mesh.name == "") {
      mesh.name = mesh.uuid;
    }
    this.transform.group.add(mesh);
  }
  GetMeshFromMeshFilter() {
    const meshFilter = this.gameObject.GetComponent(MeshFilter);
    if (meshFilter) {
      return meshFilter.mesh;
    }
    return null;
  }
  Destroy() {
    this.RemoveMesh();
    this.gameObject.RemoveComponent(this);
  }
};

// src/components/Rigidbody.ts
var import_trident_physx_js_webidl8 = __toModule(require_trident_physx_js_webidl_wasm());

// src/components/Collider.ts
var import_trident_physx_js_webidl3 = __toModule(require_trident_physx_js_webidl_wasm());
var Collider = class extends Component {
  constructor() {
    super(...arguments);
    this.position = new Vector3();
    this.rotation = new Quaternion();
    this.localScale = new Vector3(1, 1, 1);
    this.previousLayer = LayerMask.LAYER0;
  }
  Start() {
    if (this.body) {
      this.HandleTransformChanges();
    }
  }
  HandleTransformChanges() {
    if (this.transform.position.distanceToSquared(this.position) > Number.EPSILON)
      this.body.UpdatePosition(this.transform.position);
    if (Mathf.QuaternionDifferent(this.transform.rotation, this.rotation, Mathf.Epsilon))
      this.body.UpdateRotation(this.transform.rotation);
    if (Math.abs(this.transform.rotation.angleTo(this.rotation)) > 1e-5)
      this.body.UpdateRotation(this.transform.rotation);
    if (this.transform.localScale.distanceToSquared(this.localScale) > Number.EPSILON)
      this.body.UpdateScale(this.transform.localScale);
  }
  FixedUpdate() {
    if (this.body && this.body.rigidbody instanceof import_trident_physx_js_webidl3.default.PxRigidStatic) {
      this.HandleTransformChanges();
      this.position.set(this.transform.position.x, this.transform.position.y, this.transform.position.z);
      this.rotation.set(this.transform.rotation.x, this.transform.rotation.y, this.transform.rotation.z, this.transform.rotation.w);
      this.localScale.set(this.transform.localScale.x, this.transform.localScale.y, this.transform.localScale.z);
      if (this.previousLayer != this.gameObject.layer) {
        const filterData = new import_trident_physx_js_webidl3.default.PxFilterData();
        filterData.word2 = this.gameObject.layer;
        this.body.shape.setQueryFilterData(filterData);
        this.previousLayer = this.gameObject.layer;
      }
    }
  }
  Destroy() {
    if (this.body && this.body.rigidbody) {
      this.body.rigidbody.detachShape(this.body.shape);
      this.body.shape.release();
      this.body.rigidbody.release();
      this.body = null;
    }
    this.gameObject.RemoveComponent(this);
  }
};

// src/physics/PhysicsRigidbody.ts
var import_trident_physx_js_webidl5 = __toModule(require_trident_physx_js_webidl_wasm());

// src/physics/PhysicsScale.ts
var import_trident_physx_js_webidl4 = __toModule(require_trident_physx_js_webidl_wasm());
var PxGeometryTypeEnum;
(function(PxGeometryTypeEnum2) {
  PxGeometryTypeEnum2[PxGeometryTypeEnum2["SPHERE"] = 0] = "SPHERE";
  PxGeometryTypeEnum2[PxGeometryTypeEnum2["PLANE"] = 1] = "PLANE";
  PxGeometryTypeEnum2[PxGeometryTypeEnum2["CAPSULE"] = 2] = "CAPSULE";
  PxGeometryTypeEnum2[PxGeometryTypeEnum2["BOX"] = 3] = "BOX";
  PxGeometryTypeEnum2[PxGeometryTypeEnum2["CONVEXMESH"] = 4] = "CONVEXMESH";
  PxGeometryTypeEnum2[PxGeometryTypeEnum2["TRIANGLEMESH"] = 5] = "TRIANGLEMESH";
  PxGeometryTypeEnum2[PxGeometryTypeEnum2["HEIGHTFIELD"] = 6] = "HEIGHTFIELD";
})(PxGeometryTypeEnum || (PxGeometryTypeEnum = {}));
var PhysicsScale = class {
  static ScaleSphere(sphere, radius) {
    sphere.radius = radius;
    return sphere;
  }
  static ScalePlane(box, width, height) {
    const halfExtentsPxVec3 = new import_trident_physx_js_webidl4.default.PxVec3(width, 0.01, height);
    box.halfExtents = halfExtentsPxVec3;
    return box;
  }
  static ScaleCapsule(capsule, radius, halfHeight) {
    capsule.radius = radius;
    capsule.halfHeight = halfHeight;
    return capsule;
  }
  static ScaleBox(box, halfExtents) {
    const halfExtentsPxVec3 = new import_trident_physx_js_webidl4.default.PxVec3(halfExtents.x, halfExtents.y, halfExtents.z);
    box.halfExtents = halfExtentsPxVec3;
    return box;
  }
  static ScaleConvex(convex, scale) {
    const scalePxVec3 = new import_trident_physx_js_webidl4.default.PxVec3(scale.x, scale.y, scale.z);
    convex.scale.scale = scalePxVec3;
    return convex;
  }
  static ScaleTrimesh(trimesh, scale) {
    const scalePxVec3 = new import_trident_physx_js_webidl4.default.PxVec3(scale.x, scale.y, scale.z);
    trimesh.scale.scale = scalePxVec3;
    return trimesh;
  }
  static ScaleShape(shape, scale) {
    const geometryHolder = shape.getGeometry();
    const type = shape.getGeometryType();
    let geometry;
    if (type == 0 .valueOf()) {
      geometry = this.ScaleSphere(geometryHolder.sphere(), scale.length());
    } else if (type == 1 .valueOf()) {
      console.warn("Scaling PLANE not implemented, planes are just thin boxes");
      geometry = geometryHolder.plane();
    } else if (type == 2 .valueOf()) {
      geometry = this.ScaleCapsule(geometryHolder.capsule(), scale.x, scale.y);
    } else if (type == 3 .valueOf()) {
      geometry = this.ScaleBox(geometryHolder.box(), scale.clone().divideScalar(2));
    } else if (type == 4 .valueOf()) {
      geometry = this.ScaleConvex(geometryHolder.convexMesh(), scale);
    } else if (type == 5 .valueOf()) {
      geometry = this.ScaleTrimesh(geometryHolder.triangleMesh(), scale);
    } else if (type == 6 .valueOf()) {
      console.warn("Scaling HEIGHTFIELD not implemented");
      geometry = geometryHolder.heightField();
    }
    shape.setGeometry(geometry);
    return shape;
  }
};

// src/physics/PhysicsRigidbody.ts
var PhysicsRigidbody = class {
  constructor(physics, scene, body) {
    this.physics = physics;
    this.scene = scene;
    this.rigidbody = body.rigidbody;
    this.geometry = body.geometry, this.shape = body.shape;
    this.rigidbody.attachShape(this.shape);
    this.scene.addActor(body.rigidbody);
  }
  ConvertToStatic() {
    if (!this.rigidbody || this.rigidbody instanceof import_trident_physx_js_webidl5.default.PxRigidDynamic) {
      return false;
    }
    this.rigidbody.detachShape(this.shape);
    this.scene.removeActor(this.rigidbody);
    const transform = this.rigidbody.getGlobalPose();
    const rigidbody = this.physics.createRigidStatic(transform);
    this.rigidbody = rigidbody;
    this.rigidbody.attachShape(this.shape);
    this.scene.addActor(this.rigidbody);
    return true;
  }
  ConvertToDynamic() {
    if (!this || this.rigidbody instanceof import_trident_physx_js_webidl5.default.PxRigidDynamic) {
      return false;
    }
    this.rigidbody.detachShape(this.shape);
    this.scene.removeActor(this.rigidbody);
    const transform = this.rigidbody.getGlobalPose();
    const rigidbody = this.physics.createRigidDynamic(transform);
    this.rigidbody = rigidbody;
    this.rigidbody.attachShape(this.shape);
    this.scene.addActor(this.rigidbody);
    return true;
  }
  UpdateShape(shape) {
    this.rigidbody.detachShape(this.shape);
    this.shape = shape;
    this.rigidbody.attachShape(shape);
  }
  UpdateGeometry(geometry) {
    this.shape.setGeometry(geometry);
  }
  UpdatePose(position, rotation, scale) {
    const pxVec3 = new import_trident_physx_js_webidl5.default.PxVec3(position.x, position.y, position.z);
    const pxQuat = new import_trident_physx_js_webidl5.default.PxQuat(rotation.x, rotation.y, rotation.z, rotation.w);
    const transform = new import_trident_physx_js_webidl5.default.PxTransform(pxVec3, pxQuat);
    this.rigidbody.setGlobalPose(transform);
    PhysicsScale.ScaleShape(this.shape, scale);
    return true;
  }
  UpdatePosition(position) {
    const transform = this.rigidbody.getGlobalPose();
    transform.p.x = position.x;
    transform.p.y = position.y;
    transform.p.z = position.z;
    this.rigidbody.setGlobalPose(transform);
    return true;
  }
  UpdateRotation(rotation) {
    const transform = this.rigidbody.getGlobalPose();
    transform.q.x = rotation.x;
    transform.q.y = rotation.y;
    transform.q.z = rotation.z;
    transform.q.w = rotation.w;
    this.rigidbody.setGlobalPose(transform);
    return true;
  }
  UpdateScale(scale) {
    PhysicsScale.ScaleShape(this.shape, scale);
    return true;
  }
};

// src/physics/PhysicsShape.ts
var import_trident_physx_js_webidl6 = __toModule(require_trident_physx_js_webidl_wasm());
var PhysicsShape = class {
  static DefaultMaterial(physics) {
    return physics.createMaterial(0.6, 0.6, 0);
  }
  static DefaultFlags() {
    return new import_trident_physx_js_webidl6.default.PxShapeFlags(import_trident_physx_js_webidl6.default._emscripten_enum_PxShapeFlagEnum_eSCENE_QUERY_SHAPE() | import_trident_physx_js_webidl6.default._emscripten_enum_PxShapeFlagEnum_eSIMULATION_SHAPE());
  }
  static DefaultFilterData() {
    return new import_trident_physx_js_webidl6.default.PxFilterData(1, 1, 0, 0);
  }
  static CreateShape(physics, geometry) {
    const material = this.DefaultMaterial(physics);
    const flags = this.DefaultFlags();
    const shape = physics.createShape(geometry, material, true, flags);
    const filterData = this.DefaultFilterData();
    shape.setQueryFilterData(filterData);
    shape.setSimulationFilterData(filterData);
    return shape;
  }
  static CreateBlank(physics) {
    const geometry = new import_trident_physx_js_webidl6.default.PxBoxGeometry(0, 0, 0);
    const shape = this.CreateShape(physics, geometry);
    return shape;
  }
  static CreatePlane(physics, width, height) {
    const geometry = new import_trident_physx_js_webidl6.default.PxBoxGeometry(width, 0.01, height);
    const shape = this.CreateShape(physics, geometry);
    return shape;
  }
  static CreateBox(physics, extents) {
    const geometry = new import_trident_physx_js_webidl6.default.PxBoxGeometry(extents.x, extents.y, extents.z);
    const shape = this.CreateShape(physics, geometry);
    return shape;
  }
  static CreateSphere(physics, radius) {
    const geometry = new import_trident_physx_js_webidl6.default.PxSphereGeometry(radius);
    const shape = this.CreateShape(physics, geometry);
    return shape;
  }
  static CreateCapsule(physics, radius, halfWeight) {
    const geometry = new import_trident_physx_js_webidl6.default.PxCapsuleGeometry(radius, halfWeight);
    const shape = this.CreateShape(physics, geometry);
    return shape;
  }
  static CreateConvex(physics, cooking, vertices) {
    const desc = new import_trident_physx_js_webidl6.default.PxConvexMeshDesc();
    desc.flags = new import_trident_physx_js_webidl6.default.PxConvexFlags(import_trident_physx_js_webidl6.default._emscripten_enum_PxConvexFlagEnum_eCOMPUTE_CONVEX());
    desc.points.count = vertices.length / 3;
    desc.points.stride = 12;
    desc.points.data = this.putIntoPhysXHeap(import_trident_physx_js_webidl6.default.HEAPF32, vertices);
    const convexMesh = cooking.createConvexMesh(desc, physics.getPhysicsInsertionCallback());
    const geometry = new import_trident_physx_js_webidl6.default.PxConvexMeshGeometry(convexMesh);
    const shape = this.CreateShape(physics, geometry);
    return shape;
  }
  static putIntoPhysXHeap(heap, array) {
    const ptr = import_trident_physx_js_webidl6.default._malloc(4 * array.length);
    let offset = 0;
    for (let i = 0; i < array.length; i++) {
      heap[ptr + offset >> 2] = array[i];
      offset += 4;
    }
    return ptr;
  }
  static CreateTrimesh(physics, cooking, vertices, indices) {
    const points = new import_trident_physx_js_webidl6.default.PxBoundedData();
    points.count = vertices.length / 3;
    points.stride = 12;
    points.data = this.putIntoPhysXHeap(import_trident_physx_js_webidl6.default.HEAPF32, vertices);
    const triangles = new import_trident_physx_js_webidl6.default.PxBoundedData();
    triangles.count = indices.length / 3;
    triangles.stride = 12;
    triangles.data = this.putIntoPhysXHeap(import_trident_physx_js_webidl6.default.HEAPU32, indices);
    const desc = new import_trident_physx_js_webidl6.default.PxTriangleMeshDesc();
    desc.points = points;
    desc.triangles = triangles;
    const trimesh = cooking.createTriangleMesh(desc, physics.getPhysicsInsertionCallback());
    if (trimesh === null)
      return;
    const geometry = new import_trident_physx_js_webidl6.default.PxTriangleMeshGeometry(trimesh);
    const shape = this.CreateShape(physics, geometry);
    return shape;
  }
};

// src/physics/PhysicsUtils.ts
var import_trident_physx_js_webidl7 = __toModule(require_trident_physx_js_webidl_wasm());
var PhysicsUtils = class {
  static ToTransform(position, rotation) {
    const pxPosition = new import_trident_physx_js_webidl7.default.PxVec3(position.x, position.y, position.z);
    const pxRotation = new import_trident_physx_js_webidl7.default.PxQuat(rotation.x, rotation.y, rotation.z, rotation.w);
    return new import_trident_physx_js_webidl7.default.PxTransform(pxPosition, pxRotation);
  }
};

// src/enums/ForceMode.ts
var ForceMode;
(function(ForceMode2) {
  ForceMode2[ForceMode2["FORCE"] = 0] = "FORCE";
  ForceMode2[ForceMode2["IMPULSE"] = 1] = "IMPULSE";
  ForceMode2[ForceMode2["VELOCITY_CHANGE"] = 2] = "VELOCITY_CHANGE";
  ForceMode2[ForceMode2["ACCELERATION"] = 5] = "ACCELERATION";
})(ForceMode || (ForceMode = {}));

// src/enums/RigidbodyConstraints.ts
var RigidbodyConstraints;
(function(RigidbodyConstraints2) {
  RigidbodyConstraints2[RigidbodyConstraints2["None"] = 0] = "None";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezePositionX"] = 1] = "FreezePositionX";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezePositionY"] = 2] = "FreezePositionY";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezePositionZ"] = 4] = "FreezePositionZ";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezeRotationX"] = 8] = "FreezeRotationX";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezeRotationY"] = 16] = "FreezeRotationY";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezeRotationZ"] = 32] = "FreezeRotationZ";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezePosition"] = 64] = "FreezePosition";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezeRotation"] = 128] = "FreezeRotation";
  RigidbodyConstraints2[RigidbodyConstraints2["FreezeAll"] = 256] = "FreezeAll";
})(RigidbodyConstraints || (RigidbodyConstraints = {}));

// src/enums/RigidbodyFlags.ts
var RigidBodyFlags;
(function(RigidBodyFlags2) {
  RigidBodyFlags2[RigidBodyFlags2["None"] = 0] = "None";
  RigidBodyFlags2[RigidBodyFlags2["KINEMATIC"] = 1] = "KINEMATIC";
  RigidBodyFlags2[RigidBodyFlags2["USE_KINEMATIC_TARGET_FOR_SCENE_QUERIES"] = 2] = "USE_KINEMATIC_TARGET_FOR_SCENE_QUERIES";
  RigidBodyFlags2[RigidBodyFlags2["ENABLE_CCD"] = 4] = "ENABLE_CCD";
  RigidBodyFlags2[RigidBodyFlags2["ENABLE_CCD_FRICTION"] = 8] = "ENABLE_CCD_FRICTION";
  RigidBodyFlags2[RigidBodyFlags2["ENABLE_POSE_INTEGRATION_PREVIEW"] = 16] = "ENABLE_POSE_INTEGRATION_PREVIEW";
  RigidBodyFlags2[RigidBodyFlags2["ENABLE_SPECULATIVE_CCD"] = 32] = "ENABLE_SPECULATIVE_CCD";
  RigidBodyFlags2[RigidBodyFlags2["ENABLE_CCD_MAX_CONTACT_IMPULSE"] = 64] = "ENABLE_CCD_MAX_CONTACT_IMPULSE";
  RigidBodyFlags2[RigidBodyFlags2["RETAIN_ACCELERATIONS"] = 128] = "RETAIN_ACCELERATIONS";
})(RigidBodyFlags || (RigidBodyFlags = {}));

// src/components/Rigidbody.ts
var Rigidbody = class extends Component {
  constructor() {
    super(...arguments);
    this.position = new Vector3();
    this.rotation = new Quaternion();
    this.localScale = new Vector3();
    this.previousLayer = LayerMask.LAYER0;
  }
  OnEnable() {
    this.physxPhysics = this.gameObject.scene.GetPhysics().GetPhysics();
    this.physxScene = this.gameObject.scene.GetPhysics().GetScene();
    const collider = this.gameObject.GetComponent(Collider);
    if (collider) {
      this.body = collider.body;
      this.body.ConvertToDynamic();
      this.body.UpdatePose(this.transform.position, this.transform.rotation, this.transform.localScale);
      this.rigidbody = this.body.rigidbody;
    } else {
      const shape = PhysicsShape.CreateBox(this.physxPhysics, new Vector3(1, 1, 1));
      const geometry = shape.getGeometry().box();
      const transform = PhysicsUtils.ToTransform(this.transform.position, this.transform.rotation);
      const rigidbody = this.physxPhysics.createRigidDynamic(transform);
      const physicsBody = {
        rigidbody,
        geometry,
        shape
      };
      this.body = new PhysicsRigidbody(this.physxPhysics, this.physxScene, physicsBody);
      this.rigidbody = rigidbody;
    }
  }
  get isKinematic() {
    const flags = this.rigidbody.getRigidBodyFlags();
    return flags.isSet(RigidBodyFlags.KINEMATIC.valueOf());
  }
  set isKinematic(kinematic) {
    this.rigidbody.setRigidBodyFlag(RigidBodyFlags.KINEMATIC.valueOf(), kinematic);
  }
  get mass() {
    return this.rigidbody.getMass();
  }
  set mass(mass) {
    this.rigidbody.setMass(mass);
  }
  get velocity() {
    const velocity = this.rigidbody.getLinearVelocity();
    return new Vector3(velocity.x, velocity.y, velocity.z);
  }
  set velocity(velocity) {
    const pxVec3 = new import_trident_physx_js_webidl8.default.PxVec3(velocity.x, velocity.y, velocity.z);
    this.rigidbody.setLinearVelocity(pxVec3);
  }
  get angularVelocity() {
    const angularVelocity = this.rigidbody.getAngularVelocity();
    return new Vector3(angularVelocity.x, angularVelocity.y, angularVelocity.z);
  }
  set angularVelocity(angularVelocity) {
    const pxVec3 = new import_trident_physx_js_webidl8.default.PxVec3(angularVelocity.x, angularVelocity.y, angularVelocity.z);
    this.rigidbody.setAngularVelocity(pxVec3);
  }
  get drag() {
    return this.rigidbody.getLinearDamping();
  }
  set drag(drag) {
    this.rigidbody.setLinearDamping(drag);
  }
  get angularDrag() {
    return this.rigidbody.getAngularDamping();
  }
  set angularDrag(angularDrag) {
    this.rigidbody.setAngularDamping(angularDrag);
  }
  set constraints(constraint) {
    if (constraint == RigidbodyConstraints.FreezePosition) {
      constraint = RigidbodyConstraints.FreezePositionX | RigidbodyConstraints.FreezePositionY | RigidbodyConstraints.FreezePositionZ;
    } else if (constraint == RigidbodyConstraints.FreezeRotation) {
      constraint = RigidbodyConstraints.FreezeRotationX | RigidbodyConstraints.FreezeRotationY | RigidbodyConstraints.FreezeRotationZ;
    } else if (constraint == RigidbodyConstraints.FreezeAll) {
      constraint = RigidbodyConstraints.FreezePositionX | RigidbodyConstraints.FreezePositionY | RigidbodyConstraints.FreezePositionZ | RigidbodyConstraints.FreezeRotationX | RigidbodyConstraints.FreezeRotationY | RigidbodyConstraints.FreezeRotationZ;
    }
    const flags = new import_trident_physx_js_webidl8.default.PxRigidDynamicLockFlags(constraint);
    this.rigidbody.setRigidDynamicLockFlags(flags);
    this.rigidbody.wakeUp();
  }
  AddForce(force, mode = ForceMode.FORCE) {
    const pxVec3 = new import_trident_physx_js_webidl8.default.PxVec3(force.x, force.y, force.z);
    this.rigidbody.addForce(pxVec3, mode.valueOf());
  }
  AddTorque(torque, mode = ForceMode.FORCE) {
    const pxVec3 = new import_trident_physx_js_webidl8.default.PxVec3(torque.x, torque.y, torque.z);
    this.rigidbody.addTorque(pxVec3, mode.valueOf());
  }
  MovePosition(position) {
    const dt = 1 / 60;
    const pNew = position.clone();
    const p = this.transform.position.clone();
    const v = this.velocity.clone();
    const force = pNew.sub(p).sub(v.multiplyScalar(dt)).divideScalar(dt).multiplyScalar(this.mass);
    this.velocity = new Vector3(0, 0, 0);
    this.AddForce(force);
  }
  Start() {
  }
  HandleTransformChanges() {
    if (this.transform.position.distanceToSquared(this.position) > Number.EPSILON) {
      this.body.UpdatePosition(this.transform.position);
    }
    if (Mathf.QuaternionDifferent(this.transform.rotation, this.rotation, Mathf.Epsilon)) {
      this.body.UpdateRotation(this.transform.rotation);
    }
    if (this.transform.localScale.distanceToSquared(this.localScale) > Number.EPSILON) {
      this.body.UpdateScale(this.transform.localScale);
    }
  }
  FixedUpdate() {
    this.HandleTransformChanges();
    if (this.body) {
      const body = this.body.rigidbody;
      if (body.isSleeping())
        return;
      const transform = body.getGlobalPose();
      this.transform.position.set(transform.p.x, transform.p.y, transform.p.z);
      this.transform.rotation.set(transform.q.x, transform.q.y, transform.q.z, transform.q.w);
      this.position.copy(this.transform.position);
      this.rotation.copy(this.transform.rotation);
      this.localScale.set(this.transform.localScale.x, this.transform.localScale.y, this.transform.localScale.z);
      if (this.previousLayer != this.gameObject.layer) {
        const filterData = new import_trident_physx_js_webidl8.default.PxFilterData();
        filterData.word2 = this.gameObject.layer;
        this.body.shape.setQueryFilterData(filterData);
        this.previousLayer = this.gameObject.layer;
      }
    }
  }
  Destroy() {
    const collider = this.gameObject.GetComponent(Collider);
    if (collider) {
      this.body = collider.body;
      this.body.ConvertToStatic();
    } else {
      if (this.body && this.body.rigidbody) {
        this.body.rigidbody.detachShape(this.body.shape);
        this.body.shape.release();
        this.body.rigidbody.release();
        this.body = null;
      }
    }
    this.gameObject.RemoveComponent(this);
  }
};

// src/components/BoxCollider.ts
var BoxCollider = class extends Collider {
  OnEnable() {
    const physxPhysics = this.gameObject.scene.GetPhysics().GetPhysics();
    const physxScene = this.gameObject.scene.GetPhysics().GetScene();
    const rigidbodyComponent = this.gameObject.GetComponent(Rigidbody);
    const shape = PhysicsShape.CreateBox(physxPhysics, this.transform.localScale);
    if (rigidbodyComponent) {
      this.body = rigidbodyComponent.body;
      this.body.UpdateShape(shape);
    } else {
      const geometry = shape.getGeometry().box();
      const transform = PhysicsUtils.ToTransform(this.transform.position, this.transform.rotation);
      const rigidbody = physxPhysics.createRigidStatic(transform);
      const physicsBody = {
        rigidbody,
        geometry,
        shape
      };
      this.body = new PhysicsRigidbody(physxPhysics, physxScene, physicsBody);
    }
  }
};

// src/components/SphereCollider.ts
var SphereCollider = class extends Collider {
  OnEnable() {
    this.physxPhysics = this.gameObject.scene.GetPhysics().GetPhysics();
    this.physxScene = this.gameObject.scene.GetPhysics().GetScene();
    const rigidbodyComponent = this.gameObject.GetComponent(Rigidbody);
    if (rigidbodyComponent) {
      this.body = rigidbodyComponent.body;
      const shape = PhysicsShape.CreateSphere(this.physxPhysics, this.transform.localScale.length());
      this.body.UpdateShape(shape);
    } else {
      const shape = PhysicsShape.CreateSphere(this.physxPhysics, this.transform.localScale.length());
      const geometry = shape.getGeometry().sphere();
      const transform = PhysicsUtils.ToTransform(this.transform.position, this.transform.rotation);
      const rigidbody = this.physxPhysics.createRigidStatic(transform);
      const physicsBody = {
        rigidbody,
        geometry,
        shape
      };
      this.body = new PhysicsRigidbody(this.physxPhysics, this.physxScene, physicsBody);
    }
  }
};

// src/components/CapsuleCollider.ts
var CapsuleCollider = class extends Collider {
  OnEnable() {
    const physxPhysics = this.gameObject.scene.GetPhysics().GetPhysics();
    const physxScene = this.gameObject.scene.GetPhysics().GetScene();
    const rigidbodyComponent = this.gameObject.GetComponent(Rigidbody);
    const shape = PhysicsShape.CreateCapsule(physxPhysics, this.transform.localScale.x, this.transform.localScale.y + 1);
    if (rigidbodyComponent) {
      this.body = rigidbodyComponent.body;
      this.body.UpdateShape(shape);
    } else {
      const geometry = shape.getGeometry().capsule();
      const transform = PhysicsUtils.ToTransform(this.transform.position, this.transform.rotation);
      const rigidbody = physxPhysics.createRigidStatic(transform);
      const physicsBody = {
        rigidbody,
        geometry,
        shape
      };
      this.body = new PhysicsRigidbody(physxPhysics, physxScene, physicsBody);
    }
  }
};

// src/components/PlaneCollider.ts
var PlaneCollider = class extends Collider {
  OnEnable() {
    const physxPhysics = this.gameObject.scene.GetPhysics().GetPhysics();
    const physxScene = this.gameObject.scene.GetPhysics().GetScene();
    const rigidbodyComponent = this.gameObject.GetComponent(Rigidbody);
    const shape = PhysicsShape.CreatePlane(physxPhysics, this.transform.localScale.x, this.transform.localScale.z);
    if (rigidbodyComponent) {
      this.body = rigidbodyComponent.body;
      this.body.UpdateShape(shape);
    } else {
      const geometry = shape.getGeometry().box();
      const transform = PhysicsUtils.ToTransform(this.transform.position, this.transform.rotation);
      const rigidbody = physxPhysics.createRigidStatic(transform);
      const physicsBody = {
        rigidbody,
        geometry,
        shape
      };
      this.body = new PhysicsRigidbody(physxPhysics, physxScene, physicsBody);
    }
  }
  Update() {
    this.transform.localScale.y = 0.01;
  }
};

// src/utils/ConvertGeometryToIndexed.ts
var TrianglesModeEnum;
(function(TrianglesModeEnum2) {
  TrianglesModeEnum2[TrianglesModeEnum2["TrianglesDrawMode"] = 0] = "TrianglesDrawMode";
  TrianglesModeEnum2[TrianglesModeEnum2["TriangleFanDrawMode"] = 1] = "TriangleFanDrawMode";
  TrianglesModeEnum2[TrianglesModeEnum2["TriangleStripDrawMode"] = 2] = "TriangleStripDrawMode";
})(TrianglesModeEnum || (TrianglesModeEnum = {}));
function ConvertGeometryToIndexed(geometry, drawMode) {
  if (drawMode === 0) {
    console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.");
    return geometry;
  }
  if (drawMode === 1 || drawMode === 2) {
    var index = geometry.getIndex();
    if (index === null) {
      var indices = [];
      var position = geometry.getAttribute("position");
      if (position !== void 0) {
        for (var i = 0; i < position.count; i++) {
          indices.push(i);
        }
        geometry.setIndex(indices);
        index = geometry.getIndex();
      } else {
        console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.");
        return geometry;
      }
    }
    var numberOfTriangles = index.count - 2;
    var newIndices = [];
    if (drawMode === 1) {
      for (var i = 1; i <= numberOfTriangles; i++) {
        newIndices.push(index.getX(0));
        newIndices.push(index.getX(i));
        newIndices.push(index.getX(i + 1));
      }
    } else {
      for (var i = 0; i < numberOfTriangles; i++) {
        if (i % 2 === 0) {
          newIndices.push(index.getX(i));
          newIndices.push(index.getX(i + 1));
          newIndices.push(index.getX(i + 2));
        } else {
          newIndices.push(index.getX(i + 2));
          newIndices.push(index.getX(i + 1));
          newIndices.push(index.getX(i));
        }
      }
    }
    if (newIndices.length / 3 !== numberOfTriangles) {
      console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
    }
    var newGeometry = geometry.clone();
    newGeometry.setIndex(newIndices);
    newGeometry.clearGroups();
    return newGeometry;
  } else {
    console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:", drawMode);
    return geometry;
  }
}

// src/components/MeshCollider.ts
var MeshCollider = class extends Collider {
  get isConvex() {
    return this._isConvex;
  }
  set isConvex(isConvex) {
    if (isConvex) {
      this.CreateConvexCollider();
    } else {
      this.CreateTrimeshCollider();
    }
    this._isConvex = isConvex;
  }
  OnEnable() {
    this.physxPhysics = this.gameObject.scene.GetPhysics().GetPhysics();
    this.physxScene = this.gameObject.scene.GetPhysics().GetScene();
    this.physxCooking = this.gameObject.scene.GetPhysics().GetCooking();
    const rigidbodyComponent = this.gameObject.GetComponent(Rigidbody);
    if (rigidbodyComponent) {
      const shape = this.CreateTrimeshShape();
      this.body = rigidbodyComponent.body;
      this.body.UpdateShape(shape);
    } else {
      this.CreateTrimeshCollider();
    }
  }
  GetGeometryFromMeshFilter() {
    const meshFilter = this.gameObject.GetComponent(MeshFilter);
    const mesh = meshFilter.mesh;
    return mesh;
  }
  CreateConvexShape() {
    const bufferGeometry = this.GetGeometryFromMeshFilter();
    if (bufferGeometry) {
      const vertices = bufferGeometry.getAttribute("position").array;
      const shape = PhysicsShape.CreateConvex(this.physxPhysics, this.physxCooking, vertices);
      return shape;
    }
    return null;
  }
  CreateConvexCollider() {
    const shape = this.CreateConvexShape();
    if (shape) {
      if (this.body) {
        this.body.UpdateShape(shape);
        return;
      }
      const geometry = shape.getGeometry().convexMesh();
      const transform = PhysicsUtils.ToTransform(this.transform.position, this.transform.rotation);
      const rigidbody = this.physxPhysics.createRigidStatic(transform);
      const physicsBody = {
        rigidbody,
        geometry,
        shape
      };
      this.body = new PhysicsRigidbody(this.physxPhysics, this.physxScene, physicsBody);
    }
  }
  CreateTrimeshShape() {
    const bufferGeometry = this.GetGeometryFromMeshFilter();
    if (bufferGeometry) {
      const indexedBufferGeometry = bufferGeometry.index !== null ? bufferGeometry : ConvertGeometryToIndexed(bufferGeometry, TrianglesModeEnum.TriangleStripDrawMode);
      const vertices = indexedBufferGeometry.getAttribute("position").array;
      const indices = indexedBufferGeometry.getIndex().array;
      const shape = PhysicsShape.CreateTrimesh(this.physxPhysics, this.physxCooking, vertices, indices);
      return shape;
    }
    return null;
  }
  CreateTrimeshCollider() {
    const shape = this.CreateTrimeshShape();
    if (shape) {
      if (this.body) {
        this.body.UpdateShape(shape);
        return;
      }
      const geometry = shape.getGeometry().triangleMesh();
      const transform = PhysicsUtils.ToTransform(this.transform.position, this.transform.rotation);
      const rigidbody = this.physxPhysics.createRigidStatic(transform);
      const physicsBody = {
        rigidbody,
        geometry,
        shape
      };
      this.body = new PhysicsRigidbody(this.physxPhysics, this.physxScene, physicsBody);
    }
  }
};

// src/components/Animation.ts
var Animation = class extends Component {
  OnEnable() {
    this.animations = new Map();
    this.clock = new Clock(true);
    this.OnMeshChanged();
  }
  OnMeshChanged() {
    const meshFilter = this.gameObject.GetComponent(MeshRenderer);
    const mesh = meshFilter.mesh;
    if (mesh) {
      this.mixer = new AnimationMixer(mesh);
    }
  }
  AddClip(clip, name) {
    this.animations.set(name, clip);
  }
  Play(name) {
    if (!this.animations.has(name)) {
      console.warn("Tried to play non existing animation");
      return;
    }
    if (this.action) {
      this.action.stop();
    }
    this.action = this.mixer.clipAction(this.animations.get(name));
    this.action.play();
  }
  Stop() {
    this.action.stop();
    this.action = null;
  }
  Update() {
    if (this.mixer && this.action) {
      this.mixer.update(this.clock.getDelta());
    }
  }
};

// src/components/LineRenderer.ts
var LineRenderer = class extends Component {
  constructor() {
    super(...arguments);
    this.from = new Vector3();
    this.to = new Vector3();
    this.color = 16777215;
    this.previousFrom = new Vector3();
    this.previousTo = new Vector3();
  }
  OnEnable() {
    this.material = new LineBasicMaterial({ color: this.color });
    this.geometry = new BufferGeometry().setFromPoints([this.from, this.to]);
    const line = new Line(this.geometry, this.material);
    this.transform.group.add(line);
    this.line = line;
  }
  Update() {
    if (this.material.color.getHex() != this.color) {
      this.material.color.setHex(this.color);
    }
    if (this.previousFrom.distanceToSquared(this.from) > Number.EPSILON || this.previousTo.distanceToSquared(this.to) > Number.EPSILON) {
      this.geometry.setFromPoints([this.from, this.to]);
      this.previousFrom.copy(this.from);
      this.previousTo.copy(this.to);
      this.geometry.attributes.position.needsUpdate = true;
    }
  }
  Destroy() {
    if (this.line) {
      this.transform.group.remove(this.line);
    }
    this.gameObject.RemoveComponent(this);
  }
};

// src/components/Gizmo.ts
var Gizmo = class extends Component {
  constructor() {
    super(...arguments);
    this.length = 20;
  }
  OnEnable() {
    this.upLine = this.gameObject.AddComponent(LineRenderer);
    this.rightLine = this.gameObject.AddComponent(LineRenderer);
    this.forwardLine = this.gameObject.AddComponent(LineRenderer);
    this.upLine.color = 65280;
    this.rightLine.color = 255;
    this.forwardLine.color = 16711680;
  }
  Start() {
    if (!this.target) {
      console.error("Target is not set");
    }
  }
  Update() {
    this.upLine.from.copy(this.target.position);
    this.upLine.to.copy(this.upLine.from).add(this.target.up.clone().multiplyScalar(this.length));
    this.rightLine.from.copy(this.target.position);
    this.rightLine.to.copy(this.rightLine.from).add(this.target.right.clone().multiplyScalar(this.length));
    this.forwardLine.from.copy(this.target.position);
    this.forwardLine.to.copy(this.forwardLine.from).add(this.target.forward.clone().multiplyScalar(this.length));
  }
};

// src/components/Cube.ts
var Cube = class extends Component {
  OnEnable() {
    const geometry = new BoxGeometry(this.transform.localScale.x, this.transform.localScale.y, this.transform.localScale.z);
    const meshFilter = this.gameObject.AddComponent(MeshFilter);
    meshFilter.mesh = geometry;
    const meshRenderer = this.gameObject.AddComponent(MeshRenderer);
    const colllider = this.gameObject.AddComponent(BoxCollider);
  }
};

// src/components/Sphere.ts
var Sphere2 = class extends Component {
  OnEnable() {
    const geometry = new SphereGeometry(this.transform.localScale.length(), 32, 32);
    const meshFilter = this.gameObject.AddComponent(MeshFilter);
    meshFilter.mesh = geometry;
    const meshRenderer = this.gameObject.AddComponent(MeshRenderer);
    const colllider = this.gameObject.AddComponent(SphereCollider);
  }
};

// src/utils/CapsuleGeometry.ts
function CapsuleBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, capsTopSegments, capsBottomSegments, thetaStart, thetaLength) {
  const bufferGeometry = new BufferGeometry();
  radiusTop = radiusTop !== void 0 ? radiusTop : 1;
  radiusBottom = radiusBottom !== void 0 ? radiusBottom : 1;
  height = height !== void 0 ? height : 2;
  radialSegments = Math.floor(radialSegments) || 8;
  heightSegments = Math.floor(heightSegments) || 1;
  capsTopSegments = Math.floor(capsTopSegments) || 2;
  capsBottomSegments = Math.floor(capsBottomSegments) || 2;
  thetaStart = thetaStart !== void 0 ? thetaStart : 0;
  thetaLength = thetaLength !== void 0 ? thetaLength : 2 * Math.PI;
  var alpha = Math.acos((radiusBottom - radiusTop) / height);
  var eqRadii = radiusTop - radiusBottom === 0;
  var vertexCount = calculateVertexCount();
  var indexCount = calculateIndexCount();
  var indices = new BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);
  var vertices = new BufferAttribute(new Float32Array(vertexCount * 3), 3);
  var normals = new BufferAttribute(new Float32Array(vertexCount * 3), 3);
  var uvs = new BufferAttribute(new Float32Array(vertexCount * 2), 2);
  var index = 0, indexOffset = 0, indexArray = [], halfHeight = height / 2;
  generateTorso();
  bufferGeometry.setIndex(indices);
  bufferGeometry.setAttribute("position", vertices);
  bufferGeometry.setAttribute("normal", normals);
  bufferGeometry.setAttribute("uv", uvs);
  function calculateVertexCount() {
    var count = (radialSegments + 1) * (heightSegments + 1 + capsBottomSegments + capsTopSegments);
    return count;
  }
  function calculateIndexCount() {
    var count = radialSegments * (heightSegments + capsBottomSegments + capsTopSegments) * 2 * 3;
    return count;
  }
  function generateTorso() {
    var x, y;
    var normal = new Vector3();
    var vertex = new Vector3();
    var cosAlpha = Math.cos(alpha);
    var sinAlpha = Math.sin(alpha);
    var cone_length = new Vector2(radiusTop * sinAlpha, halfHeight + radiusTop * cosAlpha).sub(new Vector2(radiusBottom * sinAlpha, -halfHeight + radiusBottom * cosAlpha)).length();
    var vl = radiusTop * alpha + cone_length + radiusBottom * (Math.PI / 2 - alpha);
    var groupCount = 0;
    var v = 0;
    for (y = 0; y <= capsTopSegments; y++) {
      var indexRow = [];
      var a = Math.PI / 2 - alpha * (y / capsTopSegments);
      v += radiusTop * alpha / capsTopSegments;
      var cosA = Math.cos(a);
      var sinA = Math.sin(a);
      var radius = cosA * radiusTop;
      for (x = 0; x <= radialSegments; x++) {
        var u = x / radialSegments;
        var theta = u * thetaLength + thetaStart;
        var sinTheta = Math.sin(theta);
        var cosTheta = Math.cos(theta);
        vertex.x = radius * sinTheta;
        vertex.y = halfHeight + sinA * radiusTop;
        vertex.z = radius * cosTheta;
        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z);
        normal.set(cosA * sinTheta, sinA, cosA * cosTheta);
        normals.setXYZ(index, normal.x, normal.y, normal.z);
        uvs.setXY(index, u, 1 - v / vl);
        indexRow.push(index);
        index++;
      }
      indexArray.push(indexRow);
    }
    var cone_height = height + cosAlpha * radiusTop - cosAlpha * radiusBottom;
    var slope = sinAlpha * (radiusBottom - radiusTop) / cone_height;
    for (y = 1; y <= heightSegments; y++) {
      var indexRow = [];
      v += cone_length / heightSegments;
      var radius = sinAlpha * (y * (radiusBottom - radiusTop) / heightSegments + radiusTop);
      for (x = 0; x <= radialSegments; x++) {
        var u = x / radialSegments;
        var theta = u * thetaLength + thetaStart;
        var sinTheta = Math.sin(theta);
        var cosTheta = Math.cos(theta);
        vertex.x = radius * sinTheta;
        vertex.y = halfHeight + cosAlpha * radiusTop - y * cone_height / heightSegments;
        vertex.z = radius * cosTheta;
        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z);
        normal.set(sinTheta, slope, cosTheta).normalize();
        normals.setXYZ(index, normal.x, normal.y, normal.z);
        uvs.setXY(index, u, 1 - v / vl);
        indexRow.push(index);
        index++;
      }
      indexArray.push(indexRow);
    }
    for (y = 1; y <= capsBottomSegments; y++) {
      var indexRow = [];
      var a = Math.PI / 2 - alpha - (Math.PI - alpha) * (y / capsBottomSegments);
      v += radiusBottom * alpha / capsBottomSegments;
      var cosA = Math.cos(a);
      var sinA = Math.sin(a);
      var radius = cosA * radiusBottom;
      for (x = 0; x <= radialSegments; x++) {
        var u = x / radialSegments;
        var theta = u * thetaLength + thetaStart;
        var sinTheta = Math.sin(theta);
        var cosTheta = Math.cos(theta);
        vertex.x = radius * sinTheta;
        vertex.y = -halfHeight + sinA * radiusBottom;
        ;
        vertex.z = radius * cosTheta;
        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z);
        normal.set(cosA * sinTheta, sinA, cosA * cosTheta);
        normals.setXYZ(index, normal.x, normal.y, normal.z);
        uvs.setXY(index, u, 1 - v / vl);
        indexRow.push(index);
        index++;
      }
      indexArray.push(indexRow);
    }
    for (x = 0; x < radialSegments; x++) {
      for (y = 0; y < capsTopSegments + heightSegments + capsBottomSegments; y++) {
        var i1 = indexArray[y][x];
        var i2 = indexArray[y + 1][x];
        var i3 = indexArray[y + 1][x + 1];
        var i4 = indexArray[y][x + 1];
        indices.setX(indexOffset, i1);
        indexOffset++;
        indices.setX(indexOffset, i2);
        indexOffset++;
        indices.setX(indexOffset, i4);
        indexOffset++;
        indices.setX(indexOffset, i2);
        indexOffset++;
        indices.setX(indexOffset, i3);
        indexOffset++;
        indices.setX(indexOffset, i4);
        indexOffset++;
      }
    }
  }
  return bufferGeometry;
}

// src/components/Capsule.ts
var Capsule = class extends Component {
  OnEnable() {
    const geometry = CapsuleBufferGeometry(1, 1, 2, 16, 1, 4, 4, 0, 2 * Math.PI);
    geometry.rotateZ(Math.PI / 2);
    const meshFilter = this.gameObject.AddComponent(MeshFilter);
    meshFilter.mesh = geometry;
    const meshRenderer = this.gameObject.AddComponent(MeshRenderer);
    const colllider = this.gameObject.AddComponent(CapsuleCollider);
  }
};

// src/components/Plane.ts
var Plane2 = class extends Component {
  OnEnable() {
    const geometry = new PlaneGeometry(this.transform.localScale.x, this.transform.localScale.z);
    geometry.rotateX(-Math.PI / 2);
    const meshFilter = this.gameObject.AddComponent(MeshFilter);
    meshFilter.mesh = geometry;
    const meshRenderer = this.gameObject.AddComponent(MeshRenderer);
    const colllider = this.gameObject.AddComponent(PlaneCollider);
  }
};

// src/components/PointLight.ts
var PointLight2 = class extends Component {
  get range() {
    return this.light.distance;
  }
  set range(range) {
    this.light.distance = range;
  }
  get color() {
    return this.light.color.getHex();
  }
  set color(color) {
    this.light.color.setHex(color);
  }
  get intensity() {
    return this.light.intensity;
  }
  set intensity(intensity) {
    this.light.intensity = intensity;
  }
  get shadows() {
    return this.light.castShadow;
  }
  set shadows(shadows) {
    this.light.castShadow = shadows;
  }
  OnEnable() {
    this.light = new PointLight(16777215, 1, 10);
    this.transform.group.add(this.light);
    this.light.parent = this.transform.group;
  }
  OnGizmosEnabled() {
    if (!this.helper) {
      this.helper = new PointLightHelper(this.light);
      this.transform.group.add(this.helper);
    }
  }
  OnDrawGizmos() {
    if (this.helper) {
      this.helper.update();
    }
  }
  OnGizmosDisabled() {
    if (this.helper) {
      this.transform.group.remove(this.helper);
      this.helper.dispose();
      this.helper = void 0;
    }
  }
  Destroy() {
    this.OnGizmosDisabled();
    this.transform.group.remove(this.light);
    this.gameObject.RemoveComponent(this);
  }
};

// src/components/DirectionalLight.ts
var DirectionalLight2 = class extends Component {
  get color() {
    return this.light.color.getHex();
  }
  set color(color) {
    this.light.color.setHex(color);
  }
  get intensity() {
    return this.light.intensity;
  }
  set intensity(intensity) {
    this.light.intensity = intensity;
  }
  get shadows() {
    return this.light.castShadow;
  }
  set shadows(shadows) {
    this.light.castShadow = shadows;
  }
  OnEnable() {
    this.light = new DirectionalLight(16777215, 1);
    this.transform.group.add(this.light);
    this.light.parent = this.transform.group;
  }
  OnGizmosEnabled() {
    if (!this.helper) {
      this.helper = new DirectionalLightHelper(this.light);
      this.transform.group.add(this.helper);
    }
  }
  OnDrawGizmos() {
    if (this.helper) {
      this.helper.update();
    }
  }
  OnGizmosDisabled() {
    if (this.helper) {
      this.transform.group.remove(this.helper);
      this.helper.dispose();
      this.helper = void 0;
    }
  }
  Destroy() {
    this.OnGizmosDisabled();
    this.transform.group.remove(this.light);
    this.gameObject.RemoveComponent(this);
  }
};

// src/components/SpotLight.ts
var SpotLight2 = class extends Component {
  get spotAngle() {
    return this.light.angle * MathUtils.RAD2DEG;
  }
  set spotAngle(spotAngle) {
    this.light.angle = spotAngle * MathUtils.DEG2RAD;
  }
  get range() {
    return this.light.distance;
  }
  set range(range) {
    this.light.distance = range;
  }
  get color() {
    return this.light.color.getHex();
  }
  set color(color) {
    this.light.color.setHex(color);
  }
  get intensity() {
    return this.light.intensity;
  }
  set intensity(intensity) {
    this.light.intensity = intensity;
  }
  get shadows() {
    return this.light.castShadow;
  }
  set shadows(shadows) {
    this.light.castShadow = shadows;
  }
  OnEnable() {
    this.light = new SpotLight(16777215, 1, 10, 30 * MathUtils.DEG2RAD);
    this.transform.group.add(this.light);
    this.light.parent = this.transform.group;
  }
  OnGizmosEnabled() {
    if (!this.helper) {
      this.helper = new SpotLightHelper(this.light);
      this.transform.group.add(this.helper);
    }
  }
  OnDrawGizmos() {
    if (this.helper) {
      this.helper.update();
    }
  }
  OnGizmosDisabled() {
    if (this.helper) {
      this.transform.group.remove(this.helper);
      this.helper.dispose();
      this.helper = void 0;
    }
  }
  Destroy() {
    this.OnGizmosDisabled();
    this.transform.group.remove(this.light);
    this.gameObject.RemoveComponent(this);
  }
};

// node_modules/three/examples/jsm/helpers/RectAreaLightHelper.js
function RectAreaLightHelper(light, color) {
  this.light = light;
  this.color = color;
  var positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];
  var geometry = new BufferGeometry();
  geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
  geometry.computeBoundingSphere();
  var material = new LineBasicMaterial({ fog: false });
  Line.call(this, geometry, material);
  this.type = "RectAreaLightHelper";
  var positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];
  var geometry2 = new BufferGeometry();
  geometry2.setAttribute("position", new Float32BufferAttribute(positions2, 3));
  geometry2.computeBoundingSphere();
  this.add(new Mesh(geometry2, new MeshBasicMaterial({ side: BackSide, fog: false })));
  this.update();
}
RectAreaLightHelper.prototype = Object.create(Line.prototype);
RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;
RectAreaLightHelper.prototype.update = function() {
  this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);
  if (this.color !== void 0) {
    this.material.color.set(this.color);
    this.children[0].material.color.set(this.color);
  } else {
    this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    var c = this.material.color;
    var max = Math.max(c.r, c.g, c.b);
    if (max > 1)
      c.multiplyScalar(1 / max);
    this.children[0].material.color.copy(this.material.color);
  }
};
RectAreaLightHelper.prototype.dispose = function() {
  this.geometry.dispose();
  this.material.dispose();
  this.children[0].geometry.dispose();
  this.children[0].material.dispose();
};

// src/components/AreaLight.ts
var AreaLight = class extends Component {
  get width() {
    return this.light.width;
  }
  set width(width) {
    this.light.width = width;
  }
  get height() {
    return this.light.height;
  }
  set height(height) {
    this.light.height = height;
  }
  get color() {
    return this.light.color.getHex();
  }
  set color(color) {
    this.light.color.setHex(color);
  }
  get intensity() {
    return this.light.intensity;
  }
  set intensity(intensity) {
    this.light.intensity = intensity;
  }
  get shadows() {
    return this.light.castShadow;
  }
  set shadows(shadows) {
    this.light.castShadow = shadows;
  }
  OnEnable() {
    this.light = new RectAreaLight(16777215, 1, 1, 1);
    this.transform.group.add(this.light);
    this.light.parent = this.transform.group;
  }
  OnGizmosEnabled() {
    if (!this.helper) {
      this.helper = new RectAreaLightHelper(this.light);
      this.transform.group.add(this.helper);
    }
  }
  OnDrawGizmos() {
    if (this.helper) {
      this.helper.update();
    }
  }
  OnGizmosDisabled() {
    if (this.helper) {
      this.transform.group.remove(this.helper);
      this.helper.dispose();
      this.helper = void 0;
    }
  }
  Destroy() {
    this.OnGizmosDisabled();
    this.transform.group.remove(this.light);
    this.gameObject.RemoveComponent(this);
  }
};
export {
  components_exports as Components,
  GameObject,
  Input,
  KeyCodes,
  LayerMask,
  Scene2 as Scene,
  three_module_exports as THREE
};
